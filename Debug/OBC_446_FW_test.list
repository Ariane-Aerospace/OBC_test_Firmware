
OBC_446_FW_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800a3bc  0800a3bc  0001a3bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4e0  0800a4e0  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4e0  0800a4e0  0001a4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4e8  0800a4e8  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4e8  0800a4e8  0001a4e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4ec  0800a4ec  0001a4ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800a4f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005bcc  200001f8  0800a6e8  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005dc4  0800a6e8  00025dc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000278a0  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005120  00000000  00000000  00047ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001948  00000000  00000000  0004cbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001760  00000000  00000000  0004e530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000277ad  00000000  00000000  0004fc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f828  00000000  00000000  0007743d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddd00  00000000  00000000  00096c65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00174965  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bb4  00000000  00000000  001749b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a3a4 	.word	0x0800a3a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	0800a3a4 	.word	0x0800a3a4

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4a07      	ldr	r2, [pc, #28]	; (8000534 <vApplicationGetIdleTaskMemory+0x2c>)
 8000518:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <vApplicationGetIdleTaskMemory+0x30>)
 800051e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20000214 	.word	0x20000214
 8000538:	200002c8 	.word	0x200002c8

0800053c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800053c:	b5b0      	push	{r4, r5, r7, lr}
 800053e:	b092      	sub	sp, #72	; 0x48
 8000540:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of taskQueue */
  osMessageQDef(taskQueue, 16, uint8_t);
 8000542:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <MX_FREERTOS_Init+0x74>)
 8000544:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000548:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800054a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  taskQueueHandle = osMessageCreate(osMessageQ(taskQueue), NULL);
 800054e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000552:	2100      	movs	r1, #0
 8000554:	4618      	mov	r0, r3
 8000556:	f006 fe7d 	bl	8007254 <osMessageCreate>
 800055a:	4603      	mov	r3, r0
 800055c:	4a15      	ldr	r2, [pc, #84]	; (80005b4 <MX_FREERTOS_Init+0x78>)
 800055e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8000560:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <MX_FREERTOS_Init+0x7c>)
 8000562:	f107 041c 	add.w	r4, r7, #28
 8000566:	461d      	mov	r5, r3
 8000568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800056a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000570:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000574:	f107 031c 	add.w	r3, r7, #28
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f006 fe0a 	bl	8007194 <osThreadCreate>
 8000580:	4603      	mov	r3, r0
 8000582:	4a0e      	ldr	r2, [pc, #56]	; (80005bc <MX_FREERTOS_Init+0x80>)
 8000584:	6013      	str	r3, [r2, #0]

  /* definition and creation of usbTask */
  osThreadDef(usbTask, UsbTask, osPriorityIdle, 0, 128);
 8000586:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <MX_FREERTOS_Init+0x84>)
 8000588:	463c      	mov	r4, r7
 800058a:	461d      	mov	r5, r3
 800058c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800058e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000590:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000594:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  usbTaskHandle = osThreadCreate(osThread(usbTask), NULL);
 8000598:	463b      	mov	r3, r7
 800059a:	2100      	movs	r1, #0
 800059c:	4618      	mov	r0, r3
 800059e:	f006 fdf9 	bl	8007194 <osThreadCreate>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a07      	ldr	r2, [pc, #28]	; (80005c4 <MX_FREERTOS_Init+0x88>)
 80005a6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005a8:	bf00      	nop
 80005aa:	3748      	adds	r7, #72	; 0x48
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bdb0      	pop	{r4, r5, r7, pc}
 80005b0:	0800a3d0 	.word	0x0800a3d0
 80005b4:	2000444c 	.word	0x2000444c
 80005b8:	0800a3e0 	.word	0x0800a3e0
 80005bc:	20004444 	.word	0x20004444
 80005c0:	0800a3fc 	.word	0x0800a3fc
 80005c4:	20004448 	.word	0x20004448

080005c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80005d0:	f009 f844 	bl	800965c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1000);
 80005d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d8:	f006 fe28 	bl	800722c <osDelay>
 80005dc:	e7fa      	b.n	80005d4 <StartDefaultTask+0xc>
	...

080005e0 <UsbTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UsbTask */
void UsbTask(void const * argument)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UsbTask */
  /* Infinite loop */
  for(;;)
  {
	blinkLD1();
 80005e8:	f000 f822 	bl	8000630 <blinkLD1>

    osEvent event = osMessageGet(taskQueueHandle, 100);
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <UsbTask+0x4c>)
 80005ee:	6819      	ldr	r1, [r3, #0]
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2264      	movs	r2, #100	; 0x64
 80005f6:	4618      	mov	r0, r3
 80005f8:	f006 fe94 	bl	8007324 <osMessageGet>
    uint8_t dataRX = event.value.v;
 80005fc:	693b      	ldr	r3, [r7, #16]
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	72fb      	strb	r3, [r7, #11]
    if(dataRX==BLINK_LD2) blinkLD2();
 8000602:	7afb      	ldrb	r3, [r7, #11]
 8000604:	2b02      	cmp	r3, #2
 8000606:	d101      	bne.n	800060c <UsbTask+0x2c>
 8000608:	f000 f824 	bl	8000654 <blinkLD2>
    if(dataRX==BLINK_LD3) blinkLD3();
 800060c:	7afb      	ldrb	r3, [r7, #11]
 800060e:	2b03      	cmp	r3, #3
 8000610:	d101      	bne.n	8000616 <UsbTask+0x36>
 8000612:	f000 f831 	bl	8000678 <blinkLD3>
    CDC_Transmit_FS(&dataRX, 1);
 8000616:	f107 030b 	add.w	r3, r7, #11
 800061a:	2101      	movs	r1, #1
 800061c:	4618      	mov	r0, r3
 800061e:	f009 f8df 	bl	80097e0 <CDC_Transmit_FS>
    osDelay(1000);
 8000622:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000626:	f006 fe01 	bl	800722c <osDelay>
  {
 800062a:	e7dd      	b.n	80005e8 <UsbTask+0x8>
 800062c:	2000444c 	.word	0x2000444c

08000630 <blinkLD1>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void blinkLD1()
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000634:	2101      	movs	r1, #1
 8000636:	4806      	ldr	r0, [pc, #24]	; (8000650 <blinkLD1+0x20>)
 8000638:	f000 fddb 	bl	80011f2 <HAL_GPIO_TogglePin>
	osDelay(500);
 800063c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000640:	f006 fdf4 	bl	800722c <osDelay>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000644:	2101      	movs	r1, #1
 8000646:	4802      	ldr	r0, [pc, #8]	; (8000650 <blinkLD1+0x20>)
 8000648:	f000 fdd3 	bl	80011f2 <HAL_GPIO_TogglePin>
}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40020400 	.word	0x40020400

08000654 <blinkLD2>:
void blinkLD2()
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000658:	2180      	movs	r1, #128	; 0x80
 800065a:	4806      	ldr	r0, [pc, #24]	; (8000674 <blinkLD2+0x20>)
 800065c:	f000 fdc9 	bl	80011f2 <HAL_GPIO_TogglePin>
	osDelay(500);
 8000660:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000664:	f006 fde2 	bl	800722c <osDelay>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000668:	2180      	movs	r1, #128	; 0x80
 800066a:	4802      	ldr	r0, [pc, #8]	; (8000674 <blinkLD2+0x20>)
 800066c:	f000 fdc1 	bl	80011f2 <HAL_GPIO_TogglePin>
}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40020400 	.word	0x40020400

08000678 <blinkLD3>:
void blinkLD3()
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800067c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000680:	4806      	ldr	r0, [pc, #24]	; (800069c <blinkLD3+0x24>)
 8000682:	f000 fdb6 	bl	80011f2 <HAL_GPIO_TogglePin>
	osDelay(500);
 8000686:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800068a:	f006 fdcf 	bl	800722c <osDelay>
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800068e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000692:	4802      	ldr	r0, [pc, #8]	; (800069c <blinkLD3+0x24>)
 8000694:	f000 fdad 	bl	80011f2 <HAL_GPIO_TogglePin>
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40020400 	.word	0x40020400

080006a0 <putMsgIntoQueue>:
int putMsgIntoQueue(uint8_t data)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
	if(osMessagePut(taskQueueHandle, data, 100)== osErrorOS)
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <putMsgIntoQueue+0x2c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	79f9      	ldrb	r1, [r7, #7]
 80006b0:	2264      	movs	r2, #100	; 0x64
 80006b2:	4618      	mov	r0, r3
 80006b4:	f006 fdf6 	bl	80072a4 <osMessagePut>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2bff      	cmp	r3, #255	; 0xff
 80006bc:	d101      	bne.n	80006c2 <putMsgIntoQueue+0x22>
	{
		return 1;
 80006be:	2301      	movs	r3, #1
 80006c0:	e000      	b.n	80006c4 <putMsgIntoQueue+0x24>
	}
	else
	{
		return 0;
 80006c2:	2300      	movs	r3, #0
	}
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	2000444c 	.word	0x2000444c

080006d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08c      	sub	sp, #48	; 0x30
 80006d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	61bb      	str	r3, [r7, #24]
 80006ea:	4b4c      	ldr	r3, [pc, #304]	; (800081c <MX_GPIO_Init+0x14c>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a4b      	ldr	r2, [pc, #300]	; (800081c <MX_GPIO_Init+0x14c>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b49      	ldr	r3, [pc, #292]	; (800081c <MX_GPIO_Init+0x14c>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	61bb      	str	r3, [r7, #24]
 8000700:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
 8000706:	4b45      	ldr	r3, [pc, #276]	; (800081c <MX_GPIO_Init+0x14c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a44      	ldr	r2, [pc, #272]	; (800081c <MX_GPIO_Init+0x14c>)
 800070c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b42      	ldr	r3, [pc, #264]	; (800081c <MX_GPIO_Init+0x14c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800071a:	617b      	str	r3, [r7, #20]
 800071c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
 8000722:	4b3e      	ldr	r3, [pc, #248]	; (800081c <MX_GPIO_Init+0x14c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a3d      	ldr	r2, [pc, #244]	; (800081c <MX_GPIO_Init+0x14c>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b3b      	ldr	r3, [pc, #236]	; (800081c <MX_GPIO_Init+0x14c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	4b37      	ldr	r3, [pc, #220]	; (800081c <MX_GPIO_Init+0x14c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a36      	ldr	r2, [pc, #216]	; (800081c <MX_GPIO_Init+0x14c>)
 8000744:	f043 0308 	orr.w	r3, r3, #8
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b34      	ldr	r3, [pc, #208]	; (800081c <MX_GPIO_Init+0x14c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0308 	and.w	r3, r3, #8
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	4b30      	ldr	r3, [pc, #192]	; (800081c <MX_GPIO_Init+0x14c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a2f      	ldr	r2, [pc, #188]	; (800081c <MX_GPIO_Init+0x14c>)
 8000760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b2d      	ldr	r3, [pc, #180]	; (800081c <MX_GPIO_Init+0x14c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b29      	ldr	r3, [pc, #164]	; (800081c <MX_GPIO_Init+0x14c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a28      	ldr	r2, [pc, #160]	; (800081c <MX_GPIO_Init+0x14c>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b26      	ldr	r3, [pc, #152]	; (800081c <MX_GPIO_Init+0x14c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f244 0181 	movw	r1, #16513	; 0x4081
 8000794:	4822      	ldr	r0, [pc, #136]	; (8000820 <MX_GPIO_Init+0x150>)
 8000796:	f000 fd13 	bl	80011c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2140      	movs	r1, #64	; 0x40
 800079e:	4821      	ldr	r0, [pc, #132]	; (8000824 <MX_GPIO_Init+0x154>)
 80007a0:	f000 fd0e 	bl	80011c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	4619      	mov	r1, r3
 80007ba:	481b      	ldr	r0, [pc, #108]	; (8000828 <MX_GPIO_Init+0x158>)
 80007bc:	f000 fb6c 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007c0:	f244 0381 	movw	r3, #16513	; 0x4081
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	4811      	ldr	r0, [pc, #68]	; (8000820 <MX_GPIO_Init+0x150>)
 80007da:	f000 fb5d 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007de:	2340      	movs	r3, #64	; 0x40
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	4619      	mov	r1, r3
 80007f4:	480b      	ldr	r0, [pc, #44]	; (8000824 <MX_GPIO_Init+0x154>)
 80007f6:	f000 fb4f 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007fa:	2380      	movs	r3, #128	; 0x80
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fe:	2300      	movs	r3, #0
 8000800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_GPIO_Init+0x154>)
 800080e:	f000 fb43 	bl	8000e98 <HAL_GPIO_Init>

}
 8000812:	bf00      	nop
 8000814:	3730      	adds	r7, #48	; 0x30
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800
 8000820:	40020400 	.word	0x40020400
 8000824:	40021800 	.word	0x40021800
 8000828:	40020800 	.word	0x40020800

0800082c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000830:	f000 f9ea 	bl	8000c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000834:	f000 f80a 	bl	800084c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000838:	f7ff ff4a 	bl	80006d0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800083c:	f000 f948 	bl	8000ad0 <MX_USART3_UART_Init>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000840:	f7ff fe7c 	bl	800053c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000844:	f006 fc9f 	bl	8007186 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000848:	e7fe      	b.n	8000848 <main+0x1c>
	...

0800084c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b094      	sub	sp, #80	; 0x50
 8000850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	2234      	movs	r2, #52	; 0x34
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f009 fcd4 	bl	800a208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000860:	f107 0308 	add.w	r3, r7, #8
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000870:	2300      	movs	r3, #0
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	4b29      	ldr	r3, [pc, #164]	; (800091c <SystemClock_Config+0xd0>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000878:	4a28      	ldr	r2, [pc, #160]	; (800091c <SystemClock_Config+0xd0>)
 800087a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087e:	6413      	str	r3, [r2, #64]	; 0x40
 8000880:	4b26      	ldr	r3, [pc, #152]	; (800091c <SystemClock_Config+0xd0>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800088c:	2300      	movs	r3, #0
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	4b23      	ldr	r3, [pc, #140]	; (8000920 <SystemClock_Config+0xd4>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000898:	4a21      	ldr	r2, [pc, #132]	; (8000920 <SystemClock_Config+0xd4>)
 800089a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800089e:	6013      	str	r3, [r2, #0]
 80008a0:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <SystemClock_Config+0xd4>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008a8:	603b      	str	r3, [r7, #0]
 80008aa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008ac:	2301      	movs	r3, #1
 80008ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b6:	2302      	movs	r3, #2
 80008b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008c0:	2304      	movs	r3, #4
 80008c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80008c4:	2348      	movs	r3, #72	; 0x48
 80008c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80008cc:	2303      	movs	r3, #3
 80008ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4618      	mov	r0, r3
 80008da:	f002 fc9b 	bl	8003214 <HAL_RCC_OscConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80008e4:	f000 f82d 	bl	8000942 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e8:	230f      	movs	r3, #15
 80008ea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ec:	2302      	movs	r3, #2
 80008ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008fe:	f107 0308 	add.w	r3, r7, #8
 8000902:	2102      	movs	r1, #2
 8000904:	4618      	mov	r0, r3
 8000906:	f001 fe5d 	bl	80025c4 <HAL_RCC_ClockConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000910:	f000 f817 	bl	8000942 <Error_Handler>
  }
}
 8000914:	bf00      	nop
 8000916:	3750      	adds	r7, #80	; 0x50
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40023800 	.word	0x40023800
 8000920:	40007000 	.word	0x40007000

08000924 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000934:	d101      	bne.n	800093a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000936:	f000 f989 	bl	8000c4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000946:	b672      	cpsid	i
}
 8000948:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800094a:	e7fe      	b.n	800094a <Error_Handler+0x8>

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_MspInit+0x54>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	4a11      	ldr	r2, [pc, #68]	; (80009a0 <HAL_MspInit+0x54>)
 800095c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000960:	6453      	str	r3, [r2, #68]	; 0x44
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <HAL_MspInit+0x54>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <HAL_MspInit+0x54>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <HAL_MspInit+0x54>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <HAL_MspInit+0x54>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	210f      	movs	r1, #15
 800098e:	f06f 0001 	mvn.w	r0, #1
 8000992:	f000 fa57 	bl	8000e44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800

080009a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08c      	sub	sp, #48	; 0x30
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80009b4:	2200      	movs	r2, #0
 80009b6:	6879      	ldr	r1, [r7, #4]
 80009b8:	201c      	movs	r0, #28
 80009ba:	f000 fa43 	bl	8000e44 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009be:	201c      	movs	r0, #28
 80009c0:	f000 fa5c 	bl	8000e7c <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <HAL_InitTick+0xa8>)
 80009ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009cc:	4a1f      	ldr	r2, [pc, #124]	; (8000a4c <HAL_InitTick+0xa8>)
 80009ce:	f043 0301 	orr.w	r3, r3, #1
 80009d2:	6413      	str	r3, [r2, #64]	; 0x40
 80009d4:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <HAL_InitTick+0xa8>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009e0:	f107 0210 	add.w	r2, r7, #16
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4611      	mov	r1, r2
 80009ea:	4618      	mov	r0, r3
 80009ec:	f001 ff04 	bl	80027f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80009f0:	f001 feda 	bl	80027a8 <HAL_RCC_GetPCLK1Freq>
 80009f4:	4603      	mov	r3, r0
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fc:	4a14      	ldr	r2, [pc, #80]	; (8000a50 <HAL_InitTick+0xac>)
 80009fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000a02:	0c9b      	lsrs	r3, r3, #18
 8000a04:	3b01      	subs	r3, #1
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <HAL_InitTick+0xb0>)
 8000a0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a0e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000a10:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <HAL_InitTick+0xb0>)
 8000a12:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a16:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000a18:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <HAL_InitTick+0xb0>)
 8000a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a1c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <HAL_InitTick+0xb0>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a24:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <HAL_InitTick+0xb0>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000a2a:	480a      	ldr	r0, [pc, #40]	; (8000a54 <HAL_InitTick+0xb0>)
 8000a2c:	f002 fe90 	bl	8003750 <HAL_TIM_Base_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d104      	bne.n	8000a40 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000a36:	4807      	ldr	r0, [pc, #28]	; (8000a54 <HAL_InitTick+0xb0>)
 8000a38:	f002 fee4 	bl	8003804 <HAL_TIM_Base_Start_IT>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	e000      	b.n	8000a42 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a40:	2301      	movs	r3, #1
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3730      	adds	r7, #48	; 0x30
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	431bde83 	.word	0x431bde83
 8000a54:	20004450 	.word	0x20004450

08000a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <NMI_Handler+0x4>

08000a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <HardFault_Handler+0x4>

08000a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <MemManage_Handler+0x4>

08000a6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <BusFault_Handler+0x4>

08000a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <UsageFault_Handler+0x4>

08000a76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <TIM2_IRQHandler+0x10>)
 8000a8a:	f002 ff2b 	bl	80038e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20004450 	.word	0x20004450

08000a98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a9c:	4802      	ldr	r0, [pc, #8]	; (8000aa8 <OTG_FS_IRQHandler+0x10>)
 8000a9e:	f000 fd19 	bl	80014d4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200059b0 	.word	0x200059b0

08000aac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <SystemInit+0x20>)
 8000ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ab6:	4a05      	ldr	r2, [pc, #20]	; (8000acc <SystemInit+0x20>)
 8000ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000ad6:	4a12      	ldr	r2, [pc, #72]	; (8000b20 <MX_USART3_UART_Init+0x50>)
 8000ad8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000adc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000af6:	220c      	movs	r2, #12
 8000af8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000b08:	f003 f8d0 	bl	8003cac <HAL_UART_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b12:	f7ff ff16 	bl	8000942 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20004498 	.word	0x20004498
 8000b20:	40004800 	.word	0x40004800

08000b24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	; 0x28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a19      	ldr	r2, [pc, #100]	; (8000ba8 <HAL_UART_MspInit+0x84>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d12c      	bne.n	8000ba0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <HAL_UART_MspInit+0x88>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	4a17      	ldr	r2, [pc, #92]	; (8000bac <HAL_UART_MspInit+0x88>)
 8000b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b54:	6413      	str	r3, [r2, #64]	; 0x40
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <HAL_UART_MspInit+0x88>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <HAL_UART_MspInit+0x88>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a10      	ldr	r2, [pc, #64]	; (8000bac <HAL_UART_MspInit+0x88>)
 8000b6c:	f043 0308 	orr.w	r3, r3, #8
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <HAL_UART_MspInit+0x88>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0308 	and.w	r3, r3, #8
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b90:	2307      	movs	r3, #7
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <HAL_UART_MspInit+0x8c>)
 8000b9c:	f000 f97c 	bl	8000e98 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ba0:	bf00      	nop
 8000ba2:	3728      	adds	r7, #40	; 0x28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40004800 	.word	0x40004800
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40020c00 	.word	0x40020c00

08000bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bb8:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bba:	490e      	ldr	r1, [pc, #56]	; (8000bf4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bbc:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bd0:	4c0b      	ldr	r4, [pc, #44]	; (8000c00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bde:	f7ff ff65 	bl	8000aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000be2:	f009 fadd 	bl	800a1a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000be6:	f7ff fe21 	bl	800082c <main>
  bx  lr    
 8000bea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf4:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8000bf8:	0800a4f0 	.word	0x0800a4f0
  ldr r2, =_sbss
 8000bfc:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8000c00:	20005dc4 	.word	0x20005dc4

08000c04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC_IRQHandler>
	...

08000c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <HAL_Init+0x40>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a0d      	ldr	r2, [pc, #52]	; (8000c48 <HAL_Init+0x40>)
 8000c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c18:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <HAL_Init+0x40>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <HAL_Init+0x40>)
 8000c1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <HAL_Init+0x40>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a07      	ldr	r2, [pc, #28]	; (8000c48 <HAL_Init+0x40>)
 8000c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c30:	2003      	movs	r0, #3
 8000c32:	f000 f8fc 	bl	8000e2e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c36:	200f      	movs	r0, #15
 8000c38:	f7ff feb4 	bl	80009a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c3c:	f7ff fe86 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023c00 	.word	0x40023c00

08000c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_IncTick+0x20>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_IncTick+0x24>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <HAL_IncTick+0x24>)
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	200044dc 	.word	0x200044dc

08000c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return uwTick;
 8000c78:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <HAL_GetTick+0x14>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	200044dc 	.word	0x200044dc

08000c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c94:	f7ff ffee 	bl	8000c74 <HAL_GetTick>
 8000c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca4:	d005      	beq.n	8000cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <HAL_Delay+0x44>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	461a      	mov	r2, r3
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4413      	add	r3, r2
 8000cb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cb2:	bf00      	nop
 8000cb4:	f7ff ffde 	bl	8000c74 <HAL_GetTick>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d8f7      	bhi.n	8000cb4 <HAL_Delay+0x28>
  {
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000008 	.word	0x20000008

08000cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d06:	4a04      	ldr	r2, [pc, #16]	; (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	60d3      	str	r3, [r2, #12]
}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d20:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <__NVIC_GetPriorityGrouping+0x18>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	0a1b      	lsrs	r3, r3, #8
 8000d26:	f003 0307 	and.w	r3, r3, #7
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	db0b      	blt.n	8000d62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	f003 021f 	and.w	r2, r3, #31
 8000d50:	4907      	ldr	r1, [pc, #28]	; (8000d70 <__NVIC_EnableIRQ+0x38>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	095b      	lsrs	r3, r3, #5
 8000d58:	2001      	movs	r0, #1
 8000d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000e100 	.word	0xe000e100

08000d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	6039      	str	r1, [r7, #0]
 8000d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	db0a      	blt.n	8000d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	490c      	ldr	r1, [pc, #48]	; (8000dc0 <__NVIC_SetPriority+0x4c>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	0112      	lsls	r2, r2, #4
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	440b      	add	r3, r1
 8000d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d9c:	e00a      	b.n	8000db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4908      	ldr	r1, [pc, #32]	; (8000dc4 <__NVIC_SetPriority+0x50>)
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	3b04      	subs	r3, #4
 8000dac:	0112      	lsls	r2, r2, #4
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	440b      	add	r3, r1
 8000db2:	761a      	strb	r2, [r3, #24]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000e100 	.word	0xe000e100
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b089      	sub	sp, #36	; 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f1c3 0307 	rsb	r3, r3, #7
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	bf28      	it	cs
 8000de6:	2304      	movcs	r3, #4
 8000de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3304      	adds	r3, #4
 8000dee:	2b06      	cmp	r3, #6
 8000df0:	d902      	bls.n	8000df8 <NVIC_EncodePriority+0x30>
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3b03      	subs	r3, #3
 8000df6:	e000      	b.n	8000dfa <NVIC_EncodePriority+0x32>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43da      	mvns	r2, r3
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e10:	f04f 31ff 	mov.w	r1, #4294967295
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1a:	43d9      	mvns	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	4313      	orrs	r3, r2
         );
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3724      	adds	r7, #36	; 0x24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ff4c 	bl	8000cd4 <__NVIC_SetPriorityGrouping>
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
 8000e50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e56:	f7ff ff61 	bl	8000d1c <__NVIC_GetPriorityGrouping>
 8000e5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	68b9      	ldr	r1, [r7, #8]
 8000e60:	6978      	ldr	r0, [r7, #20]
 8000e62:	f7ff ffb1 	bl	8000dc8 <NVIC_EncodePriority>
 8000e66:	4602      	mov	r2, r0
 8000e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ff80 	bl	8000d74 <__NVIC_SetPriority>
}
 8000e74:	bf00      	nop
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff ff54 	bl	8000d38 <__NVIC_EnableIRQ>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	; 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
 8000eb2:	e165      	b.n	8001180 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	f040 8154 	bne.w	800117a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d005      	beq.n	8000eea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d130      	bne.n	8000f4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f20:	2201      	movs	r2, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	091b      	lsrs	r3, r3, #4
 8000f36:	f003 0201 	and.w	r2, r3, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d017      	beq.n	8000f88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d123      	bne.n	8000fdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	08da      	lsrs	r2, r3, #3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3208      	adds	r2, #8
 8000f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	220f      	movs	r2, #15
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	691a      	ldr	r2, [r3, #16]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	08da      	lsrs	r2, r3, #3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3208      	adds	r2, #8
 8000fd6:	69b9      	ldr	r1, [r7, #24]
 8000fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0203 	and.w	r2, r3, #3
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001018:	2b00      	cmp	r3, #0
 800101a:	f000 80ae 	beq.w	800117a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b5d      	ldr	r3, [pc, #372]	; (8001198 <HAL_GPIO_Init+0x300>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	4a5c      	ldr	r2, [pc, #368]	; (8001198 <HAL_GPIO_Init+0x300>)
 8001028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102c:	6453      	str	r3, [r2, #68]	; 0x44
 800102e:	4b5a      	ldr	r3, [pc, #360]	; (8001198 <HAL_GPIO_Init+0x300>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800103a:	4a58      	ldr	r2, [pc, #352]	; (800119c <HAL_GPIO_Init+0x304>)
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	089b      	lsrs	r3, r3, #2
 8001040:	3302      	adds	r3, #2
 8001042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	220f      	movs	r2, #15
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a4f      	ldr	r2, [pc, #316]	; (80011a0 <HAL_GPIO_Init+0x308>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d025      	beq.n	80010b2 <HAL_GPIO_Init+0x21a>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a4e      	ldr	r2, [pc, #312]	; (80011a4 <HAL_GPIO_Init+0x30c>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d01f      	beq.n	80010ae <HAL_GPIO_Init+0x216>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a4d      	ldr	r2, [pc, #308]	; (80011a8 <HAL_GPIO_Init+0x310>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d019      	beq.n	80010aa <HAL_GPIO_Init+0x212>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a4c      	ldr	r2, [pc, #304]	; (80011ac <HAL_GPIO_Init+0x314>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d013      	beq.n	80010a6 <HAL_GPIO_Init+0x20e>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a4b      	ldr	r2, [pc, #300]	; (80011b0 <HAL_GPIO_Init+0x318>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d00d      	beq.n	80010a2 <HAL_GPIO_Init+0x20a>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a4a      	ldr	r2, [pc, #296]	; (80011b4 <HAL_GPIO_Init+0x31c>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d007      	beq.n	800109e <HAL_GPIO_Init+0x206>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a49      	ldr	r2, [pc, #292]	; (80011b8 <HAL_GPIO_Init+0x320>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d101      	bne.n	800109a <HAL_GPIO_Init+0x202>
 8001096:	2306      	movs	r3, #6
 8001098:	e00c      	b.n	80010b4 <HAL_GPIO_Init+0x21c>
 800109a:	2307      	movs	r3, #7
 800109c:	e00a      	b.n	80010b4 <HAL_GPIO_Init+0x21c>
 800109e:	2305      	movs	r3, #5
 80010a0:	e008      	b.n	80010b4 <HAL_GPIO_Init+0x21c>
 80010a2:	2304      	movs	r3, #4
 80010a4:	e006      	b.n	80010b4 <HAL_GPIO_Init+0x21c>
 80010a6:	2303      	movs	r3, #3
 80010a8:	e004      	b.n	80010b4 <HAL_GPIO_Init+0x21c>
 80010aa:	2302      	movs	r3, #2
 80010ac:	e002      	b.n	80010b4 <HAL_GPIO_Init+0x21c>
 80010ae:	2301      	movs	r3, #1
 80010b0:	e000      	b.n	80010b4 <HAL_GPIO_Init+0x21c>
 80010b2:	2300      	movs	r3, #0
 80010b4:	69fa      	ldr	r2, [r7, #28]
 80010b6:	f002 0203 	and.w	r2, r2, #3
 80010ba:	0092      	lsls	r2, r2, #2
 80010bc:	4093      	lsls	r3, r2
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c4:	4935      	ldr	r1, [pc, #212]	; (800119c <HAL_GPIO_Init+0x304>)
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	089b      	lsrs	r3, r3, #2
 80010ca:	3302      	adds	r3, #2
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010d2:	4b3a      	ldr	r3, [pc, #232]	; (80011bc <HAL_GPIO_Init+0x324>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010f6:	4a31      	ldr	r2, [pc, #196]	; (80011bc <HAL_GPIO_Init+0x324>)
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010fc:	4b2f      	ldr	r3, [pc, #188]	; (80011bc <HAL_GPIO_Init+0x324>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001120:	4a26      	ldr	r2, [pc, #152]	; (80011bc <HAL_GPIO_Init+0x324>)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001126:	4b25      	ldr	r3, [pc, #148]	; (80011bc <HAL_GPIO_Init+0x324>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800114a:	4a1c      	ldr	r2, [pc, #112]	; (80011bc <HAL_GPIO_Init+0x324>)
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001150:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <HAL_GPIO_Init+0x324>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001174:	4a11      	ldr	r2, [pc, #68]	; (80011bc <HAL_GPIO_Init+0x324>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3301      	adds	r3, #1
 800117e:	61fb      	str	r3, [r7, #28]
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	2b0f      	cmp	r3, #15
 8001184:	f67f ae96 	bls.w	8000eb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3724      	adds	r7, #36	; 0x24
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800
 800119c:	40013800 	.word	0x40013800
 80011a0:	40020000 	.word	0x40020000
 80011a4:	40020400 	.word	0x40020400
 80011a8:	40020800 	.word	0x40020800
 80011ac:	40020c00 	.word	0x40020c00
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40021400 	.word	0x40021400
 80011b8:	40021800 	.word	0x40021800
 80011bc:	40013c00 	.word	0x40013c00

080011c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	807b      	strh	r3, [r7, #2]
 80011cc:	4613      	mov	r3, r2
 80011ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011d0:	787b      	ldrb	r3, [r7, #1]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011d6:	887a      	ldrh	r2, [r7, #2]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011dc:	e003      	b.n	80011e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011de:	887b      	ldrh	r3, [r7, #2]
 80011e0:	041a      	lsls	r2, r3, #16
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	619a      	str	r2, [r3, #24]
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b085      	sub	sp, #20
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	460b      	mov	r3, r1
 80011fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001204:	887a      	ldrh	r2, [r7, #2]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4013      	ands	r3, r2
 800120a:	041a      	lsls	r2, r3, #16
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	43d9      	mvns	r1, r3
 8001210:	887b      	ldrh	r3, [r7, #2]
 8001212:	400b      	ands	r3, r1
 8001214:	431a      	orrs	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	619a      	str	r2, [r3, #24]
}
 800121a:	bf00      	nop
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001226:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001228:	b08f      	sub	sp, #60	; 0x3c
 800122a:	af0a      	add	r7, sp, #40	; 0x28
 800122c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d101      	bne.n	8001238 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e116      	b.n	8001466 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d106      	bne.n	8001258 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f008 fc1e 	bl	8009a94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2203      	movs	r2, #3
 800125c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001268:	2b00      	cmp	r3, #0
 800126a:	d102      	bne.n	8001272 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f003 f843 	bl	8004302 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	687e      	ldr	r6, [r7, #4]
 8001284:	466d      	mov	r5, sp
 8001286:	f106 0410 	add.w	r4, r6, #16
 800128a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800128c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800128e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001290:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001292:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001296:	e885 0003 	stmia.w	r5, {r0, r1}
 800129a:	1d33      	adds	r3, r6, #4
 800129c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800129e:	6838      	ldr	r0, [r7, #0]
 80012a0:	f002 ff1a 	bl	80040d8 <USB_CoreInit>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d005      	beq.n	80012b6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2202      	movs	r2, #2
 80012ae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e0d7      	b.n	8001466 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f003 f831 	bl	8004324 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012c2:	2300      	movs	r3, #0
 80012c4:	73fb      	strb	r3, [r7, #15]
 80012c6:	e04a      	b.n	800135e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012c8:	7bfa      	ldrb	r2, [r7, #15]
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	4613      	mov	r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	1a9b      	subs	r3, r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	440b      	add	r3, r1
 80012d6:	333d      	adds	r3, #61	; 0x3d
 80012d8:	2201      	movs	r2, #1
 80012da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012dc:	7bfa      	ldrb	r2, [r7, #15]
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	4613      	mov	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	1a9b      	subs	r3, r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	440b      	add	r3, r1
 80012ea:	333c      	adds	r3, #60	; 0x3c
 80012ec:	7bfa      	ldrb	r2, [r7, #15]
 80012ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012f0:	7bfa      	ldrb	r2, [r7, #15]
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	b298      	uxth	r0, r3
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	4613      	mov	r3, r2
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	1a9b      	subs	r3, r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	440b      	add	r3, r1
 8001302:	3342      	adds	r3, #66	; 0x42
 8001304:	4602      	mov	r2, r0
 8001306:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001308:	7bfa      	ldrb	r2, [r7, #15]
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	4613      	mov	r3, r2
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	1a9b      	subs	r3, r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	440b      	add	r3, r1
 8001316:	333f      	adds	r3, #63	; 0x3f
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800131c:	7bfa      	ldrb	r2, [r7, #15]
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	4613      	mov	r3, r2
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	1a9b      	subs	r3, r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	3344      	adds	r3, #68	; 0x44
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001330:	7bfa      	ldrb	r2, [r7, #15]
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	4613      	mov	r3, r2
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	1a9b      	subs	r3, r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	440b      	add	r3, r1
 800133e:	3348      	adds	r3, #72	; 0x48
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001344:	7bfa      	ldrb	r2, [r7, #15]
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	4613      	mov	r3, r2
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	1a9b      	subs	r3, r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	440b      	add	r3, r1
 8001352:	3350      	adds	r3, #80	; 0x50
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	3301      	adds	r3, #1
 800135c:	73fb      	strb	r3, [r7, #15]
 800135e:	7bfa      	ldrb	r2, [r7, #15]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	429a      	cmp	r2, r3
 8001366:	d3af      	bcc.n	80012c8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001368:	2300      	movs	r3, #0
 800136a:	73fb      	strb	r3, [r7, #15]
 800136c:	e044      	b.n	80013f8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800136e:	7bfa      	ldrb	r2, [r7, #15]
 8001370:	6879      	ldr	r1, [r7, #4]
 8001372:	4613      	mov	r3, r2
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	1a9b      	subs	r3, r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	440b      	add	r3, r1
 800137c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001384:	7bfa      	ldrb	r2, [r7, #15]
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	4613      	mov	r3, r2
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	1a9b      	subs	r3, r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	440b      	add	r3, r1
 8001392:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001396:	7bfa      	ldrb	r2, [r7, #15]
 8001398:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800139a:	7bfa      	ldrb	r2, [r7, #15]
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	4613      	mov	r3, r2
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	1a9b      	subs	r3, r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	440b      	add	r3, r1
 80013a8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013b0:	7bfa      	ldrb	r2, [r7, #15]
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	4613      	mov	r3, r2
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	1a9b      	subs	r3, r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	440b      	add	r3, r1
 80013be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013c6:	7bfa      	ldrb	r2, [r7, #15]
 80013c8:	6879      	ldr	r1, [r7, #4]
 80013ca:	4613      	mov	r3, r2
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	1a9b      	subs	r3, r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	440b      	add	r3, r1
 80013d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013dc:	7bfa      	ldrb	r2, [r7, #15]
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	4613      	mov	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	1a9b      	subs	r3, r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	440b      	add	r3, r1
 80013ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	3301      	adds	r3, #1
 80013f6:	73fb      	strb	r3, [r7, #15]
 80013f8:	7bfa      	ldrb	r2, [r7, #15]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d3b5      	bcc.n	800136e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	687e      	ldr	r6, [r7, #4]
 800140a:	466d      	mov	r5, sp
 800140c:	f106 0410 	add.w	r4, r6, #16
 8001410:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001412:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001414:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001416:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001418:	e894 0003 	ldmia.w	r4, {r0, r1}
 800141c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001420:	1d33      	adds	r3, r6, #4
 8001422:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001424:	6838      	ldr	r0, [r7, #0]
 8001426:	f002 ffc9 	bl	80043bc <USB_DevInit>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d005      	beq.n	800143c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2202      	movs	r2, #2
 8001434:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e014      	b.n	8001466 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001450:	2b01      	cmp	r3, #1
 8001452:	d102      	bne.n	800145a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f001 f891 	bl	800257c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f004 f838 	bl	80054d4 <USB_DevDisconnect>

  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800146e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b084      	sub	sp, #16
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001482:	2b01      	cmp	r3, #1
 8001484:	d101      	bne.n	800148a <HAL_PCD_Start+0x1c>
 8001486:	2302      	movs	r3, #2
 8001488:	e020      	b.n	80014cc <HAL_PCD_Start+0x5e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2201      	movs	r2, #1
 800148e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001496:	2b01      	cmp	r3, #1
 8001498:	d109      	bne.n	80014ae <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d005      	beq.n	80014ae <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f002 ff14 	bl	80042e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f003 ffe8 	bl	8005492 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b08d      	sub	sp, #52	; 0x34
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80014e2:	6a3b      	ldr	r3, [r7, #32]
 80014e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f004 f8a6 	bl	800563c <USB_GetMode>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f040 83ca 	bne.w	8001c8c <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f004 f80a 	bl	8005516 <USB_ReadInterrupts>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	f000 83c0 	beq.w	8001c8a <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f004 f801 	bl	8005516 <USB_ReadInterrupts>
 8001514:	4603      	mov	r3, r0
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b02      	cmp	r3, #2
 800151c:	d107      	bne.n	800152e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	695a      	ldr	r2, [r3, #20]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f002 0202 	and.w	r2, r2, #2
 800152c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f003 ffef 	bl	8005516 <USB_ReadInterrupts>
 8001538:	4603      	mov	r3, r0
 800153a:	f003 0310 	and.w	r3, r3, #16
 800153e:	2b10      	cmp	r3, #16
 8001540:	d161      	bne.n	8001606 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	699a      	ldr	r2, [r3, #24]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 0210 	bic.w	r2, r2, #16
 8001550:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001552:	6a3b      	ldr	r3, [r7, #32]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	f003 020f 	and.w	r2, r3, #15
 800155e:	4613      	mov	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	1a9b      	subs	r3, r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	3304      	adds	r3, #4
 8001570:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	0c5b      	lsrs	r3, r3, #17
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	2b02      	cmp	r3, #2
 800157c:	d124      	bne.n	80015c8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001584:	4013      	ands	r3, r2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d035      	beq.n	80015f6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	091b      	lsrs	r3, r3, #4
 8001592:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001594:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001598:	b29b      	uxth	r3, r3
 800159a:	461a      	mov	r2, r3
 800159c:	6a38      	ldr	r0, [r7, #32]
 800159e:	f003 fe26 	bl	80051ee <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	68da      	ldr	r2, [r3, #12]
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	091b      	lsrs	r3, r3, #4
 80015aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015ae:	441a      	add	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	699a      	ldr	r2, [r3, #24]
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	091b      	lsrs	r3, r3, #4
 80015bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015c0:	441a      	add	r2, r3
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	619a      	str	r2, [r3, #24]
 80015c6:	e016      	b.n	80015f6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	0c5b      	lsrs	r3, r3, #17
 80015cc:	f003 030f 	and.w	r3, r3, #15
 80015d0:	2b06      	cmp	r3, #6
 80015d2:	d110      	bne.n	80015f6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80015da:	2208      	movs	r2, #8
 80015dc:	4619      	mov	r1, r3
 80015de:	6a38      	ldr	r0, [r7, #32]
 80015e0:	f003 fe05 	bl	80051ee <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	699a      	ldr	r2, [r3, #24]
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	091b      	lsrs	r3, r3, #4
 80015ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015f0:	441a      	add	r2, r3
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	699a      	ldr	r2, [r3, #24]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f042 0210 	orr.w	r2, r2, #16
 8001604:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f003 ff83 	bl	8005516 <USB_ReadInterrupts>
 8001610:	4603      	mov	r3, r0
 8001612:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001616:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800161a:	d16e      	bne.n	80016fa <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800161c:	2300      	movs	r3, #0
 800161e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f003 ff89 	bl	800553c <USB_ReadDevAllOutEpInterrupt>
 800162a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800162c:	e062      	b.n	80016f4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800162e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	2b00      	cmp	r3, #0
 8001636:	d057      	beq.n	80016e8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800163e:	b2d2      	uxtb	r2, r2
 8001640:	4611      	mov	r1, r2
 8001642:	4618      	mov	r0, r3
 8001644:	f003 ffae 	bl	80055a4 <USB_ReadDevOutEPInterrupt>
 8001648:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	2b00      	cmp	r3, #0
 8001652:	d00c      	beq.n	800166e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	015a      	lsls	r2, r3, #5
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	4413      	add	r3, r2
 800165c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001660:	461a      	mov	r2, r3
 8001662:	2301      	movs	r3, #1
 8001664:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001666:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 fddd 	bl	8002228 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	f003 0308 	and.w	r3, r3, #8
 8001674:	2b00      	cmp	r3, #0
 8001676:	d00c      	beq.n	8001692 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	015a      	lsls	r2, r3, #5
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	4413      	add	r3, r2
 8001680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001684:	461a      	mov	r2, r3
 8001686:	2308      	movs	r3, #8
 8001688:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800168a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 fed7 	bl	8002440 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	f003 0310 	and.w	r3, r3, #16
 8001698:	2b00      	cmp	r3, #0
 800169a:	d008      	beq.n	80016ae <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	015a      	lsls	r2, r3, #5
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	4413      	add	r3, r2
 80016a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016a8:	461a      	mov	r2, r3
 80016aa:	2310      	movs	r3, #16
 80016ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	f003 0320 	and.w	r3, r3, #32
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d008      	beq.n	80016ca <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	015a      	lsls	r2, r3, #5
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	4413      	add	r3, r2
 80016c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016c4:	461a      	mov	r2, r3
 80016c6:	2320      	movs	r3, #32
 80016c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d009      	beq.n	80016e8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	015a      	lsls	r2, r3, #5
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	4413      	add	r3, r2
 80016dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016e0:	461a      	mov	r2, r3
 80016e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016e6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	3301      	adds	r3, #1
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f0:	085b      	lsrs	r3, r3, #1
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d199      	bne.n	800162e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f003 ff09 	bl	8005516 <USB_ReadInterrupts>
 8001704:	4603      	mov	r3, r0
 8001706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800170a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800170e:	f040 80c0 	bne.w	8001892 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f003 ff2a 	bl	8005570 <USB_ReadDevAllInEpInterrupt>
 800171c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800171e:	2300      	movs	r3, #0
 8001720:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001722:	e0b2      	b.n	800188a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	f000 80a7 	beq.w	800187e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	4611      	mov	r1, r2
 800173a:	4618      	mov	r0, r3
 800173c:	f003 ff50 	bl	80055e0 <USB_ReadDevInEPInterrupt>
 8001740:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	2b00      	cmp	r3, #0
 800174a:	d057      	beq.n	80017fc <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	2201      	movs	r2, #1
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	43db      	mvns	r3, r3
 8001766:	69f9      	ldr	r1, [r7, #28]
 8001768:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800176c:	4013      	ands	r3, r2
 800176e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001772:	015a      	lsls	r2, r3, #5
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	4413      	add	r3, r2
 8001778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800177c:	461a      	mov	r2, r3
 800177e:	2301      	movs	r3, #1
 8001780:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d132      	bne.n	80017f0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800178e:	4613      	mov	r3, r2
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	1a9b      	subs	r3, r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	440b      	add	r3, r1
 8001798:	3348      	adds	r3, #72	; 0x48
 800179a:	6819      	ldr	r1, [r3, #0]
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017a0:	4613      	mov	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	1a9b      	subs	r3, r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4403      	add	r3, r0
 80017aa:	3344      	adds	r3, #68	; 0x44
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4419      	add	r1, r3
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b4:	4613      	mov	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	1a9b      	subs	r3, r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4403      	add	r3, r0
 80017be:	3348      	adds	r3, #72	; 0x48
 80017c0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d113      	bne.n	80017f0 <HAL_PCD_IRQHandler+0x31c>
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017cc:	4613      	mov	r3, r2
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	1a9b      	subs	r3, r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	3350      	adds	r3, #80	; 0x50
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d108      	bne.n	80017f0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6818      	ldr	r0, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80017e8:	461a      	mov	r2, r3
 80017ea:	2101      	movs	r1, #1
 80017ec:	f003 ff58 	bl	80056a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	4619      	mov	r1, r3
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f008 f9f1 	bl	8009bde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	f003 0308 	and.w	r3, r3, #8
 8001802:	2b00      	cmp	r3, #0
 8001804:	d008      	beq.n	8001818 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	015a      	lsls	r2, r3, #5
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	4413      	add	r3, r2
 800180e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001812:	461a      	mov	r2, r3
 8001814:	2308      	movs	r3, #8
 8001816:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	f003 0310 	and.w	r3, r3, #16
 800181e:	2b00      	cmp	r3, #0
 8001820:	d008      	beq.n	8001834 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	015a      	lsls	r2, r3, #5
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	4413      	add	r3, r2
 800182a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800182e:	461a      	mov	r2, r3
 8001830:	2310      	movs	r3, #16
 8001832:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800183a:	2b00      	cmp	r3, #0
 800183c:	d008      	beq.n	8001850 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	015a      	lsls	r2, r3, #5
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	4413      	add	r3, r2
 8001846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800184a:	461a      	mov	r2, r3
 800184c:	2340      	movs	r3, #64	; 0x40
 800184e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d008      	beq.n	800186c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	015a      	lsls	r2, r3, #5
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	4413      	add	r3, r2
 8001862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001866:	461a      	mov	r2, r3
 8001868:	2302      	movs	r3, #2
 800186a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001876:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 fc48 	bl	800210e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	3301      	adds	r3, #1
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001886:	085b      	lsrs	r3, r3, #1
 8001888:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800188a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800188c:	2b00      	cmp	r3, #0
 800188e:	f47f af49 	bne.w	8001724 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f003 fe3d 	bl	8005516 <USB_ReadInterrupts>
 800189c:	4603      	mov	r3, r0
 800189e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80018a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018a6:	d122      	bne.n	80018ee <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	69fa      	ldr	r2, [r7, #28]
 80018b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018b6:	f023 0301 	bic.w	r3, r3, #1
 80018ba:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d108      	bne.n	80018d8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80018ce:	2100      	movs	r1, #0
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f008 fbd3 	bl	800a07c <HAL_PCDEx_LPM_Callback>
 80018d6:	e002      	b.n	80018de <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f008 f9f7 	bl	8009ccc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	695a      	ldr	r2, [r3, #20]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80018ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f003 fe0f 	bl	8005516 <USB_ReadInterrupts>
 80018f8:	4603      	mov	r3, r0
 80018fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001902:	d112      	bne.n	800192a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	2b01      	cmp	r3, #1
 8001912:	d102      	bne.n	800191a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f008 f9b3 	bl	8009c80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	695a      	ldr	r2, [r3, #20]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001928:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f003 fdf1 	bl	8005516 <USB_ReadInterrupts>
 8001934:	4603      	mov	r3, r0
 8001936:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800193a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800193e:	d121      	bne.n	8001984 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	695a      	ldr	r2, [r3, #20]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800194e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001956:	2b00      	cmp	r3, #0
 8001958:	d111      	bne.n	800197e <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001968:	089b      	lsrs	r3, r3, #2
 800196a:	f003 020f 	and.w	r2, r3, #15
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001974:	2101      	movs	r1, #1
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f008 fb80 	bl	800a07c <HAL_PCDEx_LPM_Callback>
 800197c:	e002      	b.n	8001984 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f008 f97e 	bl	8009c80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f003 fdc4 	bl	8005516 <USB_ReadInterrupts>
 800198e:	4603      	mov	r3, r0
 8001990:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001998:	f040 80c7 	bne.w	8001b2a <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	69fa      	ldr	r2, [r7, #28]
 80019a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019aa:	f023 0301 	bic.w	r3, r3, #1
 80019ae:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2110      	movs	r1, #16
 80019b6:	4618      	mov	r0, r3
 80019b8:	f002 fe5e 	bl	8004678 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019bc:	2300      	movs	r3, #0
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019c0:	e056      	b.n	8001a70 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80019c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c4:	015a      	lsls	r2, r3, #5
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	4413      	add	r3, r2
 80019ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019ce:	461a      	mov	r2, r3
 80019d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80019d4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80019d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d8:	015a      	lsls	r2, r3, #5
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	4413      	add	r3, r2
 80019de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019e6:	0151      	lsls	r1, r2, #5
 80019e8:	69fa      	ldr	r2, [r7, #28]
 80019ea:	440a      	add	r2, r1
 80019ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80019f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019f4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80019f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f8:	015a      	lsls	r2, r3, #5
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	4413      	add	r3, r2
 80019fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a06:	0151      	lsls	r1, r2, #5
 8001a08:	69fa      	ldr	r2, [r7, #28]
 8001a0a:	440a      	add	r2, r1
 8001a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001a10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a14:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a18:	015a      	lsls	r2, r3, #5
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a22:	461a      	mov	r2, r3
 8001a24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a28:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a2c:	015a      	lsls	r2, r3, #5
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	4413      	add	r3, r2
 8001a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a3a:	0151      	lsls	r1, r2, #5
 8001a3c:	69fa      	ldr	r2, [r7, #28]
 8001a3e:	440a      	add	r2, r1
 8001a40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a48:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a4c:	015a      	lsls	r2, r3, #5
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	4413      	add	r3, r2
 8001a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a5a:	0151      	lsls	r1, r2, #5
 8001a5c:	69fa      	ldr	r2, [r7, #28]
 8001a5e:	440a      	add	r2, r1
 8001a60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a68:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d3a3      	bcc.n	80019c2 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	69fa      	ldr	r2, [r7, #28]
 8001a84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a88:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001a8c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d016      	beq.n	8001ac4 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001aa0:	69fa      	ldr	r2, [r7, #28]
 8001aa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001aa6:	f043 030b 	orr.w	r3, r3, #11
 8001aaa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	69fa      	ldr	r2, [r7, #28]
 8001ab8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001abc:	f043 030b 	orr.w	r3, r3, #11
 8001ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac2:	e015      	b.n	8001af0 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	69fa      	ldr	r2, [r7, #28]
 8001ace:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ad2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ad6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001ada:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	69fa      	ldr	r2, [r7, #28]
 8001ae6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001aea:	f043 030b 	orr.w	r3, r3, #11
 8001aee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	69fa      	ldr	r2, [r7, #28]
 8001afa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001afe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001b02:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6818      	ldr	r0, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b14:	461a      	mov	r2, r3
 8001b16:	f003 fdc3 	bl	80056a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	695a      	ldr	r2, [r3, #20]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001b28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f003 fcf1 	bl	8005516 <USB_ReadInterrupts>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b3e:	d124      	bne.n	8001b8a <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f003 fd87 	bl	8005658 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f002 fdef 	bl	8004732 <USB_GetDevSpeed>
 8001b54:	4603      	mov	r3, r0
 8001b56:	461a      	mov	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681c      	ldr	r4, [r3, #0]
 8001b60:	f000 fe16 	bl	8002790 <HAL_RCC_GetHCLKFreq>
 8001b64:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4620      	mov	r0, r4
 8001b70:	f002 fb14 	bl	800419c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f008 f85a 	bl	8009c2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	695a      	ldr	r2, [r3, #20]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001b88:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f003 fcc1 	bl	8005516 <USB_ReadInterrupts>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	2b08      	cmp	r3, #8
 8001b9c:	d10a      	bne.n	8001bb4 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f008 f837 	bl	8009c12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	695a      	ldr	r2, [r3, #20]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f002 0208 	and.w	r2, r2, #8
 8001bb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f003 fcac 	bl	8005516 <USB_ReadInterrupts>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bc8:	d10f      	bne.n	8001bea <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f008 f899 	bl	8009d0c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	695a      	ldr	r2, [r3, #20]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001be8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f003 fc91 	bl	8005516 <USB_ReadInterrupts>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001bfe:	d10f      	bne.n	8001c20 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	4619      	mov	r1, r3
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f008 f86c 	bl	8009ce8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	695a      	ldr	r2, [r3, #20]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f003 fc76 	bl	8005516 <USB_ReadInterrupts>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c34:	d10a      	bne.n	8001c4c <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f008 f87a 	bl	8009d30 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	695a      	ldr	r2, [r3, #20]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001c4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f003 fc60 	bl	8005516 <USB_ReadInterrupts>
 8001c56:	4603      	mov	r3, r0
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b04      	cmp	r3, #4
 8001c5e:	d115      	bne.n	8001c8c <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	f003 0304 	and.w	r3, r3, #4
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d002      	beq.n	8001c78 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f008 f86a 	bl	8009d4c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6859      	ldr	r1, [r3, #4]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	605a      	str	r2, [r3, #4]
 8001c88:	e000      	b.n	8001c8c <HAL_PCD_IRQHandler+0x7b8>
      return;
 8001c8a:	bf00      	nop
    }
  }
}
 8001c8c:	3734      	adds	r7, #52	; 0x34
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd90      	pop	{r4, r7, pc}

08001c92 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d101      	bne.n	8001cac <HAL_PCD_SetAddress+0x1a>
 8001ca8:	2302      	movs	r3, #2
 8001caa:	e013      	b.n	8001cd4 <HAL_PCD_SetAddress+0x42>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	78fa      	ldrb	r2, [r7, #3]
 8001cb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	78fa      	ldrb	r2, [r7, #3]
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f003 fbbe 	bl	8005446 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	4608      	mov	r0, r1
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4603      	mov	r3, r0
 8001cec:	70fb      	strb	r3, [r7, #3]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	803b      	strh	r3, [r7, #0]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	da0f      	bge.n	8001d22 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d02:	78fb      	ldrb	r3, [r7, #3]
 8001d04:	f003 020f 	and.w	r2, r3, #15
 8001d08:	4613      	mov	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	1a9b      	subs	r3, r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	3338      	adds	r3, #56	; 0x38
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	3304      	adds	r3, #4
 8001d18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	705a      	strb	r2, [r3, #1]
 8001d20:	e00f      	b.n	8001d42 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d22:	78fb      	ldrb	r3, [r7, #3]
 8001d24:	f003 020f 	and.w	r2, r3, #15
 8001d28:	4613      	mov	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	1a9b      	subs	r3, r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	4413      	add	r3, r2
 8001d38:	3304      	adds	r3, #4
 8001d3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d42:	78fb      	ldrb	r3, [r7, #3]
 8001d44:	f003 030f 	and.w	r3, r3, #15
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d4e:	883a      	ldrh	r2, [r7, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	78ba      	ldrb	r2, [r7, #2]
 8001d58:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	785b      	ldrb	r3, [r3, #1]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d004      	beq.n	8001d6c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d6c:	78bb      	ldrb	r3, [r7, #2]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d102      	bne.n	8001d78 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d101      	bne.n	8001d86 <HAL_PCD_EP_Open+0xaa>
 8001d82:	2302      	movs	r3, #2
 8001d84:	e00e      	b.n	8001da4 <HAL_PCD_EP_Open+0xc8>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68f9      	ldr	r1, [r7, #12]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f002 fcf1 	bl	800477c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001da2:	7afb      	ldrb	r3, [r7, #11]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001db8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	da0f      	bge.n	8001de0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dc0:	78fb      	ldrb	r3, [r7, #3]
 8001dc2:	f003 020f 	and.w	r2, r3, #15
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	1a9b      	subs	r3, r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	3338      	adds	r3, #56	; 0x38
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	705a      	strb	r2, [r3, #1]
 8001dde:	e00f      	b.n	8001e00 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001de0:	78fb      	ldrb	r3, [r7, #3]
 8001de2:	f003 020f 	and.w	r2, r3, #15
 8001de6:	4613      	mov	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	1a9b      	subs	r3, r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	3304      	adds	r3, #4
 8001df8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e00:	78fb      	ldrb	r3, [r7, #3]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_PCD_EP_Close+0x6e>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e00e      	b.n	8001e38 <HAL_PCD_EP_Close+0x8c>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68f9      	ldr	r1, [r7, #12]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f002 fd2f 	bl	800488c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	607a      	str	r2, [r7, #4]
 8001e4a:	603b      	str	r3, [r7, #0]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e50:	7afb      	ldrb	r3, [r7, #11]
 8001e52:	f003 020f 	and.w	r2, r3, #15
 8001e56:	4613      	mov	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	1a9b      	subs	r3, r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4413      	add	r3, r2
 8001e66:	3304      	adds	r3, #4
 8001e68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e82:	7afb      	ldrb	r3, [r7, #11]
 8001e84:	f003 030f 	and.w	r3, r3, #15
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d102      	bne.n	8001e9c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e9c:	7afb      	ldrb	r3, [r7, #11]
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d109      	bne.n	8001eba <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	6979      	ldr	r1, [r7, #20]
 8001eb4:	f003 f80a 	bl	8004ecc <USB_EP0StartXfer>
 8001eb8:	e008      	b.n	8001ecc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6818      	ldr	r0, [r3, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	6979      	ldr	r1, [r7, #20]
 8001ec8:	f002 fdbc 	bl	8004a44 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ee2:	78fb      	ldrb	r3, [r7, #3]
 8001ee4:	f003 020f 	and.w	r2, r3, #15
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	4613      	mov	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	1a9b      	subs	r3, r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001ef8:	681b      	ldr	r3, [r3, #0]
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b086      	sub	sp, #24
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	607a      	str	r2, [r7, #4]
 8001f10:	603b      	str	r3, [r7, #0]
 8001f12:	460b      	mov	r3, r1
 8001f14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f16:	7afb      	ldrb	r3, [r7, #11]
 8001f18:	f003 020f 	and.w	r2, r3, #15
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	1a9b      	subs	r3, r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	3338      	adds	r3, #56	; 0x38
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	4413      	add	r3, r2
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	2201      	movs	r2, #1
 8001f44:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f46:	7afb      	ldrb	r3, [r7, #11]
 8001f48:	f003 030f 	and.w	r3, r3, #15
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d102      	bne.n	8001f60 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f60:	7afb      	ldrb	r3, [r7, #11]
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d109      	bne.n	8001f7e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	461a      	mov	r2, r3
 8001f76:	6979      	ldr	r1, [r7, #20]
 8001f78:	f002 ffa8 	bl	8004ecc <USB_EP0StartXfer>
 8001f7c:	e008      	b.n	8001f90 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6818      	ldr	r0, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	461a      	mov	r2, r3
 8001f8a:	6979      	ldr	r1, [r7, #20]
 8001f8c:	f002 fd5a 	bl	8004a44 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	f003 020f 	and.w	r2, r3, #15
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d901      	bls.n	8001fb8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e050      	b.n	800205a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	da0f      	bge.n	8001fe0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	f003 020f 	and.w	r2, r3, #15
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	1a9b      	subs	r3, r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	3338      	adds	r3, #56	; 0x38
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	705a      	strb	r2, [r3, #1]
 8001fde:	e00d      	b.n	8001ffc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001fe0:	78fa      	ldrb	r2, [r7, #3]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	1a9b      	subs	r3, r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2201      	movs	r2, #1
 8002000:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	f003 030f 	and.w	r3, r3, #15
 8002008:	b2da      	uxtb	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <HAL_PCD_EP_SetStall+0x82>
 8002018:	2302      	movs	r3, #2
 800201a:	e01e      	b.n	800205a <HAL_PCD_EP_SetStall+0xc0>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68f9      	ldr	r1, [r7, #12]
 800202a:	4618      	mov	r0, r3
 800202c:	f003 f937 	bl	800529e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10a      	bne.n	8002050 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6818      	ldr	r0, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	b2d9      	uxtb	r1, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800204a:	461a      	mov	r2, r3
 800204c:	f003 fb28 	bl	80056a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b084      	sub	sp, #16
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	460b      	mov	r3, r1
 800206c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	f003 020f 	and.w	r2, r3, #15
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	429a      	cmp	r2, r3
 800207a:	d901      	bls.n	8002080 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e042      	b.n	8002106 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002080:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002084:	2b00      	cmp	r3, #0
 8002086:	da0f      	bge.n	80020a8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002088:	78fb      	ldrb	r3, [r7, #3]
 800208a:	f003 020f 	and.w	r2, r3, #15
 800208e:	4613      	mov	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	1a9b      	subs	r3, r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	3338      	adds	r3, #56	; 0x38
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	4413      	add	r3, r2
 800209c:	3304      	adds	r3, #4
 800209e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2201      	movs	r2, #1
 80020a4:	705a      	strb	r2, [r3, #1]
 80020a6:	e00f      	b.n	80020c8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	f003 020f 	and.w	r2, r3, #15
 80020ae:	4613      	mov	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	1a9b      	subs	r3, r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	3304      	adds	r3, #4
 80020c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020ce:	78fb      	ldrb	r3, [r7, #3]
 80020d0:	f003 030f 	and.w	r3, r3, #15
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d101      	bne.n	80020e8 <HAL_PCD_EP_ClrStall+0x86>
 80020e4:	2302      	movs	r3, #2
 80020e6:	e00e      	b.n	8002106 <HAL_PCD_EP_ClrStall+0xa4>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68f9      	ldr	r1, [r7, #12]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f003 f93f 	bl	800537a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b08a      	sub	sp, #40	; 0x28
 8002112:	af02      	add	r7, sp, #8
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	4613      	mov	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	1a9b      	subs	r3, r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	3338      	adds	r3, #56	; 0x38
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	3304      	adds	r3, #4
 8002134:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	699a      	ldr	r2, [r3, #24]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	429a      	cmp	r2, r3
 8002140:	d901      	bls.n	8002146 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e06c      	b.n	8002220 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	695a      	ldr	r2, [r3, #20]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	69fa      	ldr	r2, [r7, #28]
 8002158:	429a      	cmp	r2, r3
 800215a:	d902      	bls.n	8002162 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3303      	adds	r3, #3
 8002166:	089b      	lsrs	r3, r3, #2
 8002168:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800216a:	e02b      	b.n	80021c4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	695a      	ldr	r2, [r3, #20]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	69fa      	ldr	r2, [r7, #28]
 800217e:	429a      	cmp	r2, r3
 8002180:	d902      	bls.n	8002188 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	3303      	adds	r3, #3
 800218c:	089b      	lsrs	r3, r3, #2
 800218e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	68d9      	ldr	r1, [r3, #12]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	b2da      	uxtb	r2, r3
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	4603      	mov	r3, r0
 80021a6:	6978      	ldr	r0, [r7, #20]
 80021a8:	f002 ffe3 	bl	8005172 <USB_WritePacket>

    ep->xfer_buff  += len;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	441a      	add	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	699a      	ldr	r2, [r3, #24]
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	441a      	add	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	015a      	lsls	r2, r3, #5
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4413      	add	r3, r2
 80021cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d809      	bhi.n	80021ee <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	699a      	ldr	r2, [r3, #24]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d203      	bcs.n	80021ee <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1be      	bne.n	800216c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	695a      	ldr	r2, [r3, #20]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d811      	bhi.n	800221e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	2201      	movs	r2, #1
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800220e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	43db      	mvns	r3, r3
 8002214:	6939      	ldr	r1, [r7, #16]
 8002216:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800221a:	4013      	ands	r3, r2
 800221c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3720      	adds	r7, #32
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	333c      	adds	r3, #60	; 0x3c
 8002240:	3304      	adds	r3, #4
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	015a      	lsls	r2, r3, #5
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4413      	add	r3, r2
 800224e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	2b01      	cmp	r3, #1
 800225c:	f040 80a0 	bne.w	80023a0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d015      	beq.n	8002296 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4a72      	ldr	r2, [pc, #456]	; (8002438 <PCD_EP_OutXfrComplete_int+0x210>)
 800226e:	4293      	cmp	r3, r2
 8002270:	f240 80dd 	bls.w	800242e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 80d7 	beq.w	800242e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	015a      	lsls	r2, r3, #5
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4413      	add	r3, r2
 8002288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800228c:	461a      	mov	r2, r3
 800228e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002292:	6093      	str	r3, [r2, #8]
 8002294:	e0cb      	b.n	800242e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	f003 0320 	and.w	r3, r3, #32
 800229c:	2b00      	cmp	r3, #0
 800229e:	d009      	beq.n	80022b4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	015a      	lsls	r2, r3, #5
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4413      	add	r3, r2
 80022a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ac:	461a      	mov	r2, r3
 80022ae:	2320      	movs	r3, #32
 80022b0:	6093      	str	r3, [r2, #8]
 80022b2:	e0bc      	b.n	800242e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f040 80b7 	bne.w	800242e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4a5d      	ldr	r2, [pc, #372]	; (8002438 <PCD_EP_OutXfrComplete_int+0x210>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d90f      	bls.n	80022e8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00a      	beq.n	80022e8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	015a      	lsls	r2, r3, #5
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4413      	add	r3, r2
 80022da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022de:	461a      	mov	r2, r3
 80022e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022e4:	6093      	str	r3, [r2, #8]
 80022e6:	e0a2      	b.n	800242e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	4613      	mov	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	1a9b      	subs	r3, r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80022fa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	0159      	lsls	r1, r3, #5
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	440b      	add	r3, r1
 8002304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800230e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	4613      	mov	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	1a9b      	subs	r3, r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4403      	add	r3, r0
 800231e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002322:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	1a9b      	subs	r3, r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002336:	6819      	ldr	r1, [r3, #0]
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	4613      	mov	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4403      	add	r3, r0
 8002346:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4419      	add	r1, r3
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	4613      	mov	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	1a9b      	subs	r3, r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4403      	add	r3, r0
 800235c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002360:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d114      	bne.n	8002392 <PCD_EP_OutXfrComplete_int+0x16a>
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	1a9b      	subs	r3, r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d108      	bne.n	8002392 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800238a:	461a      	mov	r2, r3
 800238c:	2101      	movs	r1, #1
 800238e:	f003 f987 	bl	80056a0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	4619      	mov	r1, r3
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f007 fc05 	bl	8009ba8 <HAL_PCD_DataOutStageCallback>
 800239e:	e046      	b.n	800242e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4a26      	ldr	r2, [pc, #152]	; (800243c <PCD_EP_OutXfrComplete_int+0x214>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d124      	bne.n	80023f2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00a      	beq.n	80023c8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	015a      	lsls	r2, r3, #5
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4413      	add	r3, r2
 80023ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023be:	461a      	mov	r2, r3
 80023c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023c4:	6093      	str	r3, [r2, #8]
 80023c6:	e032      	b.n	800242e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	f003 0320 	and.w	r3, r3, #32
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d008      	beq.n	80023e4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	015a      	lsls	r2, r3, #5
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4413      	add	r3, r2
 80023da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023de:	461a      	mov	r2, r3
 80023e0:	2320      	movs	r3, #32
 80023e2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	4619      	mov	r1, r3
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f007 fbdc 	bl	8009ba8 <HAL_PCD_DataOutStageCallback>
 80023f0:	e01d      	b.n	800242e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d114      	bne.n	8002422 <PCD_EP_OutXfrComplete_int+0x1fa>
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	4613      	mov	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d108      	bne.n	8002422 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6818      	ldr	r0, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800241a:	461a      	mov	r2, r3
 800241c:	2100      	movs	r1, #0
 800241e:	f003 f93f 	bl	80056a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	b2db      	uxtb	r3, r3
 8002426:	4619      	mov	r1, r3
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f007 fbbd 	bl	8009ba8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	4f54300a 	.word	0x4f54300a
 800243c:	4f54310a 	.word	0x4f54310a

08002440 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	333c      	adds	r3, #60	; 0x3c
 8002458:	3304      	adds	r3, #4
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	015a      	lsls	r2, r3, #5
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4413      	add	r3, r2
 8002466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	4a15      	ldr	r2, [pc, #84]	; (80024c8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d90e      	bls.n	8002494 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800247c:	2b00      	cmp	r3, #0
 800247e:	d009      	beq.n	8002494 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	015a      	lsls	r2, r3, #5
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	4413      	add	r3, r2
 8002488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800248c:	461a      	mov	r2, r3
 800248e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002492:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f007 fb75 	bl	8009b84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <PCD_EP_OutSetupPacket_int+0x88>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d90c      	bls.n	80024bc <PCD_EP_OutSetupPacket_int+0x7c>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d108      	bne.n	80024bc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024b4:	461a      	mov	r2, r3
 80024b6:	2101      	movs	r1, #1
 80024b8:	f003 f8f2 	bl	80056a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	4f54300a 	.word	0x4f54300a

080024cc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	70fb      	strb	r3, [r7, #3]
 80024d8:	4613      	mov	r3, r2
 80024da:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d107      	bne.n	80024fa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80024ea:	883b      	ldrh	r3, [r7, #0]
 80024ec:	0419      	lsls	r1, r3, #16
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	629a      	str	r2, [r3, #40]	; 0x28
 80024f8:	e028      	b.n	800254c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002500:	0c1b      	lsrs	r3, r3, #16
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	4413      	add	r3, r2
 8002506:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002508:	2300      	movs	r3, #0
 800250a:	73fb      	strb	r3, [r7, #15]
 800250c:	e00d      	b.n	800252a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	3340      	adds	r3, #64	; 0x40
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	0c1b      	lsrs	r3, r3, #16
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	4413      	add	r3, r2
 8002522:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	3301      	adds	r3, #1
 8002528:	73fb      	strb	r3, [r7, #15]
 800252a:	7bfa      	ldrb	r2, [r7, #15]
 800252c:	78fb      	ldrb	r3, [r7, #3]
 800252e:	3b01      	subs	r3, #1
 8002530:	429a      	cmp	r2, r3
 8002532:	d3ec      	bcc.n	800250e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002534:	883b      	ldrh	r3, [r7, #0]
 8002536:	0418      	lsls	r0, r3, #16
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6819      	ldr	r1, [r3, #0]
 800253c:	78fb      	ldrb	r3, [r7, #3]
 800253e:	3b01      	subs	r3, #1
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	4302      	orrs	r2, r0
 8002544:	3340      	adds	r3, #64	; 0x40
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	460b      	mov	r3, r1
 8002564:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	887a      	ldrh	r2, [r7, #2]
 800256c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ae:	f043 0303 	orr.w	r3, r3, #3
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0cc      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025d8:	4b68      	ldr	r3, [pc, #416]	; (800277c <HAL_RCC_ClockConfig+0x1b8>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d90c      	bls.n	8002600 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e6:	4b65      	ldr	r3, [pc, #404]	; (800277c <HAL_RCC_ClockConfig+0x1b8>)
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ee:	4b63      	ldr	r3, [pc, #396]	; (800277c <HAL_RCC_ClockConfig+0x1b8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d001      	beq.n	8002600 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0b8      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d020      	beq.n	800264e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002618:	4b59      	ldr	r3, [pc, #356]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	4a58      	ldr	r2, [pc, #352]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002622:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002630:	4b53      	ldr	r3, [pc, #332]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	4a52      	ldr	r2, [pc, #328]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800263a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800263c:	4b50      	ldr	r3, [pc, #320]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	494d      	ldr	r1, [pc, #308]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	4313      	orrs	r3, r2
 800264c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d044      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d107      	bne.n	8002672 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002662:	4b47      	ldr	r3, [pc, #284]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d119      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e07f      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d003      	beq.n	8002682 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800267e:	2b03      	cmp	r3, #3
 8002680:	d107      	bne.n	8002692 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002682:	4b3f      	ldr	r3, [pc, #252]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d109      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e06f      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002692:	4b3b      	ldr	r3, [pc, #236]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e067      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026a2:	4b37      	ldr	r3, [pc, #220]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f023 0203 	bic.w	r2, r3, #3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	4934      	ldr	r1, [pc, #208]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026b4:	f7fe fade 	bl	8000c74 <HAL_GetTick>
 80026b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ba:	e00a      	b.n	80026d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026bc:	f7fe fada 	bl	8000c74 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e04f      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d2:	4b2b      	ldr	r3, [pc, #172]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 020c 	and.w	r2, r3, #12
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d1eb      	bne.n	80026bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026e4:	4b25      	ldr	r3, [pc, #148]	; (800277c <HAL_RCC_ClockConfig+0x1b8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d20c      	bcs.n	800270c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f2:	4b22      	ldr	r3, [pc, #136]	; (800277c <HAL_RCC_ClockConfig+0x1b8>)
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fa:	4b20      	ldr	r3, [pc, #128]	; (800277c <HAL_RCC_ClockConfig+0x1b8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d001      	beq.n	800270c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e032      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002718:	4b19      	ldr	r3, [pc, #100]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	4916      	ldr	r1, [pc, #88]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	4313      	orrs	r3, r2
 8002728:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d009      	beq.n	800274a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002736:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	490e      	ldr	r1, [pc, #56]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	4313      	orrs	r3, r2
 8002748:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800274a:	f000 fbb1 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 800274e:	4602      	mov	r2, r0
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	091b      	lsrs	r3, r3, #4
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	490a      	ldr	r1, [pc, #40]	; (8002784 <HAL_RCC_ClockConfig+0x1c0>)
 800275c:	5ccb      	ldrb	r3, [r1, r3]
 800275e:	fa22 f303 	lsr.w	r3, r2, r3
 8002762:	4a09      	ldr	r2, [pc, #36]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002766:	4b09      	ldr	r3, [pc, #36]	; (800278c <HAL_RCC_ClockConfig+0x1c8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7fe f91a 	bl	80009a4 <HAL_InitTick>

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40023c00 	.word	0x40023c00
 8002780:	40023800 	.word	0x40023800
 8002784:	0800a468 	.word	0x0800a468
 8002788:	20000000 	.word	0x20000000
 800278c:	20000004 	.word	0x20000004

08002790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002794:	4b03      	ldr	r3, [pc, #12]	; (80027a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002796:	681b      	ldr	r3, [r3, #0]
}
 8002798:	4618      	mov	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	20000000 	.word	0x20000000

080027a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027ac:	f7ff fff0 	bl	8002790 <HAL_RCC_GetHCLKFreq>
 80027b0:	4602      	mov	r2, r0
 80027b2:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	0a9b      	lsrs	r3, r3, #10
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	4903      	ldr	r1, [pc, #12]	; (80027cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80027be:	5ccb      	ldrb	r3, [r1, r3]
 80027c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40023800 	.word	0x40023800
 80027cc:	0800a478 	.word	0x0800a478

080027d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027d4:	f7ff ffdc 	bl	8002790 <HAL_RCC_GetHCLKFreq>
 80027d8:	4602      	mov	r2, r0
 80027da:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	0b5b      	lsrs	r3, r3, #13
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	4903      	ldr	r1, [pc, #12]	; (80027f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027e6:	5ccb      	ldrb	r3, [r1, r3]
 80027e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40023800 	.word	0x40023800
 80027f4:	0800a478 	.word	0x0800a478

080027f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	220f      	movs	r2, #15
 8002806:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002808:	4b12      	ldr	r3, [pc, #72]	; (8002854 <HAL_RCC_GetClockConfig+0x5c>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 0203 	and.w	r2, r3, #3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002814:	4b0f      	ldr	r3, [pc, #60]	; (8002854 <HAL_RCC_GetClockConfig+0x5c>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <HAL_RCC_GetClockConfig+0x5c>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800282c:	4b09      	ldr	r3, [pc, #36]	; (8002854 <HAL_RCC_GetClockConfig+0x5c>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	08db      	lsrs	r3, r3, #3
 8002832:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800283a:	4b07      	ldr	r3, [pc, #28]	; (8002858 <HAL_RCC_GetClockConfig+0x60>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 020f 	and.w	r2, r3, #15
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	601a      	str	r2, [r3, #0]
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	40023800 	.word	0x40023800
 8002858:	40023c00 	.word	0x40023c00

0800285c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08c      	sub	sp, #48	; 0x30
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d010      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002894:	4b6f      	ldr	r3, [pc, #444]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002896:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800289a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a2:	496c      	ldr	r1, [pc, #432]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80028b2:	2301      	movs	r3, #1
 80028b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d010      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80028c2:	4b64      	ldr	r3, [pc, #400]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028c8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d0:	4960      	ldr	r1, [pc, #384]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80028e0:	2301      	movs	r3, #1
 80028e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d017      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028f0:	4b58      	ldr	r3, [pc, #352]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	4955      	ldr	r1, [pc, #340]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800290e:	d101      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002910:	2301      	movs	r3, #1
 8002912:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800291c:	2301      	movs	r3, #1
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	2b00      	cmp	r3, #0
 800292a:	d017      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800292c:	4b49      	ldr	r3, [pc, #292]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800292e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002932:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800293a:	4946      	ldr	r1, [pc, #280]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800294a:	d101      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800294c:	2301      	movs	r3, #1
 800294e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002958:	2301      	movs	r3, #1
 800295a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0320 	and.w	r3, r3, #32
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 808a 	beq.w	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	4b39      	ldr	r3, [pc, #228]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	4a38      	ldr	r2, [pc, #224]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002978:	6413      	str	r3, [r2, #64]	; 0x40
 800297a:	4b36      	ldr	r3, [pc, #216]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002982:	60bb      	str	r3, [r7, #8]
 8002984:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002986:	4b34      	ldr	r3, [pc, #208]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a33      	ldr	r2, [pc, #204]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800298c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002990:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002992:	f7fe f96f 	bl	8000c74 <HAL_GetTick>
 8002996:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002998:	e008      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800299a:	f7fe f96b 	bl	8000c74 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e278      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80029ac:	4b2a      	ldr	r3, [pc, #168]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0f0      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029b8:	4b26      	ldr	r3, [pc, #152]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d02f      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d0:	6a3a      	ldr	r2, [r7, #32]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d028      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029d6:	4b1f      	ldr	r3, [pc, #124]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029de:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029e0:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029e6:	4b1d      	ldr	r3, [pc, #116]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80029ec:	4a19      	ldr	r2, [pc, #100]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029f2:	4b18      	ldr	r3, [pc, #96]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d114      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80029fe:	f7fe f939 	bl	8000c74 <HAL_GetTick>
 8002a02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a04:	e00a      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a06:	f7fe f935 	bl	8000c74 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e240      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1c:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0ee      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a34:	d114      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002a36:	4b07      	ldr	r3, [pc, #28]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a4a:	4902      	ldr	r1, [pc, #8]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	608b      	str	r3, [r1, #8]
 8002a50:	e00c      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002a52:	bf00      	nop
 8002a54:	40023800 	.word	0x40023800
 8002a58:	40007000 	.word	0x40007000
 8002a5c:	42470e40 	.word	0x42470e40
 8002a60:	4b4a      	ldr	r3, [pc, #296]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	4a49      	ldr	r2, [pc, #292]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a66:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a6a:	6093      	str	r3, [r2, #8]
 8002a6c:	4b47      	ldr	r3, [pc, #284]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a78:	4944      	ldr	r1, [pc, #272]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d004      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002a90:	4b3f      	ldr	r3, [pc, #252]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002a92:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00a      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002aa0:	4b3a      	ldr	r3, [pc, #232]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aa6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aae:	4937      	ldr	r1, [pc, #220]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00a      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ac2:	4b32      	ldr	r3, [pc, #200]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ac8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ad0:	492e      	ldr	r1, [pc, #184]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d011      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ae4:	4b29      	ldr	r3, [pc, #164]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aea:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af2:	4926      	ldr	r1, [pc, #152]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b02:	d101      	bne.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002b04:	2301      	movs	r3, #1
 8002b06:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00a      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002b14:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b1a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b22:	491a      	ldr	r1, [pc, #104]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d011      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002b36:	4b15      	ldr	r3, [pc, #84]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b3c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b44:	4911      	ldr	r1, [pc, #68]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b54:	d101      	bne.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002b56:	2301      	movs	r3, #1
 8002b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d005      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b68:	f040 80ff 	bne.w	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b6c:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b72:	f7fe f87f 	bl	8000c74 <HAL_GetTick>
 8002b76:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b78:	e00e      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b7a:	f7fe f87b 	bl	8000c74 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d907      	bls.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e188      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	424711e0 	.word	0x424711e0
 8002b94:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b98:	4b7e      	ldr	r3, [pc, #504]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1ea      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d009      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d028      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d124      	bne.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002bcc:	4b71      	ldr	r3, [pc, #452]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bd2:	0c1b      	lsrs	r3, r3, #16
 8002bd4:	f003 0303 	and.w	r3, r3, #3
 8002bd8:	3301      	adds	r3, #1
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002bde:	4b6d      	ldr	r3, [pc, #436]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002be4:	0e1b      	lsrs	r3, r3, #24
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	019b      	lsls	r3, r3, #6
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	085b      	lsrs	r3, r3, #1
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	041b      	lsls	r3, r3, #16
 8002c00:	431a      	orrs	r2, r3
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	061b      	lsls	r3, r3, #24
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	071b      	lsls	r3, r3, #28
 8002c0e:	4961      	ldr	r1, [pc, #388]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d004      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c2a:	d00a      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d035      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c40:	d130      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002c42:	4b54      	ldr	r3, [pc, #336]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c48:	0c1b      	lsrs	r3, r3, #16
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	3301      	adds	r3, #1
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c54:	4b4f      	ldr	r3, [pc, #316]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c5a:	0f1b      	lsrs	r3, r3, #28
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	019b      	lsls	r3, r3, #6
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	085b      	lsrs	r3, r3, #1
 8002c72:	3b01      	subs	r3, #1
 8002c74:	041b      	lsls	r3, r3, #16
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	061b      	lsls	r3, r3, #24
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	071b      	lsls	r3, r3, #28
 8002c84:	4943      	ldr	r1, [pc, #268]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c8c:	4b41      	ldr	r3, [pc, #260]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c92:	f023 021f 	bic.w	r2, r3, #31
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	493d      	ldr	r1, [pc, #244]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d029      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cb8:	d124      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002cba:	4b36      	ldr	r3, [pc, #216]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cc0:	0c1b      	lsrs	r3, r3, #16
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ccc:	4b31      	ldr	r3, [pc, #196]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cd2:	0f1b      	lsrs	r3, r3, #28
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	019b      	lsls	r3, r3, #6
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	085b      	lsrs	r3, r3, #1
 8002cec:	3b01      	subs	r3, #1
 8002cee:	041b      	lsls	r3, r3, #16
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	061b      	lsls	r3, r3, #24
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	071b      	lsls	r3, r3, #28
 8002cfc:	4925      	ldr	r1, [pc, #148]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d016      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	019b      	lsls	r3, r3, #6
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	085b      	lsrs	r3, r3, #1
 8002d22:	3b01      	subs	r3, #1
 8002d24:	041b      	lsls	r3, r3, #16
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	061b      	lsls	r3, r3, #24
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	071b      	lsls	r3, r3, #28
 8002d36:	4917      	ldr	r1, [pc, #92]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d3e:	4b16      	ldr	r3, [pc, #88]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d44:	f7fd ff96 	bl	8000c74 <HAL_GetTick>
 8002d48:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d4c:	f7fd ff92 	bl	8000c74 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e09f      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d5e:	4b0d      	ldr	r3, [pc, #52]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	f040 8095 	bne.w	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d72:	4b0a      	ldr	r3, [pc, #40]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d78:	f7fd ff7c 	bl	8000c74 <HAL_GetTick>
 8002d7c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d7e:	e00f      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002d80:	f7fd ff78 	bl	8000c74 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d908      	bls.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e085      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002d92:	bf00      	nop
 8002d94:	40023800 	.word	0x40023800
 8002d98:	42470068 	.word	0x42470068
 8002d9c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002da0:	4b41      	ldr	r3, [pc, #260]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002da8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dac:	d0e8      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d009      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d02b      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d127      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002dd6:	4b34      	ldr	r3, [pc, #208]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ddc:	0c1b      	lsrs	r3, r3, #16
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	3301      	adds	r3, #1
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	699a      	ldr	r2, [r3, #24]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	019b      	lsls	r3, r3, #6
 8002df2:	431a      	orrs	r2, r3
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	085b      	lsrs	r3, r3, #1
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	041b      	lsls	r3, r3, #16
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	061b      	lsls	r3, r3, #24
 8002e04:	4928      	ldr	r1, [pc, #160]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e0c:	4b26      	ldr	r3, [pc, #152]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e12:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	021b      	lsls	r3, r3, #8
 8002e1e:	4922      	ldr	r1, [pc, #136]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d01d      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e3a:	d118      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e3c:	4b1a      	ldr	r3, [pc, #104]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e42:	0e1b      	lsrs	r3, r3, #24
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	699a      	ldr	r2, [r3, #24]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	019b      	lsls	r3, r3, #6
 8002e54:	431a      	orrs	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	085b      	lsrs	r3, r3, #1
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	041b      	lsls	r3, r3, #16
 8002e60:	431a      	orrs	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	061b      	lsls	r3, r3, #24
 8002e66:	4910      	ldr	r1, [pc, #64]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e6e:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002e70:	2201      	movs	r2, #1
 8002e72:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e74:	f7fd fefe 	bl	8000c74 <HAL_GetTick>
 8002e78:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002e7c:	f7fd fefa 	bl	8000c74 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e007      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e8e:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e9a:	d1ef      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3730      	adds	r7, #48	; 0x30
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	42470070 	.word	0x42470070

08002eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb4:	b088      	sub	sp, #32
 8002eb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ecc:	4bce      	ldr	r3, [pc, #824]	; (8003208 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 030c 	and.w	r3, r3, #12
 8002ed4:	2b0c      	cmp	r3, #12
 8002ed6:	f200 818d 	bhi.w	80031f4 <HAL_RCC_GetSysClockFreq+0x344>
 8002eda:	a201      	add	r2, pc, #4	; (adr r2, 8002ee0 <HAL_RCC_GetSysClockFreq+0x30>)
 8002edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee0:	08002f15 	.word	0x08002f15
 8002ee4:	080031f5 	.word	0x080031f5
 8002ee8:	080031f5 	.word	0x080031f5
 8002eec:	080031f5 	.word	0x080031f5
 8002ef0:	08002f1b 	.word	0x08002f1b
 8002ef4:	080031f5 	.word	0x080031f5
 8002ef8:	080031f5 	.word	0x080031f5
 8002efc:	080031f5 	.word	0x080031f5
 8002f00:	08002f21 	.word	0x08002f21
 8002f04:	080031f5 	.word	0x080031f5
 8002f08:	080031f5 	.word	0x080031f5
 8002f0c:	080031f5 	.word	0x080031f5
 8002f10:	08003095 	.word	0x08003095
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f14:	4bbd      	ldr	r3, [pc, #756]	; (800320c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002f16:	61bb      	str	r3, [r7, #24]
       break;
 8002f18:	e16f      	b.n	80031fa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f1a:	4bbd      	ldr	r3, [pc, #756]	; (8003210 <HAL_RCC_GetSysClockFreq+0x360>)
 8002f1c:	61bb      	str	r3, [r7, #24]
      break;
 8002f1e:	e16c      	b.n	80031fa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f20:	4bb9      	ldr	r3, [pc, #740]	; (8003208 <HAL_RCC_GetSysClockFreq+0x358>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f28:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f2a:	4bb7      	ldr	r3, [pc, #732]	; (8003208 <HAL_RCC_GetSysClockFreq+0x358>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d053      	beq.n	8002fde <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f36:	4bb4      	ldr	r3, [pc, #720]	; (8003208 <HAL_RCC_GetSysClockFreq+0x358>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	099b      	lsrs	r3, r3, #6
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f46:	f04f 0100 	mov.w	r1, #0
 8002f4a:	ea02 0400 	and.w	r4, r2, r0
 8002f4e:	603c      	str	r4, [r7, #0]
 8002f50:	400b      	ands	r3, r1
 8002f52:	607b      	str	r3, [r7, #4]
 8002f54:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f58:	4620      	mov	r0, r4
 8002f5a:	4629      	mov	r1, r5
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	f04f 0300 	mov.w	r3, #0
 8002f64:	014b      	lsls	r3, r1, #5
 8002f66:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f6a:	0142      	lsls	r2, r0, #5
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4623      	mov	r3, r4
 8002f72:	1ac0      	subs	r0, r0, r3
 8002f74:	462b      	mov	r3, r5
 8002f76:	eb61 0103 	sbc.w	r1, r1, r3
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	018b      	lsls	r3, r1, #6
 8002f84:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f88:	0182      	lsls	r2, r0, #6
 8002f8a:	1a12      	subs	r2, r2, r0
 8002f8c:	eb63 0301 	sbc.w	r3, r3, r1
 8002f90:	f04f 0000 	mov.w	r0, #0
 8002f94:	f04f 0100 	mov.w	r1, #0
 8002f98:	00d9      	lsls	r1, r3, #3
 8002f9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f9e:	00d0      	lsls	r0, r2, #3
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4621      	mov	r1, r4
 8002fa6:	1852      	adds	r2, r2, r1
 8002fa8:	4629      	mov	r1, r5
 8002faa:	eb43 0101 	adc.w	r1, r3, r1
 8002fae:	460b      	mov	r3, r1
 8002fb0:	f04f 0000 	mov.w	r0, #0
 8002fb4:	f04f 0100 	mov.w	r1, #0
 8002fb8:	0259      	lsls	r1, r3, #9
 8002fba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002fbe:	0250      	lsls	r0, r2, #9
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	f7fd f91e 	bl	8000210 <__aeabi_uldivmod>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	4613      	mov	r3, r2
 8002fda:	61fb      	str	r3, [r7, #28]
 8002fdc:	e04c      	b.n	8003078 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fde:	4b8a      	ldr	r3, [pc, #552]	; (8003208 <HAL_RCC_GetSysClockFreq+0x358>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	099b      	lsrs	r3, r3, #6
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	f04f 0300 	mov.w	r3, #0
 8002fea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002fee:	f04f 0100 	mov.w	r1, #0
 8002ff2:	ea02 0a00 	and.w	sl, r2, r0
 8002ff6:	ea03 0b01 	and.w	fp, r3, r1
 8002ffa:	4650      	mov	r0, sl
 8002ffc:	4659      	mov	r1, fp
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	014b      	lsls	r3, r1, #5
 8003008:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800300c:	0142      	lsls	r2, r0, #5
 800300e:	4610      	mov	r0, r2
 8003010:	4619      	mov	r1, r3
 8003012:	ebb0 000a 	subs.w	r0, r0, sl
 8003016:	eb61 010b 	sbc.w	r1, r1, fp
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	018b      	lsls	r3, r1, #6
 8003024:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003028:	0182      	lsls	r2, r0, #6
 800302a:	1a12      	subs	r2, r2, r0
 800302c:	eb63 0301 	sbc.w	r3, r3, r1
 8003030:	f04f 0000 	mov.w	r0, #0
 8003034:	f04f 0100 	mov.w	r1, #0
 8003038:	00d9      	lsls	r1, r3, #3
 800303a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800303e:	00d0      	lsls	r0, r2, #3
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	eb12 020a 	adds.w	r2, r2, sl
 8003048:	eb43 030b 	adc.w	r3, r3, fp
 800304c:	f04f 0000 	mov.w	r0, #0
 8003050:	f04f 0100 	mov.w	r1, #0
 8003054:	0299      	lsls	r1, r3, #10
 8003056:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800305a:	0290      	lsls	r0, r2, #10
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4610      	mov	r0, r2
 8003062:	4619      	mov	r1, r3
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	461a      	mov	r2, r3
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	f7fd f8d0 	bl	8000210 <__aeabi_uldivmod>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4613      	mov	r3, r2
 8003076:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003078:	4b63      	ldr	r3, [pc, #396]	; (8003208 <HAL_RCC_GetSysClockFreq+0x358>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	0c1b      	lsrs	r3, r3, #16
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	3301      	adds	r3, #1
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003088:	69fa      	ldr	r2, [r7, #28]
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003090:	61bb      	str	r3, [r7, #24]
      break;
 8003092:	e0b2      	b.n	80031fa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003094:	4b5c      	ldr	r3, [pc, #368]	; (8003208 <HAL_RCC_GetSysClockFreq+0x358>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800309c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800309e:	4b5a      	ldr	r3, [pc, #360]	; (8003208 <HAL_RCC_GetSysClockFreq+0x358>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d04d      	beq.n	8003146 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030aa:	4b57      	ldr	r3, [pc, #348]	; (8003208 <HAL_RCC_GetSysClockFreq+0x358>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	099b      	lsrs	r3, r3, #6
 80030b0:	461a      	mov	r2, r3
 80030b2:	f04f 0300 	mov.w	r3, #0
 80030b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80030ba:	f04f 0100 	mov.w	r1, #0
 80030be:	ea02 0800 	and.w	r8, r2, r0
 80030c2:	ea03 0901 	and.w	r9, r3, r1
 80030c6:	4640      	mov	r0, r8
 80030c8:	4649      	mov	r1, r9
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	014b      	lsls	r3, r1, #5
 80030d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030d8:	0142      	lsls	r2, r0, #5
 80030da:	4610      	mov	r0, r2
 80030dc:	4619      	mov	r1, r3
 80030de:	ebb0 0008 	subs.w	r0, r0, r8
 80030e2:	eb61 0109 	sbc.w	r1, r1, r9
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	018b      	lsls	r3, r1, #6
 80030f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030f4:	0182      	lsls	r2, r0, #6
 80030f6:	1a12      	subs	r2, r2, r0
 80030f8:	eb63 0301 	sbc.w	r3, r3, r1
 80030fc:	f04f 0000 	mov.w	r0, #0
 8003100:	f04f 0100 	mov.w	r1, #0
 8003104:	00d9      	lsls	r1, r3, #3
 8003106:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800310a:	00d0      	lsls	r0, r2, #3
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	eb12 0208 	adds.w	r2, r2, r8
 8003114:	eb43 0309 	adc.w	r3, r3, r9
 8003118:	f04f 0000 	mov.w	r0, #0
 800311c:	f04f 0100 	mov.w	r1, #0
 8003120:	0259      	lsls	r1, r3, #9
 8003122:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003126:	0250      	lsls	r0, r2, #9
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	4610      	mov	r0, r2
 800312e:	4619      	mov	r1, r3
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	461a      	mov	r2, r3
 8003134:	f04f 0300 	mov.w	r3, #0
 8003138:	f7fd f86a 	bl	8000210 <__aeabi_uldivmod>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4613      	mov	r3, r2
 8003142:	61fb      	str	r3, [r7, #28]
 8003144:	e04a      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003146:	4b30      	ldr	r3, [pc, #192]	; (8003208 <HAL_RCC_GetSysClockFreq+0x358>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	099b      	lsrs	r3, r3, #6
 800314c:	461a      	mov	r2, r3
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003156:	f04f 0100 	mov.w	r1, #0
 800315a:	ea02 0400 	and.w	r4, r2, r0
 800315e:	ea03 0501 	and.w	r5, r3, r1
 8003162:	4620      	mov	r0, r4
 8003164:	4629      	mov	r1, r5
 8003166:	f04f 0200 	mov.w	r2, #0
 800316a:	f04f 0300 	mov.w	r3, #0
 800316e:	014b      	lsls	r3, r1, #5
 8003170:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003174:	0142      	lsls	r2, r0, #5
 8003176:	4610      	mov	r0, r2
 8003178:	4619      	mov	r1, r3
 800317a:	1b00      	subs	r0, r0, r4
 800317c:	eb61 0105 	sbc.w	r1, r1, r5
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f04f 0300 	mov.w	r3, #0
 8003188:	018b      	lsls	r3, r1, #6
 800318a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800318e:	0182      	lsls	r2, r0, #6
 8003190:	1a12      	subs	r2, r2, r0
 8003192:	eb63 0301 	sbc.w	r3, r3, r1
 8003196:	f04f 0000 	mov.w	r0, #0
 800319a:	f04f 0100 	mov.w	r1, #0
 800319e:	00d9      	lsls	r1, r3, #3
 80031a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031a4:	00d0      	lsls	r0, r2, #3
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	1912      	adds	r2, r2, r4
 80031ac:	eb45 0303 	adc.w	r3, r5, r3
 80031b0:	f04f 0000 	mov.w	r0, #0
 80031b4:	f04f 0100 	mov.w	r1, #0
 80031b8:	0299      	lsls	r1, r3, #10
 80031ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80031be:	0290      	lsls	r0, r2, #10
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4610      	mov	r0, r2
 80031c6:	4619      	mov	r1, r3
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	461a      	mov	r2, r3
 80031cc:	f04f 0300 	mov.w	r3, #0
 80031d0:	f7fd f81e 	bl	8000210 <__aeabi_uldivmod>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4613      	mov	r3, r2
 80031da:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80031dc:	4b0a      	ldr	r3, [pc, #40]	; (8003208 <HAL_RCC_GetSysClockFreq+0x358>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	0f1b      	lsrs	r3, r3, #28
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80031e8:	69fa      	ldr	r2, [r7, #28]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f0:	61bb      	str	r3, [r7, #24]
      break;
 80031f2:	e002      	b.n	80031fa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031f4:	4b05      	ldr	r3, [pc, #20]	; (800320c <HAL_RCC_GetSysClockFreq+0x35c>)
 80031f6:	61bb      	str	r3, [r7, #24]
      break;
 80031f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031fa:	69bb      	ldr	r3, [r7, #24]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3720      	adds	r7, #32
 8003200:	46bd      	mov	sp, r7
 8003202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003206:	bf00      	nop
 8003208:	40023800 	.word	0x40023800
 800320c:	00f42400 	.word	0x00f42400
 8003210:	007a1200 	.word	0x007a1200

08003214 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e28d      	b.n	8003742 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 8083 	beq.w	800333a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003234:	4b94      	ldr	r3, [pc, #592]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 030c 	and.w	r3, r3, #12
 800323c:	2b04      	cmp	r3, #4
 800323e:	d019      	beq.n	8003274 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003240:	4b91      	ldr	r3, [pc, #580]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003248:	2b08      	cmp	r3, #8
 800324a:	d106      	bne.n	800325a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800324c:	4b8e      	ldr	r3, [pc, #568]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003254:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003258:	d00c      	beq.n	8003274 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800325a:	4b8b      	ldr	r3, [pc, #556]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003262:	2b0c      	cmp	r3, #12
 8003264:	d112      	bne.n	800328c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003266:	4b88      	ldr	r3, [pc, #544]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003272:	d10b      	bne.n	800328c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003274:	4b84      	ldr	r3, [pc, #528]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d05b      	beq.n	8003338 <HAL_RCC_OscConfig+0x124>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d157      	bne.n	8003338 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e25a      	b.n	8003742 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003294:	d106      	bne.n	80032a4 <HAL_RCC_OscConfig+0x90>
 8003296:	4b7c      	ldr	r3, [pc, #496]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a7b      	ldr	r2, [pc, #492]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 800329c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	e01d      	b.n	80032e0 <HAL_RCC_OscConfig+0xcc>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032ac:	d10c      	bne.n	80032c8 <HAL_RCC_OscConfig+0xb4>
 80032ae:	4b76      	ldr	r3, [pc, #472]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a75      	ldr	r2, [pc, #468]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 80032b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	4b73      	ldr	r3, [pc, #460]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a72      	ldr	r2, [pc, #456]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 80032c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	e00b      	b.n	80032e0 <HAL_RCC_OscConfig+0xcc>
 80032c8:	4b6f      	ldr	r3, [pc, #444]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a6e      	ldr	r2, [pc, #440]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 80032ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032d2:	6013      	str	r3, [r2, #0]
 80032d4:	4b6c      	ldr	r3, [pc, #432]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a6b      	ldr	r2, [pc, #428]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 80032da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d013      	beq.n	8003310 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e8:	f7fd fcc4 	bl	8000c74 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032f0:	f7fd fcc0 	bl	8000c74 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b64      	cmp	r3, #100	; 0x64
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e21f      	b.n	8003742 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003302:	4b61      	ldr	r3, [pc, #388]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0f0      	beq.n	80032f0 <HAL_RCC_OscConfig+0xdc>
 800330e:	e014      	b.n	800333a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003310:	f7fd fcb0 	bl	8000c74 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003318:	f7fd fcac 	bl	8000c74 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b64      	cmp	r3, #100	; 0x64
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e20b      	b.n	8003742 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332a:	4b57      	ldr	r3, [pc, #348]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f0      	bne.n	8003318 <HAL_RCC_OscConfig+0x104>
 8003336:	e000      	b.n	800333a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d06f      	beq.n	8003426 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003346:	4b50      	ldr	r3, [pc, #320]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 030c 	and.w	r3, r3, #12
 800334e:	2b00      	cmp	r3, #0
 8003350:	d017      	beq.n	8003382 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003352:	4b4d      	ldr	r3, [pc, #308]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800335a:	2b08      	cmp	r3, #8
 800335c:	d105      	bne.n	800336a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800335e:	4b4a      	ldr	r3, [pc, #296]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00b      	beq.n	8003382 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800336a:	4b47      	ldr	r3, [pc, #284]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003372:	2b0c      	cmp	r3, #12
 8003374:	d11c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003376:	4b44      	ldr	r3, [pc, #272]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d116      	bne.n	80033b0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003382:	4b41      	ldr	r3, [pc, #260]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d005      	beq.n	800339a <HAL_RCC_OscConfig+0x186>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d001      	beq.n	800339a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e1d3      	b.n	8003742 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800339a:	4b3b      	ldr	r3, [pc, #236]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	4937      	ldr	r1, [pc, #220]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ae:	e03a      	b.n	8003426 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d020      	beq.n	80033fa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033b8:	4b34      	ldr	r3, [pc, #208]	; (800348c <HAL_RCC_OscConfig+0x278>)
 80033ba:	2201      	movs	r2, #1
 80033bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033be:	f7fd fc59 	bl	8000c74 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033c6:	f7fd fc55 	bl	8000c74 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e1b4      	b.n	8003742 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d8:	4b2b      	ldr	r3, [pc, #172]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0f0      	beq.n	80033c6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e4:	4b28      	ldr	r3, [pc, #160]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	4925      	ldr	r1, [pc, #148]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	600b      	str	r3, [r1, #0]
 80033f8:	e015      	b.n	8003426 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033fa:	4b24      	ldr	r3, [pc, #144]	; (800348c <HAL_RCC_OscConfig+0x278>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003400:	f7fd fc38 	bl	8000c74 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003408:	f7fd fc34 	bl	8000c74 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e193      	b.n	8003742 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800341a:	4b1b      	ldr	r3, [pc, #108]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f0      	bne.n	8003408 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b00      	cmp	r3, #0
 8003430:	d036      	beq.n	80034a0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d016      	beq.n	8003468 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800343a:	4b15      	ldr	r3, [pc, #84]	; (8003490 <HAL_RCC_OscConfig+0x27c>)
 800343c:	2201      	movs	r2, #1
 800343e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003440:	f7fd fc18 	bl	8000c74 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003448:	f7fd fc14 	bl	8000c74 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e173      	b.n	8003742 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800345a:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 800345c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f0      	beq.n	8003448 <HAL_RCC_OscConfig+0x234>
 8003466:	e01b      	b.n	80034a0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003468:	4b09      	ldr	r3, [pc, #36]	; (8003490 <HAL_RCC_OscConfig+0x27c>)
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346e:	f7fd fc01 	bl	8000c74 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003474:	e00e      	b.n	8003494 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003476:	f7fd fbfd 	bl	8000c74 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d907      	bls.n	8003494 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e15c      	b.n	8003742 <HAL_RCC_OscConfig+0x52e>
 8003488:	40023800 	.word	0x40023800
 800348c:	42470000 	.word	0x42470000
 8003490:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003494:	4b8a      	ldr	r3, [pc, #552]	; (80036c0 <HAL_RCC_OscConfig+0x4ac>)
 8003496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1ea      	bne.n	8003476 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 8097 	beq.w	80035dc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ae:	2300      	movs	r3, #0
 80034b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034b2:	4b83      	ldr	r3, [pc, #524]	; (80036c0 <HAL_RCC_OscConfig+0x4ac>)
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10f      	bne.n	80034de <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	60bb      	str	r3, [r7, #8]
 80034c2:	4b7f      	ldr	r3, [pc, #508]	; (80036c0 <HAL_RCC_OscConfig+0x4ac>)
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	4a7e      	ldr	r2, [pc, #504]	; (80036c0 <HAL_RCC_OscConfig+0x4ac>)
 80034c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034cc:	6413      	str	r3, [r2, #64]	; 0x40
 80034ce:	4b7c      	ldr	r3, [pc, #496]	; (80036c0 <HAL_RCC_OscConfig+0x4ac>)
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d6:	60bb      	str	r3, [r7, #8]
 80034d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034da:	2301      	movs	r3, #1
 80034dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034de:	4b79      	ldr	r3, [pc, #484]	; (80036c4 <HAL_RCC_OscConfig+0x4b0>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d118      	bne.n	800351c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ea:	4b76      	ldr	r3, [pc, #472]	; (80036c4 <HAL_RCC_OscConfig+0x4b0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a75      	ldr	r2, [pc, #468]	; (80036c4 <HAL_RCC_OscConfig+0x4b0>)
 80034f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034f6:	f7fd fbbd 	bl	8000c74 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034fe:	f7fd fbb9 	bl	8000c74 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e118      	b.n	8003742 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003510:	4b6c      	ldr	r3, [pc, #432]	; (80036c4 <HAL_RCC_OscConfig+0x4b0>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0f0      	beq.n	80034fe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d106      	bne.n	8003532 <HAL_RCC_OscConfig+0x31e>
 8003524:	4b66      	ldr	r3, [pc, #408]	; (80036c0 <HAL_RCC_OscConfig+0x4ac>)
 8003526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003528:	4a65      	ldr	r2, [pc, #404]	; (80036c0 <HAL_RCC_OscConfig+0x4ac>)
 800352a:	f043 0301 	orr.w	r3, r3, #1
 800352e:	6713      	str	r3, [r2, #112]	; 0x70
 8003530:	e01c      	b.n	800356c <HAL_RCC_OscConfig+0x358>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	2b05      	cmp	r3, #5
 8003538:	d10c      	bne.n	8003554 <HAL_RCC_OscConfig+0x340>
 800353a:	4b61      	ldr	r3, [pc, #388]	; (80036c0 <HAL_RCC_OscConfig+0x4ac>)
 800353c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353e:	4a60      	ldr	r2, [pc, #384]	; (80036c0 <HAL_RCC_OscConfig+0x4ac>)
 8003540:	f043 0304 	orr.w	r3, r3, #4
 8003544:	6713      	str	r3, [r2, #112]	; 0x70
 8003546:	4b5e      	ldr	r3, [pc, #376]	; (80036c0 <HAL_RCC_OscConfig+0x4ac>)
 8003548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354a:	4a5d      	ldr	r2, [pc, #372]	; (80036c0 <HAL_RCC_OscConfig+0x4ac>)
 800354c:	f043 0301 	orr.w	r3, r3, #1
 8003550:	6713      	str	r3, [r2, #112]	; 0x70
 8003552:	e00b      	b.n	800356c <HAL_RCC_OscConfig+0x358>
 8003554:	4b5a      	ldr	r3, [pc, #360]	; (80036c0 <HAL_RCC_OscConfig+0x4ac>)
 8003556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003558:	4a59      	ldr	r2, [pc, #356]	; (80036c0 <HAL_RCC_OscConfig+0x4ac>)
 800355a:	f023 0301 	bic.w	r3, r3, #1
 800355e:	6713      	str	r3, [r2, #112]	; 0x70
 8003560:	4b57      	ldr	r3, [pc, #348]	; (80036c0 <HAL_RCC_OscConfig+0x4ac>)
 8003562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003564:	4a56      	ldr	r2, [pc, #344]	; (80036c0 <HAL_RCC_OscConfig+0x4ac>)
 8003566:	f023 0304 	bic.w	r3, r3, #4
 800356a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d015      	beq.n	80035a0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003574:	f7fd fb7e 	bl	8000c74 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800357a:	e00a      	b.n	8003592 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800357c:	f7fd fb7a 	bl	8000c74 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	f241 3288 	movw	r2, #5000	; 0x1388
 800358a:	4293      	cmp	r3, r2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e0d7      	b.n	8003742 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003592:	4b4b      	ldr	r3, [pc, #300]	; (80036c0 <HAL_RCC_OscConfig+0x4ac>)
 8003594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0ee      	beq.n	800357c <HAL_RCC_OscConfig+0x368>
 800359e:	e014      	b.n	80035ca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a0:	f7fd fb68 	bl	8000c74 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a6:	e00a      	b.n	80035be <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035a8:	f7fd fb64 	bl	8000c74 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e0c1      	b.n	8003742 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035be:	4b40      	ldr	r3, [pc, #256]	; (80036c0 <HAL_RCC_OscConfig+0x4ac>)
 80035c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1ee      	bne.n	80035a8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035ca:	7dfb      	ldrb	r3, [r7, #23]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d105      	bne.n	80035dc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d0:	4b3b      	ldr	r3, [pc, #236]	; (80036c0 <HAL_RCC_OscConfig+0x4ac>)
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	4a3a      	ldr	r2, [pc, #232]	; (80036c0 <HAL_RCC_OscConfig+0x4ac>)
 80035d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 80ad 	beq.w	8003740 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035e6:	4b36      	ldr	r3, [pc, #216]	; (80036c0 <HAL_RCC_OscConfig+0x4ac>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 030c 	and.w	r3, r3, #12
 80035ee:	2b08      	cmp	r3, #8
 80035f0:	d060      	beq.n	80036b4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d145      	bne.n	8003686 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035fa:	4b33      	ldr	r3, [pc, #204]	; (80036c8 <HAL_RCC_OscConfig+0x4b4>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003600:	f7fd fb38 	bl	8000c74 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003608:	f7fd fb34 	bl	8000c74 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e093      	b.n	8003742 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800361a:	4b29      	ldr	r3, [pc, #164]	; (80036c0 <HAL_RCC_OscConfig+0x4ac>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f0      	bne.n	8003608 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69da      	ldr	r2, [r3, #28]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	019b      	lsls	r3, r3, #6
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363c:	085b      	lsrs	r3, r3, #1
 800363e:	3b01      	subs	r3, #1
 8003640:	041b      	lsls	r3, r3, #16
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003648:	061b      	lsls	r3, r3, #24
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003650:	071b      	lsls	r3, r3, #28
 8003652:	491b      	ldr	r1, [pc, #108]	; (80036c0 <HAL_RCC_OscConfig+0x4ac>)
 8003654:	4313      	orrs	r3, r2
 8003656:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003658:	4b1b      	ldr	r3, [pc, #108]	; (80036c8 <HAL_RCC_OscConfig+0x4b4>)
 800365a:	2201      	movs	r2, #1
 800365c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365e:	f7fd fb09 	bl	8000c74 <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003666:	f7fd fb05 	bl	8000c74 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e064      	b.n	8003742 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003678:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <HAL_RCC_OscConfig+0x4ac>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0f0      	beq.n	8003666 <HAL_RCC_OscConfig+0x452>
 8003684:	e05c      	b.n	8003740 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003686:	4b10      	ldr	r3, [pc, #64]	; (80036c8 <HAL_RCC_OscConfig+0x4b4>)
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368c:	f7fd faf2 	bl	8000c74 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003694:	f7fd faee 	bl	8000c74 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e04d      	b.n	8003742 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a6:	4b06      	ldr	r3, [pc, #24]	; (80036c0 <HAL_RCC_OscConfig+0x4ac>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f0      	bne.n	8003694 <HAL_RCC_OscConfig+0x480>
 80036b2:	e045      	b.n	8003740 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d107      	bne.n	80036cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e040      	b.n	8003742 <HAL_RCC_OscConfig+0x52e>
 80036c0:	40023800 	.word	0x40023800
 80036c4:	40007000 	.word	0x40007000
 80036c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036cc:	4b1f      	ldr	r3, [pc, #124]	; (800374c <HAL_RCC_OscConfig+0x538>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d030      	beq.n	800373c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d129      	bne.n	800373c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d122      	bne.n	800373c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036fc:	4013      	ands	r3, r2
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003702:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003704:	4293      	cmp	r3, r2
 8003706:	d119      	bne.n	800373c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003712:	085b      	lsrs	r3, r3, #1
 8003714:	3b01      	subs	r3, #1
 8003716:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003718:	429a      	cmp	r2, r3
 800371a:	d10f      	bne.n	800373c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003726:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003728:	429a      	cmp	r2, r3
 800372a:	d107      	bne.n	800373c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003738:	429a      	cmp	r2, r3
 800373a:	d001      	beq.n	8003740 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e000      	b.n	8003742 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40023800 	.word	0x40023800

08003750 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e041      	b.n	80037e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d106      	bne.n	800377c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f839 	bl	80037ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3304      	adds	r3, #4
 800378c:	4619      	mov	r1, r3
 800378e:	4610      	mov	r0, r2
 8003790:	f000 f9d8 	bl	8003b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b083      	sub	sp, #12
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
	...

08003804 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b01      	cmp	r3, #1
 8003816:	d001      	beq.n	800381c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e04e      	b.n	80038ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0201 	orr.w	r2, r2, #1
 8003832:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a23      	ldr	r2, [pc, #140]	; (80038c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d022      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x80>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003846:	d01d      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x80>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a1f      	ldr	r2, [pc, #124]	; (80038cc <HAL_TIM_Base_Start_IT+0xc8>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d018      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x80>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a1e      	ldr	r2, [pc, #120]	; (80038d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d013      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x80>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a1c      	ldr	r2, [pc, #112]	; (80038d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d00e      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x80>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a1b      	ldr	r2, [pc, #108]	; (80038d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d009      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x80>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a19      	ldr	r2, [pc, #100]	; (80038dc <HAL_TIM_Base_Start_IT+0xd8>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d004      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x80>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a18      	ldr	r2, [pc, #96]	; (80038e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d111      	bne.n	80038a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2b06      	cmp	r3, #6
 8003894:	d010      	beq.n	80038b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f042 0201 	orr.w	r2, r2, #1
 80038a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a6:	e007      	b.n	80038b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0201 	orr.w	r2, r2, #1
 80038b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40010000 	.word	0x40010000
 80038cc:	40000400 	.word	0x40000400
 80038d0:	40000800 	.word	0x40000800
 80038d4:	40000c00 	.word	0x40000c00
 80038d8:	40010400 	.word	0x40010400
 80038dc:	40014000 	.word	0x40014000
 80038e0:	40001800 	.word	0x40001800

080038e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d122      	bne.n	8003940 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b02      	cmp	r3, #2
 8003906:	d11b      	bne.n	8003940 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f06f 0202 	mvn.w	r2, #2
 8003910:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f8ee 	bl	8003b08 <HAL_TIM_IC_CaptureCallback>
 800392c:	e005      	b.n	800393a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f8e0 	bl	8003af4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 f8f1 	bl	8003b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b04      	cmp	r3, #4
 800394c:	d122      	bne.n	8003994 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b04      	cmp	r3, #4
 800395a:	d11b      	bne.n	8003994 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f06f 0204 	mvn.w	r2, #4
 8003964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2202      	movs	r2, #2
 800396a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f8c4 	bl	8003b08 <HAL_TIM_IC_CaptureCallback>
 8003980:	e005      	b.n	800398e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f8b6 	bl	8003af4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f8c7 	bl	8003b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b08      	cmp	r3, #8
 80039a0:	d122      	bne.n	80039e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f003 0308 	and.w	r3, r3, #8
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d11b      	bne.n	80039e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f06f 0208 	mvn.w	r2, #8
 80039b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2204      	movs	r2, #4
 80039be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f89a 	bl	8003b08 <HAL_TIM_IC_CaptureCallback>
 80039d4:	e005      	b.n	80039e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f88c 	bl	8003af4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f89d 	bl	8003b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f003 0310 	and.w	r3, r3, #16
 80039f2:	2b10      	cmp	r3, #16
 80039f4:	d122      	bne.n	8003a3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f003 0310 	and.w	r3, r3, #16
 8003a00:	2b10      	cmp	r3, #16
 8003a02:	d11b      	bne.n	8003a3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f06f 0210 	mvn.w	r2, #16
 8003a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2208      	movs	r2, #8
 8003a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f870 	bl	8003b08 <HAL_TIM_IC_CaptureCallback>
 8003a28:	e005      	b.n	8003a36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f862 	bl	8003af4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f873 	bl	8003b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d10e      	bne.n	8003a68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d107      	bne.n	8003a68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f06f 0201 	mvn.w	r2, #1
 8003a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7fc ff5e 	bl	8000924 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a72:	2b80      	cmp	r3, #128	; 0x80
 8003a74:	d10e      	bne.n	8003a94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a80:	2b80      	cmp	r3, #128	; 0x80
 8003a82:	d107      	bne.n	8003a94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f902 	bl	8003c98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9e:	2b40      	cmp	r3, #64	; 0x40
 8003aa0:	d10e      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aac:	2b40      	cmp	r3, #64	; 0x40
 8003aae:	d107      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f838 	bl	8003b30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f003 0320 	and.w	r3, r3, #32
 8003aca:	2b20      	cmp	r3, #32
 8003acc:	d10e      	bne.n	8003aec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f003 0320 	and.w	r3, r3, #32
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d107      	bne.n	8003aec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f06f 0220 	mvn.w	r2, #32
 8003ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f8cc 	bl	8003c84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003aec:	bf00      	nop
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a40      	ldr	r2, [pc, #256]	; (8003c58 <TIM_Base_SetConfig+0x114>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d013      	beq.n	8003b84 <TIM_Base_SetConfig+0x40>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b62:	d00f      	beq.n	8003b84 <TIM_Base_SetConfig+0x40>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a3d      	ldr	r2, [pc, #244]	; (8003c5c <TIM_Base_SetConfig+0x118>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d00b      	beq.n	8003b84 <TIM_Base_SetConfig+0x40>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a3c      	ldr	r2, [pc, #240]	; (8003c60 <TIM_Base_SetConfig+0x11c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d007      	beq.n	8003b84 <TIM_Base_SetConfig+0x40>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a3b      	ldr	r2, [pc, #236]	; (8003c64 <TIM_Base_SetConfig+0x120>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d003      	beq.n	8003b84 <TIM_Base_SetConfig+0x40>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a3a      	ldr	r2, [pc, #232]	; (8003c68 <TIM_Base_SetConfig+0x124>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d108      	bne.n	8003b96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a2f      	ldr	r2, [pc, #188]	; (8003c58 <TIM_Base_SetConfig+0x114>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d02b      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba4:	d027      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a2c      	ldr	r2, [pc, #176]	; (8003c5c <TIM_Base_SetConfig+0x118>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d023      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a2b      	ldr	r2, [pc, #172]	; (8003c60 <TIM_Base_SetConfig+0x11c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d01f      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a2a      	ldr	r2, [pc, #168]	; (8003c64 <TIM_Base_SetConfig+0x120>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d01b      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a29      	ldr	r2, [pc, #164]	; (8003c68 <TIM_Base_SetConfig+0x124>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d017      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a28      	ldr	r2, [pc, #160]	; (8003c6c <TIM_Base_SetConfig+0x128>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d013      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a27      	ldr	r2, [pc, #156]	; (8003c70 <TIM_Base_SetConfig+0x12c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d00f      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a26      	ldr	r2, [pc, #152]	; (8003c74 <TIM_Base_SetConfig+0x130>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00b      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a25      	ldr	r2, [pc, #148]	; (8003c78 <TIM_Base_SetConfig+0x134>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d007      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a24      	ldr	r2, [pc, #144]	; (8003c7c <TIM_Base_SetConfig+0x138>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d003      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a23      	ldr	r2, [pc, #140]	; (8003c80 <TIM_Base_SetConfig+0x13c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d108      	bne.n	8003c08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a0a      	ldr	r2, [pc, #40]	; (8003c58 <TIM_Base_SetConfig+0x114>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d003      	beq.n	8003c3c <TIM_Base_SetConfig+0xf8>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a0c      	ldr	r2, [pc, #48]	; (8003c68 <TIM_Base_SetConfig+0x124>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d103      	bne.n	8003c44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	691a      	ldr	r2, [r3, #16]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	615a      	str	r2, [r3, #20]
}
 8003c4a:	bf00      	nop
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40010000 	.word	0x40010000
 8003c5c:	40000400 	.word	0x40000400
 8003c60:	40000800 	.word	0x40000800
 8003c64:	40000c00 	.word	0x40000c00
 8003c68:	40010400 	.word	0x40010400
 8003c6c:	40014000 	.word	0x40014000
 8003c70:	40014400 	.word	0x40014400
 8003c74:	40014800 	.word	0x40014800
 8003c78:	40001800 	.word	0x40001800
 8003c7c:	40001c00 	.word	0x40001c00
 8003c80:	40002000 	.word	0x40002000

08003c84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e03f      	b.n	8003d3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d106      	bne.n	8003cd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7fc ff26 	bl	8000b24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2224      	movs	r2, #36	; 0x24
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f829 	bl	8003d48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	695a      	ldr	r2, [r3, #20]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
	...

08003d48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d4c:	b09f      	sub	sp, #124	; 0x7c
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d5e:	68d9      	ldr	r1, [r3, #12]
 8003d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	ea40 0301 	orr.w	r3, r0, r1
 8003d68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d6c:	689a      	ldr	r2, [r3, #8]
 8003d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	431a      	orrs	r2, r3
 8003d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d8c:	f021 010c 	bic.w	r1, r1, #12
 8003d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d96:	430b      	orrs	r3, r1
 8003d98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da6:	6999      	ldr	r1, [r3, #24]
 8003da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	ea40 0301 	orr.w	r3, r0, r1
 8003db0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	4bc5      	ldr	r3, [pc, #788]	; (80040cc <UART_SetConfig+0x384>)
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d004      	beq.n	8003dc6 <UART_SetConfig+0x7e>
 8003dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	4bc3      	ldr	r3, [pc, #780]	; (80040d0 <UART_SetConfig+0x388>)
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d103      	bne.n	8003dce <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dc6:	f7fe fd03 	bl	80027d0 <HAL_RCC_GetPCLK2Freq>
 8003dca:	6778      	str	r0, [r7, #116]	; 0x74
 8003dcc:	e002      	b.n	8003dd4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dce:	f7fe fceb 	bl	80027a8 <HAL_RCC_GetPCLK1Freq>
 8003dd2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ddc:	f040 80b6 	bne.w	8003f4c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003de0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003de2:	461c      	mov	r4, r3
 8003de4:	f04f 0500 	mov.w	r5, #0
 8003de8:	4622      	mov	r2, r4
 8003dea:	462b      	mov	r3, r5
 8003dec:	1891      	adds	r1, r2, r2
 8003dee:	6439      	str	r1, [r7, #64]	; 0x40
 8003df0:	415b      	adcs	r3, r3
 8003df2:	647b      	str	r3, [r7, #68]	; 0x44
 8003df4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003df8:	1912      	adds	r2, r2, r4
 8003dfa:	eb45 0303 	adc.w	r3, r5, r3
 8003dfe:	f04f 0000 	mov.w	r0, #0
 8003e02:	f04f 0100 	mov.w	r1, #0
 8003e06:	00d9      	lsls	r1, r3, #3
 8003e08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e0c:	00d0      	lsls	r0, r2, #3
 8003e0e:	4602      	mov	r2, r0
 8003e10:	460b      	mov	r3, r1
 8003e12:	1911      	adds	r1, r2, r4
 8003e14:	6639      	str	r1, [r7, #96]	; 0x60
 8003e16:	416b      	adcs	r3, r5
 8003e18:	667b      	str	r3, [r7, #100]	; 0x64
 8003e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	1891      	adds	r1, r2, r2
 8003e26:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e28:	415b      	adcs	r3, r3
 8003e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e30:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003e34:	f7fc f9ec 	bl	8000210 <__aeabi_uldivmod>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	4ba5      	ldr	r3, [pc, #660]	; (80040d4 <UART_SetConfig+0x38c>)
 8003e3e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	011e      	lsls	r6, r3, #4
 8003e46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e48:	461c      	mov	r4, r3
 8003e4a:	f04f 0500 	mov.w	r5, #0
 8003e4e:	4622      	mov	r2, r4
 8003e50:	462b      	mov	r3, r5
 8003e52:	1891      	adds	r1, r2, r2
 8003e54:	6339      	str	r1, [r7, #48]	; 0x30
 8003e56:	415b      	adcs	r3, r3
 8003e58:	637b      	str	r3, [r7, #52]	; 0x34
 8003e5a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003e5e:	1912      	adds	r2, r2, r4
 8003e60:	eb45 0303 	adc.w	r3, r5, r3
 8003e64:	f04f 0000 	mov.w	r0, #0
 8003e68:	f04f 0100 	mov.w	r1, #0
 8003e6c:	00d9      	lsls	r1, r3, #3
 8003e6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e72:	00d0      	lsls	r0, r2, #3
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	1911      	adds	r1, r2, r4
 8003e7a:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e7c:	416b      	adcs	r3, r5
 8003e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	461a      	mov	r2, r3
 8003e86:	f04f 0300 	mov.w	r3, #0
 8003e8a:	1891      	adds	r1, r2, r2
 8003e8c:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e8e:	415b      	adcs	r3, r3
 8003e90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e96:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003e9a:	f7fc f9b9 	bl	8000210 <__aeabi_uldivmod>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	4b8c      	ldr	r3, [pc, #560]	; (80040d4 <UART_SetConfig+0x38c>)
 8003ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ea8:	095b      	lsrs	r3, r3, #5
 8003eaa:	2164      	movs	r1, #100	; 0x64
 8003eac:	fb01 f303 	mul.w	r3, r1, r3
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	3332      	adds	r3, #50	; 0x32
 8003eb6:	4a87      	ldr	r2, [pc, #540]	; (80040d4 <UART_SetConfig+0x38c>)
 8003eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebc:	095b      	lsrs	r3, r3, #5
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ec4:	441e      	add	r6, r3
 8003ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f04f 0100 	mov.w	r1, #0
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	1894      	adds	r4, r2, r2
 8003ed4:	623c      	str	r4, [r7, #32]
 8003ed6:	415b      	adcs	r3, r3
 8003ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ede:	1812      	adds	r2, r2, r0
 8003ee0:	eb41 0303 	adc.w	r3, r1, r3
 8003ee4:	f04f 0400 	mov.w	r4, #0
 8003ee8:	f04f 0500 	mov.w	r5, #0
 8003eec:	00dd      	lsls	r5, r3, #3
 8003eee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ef2:	00d4      	lsls	r4, r2, #3
 8003ef4:	4622      	mov	r2, r4
 8003ef6:	462b      	mov	r3, r5
 8003ef8:	1814      	adds	r4, r2, r0
 8003efa:	653c      	str	r4, [r7, #80]	; 0x50
 8003efc:	414b      	adcs	r3, r1
 8003efe:	657b      	str	r3, [r7, #84]	; 0x54
 8003f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	461a      	mov	r2, r3
 8003f06:	f04f 0300 	mov.w	r3, #0
 8003f0a:	1891      	adds	r1, r2, r2
 8003f0c:	61b9      	str	r1, [r7, #24]
 8003f0e:	415b      	adcs	r3, r3
 8003f10:	61fb      	str	r3, [r7, #28]
 8003f12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f16:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003f1a:	f7fc f979 	bl	8000210 <__aeabi_uldivmod>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	4b6c      	ldr	r3, [pc, #432]	; (80040d4 <UART_SetConfig+0x38c>)
 8003f24:	fba3 1302 	umull	r1, r3, r3, r2
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	2164      	movs	r1, #100	; 0x64
 8003f2c:	fb01 f303 	mul.w	r3, r1, r3
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	3332      	adds	r3, #50	; 0x32
 8003f36:	4a67      	ldr	r2, [pc, #412]	; (80040d4 <UART_SetConfig+0x38c>)
 8003f38:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3c:	095b      	lsrs	r3, r3, #5
 8003f3e:	f003 0207 	and.w	r2, r3, #7
 8003f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4432      	add	r2, r6
 8003f48:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f4a:	e0b9      	b.n	80040c0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f4e:	461c      	mov	r4, r3
 8003f50:	f04f 0500 	mov.w	r5, #0
 8003f54:	4622      	mov	r2, r4
 8003f56:	462b      	mov	r3, r5
 8003f58:	1891      	adds	r1, r2, r2
 8003f5a:	6139      	str	r1, [r7, #16]
 8003f5c:	415b      	adcs	r3, r3
 8003f5e:	617b      	str	r3, [r7, #20]
 8003f60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f64:	1912      	adds	r2, r2, r4
 8003f66:	eb45 0303 	adc.w	r3, r5, r3
 8003f6a:	f04f 0000 	mov.w	r0, #0
 8003f6e:	f04f 0100 	mov.w	r1, #0
 8003f72:	00d9      	lsls	r1, r3, #3
 8003f74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f78:	00d0      	lsls	r0, r2, #3
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	eb12 0804 	adds.w	r8, r2, r4
 8003f82:	eb43 0905 	adc.w	r9, r3, r5
 8003f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f04f 0100 	mov.w	r1, #0
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	f04f 0300 	mov.w	r3, #0
 8003f98:	008b      	lsls	r3, r1, #2
 8003f9a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f9e:	0082      	lsls	r2, r0, #2
 8003fa0:	4640      	mov	r0, r8
 8003fa2:	4649      	mov	r1, r9
 8003fa4:	f7fc f934 	bl	8000210 <__aeabi_uldivmod>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	460b      	mov	r3, r1
 8003fac:	4b49      	ldr	r3, [pc, #292]	; (80040d4 <UART_SetConfig+0x38c>)
 8003fae:	fba3 2302 	umull	r2, r3, r3, r2
 8003fb2:	095b      	lsrs	r3, r3, #5
 8003fb4:	011e      	lsls	r6, r3, #4
 8003fb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f04f 0100 	mov.w	r1, #0
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	1894      	adds	r4, r2, r2
 8003fc4:	60bc      	str	r4, [r7, #8]
 8003fc6:	415b      	adcs	r3, r3
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fce:	1812      	adds	r2, r2, r0
 8003fd0:	eb41 0303 	adc.w	r3, r1, r3
 8003fd4:	f04f 0400 	mov.w	r4, #0
 8003fd8:	f04f 0500 	mov.w	r5, #0
 8003fdc:	00dd      	lsls	r5, r3, #3
 8003fde:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003fe2:	00d4      	lsls	r4, r2, #3
 8003fe4:	4622      	mov	r2, r4
 8003fe6:	462b      	mov	r3, r5
 8003fe8:	1814      	adds	r4, r2, r0
 8003fea:	64bc      	str	r4, [r7, #72]	; 0x48
 8003fec:	414b      	adcs	r3, r1
 8003fee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f04f 0100 	mov.w	r1, #0
 8003ffa:	f04f 0200 	mov.w	r2, #0
 8003ffe:	f04f 0300 	mov.w	r3, #0
 8004002:	008b      	lsls	r3, r1, #2
 8004004:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004008:	0082      	lsls	r2, r0, #2
 800400a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800400e:	f7fc f8ff 	bl	8000210 <__aeabi_uldivmod>
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	4b2f      	ldr	r3, [pc, #188]	; (80040d4 <UART_SetConfig+0x38c>)
 8004018:	fba3 1302 	umull	r1, r3, r3, r2
 800401c:	095b      	lsrs	r3, r3, #5
 800401e:	2164      	movs	r1, #100	; 0x64
 8004020:	fb01 f303 	mul.w	r3, r1, r3
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	3332      	adds	r3, #50	; 0x32
 800402a:	4a2a      	ldr	r2, [pc, #168]	; (80040d4 <UART_SetConfig+0x38c>)
 800402c:	fba2 2303 	umull	r2, r3, r2, r3
 8004030:	095b      	lsrs	r3, r3, #5
 8004032:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004036:	441e      	add	r6, r3
 8004038:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800403a:	4618      	mov	r0, r3
 800403c:	f04f 0100 	mov.w	r1, #0
 8004040:	4602      	mov	r2, r0
 8004042:	460b      	mov	r3, r1
 8004044:	1894      	adds	r4, r2, r2
 8004046:	603c      	str	r4, [r7, #0]
 8004048:	415b      	adcs	r3, r3
 800404a:	607b      	str	r3, [r7, #4]
 800404c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004050:	1812      	adds	r2, r2, r0
 8004052:	eb41 0303 	adc.w	r3, r1, r3
 8004056:	f04f 0400 	mov.w	r4, #0
 800405a:	f04f 0500 	mov.w	r5, #0
 800405e:	00dd      	lsls	r5, r3, #3
 8004060:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004064:	00d4      	lsls	r4, r2, #3
 8004066:	4622      	mov	r2, r4
 8004068:	462b      	mov	r3, r5
 800406a:	eb12 0a00 	adds.w	sl, r2, r0
 800406e:	eb43 0b01 	adc.w	fp, r3, r1
 8004072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	4618      	mov	r0, r3
 8004078:	f04f 0100 	mov.w	r1, #0
 800407c:	f04f 0200 	mov.w	r2, #0
 8004080:	f04f 0300 	mov.w	r3, #0
 8004084:	008b      	lsls	r3, r1, #2
 8004086:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800408a:	0082      	lsls	r2, r0, #2
 800408c:	4650      	mov	r0, sl
 800408e:	4659      	mov	r1, fp
 8004090:	f7fc f8be 	bl	8000210 <__aeabi_uldivmod>
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	4b0e      	ldr	r3, [pc, #56]	; (80040d4 <UART_SetConfig+0x38c>)
 800409a:	fba3 1302 	umull	r1, r3, r3, r2
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	2164      	movs	r1, #100	; 0x64
 80040a2:	fb01 f303 	mul.w	r3, r1, r3
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	3332      	adds	r3, #50	; 0x32
 80040ac:	4a09      	ldr	r2, [pc, #36]	; (80040d4 <UART_SetConfig+0x38c>)
 80040ae:	fba2 2303 	umull	r2, r3, r2, r3
 80040b2:	095b      	lsrs	r3, r3, #5
 80040b4:	f003 020f 	and.w	r2, r3, #15
 80040b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4432      	add	r2, r6
 80040be:	609a      	str	r2, [r3, #8]
}
 80040c0:	bf00      	nop
 80040c2:	377c      	adds	r7, #124	; 0x7c
 80040c4:	46bd      	mov	sp, r7
 80040c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040ca:	bf00      	nop
 80040cc:	40011000 	.word	0x40011000
 80040d0:	40011400 	.word	0x40011400
 80040d4:	51eb851f 	.word	0x51eb851f

080040d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040d8:	b084      	sub	sp, #16
 80040da:	b580      	push	{r7, lr}
 80040dc:	b084      	sub	sp, #16
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	f107 001c 	add.w	r0, r7, #28
 80040e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d122      	bne.n	8004136 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800411a:	2b01      	cmp	r3, #1
 800411c:	d105      	bne.n	800412a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f001 fb16 	bl	800575c <USB_CoreReset>
 8004130:	4603      	mov	r3, r0
 8004132:	73fb      	strb	r3, [r7, #15]
 8004134:	e01a      	b.n	800416c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f001 fb0a 	bl	800575c <USB_CoreReset>
 8004148:	4603      	mov	r3, r0
 800414a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800414c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800414e:	2b00      	cmp	r3, #0
 8004150:	d106      	bne.n	8004160 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004156:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	639a      	str	r2, [r3, #56]	; 0x38
 800415e:	e005      	b.n	800416c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004164:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800416c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416e:	2b01      	cmp	r3, #1
 8004170:	d10b      	bne.n	800418a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f043 0206 	orr.w	r2, r3, #6
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f043 0220 	orr.w	r2, r3, #32
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800418a:	7bfb      	ldrb	r3, [r7, #15]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004196:	b004      	add	sp, #16
 8004198:	4770      	bx	lr
	...

0800419c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800419c:	b480      	push	{r7}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	4613      	mov	r3, r2
 80041a8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80041aa:	79fb      	ldrb	r3, [r7, #7]
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d165      	bne.n	800427c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	4a41      	ldr	r2, [pc, #260]	; (80042b8 <USB_SetTurnaroundTime+0x11c>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d906      	bls.n	80041c6 <USB_SetTurnaroundTime+0x2a>
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	4a40      	ldr	r2, [pc, #256]	; (80042bc <USB_SetTurnaroundTime+0x120>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d202      	bcs.n	80041c6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80041c0:	230f      	movs	r3, #15
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	e062      	b.n	800428c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	4a3c      	ldr	r2, [pc, #240]	; (80042bc <USB_SetTurnaroundTime+0x120>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d306      	bcc.n	80041dc <USB_SetTurnaroundTime+0x40>
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	4a3b      	ldr	r2, [pc, #236]	; (80042c0 <USB_SetTurnaroundTime+0x124>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d202      	bcs.n	80041dc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80041d6:	230e      	movs	r3, #14
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	e057      	b.n	800428c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4a38      	ldr	r2, [pc, #224]	; (80042c0 <USB_SetTurnaroundTime+0x124>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d306      	bcc.n	80041f2 <USB_SetTurnaroundTime+0x56>
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4a37      	ldr	r2, [pc, #220]	; (80042c4 <USB_SetTurnaroundTime+0x128>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d202      	bcs.n	80041f2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80041ec:	230d      	movs	r3, #13
 80041ee:	617b      	str	r3, [r7, #20]
 80041f0:	e04c      	b.n	800428c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	4a33      	ldr	r2, [pc, #204]	; (80042c4 <USB_SetTurnaroundTime+0x128>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d306      	bcc.n	8004208 <USB_SetTurnaroundTime+0x6c>
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	4a32      	ldr	r2, [pc, #200]	; (80042c8 <USB_SetTurnaroundTime+0x12c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d802      	bhi.n	8004208 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004202:	230c      	movs	r3, #12
 8004204:	617b      	str	r3, [r7, #20]
 8004206:	e041      	b.n	800428c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	4a2f      	ldr	r2, [pc, #188]	; (80042c8 <USB_SetTurnaroundTime+0x12c>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d906      	bls.n	800421e <USB_SetTurnaroundTime+0x82>
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	4a2e      	ldr	r2, [pc, #184]	; (80042cc <USB_SetTurnaroundTime+0x130>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d802      	bhi.n	800421e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004218:	230b      	movs	r3, #11
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	e036      	b.n	800428c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	4a2a      	ldr	r2, [pc, #168]	; (80042cc <USB_SetTurnaroundTime+0x130>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d906      	bls.n	8004234 <USB_SetTurnaroundTime+0x98>
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	4a29      	ldr	r2, [pc, #164]	; (80042d0 <USB_SetTurnaroundTime+0x134>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d802      	bhi.n	8004234 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800422e:	230a      	movs	r3, #10
 8004230:	617b      	str	r3, [r7, #20]
 8004232:	e02b      	b.n	800428c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4a26      	ldr	r2, [pc, #152]	; (80042d0 <USB_SetTurnaroundTime+0x134>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d906      	bls.n	800424a <USB_SetTurnaroundTime+0xae>
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	4a25      	ldr	r2, [pc, #148]	; (80042d4 <USB_SetTurnaroundTime+0x138>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d202      	bcs.n	800424a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004244:	2309      	movs	r3, #9
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	e020      	b.n	800428c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	4a21      	ldr	r2, [pc, #132]	; (80042d4 <USB_SetTurnaroundTime+0x138>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d306      	bcc.n	8004260 <USB_SetTurnaroundTime+0xc4>
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	4a20      	ldr	r2, [pc, #128]	; (80042d8 <USB_SetTurnaroundTime+0x13c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d802      	bhi.n	8004260 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800425a:	2308      	movs	r3, #8
 800425c:	617b      	str	r3, [r7, #20]
 800425e:	e015      	b.n	800428c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	4a1d      	ldr	r2, [pc, #116]	; (80042d8 <USB_SetTurnaroundTime+0x13c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d906      	bls.n	8004276 <USB_SetTurnaroundTime+0xda>
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4a1c      	ldr	r2, [pc, #112]	; (80042dc <USB_SetTurnaroundTime+0x140>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d202      	bcs.n	8004276 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004270:	2307      	movs	r3, #7
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	e00a      	b.n	800428c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004276:	2306      	movs	r3, #6
 8004278:	617b      	str	r3, [r7, #20]
 800427a:	e007      	b.n	800428c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800427c:	79fb      	ldrb	r3, [r7, #7]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d102      	bne.n	8004288 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004282:	2309      	movs	r3, #9
 8004284:	617b      	str	r3, [r7, #20]
 8004286:	e001      	b.n	800428c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004288:	2309      	movs	r3, #9
 800428a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	68da      	ldr	r2, [r3, #12]
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	029b      	lsls	r3, r3, #10
 80042a0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80042a4:	431a      	orrs	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	371c      	adds	r7, #28
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	00d8acbf 	.word	0x00d8acbf
 80042bc:	00e4e1c0 	.word	0x00e4e1c0
 80042c0:	00f42400 	.word	0x00f42400
 80042c4:	01067380 	.word	0x01067380
 80042c8:	011a499f 	.word	0x011a499f
 80042cc:	01312cff 	.word	0x01312cff
 80042d0:	014ca43f 	.word	0x014ca43f
 80042d4:	016e3600 	.word	0x016e3600
 80042d8:	01a6ab1f 	.word	0x01a6ab1f
 80042dc:	01e84800 	.word	0x01e84800

080042e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f043 0201 	orr.w	r2, r3, #1
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f023 0201 	bic.w	r2, r3, #1
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	460b      	mov	r3, r1
 800432e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004330:	2300      	movs	r3, #0
 8004332:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004340:	78fb      	ldrb	r3, [r7, #3]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d115      	bne.n	8004372 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004352:	2001      	movs	r0, #1
 8004354:	f7fc fc9a 	bl	8000c8c <HAL_Delay>
      ms++;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	3301      	adds	r3, #1
 800435c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f001 f96c 	bl	800563c <USB_GetMode>
 8004364:	4603      	mov	r3, r0
 8004366:	2b01      	cmp	r3, #1
 8004368:	d01e      	beq.n	80043a8 <USB_SetCurrentMode+0x84>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2b31      	cmp	r3, #49	; 0x31
 800436e:	d9f0      	bls.n	8004352 <USB_SetCurrentMode+0x2e>
 8004370:	e01a      	b.n	80043a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004372:	78fb      	ldrb	r3, [r7, #3]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d115      	bne.n	80043a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004384:	2001      	movs	r0, #1
 8004386:	f7fc fc81 	bl	8000c8c <HAL_Delay>
      ms++;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	3301      	adds	r3, #1
 800438e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f001 f953 	bl	800563c <USB_GetMode>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d005      	beq.n	80043a8 <USB_SetCurrentMode+0x84>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2b31      	cmp	r3, #49	; 0x31
 80043a0:	d9f0      	bls.n	8004384 <USB_SetCurrentMode+0x60>
 80043a2:	e001      	b.n	80043a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e005      	b.n	80043b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2b32      	cmp	r3, #50	; 0x32
 80043ac:	d101      	bne.n	80043b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043bc:	b084      	sub	sp, #16
 80043be:	b580      	push	{r7, lr}
 80043c0:	b086      	sub	sp, #24
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
 80043c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80043ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80043d6:	2300      	movs	r3, #0
 80043d8:	613b      	str	r3, [r7, #16]
 80043da:	e009      	b.n	80043f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	3340      	adds	r3, #64	; 0x40
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	2200      	movs	r2, #0
 80043e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	3301      	adds	r3, #1
 80043ee:	613b      	str	r3, [r7, #16]
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	2b0e      	cmp	r3, #14
 80043f4:	d9f2      	bls.n	80043dc <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80043f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d11c      	bne.n	8004436 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800440a:	f043 0302 	orr.w	r3, r3, #2
 800440e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004414:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	e005      	b.n	8004442 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004448:	461a      	mov	r2, r3
 800444a:	2300      	movs	r3, #0
 800444c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004454:	4619      	mov	r1, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800445c:	461a      	mov	r2, r3
 800445e:	680b      	ldr	r3, [r1, #0]
 8004460:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004464:	2b01      	cmp	r3, #1
 8004466:	d10c      	bne.n	8004482 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446a:	2b00      	cmp	r3, #0
 800446c:	d104      	bne.n	8004478 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800446e:	2100      	movs	r1, #0
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f945 	bl	8004700 <USB_SetDevSpeed>
 8004476:	e008      	b.n	800448a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004478:	2101      	movs	r1, #1
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f940 	bl	8004700 <USB_SetDevSpeed>
 8004480:	e003      	b.n	800448a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004482:	2103      	movs	r1, #3
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f93b 	bl	8004700 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800448a:	2110      	movs	r1, #16
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f8f3 	bl	8004678 <USB_FlushTxFifo>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f90f 	bl	80046c0 <USB_FlushRxFifo>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044b2:	461a      	mov	r2, r3
 80044b4:	2300      	movs	r3, #0
 80044b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044be:	461a      	mov	r2, r3
 80044c0:	2300      	movs	r3, #0
 80044c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ca:	461a      	mov	r2, r3
 80044cc:	2300      	movs	r3, #0
 80044ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044d0:	2300      	movs	r3, #0
 80044d2:	613b      	str	r3, [r7, #16]
 80044d4:	e043      	b.n	800455e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	015a      	lsls	r2, r3, #5
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	4413      	add	r3, r2
 80044de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044ec:	d118      	bne.n	8004520 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10a      	bne.n	800450a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004500:	461a      	mov	r2, r3
 8004502:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004506:	6013      	str	r3, [r2, #0]
 8004508:	e013      	b.n	8004532 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	015a      	lsls	r2, r3, #5
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4413      	add	r3, r2
 8004512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004516:	461a      	mov	r2, r3
 8004518:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800451c:	6013      	str	r3, [r2, #0]
 800451e:	e008      	b.n	8004532 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	4413      	add	r3, r2
 8004528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800452c:	461a      	mov	r2, r3
 800452e:	2300      	movs	r3, #0
 8004530:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	015a      	lsls	r2, r3, #5
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	4413      	add	r3, r2
 800453a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800453e:	461a      	mov	r2, r3
 8004540:	2300      	movs	r3, #0
 8004542:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004550:	461a      	mov	r2, r3
 8004552:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004556:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	3301      	adds	r3, #1
 800455c:	613b      	str	r3, [r7, #16]
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	429a      	cmp	r2, r3
 8004564:	d3b7      	bcc.n	80044d6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004566:	2300      	movs	r3, #0
 8004568:	613b      	str	r3, [r7, #16]
 800456a:	e043      	b.n	80045f4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4413      	add	r3, r2
 8004574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800457e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004582:	d118      	bne.n	80045b6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10a      	bne.n	80045a0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4413      	add	r3, r2
 8004592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004596:	461a      	mov	r2, r3
 8004598:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	e013      	b.n	80045c8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	015a      	lsls	r2, r3, #5
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4413      	add	r3, r2
 80045a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ac:	461a      	mov	r2, r3
 80045ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	e008      	b.n	80045c8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	015a      	lsls	r2, r3, #5
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	4413      	add	r3, r2
 80045be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c2:	461a      	mov	r2, r3
 80045c4:	2300      	movs	r3, #0
 80045c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d4:	461a      	mov	r2, r3
 80045d6:	2300      	movs	r3, #0
 80045d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e6:	461a      	mov	r2, r3
 80045e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	3301      	adds	r3, #1
 80045f2:	613b      	str	r3, [r7, #16]
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d3b7      	bcc.n	800456c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800460a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800460e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800461c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800461e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004620:	2b00      	cmp	r3, #0
 8004622:	d105      	bne.n	8004630 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	f043 0210 	orr.w	r2, r3, #16
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	699a      	ldr	r2, [r3, #24]
 8004634:	4b0f      	ldr	r3, [pc, #60]	; (8004674 <USB_DevInit+0x2b8>)
 8004636:	4313      	orrs	r3, r2
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800463c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800463e:	2b00      	cmp	r3, #0
 8004640:	d005      	beq.n	800464e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	f043 0208 	orr.w	r2, r3, #8
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800464e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004650:	2b01      	cmp	r3, #1
 8004652:	d107      	bne.n	8004664 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800465c:	f043 0304 	orr.w	r3, r3, #4
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004664:	7dfb      	ldrb	r3, [r7, #23]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004670:	b004      	add	sp, #16
 8004672:	4770      	bx	lr
 8004674:	803c3800 	.word	0x803c3800

08004678 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004682:	2300      	movs	r3, #0
 8004684:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	019b      	lsls	r3, r3, #6
 800468a:	f043 0220 	orr.w	r2, r3, #32
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	3301      	adds	r3, #1
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	4a08      	ldr	r2, [pc, #32]	; (80046bc <USB_FlushTxFifo+0x44>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d901      	bls.n	80046a2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e006      	b.n	80046b0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f003 0320 	and.w	r3, r3, #32
 80046aa:	2b20      	cmp	r3, #32
 80046ac:	d0f1      	beq.n	8004692 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	00030d40 	.word	0x00030d40

080046c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2210      	movs	r2, #16
 80046d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	3301      	adds	r3, #1
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	4a08      	ldr	r2, [pc, #32]	; (80046fc <USB_FlushRxFifo+0x3c>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d901      	bls.n	80046e2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e006      	b.n	80046f0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	f003 0310 	and.w	r3, r3, #16
 80046ea:	2b10      	cmp	r3, #16
 80046ec:	d0f1      	beq.n	80046d2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3714      	adds	r7, #20
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	00030d40 	.word	0x00030d40

08004700 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	460b      	mov	r3, r1
 800470a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	78fb      	ldrb	r3, [r7, #3]
 800471a:	68f9      	ldr	r1, [r7, #12]
 800471c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004720:	4313      	orrs	r3, r2
 8004722:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004732:	b480      	push	{r7}
 8004734:	b087      	sub	sp, #28
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 0306 	and.w	r3, r3, #6
 800474a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d102      	bne.n	8004758 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004752:	2300      	movs	r3, #0
 8004754:	75fb      	strb	r3, [r7, #23]
 8004756:	e00a      	b.n	800476e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b02      	cmp	r3, #2
 800475c:	d002      	beq.n	8004764 <USB_GetDevSpeed+0x32>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2b06      	cmp	r3, #6
 8004762:	d102      	bne.n	800476a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004764:	2302      	movs	r3, #2
 8004766:	75fb      	strb	r3, [r7, #23]
 8004768:	e001      	b.n	800476e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800476a:	230f      	movs	r3, #15
 800476c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800476e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004770:	4618      	mov	r0, r3
 8004772:	371c      	adds	r7, #28
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	785b      	ldrb	r3, [r3, #1]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d13a      	bne.n	800480e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800479e:	69da      	ldr	r2, [r3, #28]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	f003 030f 	and.w	r3, r3, #15
 80047a8:	2101      	movs	r1, #1
 80047aa:	fa01 f303 	lsl.w	r3, r1, r3
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	68f9      	ldr	r1, [r7, #12]
 80047b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047b6:	4313      	orrs	r3, r2
 80047b8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d155      	bne.n	800487c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	78db      	ldrb	r3, [r3, #3]
 80047ea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047ec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	059b      	lsls	r3, r3, #22
 80047f2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047f4:	4313      	orrs	r3, r2
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	0151      	lsls	r1, r2, #5
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	440a      	add	r2, r1
 80047fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800480a:	6013      	str	r3, [r2, #0]
 800480c:	e036      	b.n	800487c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004814:	69da      	ldr	r2, [r3, #28]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	2101      	movs	r1, #1
 8004820:	fa01 f303 	lsl.w	r3, r1, r3
 8004824:	041b      	lsls	r3, r3, #16
 8004826:	68f9      	ldr	r1, [r7, #12]
 8004828:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800482c:	4313      	orrs	r3, r2
 800482e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d11a      	bne.n	800487c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	015a      	lsls	r2, r3, #5
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	4413      	add	r3, r2
 800484e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	78db      	ldrb	r3, [r3, #3]
 8004860:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004862:	430b      	orrs	r3, r1
 8004864:	4313      	orrs	r3, r2
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	0151      	lsls	r1, r2, #5
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	440a      	add	r2, r1
 800486e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800487a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
	...

0800488c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	785b      	ldrb	r3, [r3, #1]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d161      	bne.n	800496c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048be:	d11f      	bne.n	8004900 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	0151      	lsls	r1, r2, #5
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	440a      	add	r2, r1
 80048d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048de:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	0151      	lsls	r1, r2, #5
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	440a      	add	r2, r1
 80048f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004906:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	f003 030f 	and.w	r3, r3, #15
 8004910:	2101      	movs	r1, #1
 8004912:	fa01 f303 	lsl.w	r3, r1, r3
 8004916:	b29b      	uxth	r3, r3
 8004918:	43db      	mvns	r3, r3
 800491a:	68f9      	ldr	r1, [r7, #12]
 800491c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004920:	4013      	ands	r3, r2
 8004922:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800492a:	69da      	ldr	r2, [r3, #28]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	f003 030f 	and.w	r3, r3, #15
 8004934:	2101      	movs	r1, #1
 8004936:	fa01 f303 	lsl.w	r3, r1, r3
 800493a:	b29b      	uxth	r3, r3
 800493c:	43db      	mvns	r3, r3
 800493e:	68f9      	ldr	r1, [r7, #12]
 8004940:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004944:	4013      	ands	r3, r2
 8004946:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	0159      	lsls	r1, r3, #5
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	440b      	add	r3, r1
 800495e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004962:	4619      	mov	r1, r3
 8004964:	4b35      	ldr	r3, [pc, #212]	; (8004a3c <USB_DeactivateEndpoint+0x1b0>)
 8004966:	4013      	ands	r3, r2
 8004968:	600b      	str	r3, [r1, #0]
 800496a:	e060      	b.n	8004a2e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	015a      	lsls	r2, r3, #5
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4413      	add	r3, r2
 8004974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800497e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004982:	d11f      	bne.n	80049c4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4413      	add	r3, r2
 800498c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	0151      	lsls	r1, r2, #5
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	440a      	add	r2, r1
 800499a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800499e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049a2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	015a      	lsls	r2, r3, #5
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4413      	add	r3, r2
 80049ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	0151      	lsls	r1, r2, #5
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	440a      	add	r2, r1
 80049ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	f003 030f 	and.w	r3, r3, #15
 80049d4:	2101      	movs	r1, #1
 80049d6:	fa01 f303 	lsl.w	r3, r1, r3
 80049da:	041b      	lsls	r3, r3, #16
 80049dc:	43db      	mvns	r3, r3
 80049de:	68f9      	ldr	r1, [r7, #12]
 80049e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049e4:	4013      	ands	r3, r2
 80049e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ee:	69da      	ldr	r2, [r3, #28]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	f003 030f 	and.w	r3, r3, #15
 80049f8:	2101      	movs	r1, #1
 80049fa:	fa01 f303 	lsl.w	r3, r1, r3
 80049fe:	041b      	lsls	r3, r3, #16
 8004a00:	43db      	mvns	r3, r3
 8004a02:	68f9      	ldr	r1, [r7, #12]
 8004a04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a08:	4013      	ands	r3, r2
 8004a0a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	0159      	lsls	r1, r3, #5
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	440b      	add	r3, r1
 8004a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a26:	4619      	mov	r1, r3
 8004a28:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <USB_DeactivateEndpoint+0x1b4>)
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3714      	adds	r7, #20
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	ec337800 	.word	0xec337800
 8004a40:	eff37800 	.word	0xeff37800

08004a44 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b08a      	sub	sp, #40	; 0x28
 8004a48:	af02      	add	r7, sp, #8
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	785b      	ldrb	r3, [r3, #1]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	f040 815c 	bne.w	8004d1e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d132      	bne.n	8004ad4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	0151      	lsls	r1, r2, #5
 8004a80:	69fa      	ldr	r2, [r7, #28]
 8004a82:	440a      	add	r2, r1
 8004a84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	0151      	lsls	r1, r2, #5
 8004aa4:	69fa      	ldr	r2, [r7, #28]
 8004aa6:	440a      	add	r2, r1
 8004aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ab0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	0151      	lsls	r1, r2, #5
 8004ac4:	69fa      	ldr	r2, [r7, #28]
 8004ac6:	440a      	add	r2, r1
 8004ac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004acc:	0cdb      	lsrs	r3, r3, #19
 8004ace:	04db      	lsls	r3, r3, #19
 8004ad0:	6113      	str	r3, [r2, #16]
 8004ad2:	e074      	b.n	8004bbe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	0151      	lsls	r1, r2, #5
 8004ae6:	69fa      	ldr	r2, [r7, #28]
 8004ae8:	440a      	add	r2, r1
 8004aea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aee:	0cdb      	lsrs	r3, r3, #19
 8004af0:	04db      	lsls	r3, r3, #19
 8004af2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	0151      	lsls	r1, r2, #5
 8004b06:	69fa      	ldr	r2, [r7, #28]
 8004b08:	440a      	add	r2, r1
 8004b0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b0e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b12:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b24:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	6959      	ldr	r1, [r3, #20]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	440b      	add	r3, r1
 8004b30:	1e59      	subs	r1, r3, #1
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b3a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004b3c:	4b9d      	ldr	r3, [pc, #628]	; (8004db4 <USB_EPStartXfer+0x370>)
 8004b3e:	400b      	ands	r3, r1
 8004b40:	69b9      	ldr	r1, [r7, #24]
 8004b42:	0148      	lsls	r0, r1, #5
 8004b44:	69f9      	ldr	r1, [r7, #28]
 8004b46:	4401      	add	r1, r0
 8004b48:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5c:	691a      	ldr	r2, [r3, #16]
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b66:	69b9      	ldr	r1, [r7, #24]
 8004b68:	0148      	lsls	r0, r1, #5
 8004b6a:	69f9      	ldr	r1, [r7, #28]
 8004b6c:	4401      	add	r1, r0
 8004b6e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b72:	4313      	orrs	r3, r2
 8004b74:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	78db      	ldrb	r3, [r3, #3]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d11f      	bne.n	8004bbe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	015a      	lsls	r2, r3, #5
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	4413      	add	r3, r2
 8004b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	0151      	lsls	r1, r2, #5
 8004b90:	69fa      	ldr	r2, [r7, #28]
 8004b92:	440a      	add	r2, r1
 8004b94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b98:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004b9c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	0151      	lsls	r1, r2, #5
 8004bb0:	69fa      	ldr	r2, [r7, #28]
 8004bb2:	440a      	add	r2, r1
 8004bb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bbc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004bbe:	79fb      	ldrb	r3, [r7, #7]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d14b      	bne.n	8004c5c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d009      	beq.n	8004be0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	015a      	lsls	r2, r3, #5
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd8:	461a      	mov	r2, r3
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	78db      	ldrb	r3, [r3, #3]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d128      	bne.n	8004c3a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d110      	bne.n	8004c1a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	0151      	lsls	r1, r2, #5
 8004c0a:	69fa      	ldr	r2, [r7, #28]
 8004c0c:	440a      	add	r2, r1
 8004c0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c16:	6013      	str	r3, [r2, #0]
 8004c18:	e00f      	b.n	8004c3a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	015a      	lsls	r2, r3, #5
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	4413      	add	r3, r2
 8004c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	69ba      	ldr	r2, [r7, #24]
 8004c2a:	0151      	lsls	r1, r2, #5
 8004c2c:	69fa      	ldr	r2, [r7, #28]
 8004c2e:	440a      	add	r2, r1
 8004c30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c38:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	015a      	lsls	r2, r3, #5
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	0151      	lsls	r1, r2, #5
 8004c4c:	69fa      	ldr	r2, [r7, #28]
 8004c4e:	440a      	add	r2, r1
 8004c50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c58:	6013      	str	r3, [r2, #0]
 8004c5a:	e12f      	b.n	8004ebc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	0151      	lsls	r1, r2, #5
 8004c6e:	69fa      	ldr	r2, [r7, #28]
 8004c70:	440a      	add	r2, r1
 8004c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c7a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	78db      	ldrb	r3, [r3, #3]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d015      	beq.n	8004cb0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 8117 	beq.w	8004ebc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	f003 030f 	and.w	r3, r3, #15
 8004c9e:	2101      	movs	r1, #1
 8004ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca4:	69f9      	ldr	r1, [r7, #28]
 8004ca6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004caa:	4313      	orrs	r3, r2
 8004cac:	634b      	str	r3, [r1, #52]	; 0x34
 8004cae:	e105      	b.n	8004ebc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d110      	bne.n	8004ce2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	0151      	lsls	r1, r2, #5
 8004cd2:	69fa      	ldr	r2, [r7, #28]
 8004cd4:	440a      	add	r2, r1
 8004cd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cda:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	e00f      	b.n	8004d02 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	015a      	lsls	r2, r3, #5
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	4413      	add	r3, r2
 8004cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	0151      	lsls	r1, r2, #5
 8004cf4:	69fa      	ldr	r2, [r7, #28]
 8004cf6:	440a      	add	r2, r1
 8004cf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d00:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	68d9      	ldr	r1, [r3, #12]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	781a      	ldrb	r2, [r3, #0]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	b298      	uxth	r0, r3
 8004d10:	79fb      	ldrb	r3, [r7, #7]
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	4603      	mov	r3, r0
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 fa2b 	bl	8005172 <USB_WritePacket>
 8004d1c:	e0ce      	b.n	8004ebc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	015a      	lsls	r2, r3, #5
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	0151      	lsls	r1, r2, #5
 8004d30:	69fa      	ldr	r2, [r7, #28]
 8004d32:	440a      	add	r2, r1
 8004d34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d38:	0cdb      	lsrs	r3, r3, #19
 8004d3a:	04db      	lsls	r3, r3, #19
 8004d3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	0151      	lsls	r1, r2, #5
 8004d50:	69fa      	ldr	r2, [r7, #28]
 8004d52:	440a      	add	r2, r1
 8004d54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d60:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d126      	bne.n	8004db8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d76:	691a      	ldr	r2, [r3, #16]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d80:	69b9      	ldr	r1, [r7, #24]
 8004d82:	0148      	lsls	r0, r1, #5
 8004d84:	69f9      	ldr	r1, [r7, #28]
 8004d86:	4401      	add	r1, r0
 8004d88:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	0151      	lsls	r1, r2, #5
 8004da2:	69fa      	ldr	r2, [r7, #28]
 8004da4:	440a      	add	r2, r1
 8004da6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004daa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004dae:	6113      	str	r3, [r2, #16]
 8004db0:	e036      	b.n	8004e20 <USB_EPStartXfer+0x3dc>
 8004db2:	bf00      	nop
 8004db4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	695a      	ldr	r2, [r3, #20]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	1e5a      	subs	r2, r3, #1
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dcc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dda:	691a      	ldr	r2, [r3, #16]
 8004ddc:	8afb      	ldrh	r3, [r7, #22]
 8004dde:	04d9      	lsls	r1, r3, #19
 8004de0:	4b39      	ldr	r3, [pc, #228]	; (8004ec8 <USB_EPStartXfer+0x484>)
 8004de2:	400b      	ands	r3, r1
 8004de4:	69b9      	ldr	r1, [r7, #24]
 8004de6:	0148      	lsls	r0, r1, #5
 8004de8:	69f9      	ldr	r1, [r7, #28]
 8004dea:	4401      	add	r1, r0
 8004dec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004df0:	4313      	orrs	r3, r2
 8004df2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e00:	691a      	ldr	r2, [r3, #16]
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	8af9      	ldrh	r1, [r7, #22]
 8004e08:	fb01 f303 	mul.w	r3, r1, r3
 8004e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e10:	69b9      	ldr	r1, [r7, #24]
 8004e12:	0148      	lsls	r0, r1, #5
 8004e14:	69f9      	ldr	r1, [r7, #28]
 8004e16:	4401      	add	r1, r0
 8004e18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004e20:	79fb      	ldrb	r3, [r7, #7]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d10d      	bne.n	8004e42 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d009      	beq.n	8004e42 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	68d9      	ldr	r1, [r3, #12]
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	015a      	lsls	r2, r3, #5
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e3e:	460a      	mov	r2, r1
 8004e40:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	78db      	ldrb	r3, [r3, #3]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d128      	bne.n	8004e9c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d110      	bne.n	8004e7c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	015a      	lsls	r2, r3, #5
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	0151      	lsls	r1, r2, #5
 8004e6c:	69fa      	ldr	r2, [r7, #28]
 8004e6e:	440a      	add	r2, r1
 8004e70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e78:	6013      	str	r3, [r2, #0]
 8004e7a:	e00f      	b.n	8004e9c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	0151      	lsls	r1, r2, #5
 8004e8e:	69fa      	ldr	r2, [r7, #28]
 8004e90:	440a      	add	r2, r1
 8004e92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e9a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	0151      	lsls	r1, r2, #5
 8004eae:	69fa      	ldr	r2, [r7, #28]
 8004eb0:	440a      	add	r2, r1
 8004eb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eb6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004eba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3720      	adds	r7, #32
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	1ff80000 	.word	0x1ff80000

08004ecc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	785b      	ldrb	r3, [r3, #1]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	f040 80cd 	bne.w	8005088 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d132      	bne.n	8004f5c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	0151      	lsls	r1, r2, #5
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	440a      	add	r2, r1
 8004f0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	0151      	lsls	r1, r2, #5
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	440a      	add	r2, r1
 8004f30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	0151      	lsls	r1, r2, #5
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	440a      	add	r2, r1
 8004f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f54:	0cdb      	lsrs	r3, r3, #19
 8004f56:	04db      	lsls	r3, r3, #19
 8004f58:	6113      	str	r3, [r2, #16]
 8004f5a:	e04e      	b.n	8004ffa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	0151      	lsls	r1, r2, #5
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	440a      	add	r2, r1
 8004f72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f76:	0cdb      	lsrs	r3, r3, #19
 8004f78:	04db      	lsls	r3, r3, #19
 8004f7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	0151      	lsls	r1, r2, #5
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	440a      	add	r2, r1
 8004f92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f96:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f9a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f9e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	695a      	ldr	r2, [r3, #20]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d903      	bls.n	8004fb4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	0151      	lsls	r1, r2, #5
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	440a      	add	r2, r1
 8004fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	015a      	lsls	r2, r3, #5
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe0:	691a      	ldr	r2, [r3, #16]
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fea:	6939      	ldr	r1, [r7, #16]
 8004fec:	0148      	lsls	r0, r1, #5
 8004fee:	6979      	ldr	r1, [r7, #20]
 8004ff0:	4401      	add	r1, r0
 8004ff2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004ffa:	79fb      	ldrb	r3, [r7, #7]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d11e      	bne.n	800503e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d009      	beq.n	800501c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005014:	461a      	mov	r2, r3
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	4413      	add	r3, r2
 8005024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	0151      	lsls	r1, r2, #5
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	440a      	add	r2, r1
 8005032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005036:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800503a:	6013      	str	r3, [r2, #0]
 800503c:	e092      	b.n	8005164 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	4413      	add	r3, r2
 8005046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	0151      	lsls	r1, r2, #5
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	440a      	add	r2, r1
 8005054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005058:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800505c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d07e      	beq.n	8005164 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	f003 030f 	and.w	r3, r3, #15
 8005076:	2101      	movs	r1, #1
 8005078:	fa01 f303 	lsl.w	r3, r1, r3
 800507c:	6979      	ldr	r1, [r7, #20]
 800507e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005082:	4313      	orrs	r3, r2
 8005084:	634b      	str	r3, [r1, #52]	; 0x34
 8005086:	e06d      	b.n	8005164 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	015a      	lsls	r2, r3, #5
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	4413      	add	r3, r2
 8005090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	0151      	lsls	r1, r2, #5
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	440a      	add	r2, r1
 800509e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050a2:	0cdb      	lsrs	r3, r3, #19
 80050a4:	04db      	lsls	r3, r3, #19
 80050a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	015a      	lsls	r2, r3, #5
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	0151      	lsls	r1, r2, #5
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	440a      	add	r2, r1
 80050be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050ca:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d003      	beq.n	80050dc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	0151      	lsls	r1, r2, #5
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	440a      	add	r2, r1
 80050f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	4413      	add	r3, r2
 8005104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005108:	691a      	ldr	r2, [r3, #16]
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005112:	6939      	ldr	r1, [r7, #16]
 8005114:	0148      	lsls	r0, r1, #5
 8005116:	6979      	ldr	r1, [r7, #20]
 8005118:	4401      	add	r1, r0
 800511a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800511e:	4313      	orrs	r3, r2
 8005120:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005122:	79fb      	ldrb	r3, [r7, #7]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d10d      	bne.n	8005144 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d009      	beq.n	8005144 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	68d9      	ldr	r1, [r3, #12]
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005140:	460a      	mov	r2, r1
 8005142:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	4413      	add	r3, r2
 800514c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	0151      	lsls	r1, r2, #5
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	440a      	add	r2, r1
 800515a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800515e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005162:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	371c      	adds	r7, #28
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005172:	b480      	push	{r7}
 8005174:	b089      	sub	sp, #36	; 0x24
 8005176:	af00      	add	r7, sp, #0
 8005178:	60f8      	str	r0, [r7, #12]
 800517a:	60b9      	str	r1, [r7, #8]
 800517c:	4611      	mov	r1, r2
 800517e:	461a      	mov	r2, r3
 8005180:	460b      	mov	r3, r1
 8005182:	71fb      	strb	r3, [r7, #7]
 8005184:	4613      	mov	r3, r2
 8005186:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005190:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005194:	2b00      	cmp	r3, #0
 8005196:	d123      	bne.n	80051e0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005198:	88bb      	ldrh	r3, [r7, #4]
 800519a:	3303      	adds	r3, #3
 800519c:	089b      	lsrs	r3, r3, #2
 800519e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80051a0:	2300      	movs	r3, #0
 80051a2:	61bb      	str	r3, [r7, #24]
 80051a4:	e018      	b.n	80051d8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80051a6:	79fb      	ldrb	r3, [r7, #7]
 80051a8:	031a      	lsls	r2, r3, #12
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051b2:	461a      	mov	r2, r3
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	3301      	adds	r3, #1
 80051be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	3301      	adds	r3, #1
 80051c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	3301      	adds	r3, #1
 80051ca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	3301      	adds	r3, #1
 80051d0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	3301      	adds	r3, #1
 80051d6:	61bb      	str	r3, [r7, #24]
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d3e2      	bcc.n	80051a6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3724      	adds	r7, #36	; 0x24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b08b      	sub	sp, #44	; 0x2c
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	60f8      	str	r0, [r7, #12]
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	4613      	mov	r3, r2
 80051fa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005204:	88fb      	ldrh	r3, [r7, #6]
 8005206:	089b      	lsrs	r3, r3, #2
 8005208:	b29b      	uxth	r3, r3
 800520a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800520c:	88fb      	ldrh	r3, [r7, #6]
 800520e:	f003 0303 	and.w	r3, r3, #3
 8005212:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005214:	2300      	movs	r3, #0
 8005216:	623b      	str	r3, [r7, #32]
 8005218:	e014      	b.n	8005244 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005224:	601a      	str	r2, [r3, #0]
    pDest++;
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	3301      	adds	r3, #1
 800522a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	3301      	adds	r3, #1
 8005230:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	3301      	adds	r3, #1
 8005236:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	3301      	adds	r3, #1
 800523c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800523e:	6a3b      	ldr	r3, [r7, #32]
 8005240:	3301      	adds	r3, #1
 8005242:	623b      	str	r3, [r7, #32]
 8005244:	6a3a      	ldr	r2, [r7, #32]
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	429a      	cmp	r2, r3
 800524a:	d3e6      	bcc.n	800521a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800524c:	8bfb      	ldrh	r3, [r7, #30]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d01e      	beq.n	8005290 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005252:	2300      	movs	r3, #0
 8005254:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800525c:	461a      	mov	r2, r3
 800525e:	f107 0310 	add.w	r3, r7, #16
 8005262:	6812      	ldr	r2, [r2, #0]
 8005264:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	b2db      	uxtb	r3, r3
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	fa22 f303 	lsr.w	r3, r2, r3
 8005272:	b2da      	uxtb	r2, r3
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	701a      	strb	r2, [r3, #0]
      i++;
 8005278:	6a3b      	ldr	r3, [r7, #32]
 800527a:	3301      	adds	r3, #1
 800527c:	623b      	str	r3, [r7, #32]
      pDest++;
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	3301      	adds	r3, #1
 8005282:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005284:	8bfb      	ldrh	r3, [r7, #30]
 8005286:	3b01      	subs	r3, #1
 8005288:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800528a:	8bfb      	ldrh	r3, [r7, #30]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1ea      	bne.n	8005266 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005292:	4618      	mov	r0, r3
 8005294:	372c      	adds	r7, #44	; 0x2c
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800529e:	b480      	push	{r7}
 80052a0:	b085      	sub	sp, #20
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
 80052a6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	785b      	ldrb	r3, [r3, #1]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d12c      	bne.n	8005314 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	db12      	blt.n	80052f2 <USB_EPSetStall+0x54>
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00f      	beq.n	80052f2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	015a      	lsls	r2, r3, #5
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4413      	add	r3, r2
 80052da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	0151      	lsls	r1, r2, #5
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	440a      	add	r2, r1
 80052e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052f0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	0151      	lsls	r1, r2, #5
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	440a      	add	r2, r1
 8005308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800530c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005310:	6013      	str	r3, [r2, #0]
 8005312:	e02b      	b.n	800536c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	4413      	add	r3, r2
 800531c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	db12      	blt.n	800534c <USB_EPSetStall+0xae>
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00f      	beq.n	800534c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4413      	add	r3, r2
 8005334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	0151      	lsls	r1, r2, #5
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	440a      	add	r2, r1
 8005342:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005346:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800534a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4413      	add	r3, r2
 8005354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	0151      	lsls	r1, r2, #5
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	440a      	add	r2, r1
 8005362:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005366:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800536a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3714      	adds	r7, #20
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800537a:	b480      	push	{r7}
 800537c:	b085      	sub	sp, #20
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
 8005382:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	785b      	ldrb	r3, [r3, #1]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d128      	bne.n	80053e8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	4413      	add	r3, r2
 800539e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	0151      	lsls	r1, r2, #5
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	440a      	add	r2, r1
 80053ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	78db      	ldrb	r3, [r3, #3]
 80053ba:	2b03      	cmp	r3, #3
 80053bc:	d003      	beq.n	80053c6 <USB_EPClearStall+0x4c>
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	78db      	ldrb	r3, [r3, #3]
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d138      	bne.n	8005438 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	015a      	lsls	r2, r3, #5
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	0151      	lsls	r1, r2, #5
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	440a      	add	r2, r1
 80053dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	e027      	b.n	8005438 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	0151      	lsls	r1, r2, #5
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	440a      	add	r2, r1
 80053fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005402:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005406:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	78db      	ldrb	r3, [r3, #3]
 800540c:	2b03      	cmp	r3, #3
 800540e:	d003      	beq.n	8005418 <USB_EPClearStall+0x9e>
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	78db      	ldrb	r3, [r3, #3]
 8005414:	2b02      	cmp	r3, #2
 8005416:	d10f      	bne.n	8005438 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4413      	add	r3, r2
 8005420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	0151      	lsls	r1, r2, #5
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	440a      	add	r2, r1
 800542e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005436:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005446:	b480      	push	{r7}
 8005448:	b085      	sub	sp, #20
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
 800544e:	460b      	mov	r3, r1
 8005450:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005464:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005468:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	78fb      	ldrb	r3, [r7, #3]
 8005474:	011b      	lsls	r3, r3, #4
 8005476:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800547a:	68f9      	ldr	r1, [r7, #12]
 800547c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005480:	4313      	orrs	r3, r2
 8005482:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005492:	b480      	push	{r7}
 8005494:	b085      	sub	sp, #20
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80054ac:	f023 0303 	bic.w	r3, r3, #3
 80054b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054c0:	f023 0302 	bic.w	r3, r3, #2
 80054c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80054ee:	f023 0303 	bic.w	r3, r3, #3
 80054f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005502:	f043 0302 	orr.w	r3, r3, #2
 8005506:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3714      	adds	r7, #20
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005516:	b480      	push	{r7}
 8005518:	b085      	sub	sp, #20
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	4013      	ands	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800552e:	68fb      	ldr	r3, [r7, #12]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	4013      	ands	r3, r2
 800555e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	0c1b      	lsrs	r3, r3, #16
}
 8005564:	4618      	mov	r0, r3
 8005566:	3714      	adds	r7, #20
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	4013      	ands	r3, r2
 8005592:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	b29b      	uxth	r3, r3
}
 8005598:	4618      	mov	r0, r3
 800559a:	3714      	adds	r7, #20
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	460b      	mov	r3, r1
 80055ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80055b4:	78fb      	ldrb	r3, [r7, #3]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	4013      	ands	r3, r2
 80055d0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80055d2:	68bb      	ldr	r3, [r7, #8]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	460b      	mov	r3, r1
 80055ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005602:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005604:	78fb      	ldrb	r3, [r7, #3]
 8005606:	f003 030f 	and.w	r3, r3, #15
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	fa22 f303 	lsr.w	r3, r2, r3
 8005610:	01db      	lsls	r3, r3, #7
 8005612:	b2db      	uxtb	r3, r3
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	4313      	orrs	r3, r2
 8005618:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800561a:	78fb      	ldrb	r3, [r7, #3]
 800561c:	015a      	lsls	r2, r3, #5
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	4413      	add	r3, r2
 8005622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	4013      	ands	r3, r2
 800562c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800562e:	68bb      	ldr	r3, [r7, #8]
}
 8005630:	4618      	mov	r0, r3
 8005632:	371c      	adds	r7, #28
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	f003 0301 	and.w	r3, r3, #1
}
 800564c:	4618      	mov	r0, r3
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005672:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005676:	f023 0307 	bic.w	r3, r3, #7
 800567a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800568a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800568e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
	...

080056a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	460b      	mov	r3, r1
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	333c      	adds	r3, #60	; 0x3c
 80056b6:	3304      	adds	r3, #4
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	4a26      	ldr	r2, [pc, #152]	; (8005758 <USB_EP0_OutStart+0xb8>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d90a      	bls.n	80056da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056d4:	d101      	bne.n	80056da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80056d6:	2300      	movs	r3, #0
 80056d8:	e037      	b.n	800574a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e0:	461a      	mov	r2, r3
 80056e2:	2300      	movs	r3, #0
 80056e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005708:	f043 0318 	orr.w	r3, r3, #24
 800570c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800571c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005720:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005722:	7afb      	ldrb	r3, [r7, #11]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d10f      	bne.n	8005748 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572e:	461a      	mov	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005742:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005746:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	371c      	adds	r7, #28
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	4f54300a 	.word	0x4f54300a

0800575c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005764:	2300      	movs	r3, #0
 8005766:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	3301      	adds	r3, #1
 800576c:	60fb      	str	r3, [r7, #12]
 800576e:	4a13      	ldr	r2, [pc, #76]	; (80057bc <USB_CoreReset+0x60>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d901      	bls.n	8005778 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e01a      	b.n	80057ae <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	2b00      	cmp	r3, #0
 800577e:	daf3      	bge.n	8005768 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	f043 0201 	orr.w	r2, r3, #1
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	3301      	adds	r3, #1
 8005794:	60fb      	str	r3, [r7, #12]
 8005796:	4a09      	ldr	r2, [pc, #36]	; (80057bc <USB_CoreReset+0x60>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d901      	bls.n	80057a0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e006      	b.n	80057ae <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d0f1      	beq.n	8005790 <USB_CoreReset+0x34>

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	00030d40 	.word	0x00030d40

080057c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	460b      	mov	r3, r1
 80057ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80057cc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80057d0:	f004 fca2 	bl	800a118 <USBD_static_malloc>
 80057d4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d105      	bne.n	80057e8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80057e4:	2302      	movs	r3, #2
 80057e6:	e066      	b.n	80058b6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	7c1b      	ldrb	r3, [r3, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d119      	bne.n	800582c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80057f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057fc:	2202      	movs	r2, #2
 80057fe:	2181      	movs	r1, #129	; 0x81
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f004 fb18 	bl	8009e36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800580c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005810:	2202      	movs	r2, #2
 8005812:	2101      	movs	r1, #1
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f004 fb0e 	bl	8009e36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2210      	movs	r2, #16
 8005826:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800582a:	e016      	b.n	800585a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800582c:	2340      	movs	r3, #64	; 0x40
 800582e:	2202      	movs	r2, #2
 8005830:	2181      	movs	r1, #129	; 0x81
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f004 faff 	bl	8009e36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800583e:	2340      	movs	r3, #64	; 0x40
 8005840:	2202      	movs	r2, #2
 8005842:	2101      	movs	r1, #1
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f004 faf6 	bl	8009e36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2201      	movs	r2, #1
 800584e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2210      	movs	r2, #16
 8005856:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800585a:	2308      	movs	r3, #8
 800585c:	2203      	movs	r2, #3
 800585e:	2182      	movs	r1, #130	; 0x82
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f004 fae8 	bl	8009e36 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	7c1b      	ldrb	r3, [r3, #16]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d109      	bne.n	80058a4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005896:	f44f 7300 	mov.w	r3, #512	; 0x200
 800589a:	2101      	movs	r1, #1
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f004 fbb9 	bl	800a014 <USBD_LL_PrepareReceive>
 80058a2:	e007      	b.n	80058b4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058aa:	2340      	movs	r3, #64	; 0x40
 80058ac:	2101      	movs	r1, #1
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f004 fbb0 	bl	800a014 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b082      	sub	sp, #8
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
 80058c6:	460b      	mov	r3, r1
 80058c8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80058ca:	2181      	movs	r1, #129	; 0x81
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f004 fad8 	bl	8009e82 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80058d8:	2101      	movs	r1, #1
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f004 fad1 	bl	8009e82 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80058e8:	2182      	movs	r1, #130	; 0x82
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f004 fac9 	bl	8009e82 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00e      	beq.n	8005928 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800591a:	4618      	mov	r0, r3
 800591c:	f004 fc0a 	bl	800a134 <USBD_static_free>
    pdev->pClassData = NULL;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3708      	adds	r7, #8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
	...

08005934 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005944:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005946:	2300      	movs	r3, #0
 8005948:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800594a:	2300      	movs	r3, #0
 800594c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005958:	2303      	movs	r3, #3
 800595a:	e0af      	b.n	8005abc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005964:	2b00      	cmp	r3, #0
 8005966:	d03f      	beq.n	80059e8 <USBD_CDC_Setup+0xb4>
 8005968:	2b20      	cmp	r3, #32
 800596a:	f040 809f 	bne.w	8005aac <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	88db      	ldrh	r3, [r3, #6]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d02e      	beq.n	80059d4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	b25b      	sxtb	r3, r3
 800597c:	2b00      	cmp	r3, #0
 800597e:	da16      	bge.n	80059ae <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800598c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	88d2      	ldrh	r2, [r2, #6]
 8005992:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	88db      	ldrh	r3, [r3, #6]
 8005998:	2b07      	cmp	r3, #7
 800599a:	bf28      	it	cs
 800599c:	2307      	movcs	r3, #7
 800599e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	89fa      	ldrh	r2, [r7, #14]
 80059a4:	4619      	mov	r1, r3
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f001 fb43 	bl	8007032 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80059ac:	e085      	b.n	8005aba <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	785a      	ldrb	r2, [r3, #1]
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	88db      	ldrh	r3, [r3, #6]
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80059c4:	6939      	ldr	r1, [r7, #16]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	88db      	ldrh	r3, [r3, #6]
 80059ca:	461a      	mov	r2, r3
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f001 fb5c 	bl	800708a <USBD_CtlPrepareRx>
      break;
 80059d2:	e072      	b.n	8005aba <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	7850      	ldrb	r0, [r2, #1]
 80059e0:	2200      	movs	r2, #0
 80059e2:	6839      	ldr	r1, [r7, #0]
 80059e4:	4798      	blx	r3
      break;
 80059e6:	e068      	b.n	8005aba <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	785b      	ldrb	r3, [r3, #1]
 80059ec:	2b0b      	cmp	r3, #11
 80059ee:	d852      	bhi.n	8005a96 <USBD_CDC_Setup+0x162>
 80059f0:	a201      	add	r2, pc, #4	; (adr r2, 80059f8 <USBD_CDC_Setup+0xc4>)
 80059f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f6:	bf00      	nop
 80059f8:	08005a29 	.word	0x08005a29
 80059fc:	08005aa5 	.word	0x08005aa5
 8005a00:	08005a97 	.word	0x08005a97
 8005a04:	08005a97 	.word	0x08005a97
 8005a08:	08005a97 	.word	0x08005a97
 8005a0c:	08005a97 	.word	0x08005a97
 8005a10:	08005a97 	.word	0x08005a97
 8005a14:	08005a97 	.word	0x08005a97
 8005a18:	08005a97 	.word	0x08005a97
 8005a1c:	08005a97 	.word	0x08005a97
 8005a20:	08005a53 	.word	0x08005a53
 8005a24:	08005a7d 	.word	0x08005a7d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b03      	cmp	r3, #3
 8005a32:	d107      	bne.n	8005a44 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005a34:	f107 030a 	add.w	r3, r7, #10
 8005a38:	2202      	movs	r2, #2
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f001 faf8 	bl	8007032 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a42:	e032      	b.n	8005aaa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005a44:	6839      	ldr	r1, [r7, #0]
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f001 fa82 	bl	8006f50 <USBD_CtlError>
            ret = USBD_FAIL;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	75fb      	strb	r3, [r7, #23]
          break;
 8005a50:	e02b      	b.n	8005aaa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b03      	cmp	r3, #3
 8005a5c:	d107      	bne.n	8005a6e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005a5e:	f107 030d 	add.w	r3, r7, #13
 8005a62:	2201      	movs	r2, #1
 8005a64:	4619      	mov	r1, r3
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f001 fae3 	bl	8007032 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a6c:	e01d      	b.n	8005aaa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005a6e:	6839      	ldr	r1, [r7, #0]
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f001 fa6d 	bl	8006f50 <USBD_CtlError>
            ret = USBD_FAIL;
 8005a76:	2303      	movs	r3, #3
 8005a78:	75fb      	strb	r3, [r7, #23]
          break;
 8005a7a:	e016      	b.n	8005aaa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b03      	cmp	r3, #3
 8005a86:	d00f      	beq.n	8005aa8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005a88:	6839      	ldr	r1, [r7, #0]
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f001 fa60 	bl	8006f50 <USBD_CtlError>
            ret = USBD_FAIL;
 8005a90:	2303      	movs	r3, #3
 8005a92:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005a94:	e008      	b.n	8005aa8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005a96:	6839      	ldr	r1, [r7, #0]
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f001 fa59 	bl	8006f50 <USBD_CtlError>
          ret = USBD_FAIL;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	75fb      	strb	r3, [r7, #23]
          break;
 8005aa2:	e002      	b.n	8005aaa <USBD_CDC_Setup+0x176>
          break;
 8005aa4:	bf00      	nop
 8005aa6:	e008      	b.n	8005aba <USBD_CDC_Setup+0x186>
          break;
 8005aa8:	bf00      	nop
      }
      break;
 8005aaa:	e006      	b.n	8005aba <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005aac:	6839      	ldr	r1, [r7, #0]
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f001 fa4e 	bl	8006f50 <USBD_CtlError>
      ret = USBD_FAIL;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ab8:	bf00      	nop
  }

  return (uint8_t)ret;
 8005aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3718      	adds	r7, #24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	460b      	mov	r3, r1
 8005ace:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005ad6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e04f      	b.n	8005b86 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005aec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005aee:	78fa      	ldrb	r2, [r7, #3]
 8005af0:	6879      	ldr	r1, [r7, #4]
 8005af2:	4613      	mov	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	440b      	add	r3, r1
 8005afc:	3318      	adds	r3, #24
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d029      	beq.n	8005b58 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005b04:	78fa      	ldrb	r2, [r7, #3]
 8005b06:	6879      	ldr	r1, [r7, #4]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4413      	add	r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	440b      	add	r3, r1
 8005b12:	3318      	adds	r3, #24
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	78f9      	ldrb	r1, [r7, #3]
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	1a5b      	subs	r3, r3, r1
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4403      	add	r3, r0
 8005b24:	3344      	adds	r3, #68	; 0x44
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	fbb2 f1f3 	udiv	r1, r2, r3
 8005b2c:	fb03 f301 	mul.w	r3, r3, r1
 8005b30:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d110      	bne.n	8005b58 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005b36:	78fa      	ldrb	r2, [r7, #3]
 8005b38:	6879      	ldr	r1, [r7, #4]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	440b      	add	r3, r1
 8005b44:	3318      	adds	r3, #24
 8005b46:	2200      	movs	r2, #0
 8005b48:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005b4a:	78f9      	ldrb	r1, [r7, #3]
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	2200      	movs	r2, #0
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f004 fa3e 	bl	8009fd2 <USBD_LL_Transmit>
 8005b56:	e015      	b.n	8005b84 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00b      	beq.n	8005b84 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005b7a:	68ba      	ldr	r2, [r7, #8]
 8005b7c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005b80:	78fa      	ldrb	r2, [r7, #3]
 8005b82:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b084      	sub	sp, #16
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
 8005b96:	460b      	mov	r3, r1
 8005b98:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ba0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e015      	b.n	8005bdc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005bb0:	78fb      	ldrb	r3, [r7, #3]
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f004 fa4e 	bl	800a056 <USBD_LL_GetRxDataSize>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005bd6:	4611      	mov	r1, r2
 8005bd8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bf2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e01b      	b.n	8005c36 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d015      	beq.n	8005c34 <USBD_CDC_EP0_RxReady+0x50>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005c0e:	2bff      	cmp	r3, #255	; 0xff
 8005c10:	d010      	beq.n	8005c34 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005c20:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005c28:	b292      	uxth	r2, r2
 8005c2a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	22ff      	movs	r2, #255	; 0xff
 8005c30:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
	...

08005c40 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2243      	movs	r2, #67	; 0x43
 8005c4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005c4e:	4b03      	ldr	r3, [pc, #12]	; (8005c5c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	20000094 	.word	0x20000094

08005c60 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2243      	movs	r2, #67	; 0x43
 8005c6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005c6e:	4b03      	ldr	r3, [pc, #12]	; (8005c7c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr
 8005c7c:	20000050 	.word	0x20000050

08005c80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2243      	movs	r2, #67	; 0x43
 8005c8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005c8e:	4b03      	ldr	r3, [pc, #12]	; (8005c9c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	200000d8 	.word	0x200000d8

08005ca0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	220a      	movs	r2, #10
 8005cac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005cae:	4b03      	ldr	r3, [pc, #12]	; (8005cbc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	2000000c 	.word	0x2000000c

08005cc0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e004      	b.n	8005cde <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	370c      	adds	r7, #12
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b087      	sub	sp, #28
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	60f8      	str	r0, [r7, #12]
 8005cf2:	60b9      	str	r1, [r7, #8]
 8005cf4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cfc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d101      	bne.n	8005d08 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e008      	b.n	8005d1a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	371c      	adds	r7, #28
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005d26:	b480      	push	{r7}
 8005d28:	b085      	sub	sp, #20
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
 8005d2e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d36:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e004      	b.n	8005d4c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3714      	adds	r7, #20
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d66:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e01a      	b.n	8005db0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d114      	bne.n	8005dae <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005da2:	2181      	movs	r1, #129	; 0x81
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f004 f914 	bl	8009fd2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005daa:	2300      	movs	r3, #0
 8005dac:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dc6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e016      	b.n	8005e04 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	7c1b      	ldrb	r3, [r3, #16]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d109      	bne.n	8005df2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005de4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005de8:	2101      	movs	r1, #1
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f004 f912 	bl	800a014 <USBD_LL_PrepareReceive>
 8005df0:	e007      	b.n	8005e02 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005df8:	2340      	movs	r3, #64	; 0x40
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f004 f909 	bl	800a014 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	4613      	mov	r3, r2
 8005e18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d101      	bne.n	8005e24 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e01f      	b.n	8005e64 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	79fa      	ldrb	r2, [r7, #7]
 8005e56:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f003 ff85 	bl	8009d68 <USBD_LL_Init>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3718      	adds	r7, #24
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d101      	bne.n	8005e84 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e016      	b.n	8005eb2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00b      	beq.n	8005eb0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea0:	f107 020e 	add.w	r2, r7, #14
 8005ea4:	4610      	mov	r0, r2
 8005ea6:	4798      	blx	r3
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b082      	sub	sp, #8
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f003 ff9c 	bl	8009e00 <USBD_LL_Start>
 8005ec8:	4603      	mov	r3, r0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3708      	adds	r7, #8
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b083      	sub	sp, #12
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d009      	beq.n	8005f16 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	78fa      	ldrb	r2, [r7, #3]
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	4798      	blx	r3
 8005f12:	4603      	mov	r3, r0
 8005f14:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	460b      	mov	r3, r1
 8005f2a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d007      	beq.n	8005f46 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	78fa      	ldrb	r2, [r7, #3]
 8005f40:	4611      	mov	r1, r2
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	4798      	blx	r3
  }

  return USBD_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f60:	6839      	ldr	r1, [r7, #0]
 8005f62:	4618      	mov	r0, r3
 8005f64:	f000 ffba 	bl	8006edc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005f76:	461a      	mov	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f84:	f003 031f 	and.w	r3, r3, #31
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d01a      	beq.n	8005fc2 <USBD_LL_SetupStage+0x72>
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d822      	bhi.n	8005fd6 <USBD_LL_SetupStage+0x86>
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <USBD_LL_SetupStage+0x4a>
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d00a      	beq.n	8005fae <USBD_LL_SetupStage+0x5e>
 8005f98:	e01d      	b.n	8005fd6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fa62 	bl	800646c <USBD_StdDevReq>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	73fb      	strb	r3, [r7, #15]
      break;
 8005fac:	e020      	b.n	8005ff0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 fac6 	bl	8006548 <USBD_StdItfReq>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8005fc0:	e016      	b.n	8005ff0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005fc8:	4619      	mov	r1, r3
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 fb05 	bl	80065da <USBD_StdEPReq>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8005fd4:	e00c      	b.n	8005ff0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005fdc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f003 ff6b 	bl	8009ec0 <USBD_LL_StallEP>
 8005fea:	4603      	mov	r3, r0
 8005fec:	73fb      	strb	r3, [r7, #15]
      break;
 8005fee:	bf00      	nop
  }

  return ret;
 8005ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b086      	sub	sp, #24
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	60f8      	str	r0, [r7, #12]
 8006002:	460b      	mov	r3, r1
 8006004:	607a      	str	r2, [r7, #4]
 8006006:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006008:	7afb      	ldrb	r3, [r7, #11]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d138      	bne.n	8006080 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006014:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800601c:	2b03      	cmp	r3, #3
 800601e:	d14a      	bne.n	80060b6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	689a      	ldr	r2, [r3, #8]
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	429a      	cmp	r2, r3
 800602a:	d913      	bls.n	8006054 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	689a      	ldr	r2, [r3, #8]
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	1ad2      	subs	r2, r2, r3
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	68da      	ldr	r2, [r3, #12]
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	4293      	cmp	r3, r2
 8006044:	bf28      	it	cs
 8006046:	4613      	movcs	r3, r2
 8006048:	461a      	mov	r2, r3
 800604a:	6879      	ldr	r1, [r7, #4]
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f001 f839 	bl	80070c4 <USBD_CtlContinueRx>
 8006052:	e030      	b.n	80060b6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2b03      	cmp	r3, #3
 800605e:	d10b      	bne.n	8006078 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d005      	beq.n	8006078 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f001 f834 	bl	80070e6 <USBD_CtlSendStatus>
 800607e:	e01a      	b.n	80060b6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b03      	cmp	r3, #3
 800608a:	d114      	bne.n	80060b6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00e      	beq.n	80060b6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	7afa      	ldrb	r2, [r7, #11]
 80060a2:	4611      	mov	r1, r2
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	4798      	blx	r3
 80060a8:	4603      	mov	r3, r0
 80060aa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80060ac:	7dfb      	ldrb	r3, [r7, #23]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d001      	beq.n	80060b6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80060b2:	7dfb      	ldrb	r3, [r7, #23]
 80060b4:	e000      	b.n	80060b8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3718      	adds	r7, #24
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	460b      	mov	r3, r1
 80060ca:	607a      	str	r2, [r7, #4]
 80060cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80060ce:	7afb      	ldrb	r3, [r7, #11]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d16b      	bne.n	80061ac <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	3314      	adds	r3, #20
 80060d8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d156      	bne.n	8006192 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	689a      	ldr	r2, [r3, #8]
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d914      	bls.n	800611a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	689a      	ldr	r2, [r3, #8]
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	1ad2      	subs	r2, r2, r3
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	461a      	mov	r2, r3
 8006104:	6879      	ldr	r1, [r7, #4]
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f000 ffae 	bl	8007068 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800610c:	2300      	movs	r3, #0
 800610e:	2200      	movs	r2, #0
 8006110:	2100      	movs	r1, #0
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f003 ff7e 	bl	800a014 <USBD_LL_PrepareReceive>
 8006118:	e03b      	b.n	8006192 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	68da      	ldr	r2, [r3, #12]
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	429a      	cmp	r2, r3
 8006124:	d11c      	bne.n	8006160 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800612e:	429a      	cmp	r2, r3
 8006130:	d316      	bcc.n	8006160 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800613c:	429a      	cmp	r2, r3
 800613e:	d20f      	bcs.n	8006160 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006140:	2200      	movs	r2, #0
 8006142:	2100      	movs	r1, #0
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f000 ff8f 	bl	8007068 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006152:	2300      	movs	r3, #0
 8006154:	2200      	movs	r2, #0
 8006156:	2100      	movs	r1, #0
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f003 ff5b 	bl	800a014 <USBD_LL_PrepareReceive>
 800615e:	e018      	b.n	8006192 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b03      	cmp	r3, #3
 800616a:	d10b      	bne.n	8006184 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d005      	beq.n	8006184 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006184:	2180      	movs	r1, #128	; 0x80
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f003 fe9a 	bl	8009ec0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 ffbd 	bl	800710c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006198:	2b01      	cmp	r3, #1
 800619a:	d122      	bne.n	80061e2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f7ff fe98 	bl	8005ed2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80061aa:	e01a      	b.n	80061e2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b03      	cmp	r3, #3
 80061b6:	d114      	bne.n	80061e2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061be:	695b      	ldr	r3, [r3, #20]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00e      	beq.n	80061e2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	7afa      	ldrb	r2, [r7, #11]
 80061ce:	4611      	mov	r1, r2
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	4798      	blx	r3
 80061d4:	4603      	mov	r3, r0
 80061d6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80061d8:	7dfb      	ldrb	r3, [r7, #23]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80061de:	7dfb      	ldrb	r3, [r7, #23]
 80061e0:	e000      	b.n	80061e4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3718      	adds	r7, #24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006218:	2b00      	cmp	r3, #0
 800621a:	d101      	bne.n	8006220 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800621c:	2303      	movs	r3, #3
 800621e:	e02f      	b.n	8006280 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00f      	beq.n	800624a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d009      	beq.n	800624a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	6852      	ldr	r2, [r2, #4]
 8006242:	b2d2      	uxtb	r2, r2
 8006244:	4611      	mov	r1, r2
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800624a:	2340      	movs	r3, #64	; 0x40
 800624c:	2200      	movs	r2, #0
 800624e:	2100      	movs	r1, #0
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f003 fdf0 	bl	8009e36 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2240      	movs	r2, #64	; 0x40
 8006262:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006266:	2340      	movs	r3, #64	; 0x40
 8006268:	2200      	movs	r2, #0
 800626a:	2180      	movs	r1, #128	; 0x80
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f003 fde2 	bl	8009e36 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2201      	movs	r2, #1
 8006276:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2240      	movs	r2, #64	; 0x40
 800627c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	460b      	mov	r3, r1
 8006292:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	78fa      	ldrb	r2, [r7, #3]
 8006298:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062b6:	b2da      	uxtb	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2204      	movs	r2, #4
 80062c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b04      	cmp	r3, #4
 80062e6:	d106      	bne.n	80062f6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006316:	2303      	movs	r3, #3
 8006318:	e012      	b.n	8006340 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b03      	cmp	r3, #3
 8006324:	d10b      	bne.n	800633e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d005      	beq.n	800633e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3708      	adds	r7, #8
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	460b      	mov	r3, r1
 8006352:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800635e:	2303      	movs	r3, #3
 8006360:	e014      	b.n	800638c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b03      	cmp	r3, #3
 800636c:	d10d      	bne.n	800638a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d007      	beq.n	800638a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	78fa      	ldrb	r2, [r7, #3]
 8006384:	4611      	mov	r1, r2
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	460b      	mov	r3, r1
 800639e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e014      	b.n	80063d8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b03      	cmp	r3, #3
 80063b8:	d10d      	bne.n	80063d6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d007      	beq.n	80063d6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ce:	78fa      	ldrb	r2, [r7, #3]
 80063d0:	4611      	mov	r1, r2
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b082      	sub	sp, #8
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800640c:	2b00      	cmp	r3, #0
 800640e:	d009      	beq.n	8006424 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	6852      	ldr	r2, [r2, #4]
 800641c:	b2d2      	uxtb	r2, r2
 800641e:	4611      	mov	r1, r2
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	4798      	blx	r3
  }

  return USBD_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3708      	adds	r7, #8
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800642e:	b480      	push	{r7}
 8006430:	b087      	sub	sp, #28
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	3301      	adds	r3, #1
 8006444:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800644c:	8a3b      	ldrh	r3, [r7, #16]
 800644e:	021b      	lsls	r3, r3, #8
 8006450:	b21a      	sxth	r2, r3
 8006452:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006456:	4313      	orrs	r3, r2
 8006458:	b21b      	sxth	r3, r3
 800645a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800645c:	89fb      	ldrh	r3, [r7, #14]
}
 800645e:	4618      	mov	r0, r3
 8006460:	371c      	adds	r7, #28
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
	...

0800646c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006476:	2300      	movs	r3, #0
 8006478:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006482:	2b40      	cmp	r3, #64	; 0x40
 8006484:	d005      	beq.n	8006492 <USBD_StdDevReq+0x26>
 8006486:	2b40      	cmp	r3, #64	; 0x40
 8006488:	d853      	bhi.n	8006532 <USBD_StdDevReq+0xc6>
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00b      	beq.n	80064a6 <USBD_StdDevReq+0x3a>
 800648e:	2b20      	cmp	r3, #32
 8006490:	d14f      	bne.n	8006532 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	6839      	ldr	r1, [r7, #0]
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	4798      	blx	r3
 80064a0:	4603      	mov	r3, r0
 80064a2:	73fb      	strb	r3, [r7, #15]
      break;
 80064a4:	e04a      	b.n	800653c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	785b      	ldrb	r3, [r3, #1]
 80064aa:	2b09      	cmp	r3, #9
 80064ac:	d83b      	bhi.n	8006526 <USBD_StdDevReq+0xba>
 80064ae:	a201      	add	r2, pc, #4	; (adr r2, 80064b4 <USBD_StdDevReq+0x48>)
 80064b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b4:	08006509 	.word	0x08006509
 80064b8:	0800651d 	.word	0x0800651d
 80064bc:	08006527 	.word	0x08006527
 80064c0:	08006513 	.word	0x08006513
 80064c4:	08006527 	.word	0x08006527
 80064c8:	080064e7 	.word	0x080064e7
 80064cc:	080064dd 	.word	0x080064dd
 80064d0:	08006527 	.word	0x08006527
 80064d4:	080064ff 	.word	0x080064ff
 80064d8:	080064f1 	.word	0x080064f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80064dc:	6839      	ldr	r1, [r7, #0]
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f9de 	bl	80068a0 <USBD_GetDescriptor>
          break;
 80064e4:	e024      	b.n	8006530 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80064e6:	6839      	ldr	r1, [r7, #0]
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 fb6d 	bl	8006bc8 <USBD_SetAddress>
          break;
 80064ee:	e01f      	b.n	8006530 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80064f0:	6839      	ldr	r1, [r7, #0]
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fbac 	bl	8006c50 <USBD_SetConfig>
 80064f8:	4603      	mov	r3, r0
 80064fa:	73fb      	strb	r3, [r7, #15]
          break;
 80064fc:	e018      	b.n	8006530 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80064fe:	6839      	ldr	r1, [r7, #0]
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fc4b 	bl	8006d9c <USBD_GetConfig>
          break;
 8006506:	e013      	b.n	8006530 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006508:	6839      	ldr	r1, [r7, #0]
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fc7c 	bl	8006e08 <USBD_GetStatus>
          break;
 8006510:	e00e      	b.n	8006530 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006512:	6839      	ldr	r1, [r7, #0]
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 fcab 	bl	8006e70 <USBD_SetFeature>
          break;
 800651a:	e009      	b.n	8006530 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800651c:	6839      	ldr	r1, [r7, #0]
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 fcba 	bl	8006e98 <USBD_ClrFeature>
          break;
 8006524:	e004      	b.n	8006530 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006526:	6839      	ldr	r1, [r7, #0]
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 fd11 	bl	8006f50 <USBD_CtlError>
          break;
 800652e:	bf00      	nop
      }
      break;
 8006530:	e004      	b.n	800653c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006532:	6839      	ldr	r1, [r7, #0]
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fd0b 	bl	8006f50 <USBD_CtlError>
      break;
 800653a:	bf00      	nop
  }

  return ret;
 800653c:	7bfb      	ldrb	r3, [r7, #15]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop

08006548 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006552:	2300      	movs	r3, #0
 8006554:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800655e:	2b40      	cmp	r3, #64	; 0x40
 8006560:	d005      	beq.n	800656e <USBD_StdItfReq+0x26>
 8006562:	2b40      	cmp	r3, #64	; 0x40
 8006564:	d82f      	bhi.n	80065c6 <USBD_StdItfReq+0x7e>
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <USBD_StdItfReq+0x26>
 800656a:	2b20      	cmp	r3, #32
 800656c:	d12b      	bne.n	80065c6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006574:	b2db      	uxtb	r3, r3
 8006576:	3b01      	subs	r3, #1
 8006578:	2b02      	cmp	r3, #2
 800657a:	d81d      	bhi.n	80065b8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	889b      	ldrh	r3, [r3, #4]
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b01      	cmp	r3, #1
 8006584:	d813      	bhi.n	80065ae <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	6839      	ldr	r1, [r7, #0]
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	4798      	blx	r3
 8006594:	4603      	mov	r3, r0
 8006596:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	88db      	ldrh	r3, [r3, #6]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d110      	bne.n	80065c2 <USBD_StdItfReq+0x7a>
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10d      	bne.n	80065c2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fd9d 	bl	80070e6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80065ac:	e009      	b.n	80065c2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80065ae:	6839      	ldr	r1, [r7, #0]
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fccd 	bl	8006f50 <USBD_CtlError>
          break;
 80065b6:	e004      	b.n	80065c2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80065b8:	6839      	ldr	r1, [r7, #0]
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 fcc8 	bl	8006f50 <USBD_CtlError>
          break;
 80065c0:	e000      	b.n	80065c4 <USBD_StdItfReq+0x7c>
          break;
 80065c2:	bf00      	nop
      }
      break;
 80065c4:	e004      	b.n	80065d0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80065c6:	6839      	ldr	r1, [r7, #0]
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 fcc1 	bl	8006f50 <USBD_CtlError>
      break;
 80065ce:	bf00      	nop
  }

  return ret;
 80065d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b084      	sub	sp, #16
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
 80065e2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80065e4:	2300      	movs	r3, #0
 80065e6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	889b      	ldrh	r3, [r3, #4]
 80065ec:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065f6:	2b40      	cmp	r3, #64	; 0x40
 80065f8:	d007      	beq.n	800660a <USBD_StdEPReq+0x30>
 80065fa:	2b40      	cmp	r3, #64	; 0x40
 80065fc:	f200 8145 	bhi.w	800688a <USBD_StdEPReq+0x2b0>
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00c      	beq.n	800661e <USBD_StdEPReq+0x44>
 8006604:	2b20      	cmp	r3, #32
 8006606:	f040 8140 	bne.w	800688a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	6839      	ldr	r1, [r7, #0]
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	4798      	blx	r3
 8006618:	4603      	mov	r3, r0
 800661a:	73fb      	strb	r3, [r7, #15]
      break;
 800661c:	e13a      	b.n	8006894 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	785b      	ldrb	r3, [r3, #1]
 8006622:	2b03      	cmp	r3, #3
 8006624:	d007      	beq.n	8006636 <USBD_StdEPReq+0x5c>
 8006626:	2b03      	cmp	r3, #3
 8006628:	f300 8129 	bgt.w	800687e <USBD_StdEPReq+0x2a4>
 800662c:	2b00      	cmp	r3, #0
 800662e:	d07f      	beq.n	8006730 <USBD_StdEPReq+0x156>
 8006630:	2b01      	cmp	r3, #1
 8006632:	d03c      	beq.n	80066ae <USBD_StdEPReq+0xd4>
 8006634:	e123      	b.n	800687e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b02      	cmp	r3, #2
 8006640:	d002      	beq.n	8006648 <USBD_StdEPReq+0x6e>
 8006642:	2b03      	cmp	r3, #3
 8006644:	d016      	beq.n	8006674 <USBD_StdEPReq+0x9a>
 8006646:	e02c      	b.n	80066a2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006648:	7bbb      	ldrb	r3, [r7, #14]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00d      	beq.n	800666a <USBD_StdEPReq+0x90>
 800664e:	7bbb      	ldrb	r3, [r7, #14]
 8006650:	2b80      	cmp	r3, #128	; 0x80
 8006652:	d00a      	beq.n	800666a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006654:	7bbb      	ldrb	r3, [r7, #14]
 8006656:	4619      	mov	r1, r3
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f003 fc31 	bl	8009ec0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800665e:	2180      	movs	r1, #128	; 0x80
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f003 fc2d 	bl	8009ec0 <USBD_LL_StallEP>
 8006666:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006668:	e020      	b.n	80066ac <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800666a:	6839      	ldr	r1, [r7, #0]
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fc6f 	bl	8006f50 <USBD_CtlError>
              break;
 8006672:	e01b      	b.n	80066ac <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	885b      	ldrh	r3, [r3, #2]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10e      	bne.n	800669a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800667c:	7bbb      	ldrb	r3, [r7, #14]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00b      	beq.n	800669a <USBD_StdEPReq+0xc0>
 8006682:	7bbb      	ldrb	r3, [r7, #14]
 8006684:	2b80      	cmp	r3, #128	; 0x80
 8006686:	d008      	beq.n	800669a <USBD_StdEPReq+0xc0>
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	88db      	ldrh	r3, [r3, #6]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d104      	bne.n	800669a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006690:	7bbb      	ldrb	r3, [r7, #14]
 8006692:	4619      	mov	r1, r3
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f003 fc13 	bl	8009ec0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fd23 	bl	80070e6 <USBD_CtlSendStatus>

              break;
 80066a0:	e004      	b.n	80066ac <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80066a2:	6839      	ldr	r1, [r7, #0]
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 fc53 	bl	8006f50 <USBD_CtlError>
              break;
 80066aa:	bf00      	nop
          }
          break;
 80066ac:	e0ec      	b.n	8006888 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d002      	beq.n	80066c0 <USBD_StdEPReq+0xe6>
 80066ba:	2b03      	cmp	r3, #3
 80066bc:	d016      	beq.n	80066ec <USBD_StdEPReq+0x112>
 80066be:	e030      	b.n	8006722 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066c0:	7bbb      	ldrb	r3, [r7, #14]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00d      	beq.n	80066e2 <USBD_StdEPReq+0x108>
 80066c6:	7bbb      	ldrb	r3, [r7, #14]
 80066c8:	2b80      	cmp	r3, #128	; 0x80
 80066ca:	d00a      	beq.n	80066e2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80066cc:	7bbb      	ldrb	r3, [r7, #14]
 80066ce:	4619      	mov	r1, r3
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f003 fbf5 	bl	8009ec0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80066d6:	2180      	movs	r1, #128	; 0x80
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f003 fbf1 	bl	8009ec0 <USBD_LL_StallEP>
 80066de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80066e0:	e025      	b.n	800672e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80066e2:	6839      	ldr	r1, [r7, #0]
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fc33 	bl	8006f50 <USBD_CtlError>
              break;
 80066ea:	e020      	b.n	800672e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	885b      	ldrh	r3, [r3, #2]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d11b      	bne.n	800672c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80066f4:	7bbb      	ldrb	r3, [r7, #14]
 80066f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d004      	beq.n	8006708 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80066fe:	7bbb      	ldrb	r3, [r7, #14]
 8006700:	4619      	mov	r1, r3
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f003 fbfb 	bl	8009efe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 fcec 	bl	80070e6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	6839      	ldr	r1, [r7, #0]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	4798      	blx	r3
 800671c:	4603      	mov	r3, r0
 800671e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006720:	e004      	b.n	800672c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006722:	6839      	ldr	r1, [r7, #0]
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 fc13 	bl	8006f50 <USBD_CtlError>
              break;
 800672a:	e000      	b.n	800672e <USBD_StdEPReq+0x154>
              break;
 800672c:	bf00      	nop
          }
          break;
 800672e:	e0ab      	b.n	8006888 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b02      	cmp	r3, #2
 800673a:	d002      	beq.n	8006742 <USBD_StdEPReq+0x168>
 800673c:	2b03      	cmp	r3, #3
 800673e:	d032      	beq.n	80067a6 <USBD_StdEPReq+0x1cc>
 8006740:	e097      	b.n	8006872 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006742:	7bbb      	ldrb	r3, [r7, #14]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d007      	beq.n	8006758 <USBD_StdEPReq+0x17e>
 8006748:	7bbb      	ldrb	r3, [r7, #14]
 800674a:	2b80      	cmp	r3, #128	; 0x80
 800674c:	d004      	beq.n	8006758 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800674e:	6839      	ldr	r1, [r7, #0]
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 fbfd 	bl	8006f50 <USBD_CtlError>
                break;
 8006756:	e091      	b.n	800687c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006758:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800675c:	2b00      	cmp	r3, #0
 800675e:	da0b      	bge.n	8006778 <USBD_StdEPReq+0x19e>
 8006760:	7bbb      	ldrb	r3, [r7, #14]
 8006762:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006766:	4613      	mov	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	4413      	add	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	3310      	adds	r3, #16
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	4413      	add	r3, r2
 8006774:	3304      	adds	r3, #4
 8006776:	e00b      	b.n	8006790 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006778:	7bbb      	ldrb	r3, [r7, #14]
 800677a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800677e:	4613      	mov	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	4413      	add	r3, r2
 800678e:	3304      	adds	r3, #4
 8006790:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	2200      	movs	r2, #0
 8006796:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	2202      	movs	r2, #2
 800679c:	4619      	mov	r1, r3
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fc47 	bl	8007032 <USBD_CtlSendData>
              break;
 80067a4:	e06a      	b.n	800687c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80067a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	da11      	bge.n	80067d2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80067ae:	7bbb      	ldrb	r3, [r7, #14]
 80067b0:	f003 020f 	and.w	r2, r3, #15
 80067b4:	6879      	ldr	r1, [r7, #4]
 80067b6:	4613      	mov	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	440b      	add	r3, r1
 80067c0:	3324      	adds	r3, #36	; 0x24
 80067c2:	881b      	ldrh	r3, [r3, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d117      	bne.n	80067f8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80067c8:	6839      	ldr	r1, [r7, #0]
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 fbc0 	bl	8006f50 <USBD_CtlError>
                  break;
 80067d0:	e054      	b.n	800687c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80067d2:	7bbb      	ldrb	r3, [r7, #14]
 80067d4:	f003 020f 	and.w	r2, r3, #15
 80067d8:	6879      	ldr	r1, [r7, #4]
 80067da:	4613      	mov	r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	440b      	add	r3, r1
 80067e4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80067e8:	881b      	ldrh	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d104      	bne.n	80067f8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80067ee:	6839      	ldr	r1, [r7, #0]
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 fbad 	bl	8006f50 <USBD_CtlError>
                  break;
 80067f6:	e041      	b.n	800687c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	da0b      	bge.n	8006818 <USBD_StdEPReq+0x23e>
 8006800:	7bbb      	ldrb	r3, [r7, #14]
 8006802:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006806:	4613      	mov	r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	3310      	adds	r3, #16
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	4413      	add	r3, r2
 8006814:	3304      	adds	r3, #4
 8006816:	e00b      	b.n	8006830 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006818:	7bbb      	ldrb	r3, [r7, #14]
 800681a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800681e:	4613      	mov	r3, r2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4413      	add	r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	4413      	add	r3, r2
 800682e:	3304      	adds	r3, #4
 8006830:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006832:	7bbb      	ldrb	r3, [r7, #14]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d002      	beq.n	800683e <USBD_StdEPReq+0x264>
 8006838:	7bbb      	ldrb	r3, [r7, #14]
 800683a:	2b80      	cmp	r3, #128	; 0x80
 800683c:	d103      	bne.n	8006846 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	2200      	movs	r2, #0
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	e00e      	b.n	8006864 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006846:	7bbb      	ldrb	r3, [r7, #14]
 8006848:	4619      	mov	r1, r3
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f003 fb76 	bl	8009f3c <USBD_LL_IsStallEP>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	2201      	movs	r2, #1
 800685a:	601a      	str	r2, [r3, #0]
 800685c:	e002      	b.n	8006864 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	2200      	movs	r2, #0
 8006862:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	2202      	movs	r2, #2
 8006868:	4619      	mov	r1, r3
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fbe1 	bl	8007032 <USBD_CtlSendData>
              break;
 8006870:	e004      	b.n	800687c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006872:	6839      	ldr	r1, [r7, #0]
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fb6b 	bl	8006f50 <USBD_CtlError>
              break;
 800687a:	bf00      	nop
          }
          break;
 800687c:	e004      	b.n	8006888 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800687e:	6839      	ldr	r1, [r7, #0]
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fb65 	bl	8006f50 <USBD_CtlError>
          break;
 8006886:	bf00      	nop
      }
      break;
 8006888:	e004      	b.n	8006894 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800688a:	6839      	ldr	r1, [r7, #0]
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 fb5f 	bl	8006f50 <USBD_CtlError>
      break;
 8006892:	bf00      	nop
  }

  return ret;
 8006894:	7bfb      	ldrb	r3, [r7, #15]
}
 8006896:	4618      	mov	r0, r3
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
	...

080068a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80068ae:	2300      	movs	r3, #0
 80068b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80068b2:	2300      	movs	r3, #0
 80068b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	885b      	ldrh	r3, [r3, #2]
 80068ba:	0a1b      	lsrs	r3, r3, #8
 80068bc:	b29b      	uxth	r3, r3
 80068be:	3b01      	subs	r3, #1
 80068c0:	2b0e      	cmp	r3, #14
 80068c2:	f200 8152 	bhi.w	8006b6a <USBD_GetDescriptor+0x2ca>
 80068c6:	a201      	add	r2, pc, #4	; (adr r2, 80068cc <USBD_GetDescriptor+0x2c>)
 80068c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068cc:	0800693d 	.word	0x0800693d
 80068d0:	08006955 	.word	0x08006955
 80068d4:	08006995 	.word	0x08006995
 80068d8:	08006b6b 	.word	0x08006b6b
 80068dc:	08006b6b 	.word	0x08006b6b
 80068e0:	08006b0b 	.word	0x08006b0b
 80068e4:	08006b37 	.word	0x08006b37
 80068e8:	08006b6b 	.word	0x08006b6b
 80068ec:	08006b6b 	.word	0x08006b6b
 80068f0:	08006b6b 	.word	0x08006b6b
 80068f4:	08006b6b 	.word	0x08006b6b
 80068f8:	08006b6b 	.word	0x08006b6b
 80068fc:	08006b6b 	.word	0x08006b6b
 8006900:	08006b6b 	.word	0x08006b6b
 8006904:	08006909 	.word	0x08006909
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800690e:	69db      	ldr	r3, [r3, #28]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00b      	beq.n	800692c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	7c12      	ldrb	r2, [r2, #16]
 8006920:	f107 0108 	add.w	r1, r7, #8
 8006924:	4610      	mov	r0, r2
 8006926:	4798      	blx	r3
 8006928:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800692a:	e126      	b.n	8006b7a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800692c:	6839      	ldr	r1, [r7, #0]
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 fb0e 	bl	8006f50 <USBD_CtlError>
        err++;
 8006934:	7afb      	ldrb	r3, [r7, #11]
 8006936:	3301      	adds	r3, #1
 8006938:	72fb      	strb	r3, [r7, #11]
      break;
 800693a:	e11e      	b.n	8006b7a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	7c12      	ldrb	r2, [r2, #16]
 8006948:	f107 0108 	add.w	r1, r7, #8
 800694c:	4610      	mov	r0, r2
 800694e:	4798      	blx	r3
 8006950:	60f8      	str	r0, [r7, #12]
      break;
 8006952:	e112      	b.n	8006b7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	7c1b      	ldrb	r3, [r3, #16]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10d      	bne.n	8006978 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006964:	f107 0208 	add.w	r2, r7, #8
 8006968:	4610      	mov	r0, r2
 800696a:	4798      	blx	r3
 800696c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	3301      	adds	r3, #1
 8006972:	2202      	movs	r2, #2
 8006974:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006976:	e100      	b.n	8006b7a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800697e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006980:	f107 0208 	add.w	r2, r7, #8
 8006984:	4610      	mov	r0, r2
 8006986:	4798      	blx	r3
 8006988:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	3301      	adds	r3, #1
 800698e:	2202      	movs	r2, #2
 8006990:	701a      	strb	r2, [r3, #0]
      break;
 8006992:	e0f2      	b.n	8006b7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	885b      	ldrh	r3, [r3, #2]
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b05      	cmp	r3, #5
 800699c:	f200 80ac 	bhi.w	8006af8 <USBD_GetDescriptor+0x258>
 80069a0:	a201      	add	r2, pc, #4	; (adr r2, 80069a8 <USBD_GetDescriptor+0x108>)
 80069a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a6:	bf00      	nop
 80069a8:	080069c1 	.word	0x080069c1
 80069ac:	080069f5 	.word	0x080069f5
 80069b0:	08006a29 	.word	0x08006a29
 80069b4:	08006a5d 	.word	0x08006a5d
 80069b8:	08006a91 	.word	0x08006a91
 80069bc:	08006ac5 	.word	0x08006ac5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00b      	beq.n	80069e4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	7c12      	ldrb	r2, [r2, #16]
 80069d8:	f107 0108 	add.w	r1, r7, #8
 80069dc:	4610      	mov	r0, r2
 80069de:	4798      	blx	r3
 80069e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069e2:	e091      	b.n	8006b08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80069e4:	6839      	ldr	r1, [r7, #0]
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fab2 	bl	8006f50 <USBD_CtlError>
            err++;
 80069ec:	7afb      	ldrb	r3, [r7, #11]
 80069ee:	3301      	adds	r3, #1
 80069f0:	72fb      	strb	r3, [r7, #11]
          break;
 80069f2:	e089      	b.n	8006b08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00b      	beq.n	8006a18 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	7c12      	ldrb	r2, [r2, #16]
 8006a0c:	f107 0108 	add.w	r1, r7, #8
 8006a10:	4610      	mov	r0, r2
 8006a12:	4798      	blx	r3
 8006a14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a16:	e077      	b.n	8006b08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fa98 	bl	8006f50 <USBD_CtlError>
            err++;
 8006a20:	7afb      	ldrb	r3, [r7, #11]
 8006a22:	3301      	adds	r3, #1
 8006a24:	72fb      	strb	r3, [r7, #11]
          break;
 8006a26:	e06f      	b.n	8006b08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00b      	beq.n	8006a4c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	7c12      	ldrb	r2, [r2, #16]
 8006a40:	f107 0108 	add.w	r1, r7, #8
 8006a44:	4610      	mov	r0, r2
 8006a46:	4798      	blx	r3
 8006a48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a4a:	e05d      	b.n	8006b08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006a4c:	6839      	ldr	r1, [r7, #0]
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fa7e 	bl	8006f50 <USBD_CtlError>
            err++;
 8006a54:	7afb      	ldrb	r3, [r7, #11]
 8006a56:	3301      	adds	r3, #1
 8006a58:	72fb      	strb	r3, [r7, #11]
          break;
 8006a5a:	e055      	b.n	8006b08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00b      	beq.n	8006a80 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	7c12      	ldrb	r2, [r2, #16]
 8006a74:	f107 0108 	add.w	r1, r7, #8
 8006a78:	4610      	mov	r0, r2
 8006a7a:	4798      	blx	r3
 8006a7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a7e:	e043      	b.n	8006b08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006a80:	6839      	ldr	r1, [r7, #0]
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 fa64 	bl	8006f50 <USBD_CtlError>
            err++;
 8006a88:	7afb      	ldrb	r3, [r7, #11]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a8e:	e03b      	b.n	8006b08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a96:	695b      	ldr	r3, [r3, #20]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00b      	beq.n	8006ab4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	7c12      	ldrb	r2, [r2, #16]
 8006aa8:	f107 0108 	add.w	r1, r7, #8
 8006aac:	4610      	mov	r0, r2
 8006aae:	4798      	blx	r3
 8006ab0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ab2:	e029      	b.n	8006b08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006ab4:	6839      	ldr	r1, [r7, #0]
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 fa4a 	bl	8006f50 <USBD_CtlError>
            err++;
 8006abc:	7afb      	ldrb	r3, [r7, #11]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ac2:	e021      	b.n	8006b08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00b      	beq.n	8006ae8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	7c12      	ldrb	r2, [r2, #16]
 8006adc:	f107 0108 	add.w	r1, r7, #8
 8006ae0:	4610      	mov	r0, r2
 8006ae2:	4798      	blx	r3
 8006ae4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ae6:	e00f      	b.n	8006b08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006ae8:	6839      	ldr	r1, [r7, #0]
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 fa30 	bl	8006f50 <USBD_CtlError>
            err++;
 8006af0:	7afb      	ldrb	r3, [r7, #11]
 8006af2:	3301      	adds	r3, #1
 8006af4:	72fb      	strb	r3, [r7, #11]
          break;
 8006af6:	e007      	b.n	8006b08 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006af8:	6839      	ldr	r1, [r7, #0]
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 fa28 	bl	8006f50 <USBD_CtlError>
          err++;
 8006b00:	7afb      	ldrb	r3, [r7, #11]
 8006b02:	3301      	adds	r3, #1
 8006b04:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006b06:	bf00      	nop
      }
      break;
 8006b08:	e037      	b.n	8006b7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	7c1b      	ldrb	r3, [r3, #16]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d109      	bne.n	8006b26 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b1a:	f107 0208 	add.w	r2, r7, #8
 8006b1e:	4610      	mov	r0, r2
 8006b20:	4798      	blx	r3
 8006b22:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b24:	e029      	b.n	8006b7a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006b26:	6839      	ldr	r1, [r7, #0]
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fa11 	bl	8006f50 <USBD_CtlError>
        err++;
 8006b2e:	7afb      	ldrb	r3, [r7, #11]
 8006b30:	3301      	adds	r3, #1
 8006b32:	72fb      	strb	r3, [r7, #11]
      break;
 8006b34:	e021      	b.n	8006b7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	7c1b      	ldrb	r3, [r3, #16]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d10d      	bne.n	8006b5a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b46:	f107 0208 	add.w	r2, r7, #8
 8006b4a:	4610      	mov	r0, r2
 8006b4c:	4798      	blx	r3
 8006b4e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	3301      	adds	r3, #1
 8006b54:	2207      	movs	r2, #7
 8006b56:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b58:	e00f      	b.n	8006b7a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006b5a:	6839      	ldr	r1, [r7, #0]
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 f9f7 	bl	8006f50 <USBD_CtlError>
        err++;
 8006b62:	7afb      	ldrb	r3, [r7, #11]
 8006b64:	3301      	adds	r3, #1
 8006b66:	72fb      	strb	r3, [r7, #11]
      break;
 8006b68:	e007      	b.n	8006b7a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006b6a:	6839      	ldr	r1, [r7, #0]
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f9ef 	bl	8006f50 <USBD_CtlError>
      err++;
 8006b72:	7afb      	ldrb	r3, [r7, #11]
 8006b74:	3301      	adds	r3, #1
 8006b76:	72fb      	strb	r3, [r7, #11]
      break;
 8006b78:	bf00      	nop
  }

  if (err != 0U)
 8006b7a:	7afb      	ldrb	r3, [r7, #11]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d11e      	bne.n	8006bbe <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	88db      	ldrh	r3, [r3, #6]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d016      	beq.n	8006bb6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006b88:	893b      	ldrh	r3, [r7, #8]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00e      	beq.n	8006bac <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	88da      	ldrh	r2, [r3, #6]
 8006b92:	893b      	ldrh	r3, [r7, #8]
 8006b94:	4293      	cmp	r3, r2
 8006b96:	bf28      	it	cs
 8006b98:	4613      	movcs	r3, r2
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b9e:	893b      	ldrh	r3, [r7, #8]
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	68f9      	ldr	r1, [r7, #12]
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fa44 	bl	8007032 <USBD_CtlSendData>
 8006baa:	e009      	b.n	8006bc0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006bac:	6839      	ldr	r1, [r7, #0]
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f9ce 	bl	8006f50 <USBD_CtlError>
 8006bb4:	e004      	b.n	8006bc0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 fa95 	bl	80070e6 <USBD_CtlSendStatus>
 8006bbc:	e000      	b.n	8006bc0 <USBD_GetDescriptor+0x320>
    return;
 8006bbe:	bf00      	nop
  }
}
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop

08006bc8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	889b      	ldrh	r3, [r3, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d131      	bne.n	8006c3e <USBD_SetAddress+0x76>
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	88db      	ldrh	r3, [r3, #6]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d12d      	bne.n	8006c3e <USBD_SetAddress+0x76>
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	885b      	ldrh	r3, [r3, #2]
 8006be6:	2b7f      	cmp	r3, #127	; 0x7f
 8006be8:	d829      	bhi.n	8006c3e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	885b      	ldrh	r3, [r3, #2]
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bf4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b03      	cmp	r3, #3
 8006c00:	d104      	bne.n	8006c0c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006c02:	6839      	ldr	r1, [r7, #0]
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 f9a3 	bl	8006f50 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c0a:	e01d      	b.n	8006c48 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	7bfa      	ldrb	r2, [r7, #15]
 8006c10:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006c14:	7bfb      	ldrb	r3, [r7, #15]
 8006c16:	4619      	mov	r1, r3
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f003 f9bb 	bl	8009f94 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 fa61 	bl	80070e6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006c24:	7bfb      	ldrb	r3, [r7, #15]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d004      	beq.n	8006c34 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2202      	movs	r2, #2
 8006c2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c32:	e009      	b.n	8006c48 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c3c:	e004      	b.n	8006c48 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006c3e:	6839      	ldr	r1, [r7, #0]
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 f985 	bl	8006f50 <USBD_CtlError>
  }
}
 8006c46:	bf00      	nop
 8006c48:	bf00      	nop
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	885b      	ldrh	r3, [r3, #2]
 8006c62:	b2da      	uxtb	r2, r3
 8006c64:	4b4c      	ldr	r3, [pc, #304]	; (8006d98 <USBD_SetConfig+0x148>)
 8006c66:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006c68:	4b4b      	ldr	r3, [pc, #300]	; (8006d98 <USBD_SetConfig+0x148>)
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d905      	bls.n	8006c7c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006c70:	6839      	ldr	r1, [r7, #0]
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f96c 	bl	8006f50 <USBD_CtlError>
    return USBD_FAIL;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e088      	b.n	8006d8e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d002      	beq.n	8006c8e <USBD_SetConfig+0x3e>
 8006c88:	2b03      	cmp	r3, #3
 8006c8a:	d025      	beq.n	8006cd8 <USBD_SetConfig+0x88>
 8006c8c:	e071      	b.n	8006d72 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006c8e:	4b42      	ldr	r3, [pc, #264]	; (8006d98 <USBD_SetConfig+0x148>)
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d01c      	beq.n	8006cd0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006c96:	4b40      	ldr	r3, [pc, #256]	; (8006d98 <USBD_SetConfig+0x148>)
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ca0:	4b3d      	ldr	r3, [pc, #244]	; (8006d98 <USBD_SetConfig+0x148>)
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f7ff f91e 	bl	8005ee8 <USBD_SetClassConfig>
 8006cac:	4603      	mov	r3, r0
 8006cae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d004      	beq.n	8006cc0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006cb6:	6839      	ldr	r1, [r7, #0]
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f949 	bl	8006f50 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006cbe:	e065      	b.n	8006d8c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fa10 	bl	80070e6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2203      	movs	r2, #3
 8006cca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006cce:	e05d      	b.n	8006d8c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 fa08 	bl	80070e6 <USBD_CtlSendStatus>
      break;
 8006cd6:	e059      	b.n	8006d8c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006cd8:	4b2f      	ldr	r3, [pc, #188]	; (8006d98 <USBD_SetConfig+0x148>)
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d112      	bne.n	8006d06 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006ce8:	4b2b      	ldr	r3, [pc, #172]	; (8006d98 <USBD_SetConfig+0x148>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	461a      	mov	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006cf2:	4b29      	ldr	r3, [pc, #164]	; (8006d98 <USBD_SetConfig+0x148>)
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f7ff f911 	bl	8005f20 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f9f1 	bl	80070e6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006d04:	e042      	b.n	8006d8c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006d06:	4b24      	ldr	r3, [pc, #144]	; (8006d98 <USBD_SetConfig+0x148>)
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d02a      	beq.n	8006d6a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f7ff f8ff 	bl	8005f20 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006d22:	4b1d      	ldr	r3, [pc, #116]	; (8006d98 <USBD_SetConfig+0x148>)
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	461a      	mov	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d2c:	4b1a      	ldr	r3, [pc, #104]	; (8006d98 <USBD_SetConfig+0x148>)
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	4619      	mov	r1, r3
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7ff f8d8 	bl	8005ee8 <USBD_SetClassConfig>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006d3c:	7bfb      	ldrb	r3, [r7, #15]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00f      	beq.n	8006d62 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006d42:	6839      	ldr	r1, [r7, #0]
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f903 	bl	8006f50 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	4619      	mov	r1, r3
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7ff f8e4 	bl	8005f20 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006d60:	e014      	b.n	8006d8c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f9bf 	bl	80070e6 <USBD_CtlSendStatus>
      break;
 8006d68:	e010      	b.n	8006d8c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 f9bb 	bl	80070e6 <USBD_CtlSendStatus>
      break;
 8006d70:	e00c      	b.n	8006d8c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006d72:	6839      	ldr	r1, [r7, #0]
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f8eb 	bl	8006f50 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d7a:	4b07      	ldr	r3, [pc, #28]	; (8006d98 <USBD_SetConfig+0x148>)
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	4619      	mov	r1, r3
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f7ff f8cd 	bl	8005f20 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006d86:	2303      	movs	r3, #3
 8006d88:	73fb      	strb	r3, [r7, #15]
      break;
 8006d8a:	bf00      	nop
  }

  return ret;
 8006d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	200004c8 	.word	0x200004c8

08006d9c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	88db      	ldrh	r3, [r3, #6]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d004      	beq.n	8006db8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006dae:	6839      	ldr	r1, [r7, #0]
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 f8cd 	bl	8006f50 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006db6:	e023      	b.n	8006e00 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	dc02      	bgt.n	8006dca <USBD_GetConfig+0x2e>
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	dc03      	bgt.n	8006dd0 <USBD_GetConfig+0x34>
 8006dc8:	e015      	b.n	8006df6 <USBD_GetConfig+0x5a>
 8006dca:	2b03      	cmp	r3, #3
 8006dcc:	d00b      	beq.n	8006de6 <USBD_GetConfig+0x4a>
 8006dce:	e012      	b.n	8006df6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	3308      	adds	r3, #8
 8006dda:	2201      	movs	r2, #1
 8006ddc:	4619      	mov	r1, r3
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f927 	bl	8007032 <USBD_CtlSendData>
        break;
 8006de4:	e00c      	b.n	8006e00 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	3304      	adds	r3, #4
 8006dea:	2201      	movs	r2, #1
 8006dec:	4619      	mov	r1, r3
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f91f 	bl	8007032 <USBD_CtlSendData>
        break;
 8006df4:	e004      	b.n	8006e00 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006df6:	6839      	ldr	r1, [r7, #0]
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 f8a9 	bl	8006f50 <USBD_CtlError>
        break;
 8006dfe:	bf00      	nop
}
 8006e00:	bf00      	nop
 8006e02:	3708      	adds	r7, #8
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d81e      	bhi.n	8006e5e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	88db      	ldrh	r3, [r3, #6]
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d004      	beq.n	8006e32 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006e28:	6839      	ldr	r1, [r7, #0]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f890 	bl	8006f50 <USBD_CtlError>
        break;
 8006e30:	e01a      	b.n	8006e68 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2201      	movs	r2, #1
 8006e36:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d005      	beq.n	8006e4e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	f043 0202 	orr.w	r2, r3, #2
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	330c      	adds	r3, #12
 8006e52:	2202      	movs	r2, #2
 8006e54:	4619      	mov	r1, r3
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f8eb 	bl	8007032 <USBD_CtlSendData>
      break;
 8006e5c:	e004      	b.n	8006e68 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006e5e:	6839      	ldr	r1, [r7, #0]
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f875 	bl	8006f50 <USBD_CtlError>
      break;
 8006e66:	bf00      	nop
  }
}
 8006e68:	bf00      	nop
 8006e6a:	3708      	adds	r7, #8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	885b      	ldrh	r3, [r3, #2]
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d106      	bne.n	8006e90 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f92b 	bl	80070e6 <USBD_CtlSendStatus>
  }
}
 8006e90:	bf00      	nop
 8006e92:	3708      	adds	r7, #8
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d80b      	bhi.n	8006ec8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	885b      	ldrh	r3, [r3, #2]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d10c      	bne.n	8006ed2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f910 	bl	80070e6 <USBD_CtlSendStatus>
      }
      break;
 8006ec6:	e004      	b.n	8006ed2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006ec8:	6839      	ldr	r1, [r7, #0]
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f840 	bl	8006f50 <USBD_CtlError>
      break;
 8006ed0:	e000      	b.n	8006ed4 <USBD_ClrFeature+0x3c>
      break;
 8006ed2:	bf00      	nop
  }
}
 8006ed4:	bf00      	nop
 8006ed6:	3708      	adds	r7, #8
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	781a      	ldrb	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	781a      	ldrb	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	3301      	adds	r3, #1
 8006f04:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f7ff fa91 	bl	800642e <SWAPBYTE>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	461a      	mov	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	3301      	adds	r3, #1
 8006f18:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f7ff fa84 	bl	800642e <SWAPBYTE>
 8006f26:	4603      	mov	r3, r0
 8006f28:	461a      	mov	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	3301      	adds	r3, #1
 8006f32:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	3301      	adds	r3, #1
 8006f38:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f7ff fa77 	bl	800642e <SWAPBYTE>
 8006f40:	4603      	mov	r3, r0
 8006f42:	461a      	mov	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	80da      	strh	r2, [r3, #6]
}
 8006f48:	bf00      	nop
 8006f4a:	3710      	adds	r7, #16
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f5a:	2180      	movs	r1, #128	; 0x80
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f002 ffaf 	bl	8009ec0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006f62:	2100      	movs	r1, #0
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f002 ffab 	bl	8009ec0 <USBD_LL_StallEP>
}
 8006f6a:	bf00      	nop
 8006f6c:	3708      	adds	r7, #8
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b086      	sub	sp, #24
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	60f8      	str	r0, [r7, #12]
 8006f7a:	60b9      	str	r1, [r7, #8]
 8006f7c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d036      	beq.n	8006ff6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006f8c:	6938      	ldr	r0, [r7, #16]
 8006f8e:	f000 f836 	bl	8006ffe <USBD_GetLen>
 8006f92:	4603      	mov	r3, r0
 8006f94:	3301      	adds	r3, #1
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	005b      	lsls	r3, r3, #1
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006fa0:	7dfb      	ldrb	r3, [r7, #23]
 8006fa2:	68ba      	ldr	r2, [r7, #8]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	7812      	ldrb	r2, [r2, #0]
 8006faa:	701a      	strb	r2, [r3, #0]
  idx++;
 8006fac:	7dfb      	ldrb	r3, [r7, #23]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006fb2:	7dfb      	ldrb	r3, [r7, #23]
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	2203      	movs	r2, #3
 8006fba:	701a      	strb	r2, [r3, #0]
  idx++;
 8006fbc:	7dfb      	ldrb	r3, [r7, #23]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006fc2:	e013      	b.n	8006fec <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006fc4:	7dfb      	ldrb	r3, [r7, #23]
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	4413      	add	r3, r2
 8006fca:	693a      	ldr	r2, [r7, #16]
 8006fcc:	7812      	ldrb	r2, [r2, #0]
 8006fce:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	613b      	str	r3, [r7, #16]
    idx++;
 8006fd6:	7dfb      	ldrb	r3, [r7, #23]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006fdc:	7dfb      	ldrb	r3, [r7, #23]
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	701a      	strb	r2, [r3, #0]
    idx++;
 8006fe6:	7dfb      	ldrb	r3, [r7, #23]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1e7      	bne.n	8006fc4 <USBD_GetString+0x52>
 8006ff4:	e000      	b.n	8006ff8 <USBD_GetString+0x86>
    return;
 8006ff6:	bf00      	nop
  }
}
 8006ff8:	3718      	adds	r7, #24
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006ffe:	b480      	push	{r7}
 8007000:	b085      	sub	sp, #20
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007006:	2300      	movs	r3, #0
 8007008:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800700e:	e005      	b.n	800701c <USBD_GetLen+0x1e>
  {
    len++;
 8007010:	7bfb      	ldrb	r3, [r7, #15]
 8007012:	3301      	adds	r3, #1
 8007014:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	3301      	adds	r3, #1
 800701a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1f5      	bne.n	8007010 <USBD_GetLen+0x12>
  }

  return len;
 8007024:	7bfb      	ldrb	r3, [r7, #15]
}
 8007026:	4618      	mov	r0, r3
 8007028:	3714      	adds	r7, #20
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b084      	sub	sp, #16
 8007036:	af00      	add	r7, sp, #0
 8007038:	60f8      	str	r0, [r7, #12]
 800703a:	60b9      	str	r1, [r7, #8]
 800703c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2202      	movs	r2, #2
 8007042:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	2100      	movs	r1, #0
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f002 ffba 	bl	8009fd2 <USBD_LL_Transmit>

  return USBD_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	68ba      	ldr	r2, [r7, #8]
 8007078:	2100      	movs	r1, #0
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f002 ffa9 	bl	8009fd2 <USBD_LL_Transmit>

  return USBD_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b084      	sub	sp, #16
 800708e:	af00      	add	r7, sp, #0
 8007090:	60f8      	str	r0, [r7, #12]
 8007092:	60b9      	str	r1, [r7, #8]
 8007094:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2203      	movs	r2, #3
 800709a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	2100      	movs	r1, #0
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f002 ffad 	bl	800a014 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68ba      	ldr	r2, [r7, #8]
 80070d4:	2100      	movs	r1, #0
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f002 ff9c 	bl	800a014 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b082      	sub	sp, #8
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2204      	movs	r2, #4
 80070f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80070f6:	2300      	movs	r3, #0
 80070f8:	2200      	movs	r2, #0
 80070fa:	2100      	movs	r1, #0
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f002 ff68 	bl	8009fd2 <USBD_LL_Transmit>

  return USBD_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2205      	movs	r2, #5
 8007118:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800711c:	2300      	movs	r3, #0
 800711e:	2200      	movs	r2, #0
 8007120:	2100      	movs	r1, #0
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f002 ff76 	bl	800a014 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007132:	b480      	push	{r7}
 8007134:	b085      	sub	sp, #20
 8007136:	af00      	add	r7, sp, #0
 8007138:	4603      	mov	r3, r0
 800713a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800713c:	2300      	movs	r3, #0
 800713e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007140:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007144:	2b84      	cmp	r3, #132	; 0x84
 8007146:	d005      	beq.n	8007154 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007148:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	4413      	add	r3, r2
 8007150:	3303      	adds	r3, #3
 8007152:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007154:	68fb      	ldr	r3, [r7, #12]
}
 8007156:	4618      	mov	r0, r3
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007162:	b480      	push	{r7}
 8007164:	b083      	sub	sp, #12
 8007166:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007168:	f3ef 8305 	mrs	r3, IPSR
 800716c:	607b      	str	r3, [r7, #4]
  return(result);
 800716e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007170:	2b00      	cmp	r3, #0
 8007172:	bf14      	ite	ne
 8007174:	2301      	movne	r3, #1
 8007176:	2300      	moveq	r3, #0
 8007178:	b2db      	uxtb	r3, r3
}
 800717a:	4618      	mov	r0, r3
 800717c:	370c      	adds	r7, #12
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800718a:	f001 f915 	bl	80083b8 <vTaskStartScheduler>
  
  return osOK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	bd80      	pop	{r7, pc}

08007194 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007196:	b089      	sub	sp, #36	; 0x24
 8007198:	af04      	add	r7, sp, #16
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d020      	beq.n	80071e8 <osThreadCreate+0x54>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d01c      	beq.n	80071e8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	685c      	ldr	r4, [r3, #4]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681d      	ldr	r5, [r3, #0]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	691e      	ldr	r6, [r3, #16]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7ff ffb6 	bl	8007132 <makeFreeRtosPriority>
 80071c6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071d0:	9202      	str	r2, [sp, #8]
 80071d2:	9301      	str	r3, [sp, #4]
 80071d4:	9100      	str	r1, [sp, #0]
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	4632      	mov	r2, r6
 80071da:	4629      	mov	r1, r5
 80071dc:	4620      	mov	r0, r4
 80071de:	f000 ff0d 	bl	8007ffc <xTaskCreateStatic>
 80071e2:	4603      	mov	r3, r0
 80071e4:	60fb      	str	r3, [r7, #12]
 80071e6:	e01c      	b.n	8007222 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	685c      	ldr	r4, [r3, #4]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071f4:	b29e      	uxth	r6, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7ff ff98 	bl	8007132 <makeFreeRtosPriority>
 8007202:	4602      	mov	r2, r0
 8007204:	f107 030c 	add.w	r3, r7, #12
 8007208:	9301      	str	r3, [sp, #4]
 800720a:	9200      	str	r2, [sp, #0]
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	4632      	mov	r2, r6
 8007210:	4629      	mov	r1, r5
 8007212:	4620      	mov	r0, r4
 8007214:	f000 ff4f 	bl	80080b6 <xTaskCreate>
 8007218:	4603      	mov	r3, r0
 800721a:	2b01      	cmp	r3, #1
 800721c:	d001      	beq.n	8007222 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800721e:	2300      	movs	r3, #0
 8007220:	e000      	b.n	8007224 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007222:	68fb      	ldr	r3, [r7, #12]
}
 8007224:	4618      	mov	r0, r3
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800722c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d001      	beq.n	8007242 <osDelay+0x16>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	e000      	b.n	8007244 <osDelay+0x18>
 8007242:	2301      	movs	r3, #1
 8007244:	4618      	mov	r0, r3
 8007246:	f001 f883 	bl	8008350 <vTaskDelay>
  
  return osOK;
 800724a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800724c:	4618      	mov	r0, r3
 800724e:	3710      	adds	r7, #16
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007254:	b590      	push	{r4, r7, lr}
 8007256:	b085      	sub	sp, #20
 8007258:	af02      	add	r7, sp, #8
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d011      	beq.n	800728a <osMessageCreate+0x36>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00d      	beq.n	800728a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6818      	ldr	r0, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6859      	ldr	r1, [r3, #4]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	689a      	ldr	r2, [r3, #8]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	2400      	movs	r4, #0
 8007280:	9400      	str	r4, [sp, #0]
 8007282:	f000 f9df 	bl	8007644 <xQueueGenericCreateStatic>
 8007286:	4603      	mov	r3, r0
 8007288:	e008      	b.n	800729c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6818      	ldr	r0, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	4619      	mov	r1, r3
 8007296:	f000 fa4d 	bl	8007734 <xQueueGenericCreate>
 800729a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800729c:	4618      	mov	r0, r3
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd90      	pop	{r4, r7, pc}

080072a4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b086      	sub	sp, #24
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80072b0:	2300      	movs	r3, #0
 80072b2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d101      	bne.n	80072c2 <osMessagePut+0x1e>
    ticks = 1;
 80072be:	2301      	movs	r3, #1
 80072c0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80072c2:	f7ff ff4e 	bl	8007162 <inHandlerMode>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d018      	beq.n	80072fe <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80072cc:	f107 0210 	add.w	r2, r7, #16
 80072d0:	f107 0108 	add.w	r1, r7, #8
 80072d4:	2300      	movs	r3, #0
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 fb84 	bl	80079e4 <xQueueGenericSendFromISR>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d001      	beq.n	80072e6 <osMessagePut+0x42>
      return osErrorOS;
 80072e2:	23ff      	movs	r3, #255	; 0xff
 80072e4:	e018      	b.n	8007318 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d014      	beq.n	8007316 <osMessagePut+0x72>
 80072ec:	4b0c      	ldr	r3, [pc, #48]	; (8007320 <osMessagePut+0x7c>)
 80072ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	f3bf 8f4f 	dsb	sy
 80072f8:	f3bf 8f6f 	isb	sy
 80072fc:	e00b      	b.n	8007316 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80072fe:	f107 0108 	add.w	r1, r7, #8
 8007302:	2300      	movs	r3, #0
 8007304:	697a      	ldr	r2, [r7, #20]
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f000 fa6e 	bl	80077e8 <xQueueGenericSend>
 800730c:	4603      	mov	r3, r0
 800730e:	2b01      	cmp	r3, #1
 8007310:	d001      	beq.n	8007316 <osMessagePut+0x72>
      return osErrorOS;
 8007312:	23ff      	movs	r3, #255	; 0xff
 8007314:	e000      	b.n	8007318 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3718      	adds	r7, #24
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	e000ed04 	.word	0xe000ed04

08007324 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007324:	b590      	push	{r4, r7, lr}
 8007326:	b08b      	sub	sp, #44	; 0x2c
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007334:	2300      	movs	r3, #0
 8007336:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10a      	bne.n	8007354 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800733e:	2380      	movs	r3, #128	; 0x80
 8007340:	617b      	str	r3, [r7, #20]
    return event;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	461c      	mov	r4, r3
 8007346:	f107 0314 	add.w	r3, r7, #20
 800734a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800734e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007352:	e054      	b.n	80073fe <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007354:	2300      	movs	r3, #0
 8007356:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007358:	2300      	movs	r3, #0
 800735a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007362:	d103      	bne.n	800736c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007364:	f04f 33ff 	mov.w	r3, #4294967295
 8007368:	627b      	str	r3, [r7, #36]	; 0x24
 800736a:	e009      	b.n	8007380 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d006      	beq.n	8007380 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8007376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007378:	2b00      	cmp	r3, #0
 800737a:	d101      	bne.n	8007380 <osMessageGet+0x5c>
      ticks = 1;
 800737c:	2301      	movs	r3, #1
 800737e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007380:	f7ff feef 	bl	8007162 <inHandlerMode>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d01c      	beq.n	80073c4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800738a:	f107 0220 	add.w	r2, r7, #32
 800738e:	f107 0314 	add.w	r3, r7, #20
 8007392:	3304      	adds	r3, #4
 8007394:	4619      	mov	r1, r3
 8007396:	68b8      	ldr	r0, [r7, #8]
 8007398:	f000 fca0 	bl	8007cdc <xQueueReceiveFromISR>
 800739c:	4603      	mov	r3, r0
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d102      	bne.n	80073a8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80073a2:	2310      	movs	r3, #16
 80073a4:	617b      	str	r3, [r7, #20]
 80073a6:	e001      	b.n	80073ac <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80073a8:	2300      	movs	r3, #0
 80073aa:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80073ac:	6a3b      	ldr	r3, [r7, #32]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d01d      	beq.n	80073ee <osMessageGet+0xca>
 80073b2:	4b15      	ldr	r3, [pc, #84]	; (8007408 <osMessageGet+0xe4>)
 80073b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073b8:	601a      	str	r2, [r3, #0]
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	e014      	b.n	80073ee <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80073c4:	f107 0314 	add.w	r3, r7, #20
 80073c8:	3304      	adds	r3, #4
 80073ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073cc:	4619      	mov	r1, r3
 80073ce:	68b8      	ldr	r0, [r7, #8]
 80073d0:	f000 fba4 	bl	8007b1c <xQueueReceive>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d102      	bne.n	80073e0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80073da:	2310      	movs	r3, #16
 80073dc:	617b      	str	r3, [r7, #20]
 80073de:	e006      	b.n	80073ee <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d101      	bne.n	80073ea <osMessageGet+0xc6>
 80073e6:	2300      	movs	r3, #0
 80073e8:	e000      	b.n	80073ec <osMessageGet+0xc8>
 80073ea:	2340      	movs	r3, #64	; 0x40
 80073ec:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	461c      	mov	r4, r3
 80073f2:	f107 0314 	add.w	r3, r7, #20
 80073f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80073fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	372c      	adds	r7, #44	; 0x2c
 8007402:	46bd      	mov	sp, r7
 8007404:	bd90      	pop	{r4, r7, pc}
 8007406:	bf00      	nop
 8007408:	e000ed04 	.word	0xe000ed04

0800740c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f103 0208 	add.w	r2, r3, #8
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f04f 32ff 	mov.w	r2, #4294967295
 8007424:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f103 0208 	add.w	r2, r3, #8
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f103 0208 	add.w	r2, r3, #8
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800745a:	bf00      	nop
 800745c:	370c      	adds	r7, #12
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr

08007466 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007466:	b480      	push	{r7}
 8007468:	b085      	sub	sp, #20
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	689a      	ldr	r2, [r3, #8]
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	683a      	ldr	r2, [r7, #0]
 800748a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	1c5a      	adds	r2, r3, #1
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	601a      	str	r2, [r3, #0]
}
 80074a2:	bf00      	nop
 80074a4:	3714      	adds	r7, #20
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074ae:	b480      	push	{r7}
 80074b0:	b085      	sub	sp, #20
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c4:	d103      	bne.n	80074ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	60fb      	str	r3, [r7, #12]
 80074cc:	e00c      	b.n	80074e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	3308      	adds	r3, #8
 80074d2:	60fb      	str	r3, [r7, #12]
 80074d4:	e002      	b.n	80074dc <vListInsert+0x2e>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	60fb      	str	r3, [r7, #12]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d2f6      	bcs.n	80074d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	683a      	ldr	r2, [r7, #0]
 80074f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	683a      	ldr	r2, [r7, #0]
 8007502:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	1c5a      	adds	r2, r3, #1
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	601a      	str	r2, [r3, #0]
}
 8007514:	bf00      	nop
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	6892      	ldr	r2, [r2, #8]
 8007536:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	6852      	ldr	r2, [r2, #4]
 8007540:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	429a      	cmp	r2, r3
 800754a:	d103      	bne.n	8007554 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	689a      	ldr	r2, [r3, #8]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	1e5a      	subs	r2, r3, #1
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
}
 8007568:	4618      	mov	r0, r3
 800756a:	3714      	adds	r7, #20
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d10a      	bne.n	800759e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758c:	f383 8811 	msr	BASEPRI, r3
 8007590:	f3bf 8f6f 	isb	sy
 8007594:	f3bf 8f4f 	dsb	sy
 8007598:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800759a:	bf00      	nop
 800759c:	e7fe      	b.n	800759c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800759e:	f001 fd51 	bl	8009044 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075aa:	68f9      	ldr	r1, [r7, #12]
 80075ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80075ae:	fb01 f303 	mul.w	r3, r1, r3
 80075b2:	441a      	add	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2200      	movs	r2, #0
 80075bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ce:	3b01      	subs	r3, #1
 80075d0:	68f9      	ldr	r1, [r7, #12]
 80075d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80075d4:	fb01 f303 	mul.w	r3, r1, r3
 80075d8:	441a      	add	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	22ff      	movs	r2, #255	; 0xff
 80075e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	22ff      	movs	r2, #255	; 0xff
 80075ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d114      	bne.n	800761e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d01a      	beq.n	8007632 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	3310      	adds	r3, #16
 8007600:	4618      	mov	r0, r3
 8007602:	f001 f92b 	bl	800885c <xTaskRemoveFromEventList>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d012      	beq.n	8007632 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800760c:	4b0c      	ldr	r3, [pc, #48]	; (8007640 <xQueueGenericReset+0xcc>)
 800760e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007612:	601a      	str	r2, [r3, #0]
 8007614:	f3bf 8f4f 	dsb	sy
 8007618:	f3bf 8f6f 	isb	sy
 800761c:	e009      	b.n	8007632 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	3310      	adds	r3, #16
 8007622:	4618      	mov	r0, r3
 8007624:	f7ff fef2 	bl	800740c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	3324      	adds	r3, #36	; 0x24
 800762c:	4618      	mov	r0, r3
 800762e:	f7ff feed 	bl	800740c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007632:	f001 fd37 	bl	80090a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007636:	2301      	movs	r3, #1
}
 8007638:	4618      	mov	r0, r3
 800763a:	3710      	adds	r7, #16
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	e000ed04 	.word	0xe000ed04

08007644 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007644:	b580      	push	{r7, lr}
 8007646:	b08e      	sub	sp, #56	; 0x38
 8007648:	af02      	add	r7, sp, #8
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
 8007650:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10a      	bne.n	800766e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765c:	f383 8811 	msr	BASEPRI, r3
 8007660:	f3bf 8f6f 	isb	sy
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800766a:	bf00      	nop
 800766c:	e7fe      	b.n	800766c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d10a      	bne.n	800768a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007678:	f383 8811 	msr	BASEPRI, r3
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	f3bf 8f4f 	dsb	sy
 8007684:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007686:	bf00      	nop
 8007688:	e7fe      	b.n	8007688 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d002      	beq.n	8007696 <xQueueGenericCreateStatic+0x52>
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d001      	beq.n	800769a <xQueueGenericCreateStatic+0x56>
 8007696:	2301      	movs	r3, #1
 8007698:	e000      	b.n	800769c <xQueueGenericCreateStatic+0x58>
 800769a:	2300      	movs	r3, #0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10a      	bne.n	80076b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80076a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a4:	f383 8811 	msr	BASEPRI, r3
 80076a8:	f3bf 8f6f 	isb	sy
 80076ac:	f3bf 8f4f 	dsb	sy
 80076b0:	623b      	str	r3, [r7, #32]
}
 80076b2:	bf00      	nop
 80076b4:	e7fe      	b.n	80076b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d102      	bne.n	80076c2 <xQueueGenericCreateStatic+0x7e>
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d101      	bne.n	80076c6 <xQueueGenericCreateStatic+0x82>
 80076c2:	2301      	movs	r3, #1
 80076c4:	e000      	b.n	80076c8 <xQueueGenericCreateStatic+0x84>
 80076c6:	2300      	movs	r3, #0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10a      	bne.n	80076e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80076cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d0:	f383 8811 	msr	BASEPRI, r3
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	61fb      	str	r3, [r7, #28]
}
 80076de:	bf00      	nop
 80076e0:	e7fe      	b.n	80076e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80076e2:	2348      	movs	r3, #72	; 0x48
 80076e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	2b48      	cmp	r3, #72	; 0x48
 80076ea:	d00a      	beq.n	8007702 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80076ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f0:	f383 8811 	msr	BASEPRI, r3
 80076f4:	f3bf 8f6f 	isb	sy
 80076f8:	f3bf 8f4f 	dsb	sy
 80076fc:	61bb      	str	r3, [r7, #24]
}
 80076fe:	bf00      	nop
 8007700:	e7fe      	b.n	8007700 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007702:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00d      	beq.n	800772a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800770e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007710:	2201      	movs	r2, #1
 8007712:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007716:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800771a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771c:	9300      	str	r3, [sp, #0]
 800771e:	4613      	mov	r3, r2
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	68b9      	ldr	r1, [r7, #8]
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	f000 f83f 	bl	80077a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800772a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800772c:	4618      	mov	r0, r3
 800772e:	3730      	adds	r7, #48	; 0x30
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007734:	b580      	push	{r7, lr}
 8007736:	b08a      	sub	sp, #40	; 0x28
 8007738:	af02      	add	r7, sp, #8
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	4613      	mov	r3, r2
 8007740:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d10a      	bne.n	800775e <xQueueGenericCreate+0x2a>
	__asm volatile
 8007748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774c:	f383 8811 	msr	BASEPRI, r3
 8007750:	f3bf 8f6f 	isb	sy
 8007754:	f3bf 8f4f 	dsb	sy
 8007758:	613b      	str	r3, [r7, #16]
}
 800775a:	bf00      	nop
 800775c:	e7fe      	b.n	800775c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	68ba      	ldr	r2, [r7, #8]
 8007762:	fb02 f303 	mul.w	r3, r2, r3
 8007766:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	3348      	adds	r3, #72	; 0x48
 800776c:	4618      	mov	r0, r3
 800776e:	f001 fd8b 	bl	8009288 <pvPortMalloc>
 8007772:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d011      	beq.n	800779e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	3348      	adds	r3, #72	; 0x48
 8007782:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	2200      	movs	r2, #0
 8007788:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800778c:	79fa      	ldrb	r2, [r7, #7]
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	9300      	str	r3, [sp, #0]
 8007792:	4613      	mov	r3, r2
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	68b9      	ldr	r1, [r7, #8]
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f000 f805 	bl	80077a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800779e:	69bb      	ldr	r3, [r7, #24]
	}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3720      	adds	r7, #32
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
 80077b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d103      	bne.n	80077c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	69ba      	ldr	r2, [r7, #24]
 80077c0:	601a      	str	r2, [r3, #0]
 80077c2:	e002      	b.n	80077ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	68ba      	ldr	r2, [r7, #8]
 80077d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80077d6:	2101      	movs	r1, #1
 80077d8:	69b8      	ldr	r0, [r7, #24]
 80077da:	f7ff fecb 	bl	8007574 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80077de:	bf00      	nop
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
	...

080077e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b08e      	sub	sp, #56	; 0x38
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
 80077f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80077f6:	2300      	movs	r3, #0
 80077f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80077fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007800:	2b00      	cmp	r3, #0
 8007802:	d10a      	bne.n	800781a <xQueueGenericSend+0x32>
	__asm volatile
 8007804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007808:	f383 8811 	msr	BASEPRI, r3
 800780c:	f3bf 8f6f 	isb	sy
 8007810:	f3bf 8f4f 	dsb	sy
 8007814:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007816:	bf00      	nop
 8007818:	e7fe      	b.n	8007818 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d103      	bne.n	8007828 <xQueueGenericSend+0x40>
 8007820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007824:	2b00      	cmp	r3, #0
 8007826:	d101      	bne.n	800782c <xQueueGenericSend+0x44>
 8007828:	2301      	movs	r3, #1
 800782a:	e000      	b.n	800782e <xQueueGenericSend+0x46>
 800782c:	2300      	movs	r3, #0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10a      	bne.n	8007848 <xQueueGenericSend+0x60>
	__asm volatile
 8007832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007844:	bf00      	nop
 8007846:	e7fe      	b.n	8007846 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	2b02      	cmp	r3, #2
 800784c:	d103      	bne.n	8007856 <xQueueGenericSend+0x6e>
 800784e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007852:	2b01      	cmp	r3, #1
 8007854:	d101      	bne.n	800785a <xQueueGenericSend+0x72>
 8007856:	2301      	movs	r3, #1
 8007858:	e000      	b.n	800785c <xQueueGenericSend+0x74>
 800785a:	2300      	movs	r3, #0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10a      	bne.n	8007876 <xQueueGenericSend+0x8e>
	__asm volatile
 8007860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007864:	f383 8811 	msr	BASEPRI, r3
 8007868:	f3bf 8f6f 	isb	sy
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	623b      	str	r3, [r7, #32]
}
 8007872:	bf00      	nop
 8007874:	e7fe      	b.n	8007874 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007876:	f001 f9b1 	bl	8008bdc <xTaskGetSchedulerState>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d102      	bne.n	8007886 <xQueueGenericSend+0x9e>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d101      	bne.n	800788a <xQueueGenericSend+0xa2>
 8007886:	2301      	movs	r3, #1
 8007888:	e000      	b.n	800788c <xQueueGenericSend+0xa4>
 800788a:	2300      	movs	r3, #0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10a      	bne.n	80078a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8007890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007894:	f383 8811 	msr	BASEPRI, r3
 8007898:	f3bf 8f6f 	isb	sy
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	61fb      	str	r3, [r7, #28]
}
 80078a2:	bf00      	nop
 80078a4:	e7fe      	b.n	80078a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078a6:	f001 fbcd 	bl	8009044 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d302      	bcc.n	80078bc <xQueueGenericSend+0xd4>
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d129      	bne.n	8007910 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078bc:	683a      	ldr	r2, [r7, #0]
 80078be:	68b9      	ldr	r1, [r7, #8]
 80078c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078c2:	f000 fa8b 	bl	8007ddc <prvCopyDataToQueue>
 80078c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d010      	beq.n	80078f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d2:	3324      	adds	r3, #36	; 0x24
 80078d4:	4618      	mov	r0, r3
 80078d6:	f000 ffc1 	bl	800885c <xTaskRemoveFromEventList>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d013      	beq.n	8007908 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80078e0:	4b3f      	ldr	r3, [pc, #252]	; (80079e0 <xQueueGenericSend+0x1f8>)
 80078e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078e6:	601a      	str	r2, [r3, #0]
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	f3bf 8f6f 	isb	sy
 80078f0:	e00a      	b.n	8007908 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80078f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d007      	beq.n	8007908 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80078f8:	4b39      	ldr	r3, [pc, #228]	; (80079e0 <xQueueGenericSend+0x1f8>)
 80078fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078fe:	601a      	str	r2, [r3, #0]
 8007900:	f3bf 8f4f 	dsb	sy
 8007904:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007908:	f001 fbcc 	bl	80090a4 <vPortExitCritical>
				return pdPASS;
 800790c:	2301      	movs	r3, #1
 800790e:	e063      	b.n	80079d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d103      	bne.n	800791e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007916:	f001 fbc5 	bl	80090a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800791a:	2300      	movs	r3, #0
 800791c:	e05c      	b.n	80079d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800791e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007920:	2b00      	cmp	r3, #0
 8007922:	d106      	bne.n	8007932 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007924:	f107 0314 	add.w	r3, r7, #20
 8007928:	4618      	mov	r0, r3
 800792a:	f000 fff9 	bl	8008920 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800792e:	2301      	movs	r3, #1
 8007930:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007932:	f001 fbb7 	bl	80090a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007936:	f000 fda9 	bl	800848c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800793a:	f001 fb83 	bl	8009044 <vPortEnterCritical>
 800793e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007940:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007944:	b25b      	sxtb	r3, r3
 8007946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800794a:	d103      	bne.n	8007954 <xQueueGenericSend+0x16c>
 800794c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794e:	2200      	movs	r2, #0
 8007950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007956:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800795a:	b25b      	sxtb	r3, r3
 800795c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007960:	d103      	bne.n	800796a <xQueueGenericSend+0x182>
 8007962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007964:	2200      	movs	r2, #0
 8007966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800796a:	f001 fb9b 	bl	80090a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800796e:	1d3a      	adds	r2, r7, #4
 8007970:	f107 0314 	add.w	r3, r7, #20
 8007974:	4611      	mov	r1, r2
 8007976:	4618      	mov	r0, r3
 8007978:	f000 ffe8 	bl	800894c <xTaskCheckForTimeOut>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d124      	bne.n	80079cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007982:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007984:	f000 fb22 	bl	8007fcc <prvIsQueueFull>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d018      	beq.n	80079c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800798e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007990:	3310      	adds	r3, #16
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	4611      	mov	r1, r2
 8007996:	4618      	mov	r0, r3
 8007998:	f000 ff3c 	bl	8008814 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800799c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800799e:	f000 faad 	bl	8007efc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80079a2:	f000 fd81 	bl	80084a8 <xTaskResumeAll>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f47f af7c 	bne.w	80078a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80079ae:	4b0c      	ldr	r3, [pc, #48]	; (80079e0 <xQueueGenericSend+0x1f8>)
 80079b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079b4:	601a      	str	r2, [r3, #0]
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	e772      	b.n	80078a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80079c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079c2:	f000 fa9b 	bl	8007efc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079c6:	f000 fd6f 	bl	80084a8 <xTaskResumeAll>
 80079ca:	e76c      	b.n	80078a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80079cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079ce:	f000 fa95 	bl	8007efc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079d2:	f000 fd69 	bl	80084a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80079d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3738      	adds	r7, #56	; 0x38
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	e000ed04 	.word	0xe000ed04

080079e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b090      	sub	sp, #64	; 0x40
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	607a      	str	r2, [r7, #4]
 80079f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80079f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10a      	bne.n	8007a12 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80079fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a00:	f383 8811 	msr	BASEPRI, r3
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a0e:	bf00      	nop
 8007a10:	e7fe      	b.n	8007a10 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d103      	bne.n	8007a20 <xQueueGenericSendFromISR+0x3c>
 8007a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d101      	bne.n	8007a24 <xQueueGenericSendFromISR+0x40>
 8007a20:	2301      	movs	r3, #1
 8007a22:	e000      	b.n	8007a26 <xQueueGenericSendFromISR+0x42>
 8007a24:	2300      	movs	r3, #0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10a      	bne.n	8007a40 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a3c:	bf00      	nop
 8007a3e:	e7fe      	b.n	8007a3e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d103      	bne.n	8007a4e <xQueueGenericSendFromISR+0x6a>
 8007a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d101      	bne.n	8007a52 <xQueueGenericSendFromISR+0x6e>
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e000      	b.n	8007a54 <xQueueGenericSendFromISR+0x70>
 8007a52:	2300      	movs	r3, #0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10a      	bne.n	8007a6e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5c:	f383 8811 	msr	BASEPRI, r3
 8007a60:	f3bf 8f6f 	isb	sy
 8007a64:	f3bf 8f4f 	dsb	sy
 8007a68:	623b      	str	r3, [r7, #32]
}
 8007a6a:	bf00      	nop
 8007a6c:	e7fe      	b.n	8007a6c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a6e:	f001 fbcb 	bl	8009208 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a72:	f3ef 8211 	mrs	r2, BASEPRI
 8007a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7a:	f383 8811 	msr	BASEPRI, r3
 8007a7e:	f3bf 8f6f 	isb	sy
 8007a82:	f3bf 8f4f 	dsb	sy
 8007a86:	61fa      	str	r2, [r7, #28]
 8007a88:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007a8a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a8c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d302      	bcc.n	8007aa0 <xQueueGenericSendFromISR+0xbc>
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d12f      	bne.n	8007b00 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007aa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ab0:	683a      	ldr	r2, [r7, #0]
 8007ab2:	68b9      	ldr	r1, [r7, #8]
 8007ab4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ab6:	f000 f991 	bl	8007ddc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007aba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac2:	d112      	bne.n	8007aea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d016      	beq.n	8007afa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ace:	3324      	adds	r3, #36	; 0x24
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f000 fec3 	bl	800885c <xTaskRemoveFromEventList>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00e      	beq.n	8007afa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00b      	beq.n	8007afa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	601a      	str	r2, [r3, #0]
 8007ae8:	e007      	b.n	8007afa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007aea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007aee:	3301      	adds	r3, #1
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	b25a      	sxtb	r2, r3
 8007af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007afa:	2301      	movs	r3, #1
 8007afc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007afe:	e001      	b.n	8007b04 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b00:	2300      	movs	r3, #0
 8007b02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b06:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007b0e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3740      	adds	r7, #64	; 0x40
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
	...

08007b1c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b08c      	sub	sp, #48	; 0x30
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10a      	bne.n	8007b4c <xQueueReceive+0x30>
	__asm volatile
 8007b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3a:	f383 8811 	msr	BASEPRI, r3
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	f3bf 8f4f 	dsb	sy
 8007b46:	623b      	str	r3, [r7, #32]
}
 8007b48:	bf00      	nop
 8007b4a:	e7fe      	b.n	8007b4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d103      	bne.n	8007b5a <xQueueReceive+0x3e>
 8007b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d101      	bne.n	8007b5e <xQueueReceive+0x42>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e000      	b.n	8007b60 <xQueueReceive+0x44>
 8007b5e:	2300      	movs	r3, #0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10a      	bne.n	8007b7a <xQueueReceive+0x5e>
	__asm volatile
 8007b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b68:	f383 8811 	msr	BASEPRI, r3
 8007b6c:	f3bf 8f6f 	isb	sy
 8007b70:	f3bf 8f4f 	dsb	sy
 8007b74:	61fb      	str	r3, [r7, #28]
}
 8007b76:	bf00      	nop
 8007b78:	e7fe      	b.n	8007b78 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b7a:	f001 f82f 	bl	8008bdc <xTaskGetSchedulerState>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d102      	bne.n	8007b8a <xQueueReceive+0x6e>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d101      	bne.n	8007b8e <xQueueReceive+0x72>
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e000      	b.n	8007b90 <xQueueReceive+0x74>
 8007b8e:	2300      	movs	r3, #0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10a      	bne.n	8007baa <xQueueReceive+0x8e>
	__asm volatile
 8007b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b98:	f383 8811 	msr	BASEPRI, r3
 8007b9c:	f3bf 8f6f 	isb	sy
 8007ba0:	f3bf 8f4f 	dsb	sy
 8007ba4:	61bb      	str	r3, [r7, #24]
}
 8007ba6:	bf00      	nop
 8007ba8:	e7fe      	b.n	8007ba8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007baa:	f001 fa4b 	bl	8009044 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d01f      	beq.n	8007bfa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007bba:	68b9      	ldr	r1, [r7, #8]
 8007bbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bbe:	f000 f977 	bl	8007eb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc4:	1e5a      	subs	r2, r3, #1
 8007bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00f      	beq.n	8007bf2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd4:	3310      	adds	r3, #16
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f000 fe40 	bl	800885c <xTaskRemoveFromEventList>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d007      	beq.n	8007bf2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007be2:	4b3d      	ldr	r3, [pc, #244]	; (8007cd8 <xQueueReceive+0x1bc>)
 8007be4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007be8:	601a      	str	r2, [r3, #0]
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007bf2:	f001 fa57 	bl	80090a4 <vPortExitCritical>
				return pdPASS;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e069      	b.n	8007cce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d103      	bne.n	8007c08 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c00:	f001 fa50 	bl	80090a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c04:	2300      	movs	r3, #0
 8007c06:	e062      	b.n	8007cce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d106      	bne.n	8007c1c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c0e:	f107 0310 	add.w	r3, r7, #16
 8007c12:	4618      	mov	r0, r3
 8007c14:	f000 fe84 	bl	8008920 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c1c:	f001 fa42 	bl	80090a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c20:	f000 fc34 	bl	800848c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c24:	f001 fa0e 	bl	8009044 <vPortEnterCritical>
 8007c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c2e:	b25b      	sxtb	r3, r3
 8007c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c34:	d103      	bne.n	8007c3e <xQueueReceive+0x122>
 8007c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c44:	b25b      	sxtb	r3, r3
 8007c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c4a:	d103      	bne.n	8007c54 <xQueueReceive+0x138>
 8007c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c54:	f001 fa26 	bl	80090a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c58:	1d3a      	adds	r2, r7, #4
 8007c5a:	f107 0310 	add.w	r3, r7, #16
 8007c5e:	4611      	mov	r1, r2
 8007c60:	4618      	mov	r0, r3
 8007c62:	f000 fe73 	bl	800894c <xTaskCheckForTimeOut>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d123      	bne.n	8007cb4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c6e:	f000 f997 	bl	8007fa0 <prvIsQueueEmpty>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d017      	beq.n	8007ca8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7a:	3324      	adds	r3, #36	; 0x24
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	4611      	mov	r1, r2
 8007c80:	4618      	mov	r0, r3
 8007c82:	f000 fdc7 	bl	8008814 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c88:	f000 f938 	bl	8007efc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c8c:	f000 fc0c 	bl	80084a8 <xTaskResumeAll>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d189      	bne.n	8007baa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007c96:	4b10      	ldr	r3, [pc, #64]	; (8007cd8 <xQueueReceive+0x1bc>)
 8007c98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c9c:	601a      	str	r2, [r3, #0]
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	e780      	b.n	8007baa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007ca8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007caa:	f000 f927 	bl	8007efc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cae:	f000 fbfb 	bl	80084a8 <xTaskResumeAll>
 8007cb2:	e77a      	b.n	8007baa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cb6:	f000 f921 	bl	8007efc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007cba:	f000 fbf5 	bl	80084a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cc0:	f000 f96e 	bl	8007fa0 <prvIsQueueEmpty>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f43f af6f 	beq.w	8007baa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007ccc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3730      	adds	r7, #48	; 0x30
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	e000ed04 	.word	0xe000ed04

08007cdc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b08e      	sub	sp, #56	; 0x38
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10a      	bne.n	8007d08 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf6:	f383 8811 	msr	BASEPRI, r3
 8007cfa:	f3bf 8f6f 	isb	sy
 8007cfe:	f3bf 8f4f 	dsb	sy
 8007d02:	623b      	str	r3, [r7, #32]
}
 8007d04:	bf00      	nop
 8007d06:	e7fe      	b.n	8007d06 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d103      	bne.n	8007d16 <xQueueReceiveFromISR+0x3a>
 8007d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <xQueueReceiveFromISR+0x3e>
 8007d16:	2301      	movs	r3, #1
 8007d18:	e000      	b.n	8007d1c <xQueueReceiveFromISR+0x40>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10a      	bne.n	8007d36 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	61fb      	str	r3, [r7, #28]
}
 8007d32:	bf00      	nop
 8007d34:	e7fe      	b.n	8007d34 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d36:	f001 fa67 	bl	8009208 <vPortValidateInterruptPriority>
	__asm volatile
 8007d3a:	f3ef 8211 	mrs	r2, BASEPRI
 8007d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	61ba      	str	r2, [r7, #24]
 8007d50:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007d52:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d02f      	beq.n	8007dc2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d6c:	68b9      	ldr	r1, [r7, #8]
 8007d6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d70:	f000 f89e 	bl	8007eb0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d76:	1e5a      	subs	r2, r3, #1
 8007d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007d7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d84:	d112      	bne.n	8007dac <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d016      	beq.n	8007dbc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d90:	3310      	adds	r3, #16
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 fd62 	bl	800885c <xTaskRemoveFromEventList>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00e      	beq.n	8007dbc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00b      	beq.n	8007dbc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	601a      	str	r2, [r3, #0]
 8007daa:	e007      	b.n	8007dbc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007dac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007db0:	3301      	adds	r3, #1
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	b25a      	sxtb	r2, r3
 8007db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	637b      	str	r3, [r7, #52]	; 0x34
 8007dc0:	e001      	b.n	8007dc6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8007dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	f383 8811 	msr	BASEPRI, r3
}
 8007dd0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3738      	adds	r7, #56	; 0x38
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b086      	sub	sp, #24
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007de8:	2300      	movs	r3, #0
 8007dea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d10d      	bne.n	8007e16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d14d      	bne.n	8007e9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 ff06 	bl	8008c18 <xTaskPriorityDisinherit>
 8007e0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2200      	movs	r2, #0
 8007e12:	609a      	str	r2, [r3, #8]
 8007e14:	e043      	b.n	8007e9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d119      	bne.n	8007e50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6858      	ldr	r0, [r3, #4]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e24:	461a      	mov	r2, r3
 8007e26:	68b9      	ldr	r1, [r7, #8]
 8007e28:	f002 f9e0 	bl	800a1ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	685a      	ldr	r2, [r3, #4]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e34:	441a      	add	r2, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	685a      	ldr	r2, [r3, #4]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d32b      	bcc.n	8007e9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	605a      	str	r2, [r3, #4]
 8007e4e:	e026      	b.n	8007e9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	68d8      	ldr	r0, [r3, #12]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e58:	461a      	mov	r2, r3
 8007e5a:	68b9      	ldr	r1, [r7, #8]
 8007e5c:	f002 f9c6 	bl	800a1ec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	68da      	ldr	r2, [r3, #12]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e68:	425b      	negs	r3, r3
 8007e6a:	441a      	add	r2, r3
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	68da      	ldr	r2, [r3, #12]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d207      	bcs.n	8007e8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	689a      	ldr	r2, [r3, #8]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e84:	425b      	negs	r3, r3
 8007e86:	441a      	add	r2, r3
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	d105      	bne.n	8007e9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d002      	beq.n	8007e9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	1c5a      	adds	r2, r3, #1
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007ea6:	697b      	ldr	r3, [r7, #20]
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3718      	adds	r7, #24
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d018      	beq.n	8007ef4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	68da      	ldr	r2, [r3, #12]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eca:	441a      	add	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	68da      	ldr	r2, [r3, #12]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d303      	bcc.n	8007ee4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	68d9      	ldr	r1, [r3, #12]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eec:	461a      	mov	r2, r3
 8007eee:	6838      	ldr	r0, [r7, #0]
 8007ef0:	f002 f97c 	bl	800a1ec <memcpy>
	}
}
 8007ef4:	bf00      	nop
 8007ef6:	3708      	adds	r7, #8
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007f04:	f001 f89e 	bl	8009044 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f10:	e011      	b.n	8007f36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d012      	beq.n	8007f40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	3324      	adds	r3, #36	; 0x24
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f000 fc9c 	bl	800885c <xTaskRemoveFromEventList>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d001      	beq.n	8007f2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007f2a:	f000 fd71 	bl	8008a10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007f2e:	7bfb      	ldrb	r3, [r7, #15]
 8007f30:	3b01      	subs	r3, #1
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	dce9      	bgt.n	8007f12 <prvUnlockQueue+0x16>
 8007f3e:	e000      	b.n	8007f42 <prvUnlockQueue+0x46>
					break;
 8007f40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	22ff      	movs	r2, #255	; 0xff
 8007f46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007f4a:	f001 f8ab 	bl	80090a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007f4e:	f001 f879 	bl	8009044 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f5a:	e011      	b.n	8007f80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	691b      	ldr	r3, [r3, #16]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d012      	beq.n	8007f8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	3310      	adds	r3, #16
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f000 fc77 	bl	800885c <xTaskRemoveFromEventList>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d001      	beq.n	8007f78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007f74:	f000 fd4c 	bl	8008a10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007f78:	7bbb      	ldrb	r3, [r7, #14]
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	dce9      	bgt.n	8007f5c <prvUnlockQueue+0x60>
 8007f88:	e000      	b.n	8007f8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007f8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	22ff      	movs	r2, #255	; 0xff
 8007f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007f94:	f001 f886 	bl	80090a4 <vPortExitCritical>
}
 8007f98:	bf00      	nop
 8007f9a:	3710      	adds	r7, #16
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fa8:	f001 f84c 	bl	8009044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d102      	bne.n	8007fba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	60fb      	str	r3, [r7, #12]
 8007fb8:	e001      	b.n	8007fbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fbe:	f001 f871 	bl	80090a4 <vPortExitCritical>

	return xReturn;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3710      	adds	r7, #16
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fd4:	f001 f836 	bl	8009044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d102      	bne.n	8007fea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	60fb      	str	r3, [r7, #12]
 8007fe8:	e001      	b.n	8007fee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007fea:	2300      	movs	r3, #0
 8007fec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fee:	f001 f859 	bl	80090a4 <vPortExitCritical>

	return xReturn;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b08e      	sub	sp, #56	; 0x38
 8008000:	af04      	add	r7, sp, #16
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	607a      	str	r2, [r7, #4]
 8008008:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800800a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800800c:	2b00      	cmp	r3, #0
 800800e:	d10a      	bne.n	8008026 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008014:	f383 8811 	msr	BASEPRI, r3
 8008018:	f3bf 8f6f 	isb	sy
 800801c:	f3bf 8f4f 	dsb	sy
 8008020:	623b      	str	r3, [r7, #32]
}
 8008022:	bf00      	nop
 8008024:	e7fe      	b.n	8008024 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10a      	bne.n	8008042 <xTaskCreateStatic+0x46>
	__asm volatile
 800802c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008030:	f383 8811 	msr	BASEPRI, r3
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	61fb      	str	r3, [r7, #28]
}
 800803e:	bf00      	nop
 8008040:	e7fe      	b.n	8008040 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008042:	23b4      	movs	r3, #180	; 0xb4
 8008044:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	2bb4      	cmp	r3, #180	; 0xb4
 800804a:	d00a      	beq.n	8008062 <xTaskCreateStatic+0x66>
	__asm volatile
 800804c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008050:	f383 8811 	msr	BASEPRI, r3
 8008054:	f3bf 8f6f 	isb	sy
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	61bb      	str	r3, [r7, #24]
}
 800805e:	bf00      	nop
 8008060:	e7fe      	b.n	8008060 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008062:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008066:	2b00      	cmp	r3, #0
 8008068:	d01e      	beq.n	80080a8 <xTaskCreateStatic+0xac>
 800806a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800806c:	2b00      	cmp	r3, #0
 800806e:	d01b      	beq.n	80080a8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008072:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008076:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008078:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800807a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807c:	2202      	movs	r2, #2
 800807e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008082:	2300      	movs	r3, #0
 8008084:	9303      	str	r3, [sp, #12]
 8008086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008088:	9302      	str	r3, [sp, #8]
 800808a:	f107 0314 	add.w	r3, r7, #20
 800808e:	9301      	str	r3, [sp, #4]
 8008090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	68b9      	ldr	r1, [r7, #8]
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f000 f850 	bl	8008140 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080a2:	f000 f8eb 	bl	800827c <prvAddNewTaskToReadyList>
 80080a6:	e001      	b.n	80080ac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80080a8:	2300      	movs	r3, #0
 80080aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80080ac:	697b      	ldr	r3, [r7, #20]
	}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3728      	adds	r7, #40	; 0x28
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b08c      	sub	sp, #48	; 0x30
 80080ba:	af04      	add	r7, sp, #16
 80080bc:	60f8      	str	r0, [r7, #12]
 80080be:	60b9      	str	r1, [r7, #8]
 80080c0:	603b      	str	r3, [r7, #0]
 80080c2:	4613      	mov	r3, r2
 80080c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80080c6:	88fb      	ldrh	r3, [r7, #6]
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	4618      	mov	r0, r3
 80080cc:	f001 f8dc 	bl	8009288 <pvPortMalloc>
 80080d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00e      	beq.n	80080f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80080d8:	20b4      	movs	r0, #180	; 0xb4
 80080da:	f001 f8d5 	bl	8009288 <pvPortMalloc>
 80080de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d003      	beq.n	80080ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	697a      	ldr	r2, [r7, #20]
 80080ea:	631a      	str	r2, [r3, #48]	; 0x30
 80080ec:	e005      	b.n	80080fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80080ee:	6978      	ldr	r0, [r7, #20]
 80080f0:	f001 f996 	bl	8009420 <vPortFree>
 80080f4:	e001      	b.n	80080fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80080f6:	2300      	movs	r3, #0
 80080f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80080fa:	69fb      	ldr	r3, [r7, #28]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d017      	beq.n	8008130 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	2200      	movs	r2, #0
 8008104:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008108:	88fa      	ldrh	r2, [r7, #6]
 800810a:	2300      	movs	r3, #0
 800810c:	9303      	str	r3, [sp, #12]
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	9302      	str	r3, [sp, #8]
 8008112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008114:	9301      	str	r3, [sp, #4]
 8008116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008118:	9300      	str	r3, [sp, #0]
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	68b9      	ldr	r1, [r7, #8]
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f000 f80e 	bl	8008140 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008124:	69f8      	ldr	r0, [r7, #28]
 8008126:	f000 f8a9 	bl	800827c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800812a:	2301      	movs	r3, #1
 800812c:	61bb      	str	r3, [r7, #24]
 800812e:	e002      	b.n	8008136 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008130:	f04f 33ff 	mov.w	r3, #4294967295
 8008134:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008136:	69bb      	ldr	r3, [r7, #24]
	}
 8008138:	4618      	mov	r0, r3
 800813a:	3720      	adds	r7, #32
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b088      	sub	sp, #32
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
 800814c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800814e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008158:	3b01      	subs	r3, #1
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	4413      	add	r3, r2
 800815e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	f023 0307 	bic.w	r3, r3, #7
 8008166:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	f003 0307 	and.w	r3, r3, #7
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00a      	beq.n	8008188 <prvInitialiseNewTask+0x48>
	__asm volatile
 8008172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008176:	f383 8811 	msr	BASEPRI, r3
 800817a:	f3bf 8f6f 	isb	sy
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	617b      	str	r3, [r7, #20]
}
 8008184:	bf00      	nop
 8008186:	e7fe      	b.n	8008186 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d01f      	beq.n	80081ce <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800818e:	2300      	movs	r3, #0
 8008190:	61fb      	str	r3, [r7, #28]
 8008192:	e012      	b.n	80081ba <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	4413      	add	r3, r2
 800819a:	7819      	ldrb	r1, [r3, #0]
 800819c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	4413      	add	r3, r2
 80081a2:	3334      	adds	r3, #52	; 0x34
 80081a4:	460a      	mov	r2, r1
 80081a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	4413      	add	r3, r2
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d006      	beq.n	80081c2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	3301      	adds	r3, #1
 80081b8:	61fb      	str	r3, [r7, #28]
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	2b0f      	cmp	r3, #15
 80081be:	d9e9      	bls.n	8008194 <prvInitialiseNewTask+0x54>
 80081c0:	e000      	b.n	80081c4 <prvInitialiseNewTask+0x84>
			{
				break;
 80081c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80081c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081cc:	e003      	b.n	80081d6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80081ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80081d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d8:	2b06      	cmp	r3, #6
 80081da:	d901      	bls.n	80081e0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80081dc:	2306      	movs	r3, #6
 80081de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80081e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80081e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081ea:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80081ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ee:	2200      	movs	r2, #0
 80081f0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80081f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f4:	3304      	adds	r3, #4
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7ff f928 	bl	800744c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80081fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fe:	3318      	adds	r3, #24
 8008200:	4618      	mov	r0, r3
 8008202:	f7ff f923 	bl	800744c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800820a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800820c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820e:	f1c3 0207 	rsb	r2, r3, #7
 8008212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008214:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800821a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800821c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821e:	2200      	movs	r2, #0
 8008220:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008226:	2200      	movs	r2, #0
 8008228:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800822c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822e:	334c      	adds	r3, #76	; 0x4c
 8008230:	2260      	movs	r2, #96	; 0x60
 8008232:	2100      	movs	r1, #0
 8008234:	4618      	mov	r0, r3
 8008236:	f001 ffe7 	bl	800a208 <memset>
 800823a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823c:	4a0c      	ldr	r2, [pc, #48]	; (8008270 <prvInitialiseNewTask+0x130>)
 800823e:	651a      	str	r2, [r3, #80]	; 0x50
 8008240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008242:	4a0c      	ldr	r2, [pc, #48]	; (8008274 <prvInitialiseNewTask+0x134>)
 8008244:	655a      	str	r2, [r3, #84]	; 0x54
 8008246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008248:	4a0b      	ldr	r2, [pc, #44]	; (8008278 <prvInitialiseNewTask+0x138>)
 800824a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800824c:	683a      	ldr	r2, [r7, #0]
 800824e:	68f9      	ldr	r1, [r7, #12]
 8008250:	69b8      	ldr	r0, [r7, #24]
 8008252:	f000 fdcd 	bl	8008df0 <pxPortInitialiseStack>
 8008256:	4602      	mov	r2, r0
 8008258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800825c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825e:	2b00      	cmp	r3, #0
 8008260:	d002      	beq.n	8008268 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008266:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008268:	bf00      	nop
 800826a:	3720      	adds	r7, #32
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	0800a4a0 	.word	0x0800a4a0
 8008274:	0800a4c0 	.word	0x0800a4c0
 8008278:	0800a480 	.word	0x0800a480

0800827c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008284:	f000 fede 	bl	8009044 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008288:	4b2a      	ldr	r3, [pc, #168]	; (8008334 <prvAddNewTaskToReadyList+0xb8>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	3301      	adds	r3, #1
 800828e:	4a29      	ldr	r2, [pc, #164]	; (8008334 <prvAddNewTaskToReadyList+0xb8>)
 8008290:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008292:	4b29      	ldr	r3, [pc, #164]	; (8008338 <prvAddNewTaskToReadyList+0xbc>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d109      	bne.n	80082ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800829a:	4a27      	ldr	r2, [pc, #156]	; (8008338 <prvAddNewTaskToReadyList+0xbc>)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80082a0:	4b24      	ldr	r3, [pc, #144]	; (8008334 <prvAddNewTaskToReadyList+0xb8>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d110      	bne.n	80082ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80082a8:	f000 fbd6 	bl	8008a58 <prvInitialiseTaskLists>
 80082ac:	e00d      	b.n	80082ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80082ae:	4b23      	ldr	r3, [pc, #140]	; (800833c <prvAddNewTaskToReadyList+0xc0>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d109      	bne.n	80082ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80082b6:	4b20      	ldr	r3, [pc, #128]	; (8008338 <prvAddNewTaskToReadyList+0xbc>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d802      	bhi.n	80082ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80082c4:	4a1c      	ldr	r2, [pc, #112]	; (8008338 <prvAddNewTaskToReadyList+0xbc>)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80082ca:	4b1d      	ldr	r3, [pc, #116]	; (8008340 <prvAddNewTaskToReadyList+0xc4>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	3301      	adds	r3, #1
 80082d0:	4a1b      	ldr	r2, [pc, #108]	; (8008340 <prvAddNewTaskToReadyList+0xc4>)
 80082d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d8:	2201      	movs	r2, #1
 80082da:	409a      	lsls	r2, r3
 80082dc:	4b19      	ldr	r3, [pc, #100]	; (8008344 <prvAddNewTaskToReadyList+0xc8>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	4a18      	ldr	r2, [pc, #96]	; (8008344 <prvAddNewTaskToReadyList+0xc8>)
 80082e4:	6013      	str	r3, [r2, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ea:	4613      	mov	r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4413      	add	r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4a15      	ldr	r2, [pc, #84]	; (8008348 <prvAddNewTaskToReadyList+0xcc>)
 80082f4:	441a      	add	r2, r3
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	3304      	adds	r3, #4
 80082fa:	4619      	mov	r1, r3
 80082fc:	4610      	mov	r0, r2
 80082fe:	f7ff f8b2 	bl	8007466 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008302:	f000 fecf 	bl	80090a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008306:	4b0d      	ldr	r3, [pc, #52]	; (800833c <prvAddNewTaskToReadyList+0xc0>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00e      	beq.n	800832c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800830e:	4b0a      	ldr	r3, [pc, #40]	; (8008338 <prvAddNewTaskToReadyList+0xbc>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008318:	429a      	cmp	r2, r3
 800831a:	d207      	bcs.n	800832c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800831c:	4b0b      	ldr	r3, [pc, #44]	; (800834c <prvAddNewTaskToReadyList+0xd0>)
 800831e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008322:	601a      	str	r2, [r3, #0]
 8008324:	f3bf 8f4f 	dsb	sy
 8008328:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800832c:	bf00      	nop
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}
 8008334:	200005cc 	.word	0x200005cc
 8008338:	200004cc 	.word	0x200004cc
 800833c:	200005d8 	.word	0x200005d8
 8008340:	200005e8 	.word	0x200005e8
 8008344:	200005d4 	.word	0x200005d4
 8008348:	200004d0 	.word	0x200004d0
 800834c:	e000ed04 	.word	0xe000ed04

08008350 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008358:	2300      	movs	r3, #0
 800835a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d017      	beq.n	8008392 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008362:	4b13      	ldr	r3, [pc, #76]	; (80083b0 <vTaskDelay+0x60>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00a      	beq.n	8008380 <vTaskDelay+0x30>
	__asm volatile
 800836a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836e:	f383 8811 	msr	BASEPRI, r3
 8008372:	f3bf 8f6f 	isb	sy
 8008376:	f3bf 8f4f 	dsb	sy
 800837a:	60bb      	str	r3, [r7, #8]
}
 800837c:	bf00      	nop
 800837e:	e7fe      	b.n	800837e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008380:	f000 f884 	bl	800848c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008384:	2100      	movs	r1, #0
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 fccc 	bl	8008d24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800838c:	f000 f88c 	bl	80084a8 <xTaskResumeAll>
 8008390:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d107      	bne.n	80083a8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008398:	4b06      	ldr	r3, [pc, #24]	; (80083b4 <vTaskDelay+0x64>)
 800839a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800839e:	601a      	str	r2, [r3, #0]
 80083a0:	f3bf 8f4f 	dsb	sy
 80083a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80083a8:	bf00      	nop
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	200005f4 	.word	0x200005f4
 80083b4:	e000ed04 	.word	0xe000ed04

080083b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b08a      	sub	sp, #40	; 0x28
 80083bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80083be:	2300      	movs	r3, #0
 80083c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80083c2:	2300      	movs	r3, #0
 80083c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80083c6:	463a      	mov	r2, r7
 80083c8:	1d39      	adds	r1, r7, #4
 80083ca:	f107 0308 	add.w	r3, r7, #8
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7f8 f89a 	bl	8000508 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80083d4:	6839      	ldr	r1, [r7, #0]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	68ba      	ldr	r2, [r7, #8]
 80083da:	9202      	str	r2, [sp, #8]
 80083dc:	9301      	str	r3, [sp, #4]
 80083de:	2300      	movs	r3, #0
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	2300      	movs	r3, #0
 80083e4:	460a      	mov	r2, r1
 80083e6:	4921      	ldr	r1, [pc, #132]	; (800846c <vTaskStartScheduler+0xb4>)
 80083e8:	4821      	ldr	r0, [pc, #132]	; (8008470 <vTaskStartScheduler+0xb8>)
 80083ea:	f7ff fe07 	bl	8007ffc <xTaskCreateStatic>
 80083ee:	4603      	mov	r3, r0
 80083f0:	4a20      	ldr	r2, [pc, #128]	; (8008474 <vTaskStartScheduler+0xbc>)
 80083f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80083f4:	4b1f      	ldr	r3, [pc, #124]	; (8008474 <vTaskStartScheduler+0xbc>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d002      	beq.n	8008402 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80083fc:	2301      	movs	r3, #1
 80083fe:	617b      	str	r3, [r7, #20]
 8008400:	e001      	b.n	8008406 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008402:	2300      	movs	r3, #0
 8008404:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d11b      	bne.n	8008444 <vTaskStartScheduler+0x8c>
	__asm volatile
 800840c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008410:	f383 8811 	msr	BASEPRI, r3
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	613b      	str	r3, [r7, #16]
}
 800841e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008420:	4b15      	ldr	r3, [pc, #84]	; (8008478 <vTaskStartScheduler+0xc0>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	334c      	adds	r3, #76	; 0x4c
 8008426:	4a15      	ldr	r2, [pc, #84]	; (800847c <vTaskStartScheduler+0xc4>)
 8008428:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800842a:	4b15      	ldr	r3, [pc, #84]	; (8008480 <vTaskStartScheduler+0xc8>)
 800842c:	f04f 32ff 	mov.w	r2, #4294967295
 8008430:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008432:	4b14      	ldr	r3, [pc, #80]	; (8008484 <vTaskStartScheduler+0xcc>)
 8008434:	2201      	movs	r2, #1
 8008436:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008438:	4b13      	ldr	r3, [pc, #76]	; (8008488 <vTaskStartScheduler+0xd0>)
 800843a:	2200      	movs	r2, #0
 800843c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800843e:	f000 fd5f 	bl	8008f00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008442:	e00e      	b.n	8008462 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800844a:	d10a      	bne.n	8008462 <vTaskStartScheduler+0xaa>
	__asm volatile
 800844c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008450:	f383 8811 	msr	BASEPRI, r3
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	60fb      	str	r3, [r7, #12]
}
 800845e:	bf00      	nop
 8008460:	e7fe      	b.n	8008460 <vTaskStartScheduler+0xa8>
}
 8008462:	bf00      	nop
 8008464:	3718      	adds	r7, #24
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	0800a418 	.word	0x0800a418
 8008470:	08008a29 	.word	0x08008a29
 8008474:	200005f0 	.word	0x200005f0
 8008478:	200004cc 	.word	0x200004cc
 800847c:	20000194 	.word	0x20000194
 8008480:	200005ec 	.word	0x200005ec
 8008484:	200005d8 	.word	0x200005d8
 8008488:	200005d0 	.word	0x200005d0

0800848c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800848c:	b480      	push	{r7}
 800848e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008490:	4b04      	ldr	r3, [pc, #16]	; (80084a4 <vTaskSuspendAll+0x18>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	3301      	adds	r3, #1
 8008496:	4a03      	ldr	r2, [pc, #12]	; (80084a4 <vTaskSuspendAll+0x18>)
 8008498:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800849a:	bf00      	nop
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr
 80084a4:	200005f4 	.word	0x200005f4

080084a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80084ae:	2300      	movs	r3, #0
 80084b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80084b2:	2300      	movs	r3, #0
 80084b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80084b6:	4b41      	ldr	r3, [pc, #260]	; (80085bc <xTaskResumeAll+0x114>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d10a      	bne.n	80084d4 <xTaskResumeAll+0x2c>
	__asm volatile
 80084be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c2:	f383 8811 	msr	BASEPRI, r3
 80084c6:	f3bf 8f6f 	isb	sy
 80084ca:	f3bf 8f4f 	dsb	sy
 80084ce:	603b      	str	r3, [r7, #0]
}
 80084d0:	bf00      	nop
 80084d2:	e7fe      	b.n	80084d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80084d4:	f000 fdb6 	bl	8009044 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80084d8:	4b38      	ldr	r3, [pc, #224]	; (80085bc <xTaskResumeAll+0x114>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	3b01      	subs	r3, #1
 80084de:	4a37      	ldr	r2, [pc, #220]	; (80085bc <xTaskResumeAll+0x114>)
 80084e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084e2:	4b36      	ldr	r3, [pc, #216]	; (80085bc <xTaskResumeAll+0x114>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d161      	bne.n	80085ae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80084ea:	4b35      	ldr	r3, [pc, #212]	; (80085c0 <xTaskResumeAll+0x118>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d05d      	beq.n	80085ae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084f2:	e02e      	b.n	8008552 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084f4:	4b33      	ldr	r3, [pc, #204]	; (80085c4 <xTaskResumeAll+0x11c>)
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	3318      	adds	r3, #24
 8008500:	4618      	mov	r0, r3
 8008502:	f7ff f80d 	bl	8007520 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	3304      	adds	r3, #4
 800850a:	4618      	mov	r0, r3
 800850c:	f7ff f808 	bl	8007520 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008514:	2201      	movs	r2, #1
 8008516:	409a      	lsls	r2, r3
 8008518:	4b2b      	ldr	r3, [pc, #172]	; (80085c8 <xTaskResumeAll+0x120>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4313      	orrs	r3, r2
 800851e:	4a2a      	ldr	r2, [pc, #168]	; (80085c8 <xTaskResumeAll+0x120>)
 8008520:	6013      	str	r3, [r2, #0]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008526:	4613      	mov	r3, r2
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	4413      	add	r3, r2
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	4a27      	ldr	r2, [pc, #156]	; (80085cc <xTaskResumeAll+0x124>)
 8008530:	441a      	add	r2, r3
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	3304      	adds	r3, #4
 8008536:	4619      	mov	r1, r3
 8008538:	4610      	mov	r0, r2
 800853a:	f7fe ff94 	bl	8007466 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008542:	4b23      	ldr	r3, [pc, #140]	; (80085d0 <xTaskResumeAll+0x128>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008548:	429a      	cmp	r2, r3
 800854a:	d302      	bcc.n	8008552 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800854c:	4b21      	ldr	r3, [pc, #132]	; (80085d4 <xTaskResumeAll+0x12c>)
 800854e:	2201      	movs	r2, #1
 8008550:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008552:	4b1c      	ldr	r3, [pc, #112]	; (80085c4 <xTaskResumeAll+0x11c>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1cc      	bne.n	80084f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d001      	beq.n	8008564 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008560:	f000 fb1c 	bl	8008b9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008564:	4b1c      	ldr	r3, [pc, #112]	; (80085d8 <xTaskResumeAll+0x130>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d010      	beq.n	8008592 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008570:	f000 f836 	bl	80085e0 <xTaskIncrementTick>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d002      	beq.n	8008580 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800857a:	4b16      	ldr	r3, [pc, #88]	; (80085d4 <xTaskResumeAll+0x12c>)
 800857c:	2201      	movs	r2, #1
 800857e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	3b01      	subs	r3, #1
 8008584:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1f1      	bne.n	8008570 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800858c:	4b12      	ldr	r3, [pc, #72]	; (80085d8 <xTaskResumeAll+0x130>)
 800858e:	2200      	movs	r2, #0
 8008590:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008592:	4b10      	ldr	r3, [pc, #64]	; (80085d4 <xTaskResumeAll+0x12c>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d009      	beq.n	80085ae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800859a:	2301      	movs	r3, #1
 800859c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800859e:	4b0f      	ldr	r3, [pc, #60]	; (80085dc <xTaskResumeAll+0x134>)
 80085a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085a4:	601a      	str	r2, [r3, #0]
 80085a6:	f3bf 8f4f 	dsb	sy
 80085aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80085ae:	f000 fd79 	bl	80090a4 <vPortExitCritical>

	return xAlreadyYielded;
 80085b2:	68bb      	ldr	r3, [r7, #8]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	200005f4 	.word	0x200005f4
 80085c0:	200005cc 	.word	0x200005cc
 80085c4:	2000058c 	.word	0x2000058c
 80085c8:	200005d4 	.word	0x200005d4
 80085cc:	200004d0 	.word	0x200004d0
 80085d0:	200004cc 	.word	0x200004cc
 80085d4:	200005e0 	.word	0x200005e0
 80085d8:	200005dc 	.word	0x200005dc
 80085dc:	e000ed04 	.word	0xe000ed04

080085e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b086      	sub	sp, #24
 80085e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80085e6:	2300      	movs	r3, #0
 80085e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085ea:	4b4e      	ldr	r3, [pc, #312]	; (8008724 <xTaskIncrementTick+0x144>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f040 808e 	bne.w	8008710 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80085f4:	4b4c      	ldr	r3, [pc, #304]	; (8008728 <xTaskIncrementTick+0x148>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	3301      	adds	r3, #1
 80085fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80085fc:	4a4a      	ldr	r2, [pc, #296]	; (8008728 <xTaskIncrementTick+0x148>)
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d120      	bne.n	800864a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008608:	4b48      	ldr	r3, [pc, #288]	; (800872c <xTaskIncrementTick+0x14c>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00a      	beq.n	8008628 <xTaskIncrementTick+0x48>
	__asm volatile
 8008612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008616:	f383 8811 	msr	BASEPRI, r3
 800861a:	f3bf 8f6f 	isb	sy
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	603b      	str	r3, [r7, #0]
}
 8008624:	bf00      	nop
 8008626:	e7fe      	b.n	8008626 <xTaskIncrementTick+0x46>
 8008628:	4b40      	ldr	r3, [pc, #256]	; (800872c <xTaskIncrementTick+0x14c>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	60fb      	str	r3, [r7, #12]
 800862e:	4b40      	ldr	r3, [pc, #256]	; (8008730 <xTaskIncrementTick+0x150>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a3e      	ldr	r2, [pc, #248]	; (800872c <xTaskIncrementTick+0x14c>)
 8008634:	6013      	str	r3, [r2, #0]
 8008636:	4a3e      	ldr	r2, [pc, #248]	; (8008730 <xTaskIncrementTick+0x150>)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6013      	str	r3, [r2, #0]
 800863c:	4b3d      	ldr	r3, [pc, #244]	; (8008734 <xTaskIncrementTick+0x154>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	3301      	adds	r3, #1
 8008642:	4a3c      	ldr	r2, [pc, #240]	; (8008734 <xTaskIncrementTick+0x154>)
 8008644:	6013      	str	r3, [r2, #0]
 8008646:	f000 faa9 	bl	8008b9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800864a:	4b3b      	ldr	r3, [pc, #236]	; (8008738 <xTaskIncrementTick+0x158>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	693a      	ldr	r2, [r7, #16]
 8008650:	429a      	cmp	r2, r3
 8008652:	d348      	bcc.n	80086e6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008654:	4b35      	ldr	r3, [pc, #212]	; (800872c <xTaskIncrementTick+0x14c>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d104      	bne.n	8008668 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800865e:	4b36      	ldr	r3, [pc, #216]	; (8008738 <xTaskIncrementTick+0x158>)
 8008660:	f04f 32ff 	mov.w	r2, #4294967295
 8008664:	601a      	str	r2, [r3, #0]
					break;
 8008666:	e03e      	b.n	80086e6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008668:	4b30      	ldr	r3, [pc, #192]	; (800872c <xTaskIncrementTick+0x14c>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008678:	693a      	ldr	r2, [r7, #16]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	429a      	cmp	r2, r3
 800867e:	d203      	bcs.n	8008688 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008680:	4a2d      	ldr	r2, [pc, #180]	; (8008738 <xTaskIncrementTick+0x158>)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008686:	e02e      	b.n	80086e6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	3304      	adds	r3, #4
 800868c:	4618      	mov	r0, r3
 800868e:	f7fe ff47 	bl	8007520 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008696:	2b00      	cmp	r3, #0
 8008698:	d004      	beq.n	80086a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	3318      	adds	r3, #24
 800869e:	4618      	mov	r0, r3
 80086a0:	f7fe ff3e 	bl	8007520 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a8:	2201      	movs	r2, #1
 80086aa:	409a      	lsls	r2, r3
 80086ac:	4b23      	ldr	r3, [pc, #140]	; (800873c <xTaskIncrementTick+0x15c>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	4a22      	ldr	r2, [pc, #136]	; (800873c <xTaskIncrementTick+0x15c>)
 80086b4:	6013      	str	r3, [r2, #0]
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ba:	4613      	mov	r3, r2
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	4413      	add	r3, r2
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	4a1f      	ldr	r2, [pc, #124]	; (8008740 <xTaskIncrementTick+0x160>)
 80086c4:	441a      	add	r2, r3
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	3304      	adds	r3, #4
 80086ca:	4619      	mov	r1, r3
 80086cc:	4610      	mov	r0, r2
 80086ce:	f7fe feca 	bl	8007466 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086d6:	4b1b      	ldr	r3, [pc, #108]	; (8008744 <xTaskIncrementTick+0x164>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086dc:	429a      	cmp	r2, r3
 80086de:	d3b9      	bcc.n	8008654 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80086e0:	2301      	movs	r3, #1
 80086e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086e4:	e7b6      	b.n	8008654 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80086e6:	4b17      	ldr	r3, [pc, #92]	; (8008744 <xTaskIncrementTick+0x164>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ec:	4914      	ldr	r1, [pc, #80]	; (8008740 <xTaskIncrementTick+0x160>)
 80086ee:	4613      	mov	r3, r2
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	4413      	add	r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	440b      	add	r3, r1
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d901      	bls.n	8008702 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80086fe:	2301      	movs	r3, #1
 8008700:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008702:	4b11      	ldr	r3, [pc, #68]	; (8008748 <xTaskIncrementTick+0x168>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d007      	beq.n	800871a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800870a:	2301      	movs	r3, #1
 800870c:	617b      	str	r3, [r7, #20]
 800870e:	e004      	b.n	800871a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008710:	4b0e      	ldr	r3, [pc, #56]	; (800874c <xTaskIncrementTick+0x16c>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	3301      	adds	r3, #1
 8008716:	4a0d      	ldr	r2, [pc, #52]	; (800874c <xTaskIncrementTick+0x16c>)
 8008718:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800871a:	697b      	ldr	r3, [r7, #20]
}
 800871c:	4618      	mov	r0, r3
 800871e:	3718      	adds	r7, #24
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}
 8008724:	200005f4 	.word	0x200005f4
 8008728:	200005d0 	.word	0x200005d0
 800872c:	20000584 	.word	0x20000584
 8008730:	20000588 	.word	0x20000588
 8008734:	200005e4 	.word	0x200005e4
 8008738:	200005ec 	.word	0x200005ec
 800873c:	200005d4 	.word	0x200005d4
 8008740:	200004d0 	.word	0x200004d0
 8008744:	200004cc 	.word	0x200004cc
 8008748:	200005e0 	.word	0x200005e0
 800874c:	200005dc 	.word	0x200005dc

08008750 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008750:	b480      	push	{r7}
 8008752:	b087      	sub	sp, #28
 8008754:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008756:	4b29      	ldr	r3, [pc, #164]	; (80087fc <vTaskSwitchContext+0xac>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d003      	beq.n	8008766 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800875e:	4b28      	ldr	r3, [pc, #160]	; (8008800 <vTaskSwitchContext+0xb0>)
 8008760:	2201      	movs	r2, #1
 8008762:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008764:	e044      	b.n	80087f0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8008766:	4b26      	ldr	r3, [pc, #152]	; (8008800 <vTaskSwitchContext+0xb0>)
 8008768:	2200      	movs	r2, #0
 800876a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800876c:	4b25      	ldr	r3, [pc, #148]	; (8008804 <vTaskSwitchContext+0xb4>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	fab3 f383 	clz	r3, r3
 8008778:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800877a:	7afb      	ldrb	r3, [r7, #11]
 800877c:	f1c3 031f 	rsb	r3, r3, #31
 8008780:	617b      	str	r3, [r7, #20]
 8008782:	4921      	ldr	r1, [pc, #132]	; (8008808 <vTaskSwitchContext+0xb8>)
 8008784:	697a      	ldr	r2, [r7, #20]
 8008786:	4613      	mov	r3, r2
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	4413      	add	r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	440b      	add	r3, r1
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d10a      	bne.n	80087ac <vTaskSwitchContext+0x5c>
	__asm volatile
 8008796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879a:	f383 8811 	msr	BASEPRI, r3
 800879e:	f3bf 8f6f 	isb	sy
 80087a2:	f3bf 8f4f 	dsb	sy
 80087a6:	607b      	str	r3, [r7, #4]
}
 80087a8:	bf00      	nop
 80087aa:	e7fe      	b.n	80087aa <vTaskSwitchContext+0x5a>
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	4613      	mov	r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	4413      	add	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	4a14      	ldr	r2, [pc, #80]	; (8008808 <vTaskSwitchContext+0xb8>)
 80087b8:	4413      	add	r3, r2
 80087ba:	613b      	str	r3, [r7, #16]
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	685a      	ldr	r2, [r3, #4]
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	605a      	str	r2, [r3, #4]
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	685a      	ldr	r2, [r3, #4]
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	3308      	adds	r3, #8
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d104      	bne.n	80087dc <vTaskSwitchContext+0x8c>
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	685a      	ldr	r2, [r3, #4]
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	605a      	str	r2, [r3, #4]
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	4a0a      	ldr	r2, [pc, #40]	; (800880c <vTaskSwitchContext+0xbc>)
 80087e4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80087e6:	4b09      	ldr	r3, [pc, #36]	; (800880c <vTaskSwitchContext+0xbc>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	334c      	adds	r3, #76	; 0x4c
 80087ec:	4a08      	ldr	r2, [pc, #32]	; (8008810 <vTaskSwitchContext+0xc0>)
 80087ee:	6013      	str	r3, [r2, #0]
}
 80087f0:	bf00      	nop
 80087f2:	371c      	adds	r7, #28
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr
 80087fc:	200005f4 	.word	0x200005f4
 8008800:	200005e0 	.word	0x200005e0
 8008804:	200005d4 	.word	0x200005d4
 8008808:	200004d0 	.word	0x200004d0
 800880c:	200004cc 	.word	0x200004cc
 8008810:	20000194 	.word	0x20000194

08008814 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d10a      	bne.n	800883a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008828:	f383 8811 	msr	BASEPRI, r3
 800882c:	f3bf 8f6f 	isb	sy
 8008830:	f3bf 8f4f 	dsb	sy
 8008834:	60fb      	str	r3, [r7, #12]
}
 8008836:	bf00      	nop
 8008838:	e7fe      	b.n	8008838 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800883a:	4b07      	ldr	r3, [pc, #28]	; (8008858 <vTaskPlaceOnEventList+0x44>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	3318      	adds	r3, #24
 8008840:	4619      	mov	r1, r3
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7fe fe33 	bl	80074ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008848:	2101      	movs	r1, #1
 800884a:	6838      	ldr	r0, [r7, #0]
 800884c:	f000 fa6a 	bl	8008d24 <prvAddCurrentTaskToDelayedList>
}
 8008850:	bf00      	nop
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	200004cc 	.word	0x200004cc

0800885c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b086      	sub	sp, #24
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d10a      	bne.n	8008888 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008876:	f383 8811 	msr	BASEPRI, r3
 800887a:	f3bf 8f6f 	isb	sy
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	60fb      	str	r3, [r7, #12]
}
 8008884:	bf00      	nop
 8008886:	e7fe      	b.n	8008886 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	3318      	adds	r3, #24
 800888c:	4618      	mov	r0, r3
 800888e:	f7fe fe47 	bl	8007520 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008892:	4b1d      	ldr	r3, [pc, #116]	; (8008908 <xTaskRemoveFromEventList+0xac>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d11c      	bne.n	80088d4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	3304      	adds	r3, #4
 800889e:	4618      	mov	r0, r3
 80088a0:	f7fe fe3e 	bl	8007520 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a8:	2201      	movs	r2, #1
 80088aa:	409a      	lsls	r2, r3
 80088ac:	4b17      	ldr	r3, [pc, #92]	; (800890c <xTaskRemoveFromEventList+0xb0>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4313      	orrs	r3, r2
 80088b2:	4a16      	ldr	r2, [pc, #88]	; (800890c <xTaskRemoveFromEventList+0xb0>)
 80088b4:	6013      	str	r3, [r2, #0]
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ba:	4613      	mov	r3, r2
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	4413      	add	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4a13      	ldr	r2, [pc, #76]	; (8008910 <xTaskRemoveFromEventList+0xb4>)
 80088c4:	441a      	add	r2, r3
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	3304      	adds	r3, #4
 80088ca:	4619      	mov	r1, r3
 80088cc:	4610      	mov	r0, r2
 80088ce:	f7fe fdca 	bl	8007466 <vListInsertEnd>
 80088d2:	e005      	b.n	80088e0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	3318      	adds	r3, #24
 80088d8:	4619      	mov	r1, r3
 80088da:	480e      	ldr	r0, [pc, #56]	; (8008914 <xTaskRemoveFromEventList+0xb8>)
 80088dc:	f7fe fdc3 	bl	8007466 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088e4:	4b0c      	ldr	r3, [pc, #48]	; (8008918 <xTaskRemoveFromEventList+0xbc>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d905      	bls.n	80088fa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80088ee:	2301      	movs	r3, #1
 80088f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80088f2:	4b0a      	ldr	r3, [pc, #40]	; (800891c <xTaskRemoveFromEventList+0xc0>)
 80088f4:	2201      	movs	r2, #1
 80088f6:	601a      	str	r2, [r3, #0]
 80088f8:	e001      	b.n	80088fe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80088fa:	2300      	movs	r3, #0
 80088fc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80088fe:	697b      	ldr	r3, [r7, #20]
}
 8008900:	4618      	mov	r0, r3
 8008902:	3718      	adds	r7, #24
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	200005f4 	.word	0x200005f4
 800890c:	200005d4 	.word	0x200005d4
 8008910:	200004d0 	.word	0x200004d0
 8008914:	2000058c 	.word	0x2000058c
 8008918:	200004cc 	.word	0x200004cc
 800891c:	200005e0 	.word	0x200005e0

08008920 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008928:	4b06      	ldr	r3, [pc, #24]	; (8008944 <vTaskInternalSetTimeOutState+0x24>)
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008930:	4b05      	ldr	r3, [pc, #20]	; (8008948 <vTaskInternalSetTimeOutState+0x28>)
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	605a      	str	r2, [r3, #4]
}
 8008938:	bf00      	nop
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr
 8008944:	200005e4 	.word	0x200005e4
 8008948:	200005d0 	.word	0x200005d0

0800894c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b088      	sub	sp, #32
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d10a      	bne.n	8008972 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800895c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008960:	f383 8811 	msr	BASEPRI, r3
 8008964:	f3bf 8f6f 	isb	sy
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	613b      	str	r3, [r7, #16]
}
 800896e:	bf00      	nop
 8008970:	e7fe      	b.n	8008970 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d10a      	bne.n	800898e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897c:	f383 8811 	msr	BASEPRI, r3
 8008980:	f3bf 8f6f 	isb	sy
 8008984:	f3bf 8f4f 	dsb	sy
 8008988:	60fb      	str	r3, [r7, #12]
}
 800898a:	bf00      	nop
 800898c:	e7fe      	b.n	800898c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800898e:	f000 fb59 	bl	8009044 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008992:	4b1d      	ldr	r3, [pc, #116]	; (8008a08 <xTaskCheckForTimeOut+0xbc>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	69ba      	ldr	r2, [r7, #24]
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089aa:	d102      	bne.n	80089b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80089ac:	2300      	movs	r3, #0
 80089ae:	61fb      	str	r3, [r7, #28]
 80089b0:	e023      	b.n	80089fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	4b15      	ldr	r3, [pc, #84]	; (8008a0c <xTaskCheckForTimeOut+0xc0>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d007      	beq.n	80089ce <xTaskCheckForTimeOut+0x82>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	69ba      	ldr	r2, [r7, #24]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d302      	bcc.n	80089ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80089c8:	2301      	movs	r3, #1
 80089ca:	61fb      	str	r3, [r7, #28]
 80089cc:	e015      	b.n	80089fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	697a      	ldr	r2, [r7, #20]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d20b      	bcs.n	80089f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	1ad2      	subs	r2, r2, r3
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f7ff ff9b 	bl	8008920 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80089ea:	2300      	movs	r3, #0
 80089ec:	61fb      	str	r3, [r7, #28]
 80089ee:	e004      	b.n	80089fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	2200      	movs	r2, #0
 80089f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80089f6:	2301      	movs	r3, #1
 80089f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80089fa:	f000 fb53 	bl	80090a4 <vPortExitCritical>

	return xReturn;
 80089fe:	69fb      	ldr	r3, [r7, #28]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3720      	adds	r7, #32
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	200005d0 	.word	0x200005d0
 8008a0c:	200005e4 	.word	0x200005e4

08008a10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008a10:	b480      	push	{r7}
 8008a12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008a14:	4b03      	ldr	r3, [pc, #12]	; (8008a24 <vTaskMissedYield+0x14>)
 8008a16:	2201      	movs	r2, #1
 8008a18:	601a      	str	r2, [r3, #0]
}
 8008a1a:	bf00      	nop
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr
 8008a24:	200005e0 	.word	0x200005e0

08008a28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a30:	f000 f852 	bl	8008ad8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a34:	4b06      	ldr	r3, [pc, #24]	; (8008a50 <prvIdleTask+0x28>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d9f9      	bls.n	8008a30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a3c:	4b05      	ldr	r3, [pc, #20]	; (8008a54 <prvIdleTask+0x2c>)
 8008a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a42:	601a      	str	r2, [r3, #0]
 8008a44:	f3bf 8f4f 	dsb	sy
 8008a48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008a4c:	e7f0      	b.n	8008a30 <prvIdleTask+0x8>
 8008a4e:	bf00      	nop
 8008a50:	200004d0 	.word	0x200004d0
 8008a54:	e000ed04 	.word	0xe000ed04

08008a58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a5e:	2300      	movs	r3, #0
 8008a60:	607b      	str	r3, [r7, #4]
 8008a62:	e00c      	b.n	8008a7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	4613      	mov	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	4413      	add	r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	4a12      	ldr	r2, [pc, #72]	; (8008ab8 <prvInitialiseTaskLists+0x60>)
 8008a70:	4413      	add	r3, r2
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7fe fcca 	bl	800740c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	607b      	str	r3, [r7, #4]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2b06      	cmp	r3, #6
 8008a82:	d9ef      	bls.n	8008a64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a84:	480d      	ldr	r0, [pc, #52]	; (8008abc <prvInitialiseTaskLists+0x64>)
 8008a86:	f7fe fcc1 	bl	800740c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a8a:	480d      	ldr	r0, [pc, #52]	; (8008ac0 <prvInitialiseTaskLists+0x68>)
 8008a8c:	f7fe fcbe 	bl	800740c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a90:	480c      	ldr	r0, [pc, #48]	; (8008ac4 <prvInitialiseTaskLists+0x6c>)
 8008a92:	f7fe fcbb 	bl	800740c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a96:	480c      	ldr	r0, [pc, #48]	; (8008ac8 <prvInitialiseTaskLists+0x70>)
 8008a98:	f7fe fcb8 	bl	800740c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a9c:	480b      	ldr	r0, [pc, #44]	; (8008acc <prvInitialiseTaskLists+0x74>)
 8008a9e:	f7fe fcb5 	bl	800740c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008aa2:	4b0b      	ldr	r3, [pc, #44]	; (8008ad0 <prvInitialiseTaskLists+0x78>)
 8008aa4:	4a05      	ldr	r2, [pc, #20]	; (8008abc <prvInitialiseTaskLists+0x64>)
 8008aa6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008aa8:	4b0a      	ldr	r3, [pc, #40]	; (8008ad4 <prvInitialiseTaskLists+0x7c>)
 8008aaa:	4a05      	ldr	r2, [pc, #20]	; (8008ac0 <prvInitialiseTaskLists+0x68>)
 8008aac:	601a      	str	r2, [r3, #0]
}
 8008aae:	bf00      	nop
 8008ab0:	3708      	adds	r7, #8
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	200004d0 	.word	0x200004d0
 8008abc:	2000055c 	.word	0x2000055c
 8008ac0:	20000570 	.word	0x20000570
 8008ac4:	2000058c 	.word	0x2000058c
 8008ac8:	200005a0 	.word	0x200005a0
 8008acc:	200005b8 	.word	0x200005b8
 8008ad0:	20000584 	.word	0x20000584
 8008ad4:	20000588 	.word	0x20000588

08008ad8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ade:	e019      	b.n	8008b14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ae0:	f000 fab0 	bl	8009044 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ae4:	4b10      	ldr	r3, [pc, #64]	; (8008b28 <prvCheckTasksWaitingTermination+0x50>)
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	3304      	adds	r3, #4
 8008af0:	4618      	mov	r0, r3
 8008af2:	f7fe fd15 	bl	8007520 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008af6:	4b0d      	ldr	r3, [pc, #52]	; (8008b2c <prvCheckTasksWaitingTermination+0x54>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	3b01      	subs	r3, #1
 8008afc:	4a0b      	ldr	r2, [pc, #44]	; (8008b2c <prvCheckTasksWaitingTermination+0x54>)
 8008afe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b00:	4b0b      	ldr	r3, [pc, #44]	; (8008b30 <prvCheckTasksWaitingTermination+0x58>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	3b01      	subs	r3, #1
 8008b06:	4a0a      	ldr	r2, [pc, #40]	; (8008b30 <prvCheckTasksWaitingTermination+0x58>)
 8008b08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008b0a:	f000 facb 	bl	80090a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f810 	bl	8008b34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b14:	4b06      	ldr	r3, [pc, #24]	; (8008b30 <prvCheckTasksWaitingTermination+0x58>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d1e1      	bne.n	8008ae0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b1c:	bf00      	nop
 8008b1e:	bf00      	nop
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	200005a0 	.word	0x200005a0
 8008b2c:	200005cc 	.word	0x200005cc
 8008b30:	200005b4 	.word	0x200005b4

08008b34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	334c      	adds	r3, #76	; 0x4c
 8008b40:	4618      	mov	r0, r3
 8008b42:	f001 fb77 	bl	800a234 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d108      	bne.n	8008b62 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b54:	4618      	mov	r0, r3
 8008b56:	f000 fc63 	bl	8009420 <vPortFree>
				vPortFree( pxTCB );
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 fc60 	bl	8009420 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b60:	e018      	b.n	8008b94 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d103      	bne.n	8008b74 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 fc57 	bl	8009420 <vPortFree>
	}
 8008b72:	e00f      	b.n	8008b94 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008b7a:	2b02      	cmp	r3, #2
 8008b7c:	d00a      	beq.n	8008b94 <prvDeleteTCB+0x60>
	__asm volatile
 8008b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b82:	f383 8811 	msr	BASEPRI, r3
 8008b86:	f3bf 8f6f 	isb	sy
 8008b8a:	f3bf 8f4f 	dsb	sy
 8008b8e:	60fb      	str	r3, [r7, #12]
}
 8008b90:	bf00      	nop
 8008b92:	e7fe      	b.n	8008b92 <prvDeleteTCB+0x5e>
	}
 8008b94:	bf00      	nop
 8008b96:	3710      	adds	r7, #16
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ba2:	4b0c      	ldr	r3, [pc, #48]	; (8008bd4 <prvResetNextTaskUnblockTime+0x38>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d104      	bne.n	8008bb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008bac:	4b0a      	ldr	r3, [pc, #40]	; (8008bd8 <prvResetNextTaskUnblockTime+0x3c>)
 8008bae:	f04f 32ff 	mov.w	r2, #4294967295
 8008bb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008bb4:	e008      	b.n	8008bc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bb6:	4b07      	ldr	r3, [pc, #28]	; (8008bd4 <prvResetNextTaskUnblockTime+0x38>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	4a04      	ldr	r2, [pc, #16]	; (8008bd8 <prvResetNextTaskUnblockTime+0x3c>)
 8008bc6:	6013      	str	r3, [r2, #0]
}
 8008bc8:	bf00      	nop
 8008bca:	370c      	adds	r7, #12
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr
 8008bd4:	20000584 	.word	0x20000584
 8008bd8:	200005ec 	.word	0x200005ec

08008bdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008be2:	4b0b      	ldr	r3, [pc, #44]	; (8008c10 <xTaskGetSchedulerState+0x34>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d102      	bne.n	8008bf0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008bea:	2301      	movs	r3, #1
 8008bec:	607b      	str	r3, [r7, #4]
 8008bee:	e008      	b.n	8008c02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bf0:	4b08      	ldr	r3, [pc, #32]	; (8008c14 <xTaskGetSchedulerState+0x38>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d102      	bne.n	8008bfe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008bf8:	2302      	movs	r3, #2
 8008bfa:	607b      	str	r3, [r7, #4]
 8008bfc:	e001      	b.n	8008c02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008c02:	687b      	ldr	r3, [r7, #4]
	}
 8008c04:	4618      	mov	r0, r3
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr
 8008c10:	200005d8 	.word	0x200005d8
 8008c14:	200005f4 	.word	0x200005f4

08008c18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b086      	sub	sp, #24
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c24:	2300      	movs	r3, #0
 8008c26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d06e      	beq.n	8008d0c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c2e:	4b3a      	ldr	r3, [pc, #232]	; (8008d18 <xTaskPriorityDisinherit+0x100>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d00a      	beq.n	8008c4e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3c:	f383 8811 	msr	BASEPRI, r3
 8008c40:	f3bf 8f6f 	isb	sy
 8008c44:	f3bf 8f4f 	dsb	sy
 8008c48:	60fb      	str	r3, [r7, #12]
}
 8008c4a:	bf00      	nop
 8008c4c:	e7fe      	b.n	8008c4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d10a      	bne.n	8008c6c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5a:	f383 8811 	msr	BASEPRI, r3
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f3bf 8f4f 	dsb	sy
 8008c66:	60bb      	str	r3, [r7, #8]
}
 8008c68:	bf00      	nop
 8008c6a:	e7fe      	b.n	8008c6a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c70:	1e5a      	subs	r2, r3, #1
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d044      	beq.n	8008d0c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d140      	bne.n	8008d0c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	3304      	adds	r3, #4
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f7fe fc46 	bl	8007520 <uxListRemove>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d115      	bne.n	8008cc6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c9e:	491f      	ldr	r1, [pc, #124]	; (8008d1c <xTaskPriorityDisinherit+0x104>)
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4413      	add	r3, r2
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	440b      	add	r3, r1
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d10a      	bne.n	8008cc6 <xTaskPriorityDisinherit+0xae>
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cba:	43da      	mvns	r2, r3
 8008cbc:	4b18      	ldr	r3, [pc, #96]	; (8008d20 <xTaskPriorityDisinherit+0x108>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4013      	ands	r3, r2
 8008cc2:	4a17      	ldr	r2, [pc, #92]	; (8008d20 <xTaskPriorityDisinherit+0x108>)
 8008cc4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd2:	f1c3 0207 	rsb	r2, r3, #7
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cde:	2201      	movs	r2, #1
 8008ce0:	409a      	lsls	r2, r3
 8008ce2:	4b0f      	ldr	r3, [pc, #60]	; (8008d20 <xTaskPriorityDisinherit+0x108>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	4a0d      	ldr	r2, [pc, #52]	; (8008d20 <xTaskPriorityDisinherit+0x108>)
 8008cea:	6013      	str	r3, [r2, #0]
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	4413      	add	r3, r2
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	4a08      	ldr	r2, [pc, #32]	; (8008d1c <xTaskPriorityDisinherit+0x104>)
 8008cfa:	441a      	add	r2, r3
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	3304      	adds	r3, #4
 8008d00:	4619      	mov	r1, r3
 8008d02:	4610      	mov	r0, r2
 8008d04:	f7fe fbaf 	bl	8007466 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d0c:	697b      	ldr	r3, [r7, #20]
	}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3718      	adds	r7, #24
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	200004cc 	.word	0x200004cc
 8008d1c:	200004d0 	.word	0x200004d0
 8008d20:	200005d4 	.word	0x200005d4

08008d24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d2e:	4b29      	ldr	r3, [pc, #164]	; (8008dd4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d34:	4b28      	ldr	r3, [pc, #160]	; (8008dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	3304      	adds	r3, #4
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7fe fbf0 	bl	8007520 <uxListRemove>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d10b      	bne.n	8008d5e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008d46:	4b24      	ldr	r3, [pc, #144]	; (8008dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d52:	43da      	mvns	r2, r3
 8008d54:	4b21      	ldr	r3, [pc, #132]	; (8008ddc <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4013      	ands	r3, r2
 8008d5a:	4a20      	ldr	r2, [pc, #128]	; (8008ddc <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d5c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d64:	d10a      	bne.n	8008d7c <prvAddCurrentTaskToDelayedList+0x58>
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d007      	beq.n	8008d7c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d6c:	4b1a      	ldr	r3, [pc, #104]	; (8008dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	3304      	adds	r3, #4
 8008d72:	4619      	mov	r1, r3
 8008d74:	481a      	ldr	r0, [pc, #104]	; (8008de0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008d76:	f7fe fb76 	bl	8007466 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d7a:	e026      	b.n	8008dca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d7c:	68fa      	ldr	r2, [r7, #12]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4413      	add	r3, r2
 8008d82:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d84:	4b14      	ldr	r3, [pc, #80]	; (8008dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68ba      	ldr	r2, [r7, #8]
 8008d8a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d209      	bcs.n	8008da8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d94:	4b13      	ldr	r3, [pc, #76]	; (8008de4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	4b0f      	ldr	r3, [pc, #60]	; (8008dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	3304      	adds	r3, #4
 8008d9e:	4619      	mov	r1, r3
 8008da0:	4610      	mov	r0, r2
 8008da2:	f7fe fb84 	bl	80074ae <vListInsert>
}
 8008da6:	e010      	b.n	8008dca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008da8:	4b0f      	ldr	r3, [pc, #60]	; (8008de8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	4b0a      	ldr	r3, [pc, #40]	; (8008dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	3304      	adds	r3, #4
 8008db2:	4619      	mov	r1, r3
 8008db4:	4610      	mov	r0, r2
 8008db6:	f7fe fb7a 	bl	80074ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008dba:	4b0c      	ldr	r3, [pc, #48]	; (8008dec <prvAddCurrentTaskToDelayedList+0xc8>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	68ba      	ldr	r2, [r7, #8]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d202      	bcs.n	8008dca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008dc4:	4a09      	ldr	r2, [pc, #36]	; (8008dec <prvAddCurrentTaskToDelayedList+0xc8>)
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	6013      	str	r3, [r2, #0]
}
 8008dca:	bf00      	nop
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	200005d0 	.word	0x200005d0
 8008dd8:	200004cc 	.word	0x200004cc
 8008ddc:	200005d4 	.word	0x200005d4
 8008de0:	200005b8 	.word	0x200005b8
 8008de4:	20000588 	.word	0x20000588
 8008de8:	20000584 	.word	0x20000584
 8008dec:	200005ec 	.word	0x200005ec

08008df0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	3b04      	subs	r3, #4
 8008e00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	3b04      	subs	r3, #4
 8008e0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	f023 0201 	bic.w	r2, r3, #1
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	3b04      	subs	r3, #4
 8008e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e20:	4a0c      	ldr	r2, [pc, #48]	; (8008e54 <pxPortInitialiseStack+0x64>)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	3b14      	subs	r3, #20
 8008e2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	3b04      	subs	r3, #4
 8008e36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f06f 0202 	mvn.w	r2, #2
 8008e3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	3b20      	subs	r3, #32
 8008e44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e46:	68fb      	ldr	r3, [r7, #12]
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3714      	adds	r7, #20
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr
 8008e54:	08008e59 	.word	0x08008e59

08008e58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b085      	sub	sp, #20
 8008e5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e62:	4b12      	ldr	r3, [pc, #72]	; (8008eac <prvTaskExitError+0x54>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e6a:	d00a      	beq.n	8008e82 <prvTaskExitError+0x2a>
	__asm volatile
 8008e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e70:	f383 8811 	msr	BASEPRI, r3
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	f3bf 8f4f 	dsb	sy
 8008e7c:	60fb      	str	r3, [r7, #12]
}
 8008e7e:	bf00      	nop
 8008e80:	e7fe      	b.n	8008e80 <prvTaskExitError+0x28>
	__asm volatile
 8008e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e86:	f383 8811 	msr	BASEPRI, r3
 8008e8a:	f3bf 8f6f 	isb	sy
 8008e8e:	f3bf 8f4f 	dsb	sy
 8008e92:	60bb      	str	r3, [r7, #8]
}
 8008e94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008e96:	bf00      	nop
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d0fc      	beq.n	8008e98 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008e9e:	bf00      	nop
 8008ea0:	bf00      	nop
 8008ea2:	3714      	adds	r7, #20
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr
 8008eac:	2000011c 	.word	0x2000011c

08008eb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008eb0:	4b07      	ldr	r3, [pc, #28]	; (8008ed0 <pxCurrentTCBConst2>)
 8008eb2:	6819      	ldr	r1, [r3, #0]
 8008eb4:	6808      	ldr	r0, [r1, #0]
 8008eb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eba:	f380 8809 	msr	PSP, r0
 8008ebe:	f3bf 8f6f 	isb	sy
 8008ec2:	f04f 0000 	mov.w	r0, #0
 8008ec6:	f380 8811 	msr	BASEPRI, r0
 8008eca:	4770      	bx	lr
 8008ecc:	f3af 8000 	nop.w

08008ed0 <pxCurrentTCBConst2>:
 8008ed0:	200004cc 	.word	0x200004cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ed4:	bf00      	nop
 8008ed6:	bf00      	nop

08008ed8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ed8:	4808      	ldr	r0, [pc, #32]	; (8008efc <prvPortStartFirstTask+0x24>)
 8008eda:	6800      	ldr	r0, [r0, #0]
 8008edc:	6800      	ldr	r0, [r0, #0]
 8008ede:	f380 8808 	msr	MSP, r0
 8008ee2:	f04f 0000 	mov.w	r0, #0
 8008ee6:	f380 8814 	msr	CONTROL, r0
 8008eea:	b662      	cpsie	i
 8008eec:	b661      	cpsie	f
 8008eee:	f3bf 8f4f 	dsb	sy
 8008ef2:	f3bf 8f6f 	isb	sy
 8008ef6:	df00      	svc	0
 8008ef8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008efa:	bf00      	nop
 8008efc:	e000ed08 	.word	0xe000ed08

08008f00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008f06:	4b46      	ldr	r3, [pc, #280]	; (8009020 <xPortStartScheduler+0x120>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a46      	ldr	r2, [pc, #280]	; (8009024 <xPortStartScheduler+0x124>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d10a      	bne.n	8008f26 <xPortStartScheduler+0x26>
	__asm volatile
 8008f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f14:	f383 8811 	msr	BASEPRI, r3
 8008f18:	f3bf 8f6f 	isb	sy
 8008f1c:	f3bf 8f4f 	dsb	sy
 8008f20:	613b      	str	r3, [r7, #16]
}
 8008f22:	bf00      	nop
 8008f24:	e7fe      	b.n	8008f24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008f26:	4b3e      	ldr	r3, [pc, #248]	; (8009020 <xPortStartScheduler+0x120>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a3f      	ldr	r2, [pc, #252]	; (8009028 <xPortStartScheduler+0x128>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d10a      	bne.n	8008f46 <xPortStartScheduler+0x46>
	__asm volatile
 8008f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f34:	f383 8811 	msr	BASEPRI, r3
 8008f38:	f3bf 8f6f 	isb	sy
 8008f3c:	f3bf 8f4f 	dsb	sy
 8008f40:	60fb      	str	r3, [r7, #12]
}
 8008f42:	bf00      	nop
 8008f44:	e7fe      	b.n	8008f44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f46:	4b39      	ldr	r3, [pc, #228]	; (800902c <xPortStartScheduler+0x12c>)
 8008f48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	22ff      	movs	r2, #255	; 0xff
 8008f56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f60:	78fb      	ldrb	r3, [r7, #3]
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f68:	b2da      	uxtb	r2, r3
 8008f6a:	4b31      	ldr	r3, [pc, #196]	; (8009030 <xPortStartScheduler+0x130>)
 8008f6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f6e:	4b31      	ldr	r3, [pc, #196]	; (8009034 <xPortStartScheduler+0x134>)
 8008f70:	2207      	movs	r2, #7
 8008f72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f74:	e009      	b.n	8008f8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008f76:	4b2f      	ldr	r3, [pc, #188]	; (8009034 <xPortStartScheduler+0x134>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	4a2d      	ldr	r2, [pc, #180]	; (8009034 <xPortStartScheduler+0x134>)
 8008f7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f80:	78fb      	ldrb	r3, [r7, #3]
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	005b      	lsls	r3, r3, #1
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f8a:	78fb      	ldrb	r3, [r7, #3]
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f92:	2b80      	cmp	r3, #128	; 0x80
 8008f94:	d0ef      	beq.n	8008f76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f96:	4b27      	ldr	r3, [pc, #156]	; (8009034 <xPortStartScheduler+0x134>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f1c3 0307 	rsb	r3, r3, #7
 8008f9e:	2b04      	cmp	r3, #4
 8008fa0:	d00a      	beq.n	8008fb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa6:	f383 8811 	msr	BASEPRI, r3
 8008faa:	f3bf 8f6f 	isb	sy
 8008fae:	f3bf 8f4f 	dsb	sy
 8008fb2:	60bb      	str	r3, [r7, #8]
}
 8008fb4:	bf00      	nop
 8008fb6:	e7fe      	b.n	8008fb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008fb8:	4b1e      	ldr	r3, [pc, #120]	; (8009034 <xPortStartScheduler+0x134>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	021b      	lsls	r3, r3, #8
 8008fbe:	4a1d      	ldr	r2, [pc, #116]	; (8009034 <xPortStartScheduler+0x134>)
 8008fc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008fc2:	4b1c      	ldr	r3, [pc, #112]	; (8009034 <xPortStartScheduler+0x134>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fca:	4a1a      	ldr	r2, [pc, #104]	; (8009034 <xPortStartScheduler+0x134>)
 8008fcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	b2da      	uxtb	r2, r3
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008fd6:	4b18      	ldr	r3, [pc, #96]	; (8009038 <xPortStartScheduler+0x138>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a17      	ldr	r2, [pc, #92]	; (8009038 <xPortStartScheduler+0x138>)
 8008fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008fe0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008fe2:	4b15      	ldr	r3, [pc, #84]	; (8009038 <xPortStartScheduler+0x138>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a14      	ldr	r2, [pc, #80]	; (8009038 <xPortStartScheduler+0x138>)
 8008fe8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008fec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008fee:	f000 f8dd 	bl	80091ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ff2:	4b12      	ldr	r3, [pc, #72]	; (800903c <xPortStartScheduler+0x13c>)
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008ff8:	f000 f8fc 	bl	80091f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008ffc:	4b10      	ldr	r3, [pc, #64]	; (8009040 <xPortStartScheduler+0x140>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a0f      	ldr	r2, [pc, #60]	; (8009040 <xPortStartScheduler+0x140>)
 8009002:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009006:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009008:	f7ff ff66 	bl	8008ed8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800900c:	f7ff fba0 	bl	8008750 <vTaskSwitchContext>
	prvTaskExitError();
 8009010:	f7ff ff22 	bl	8008e58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3718      	adds	r7, #24
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	e000ed00 	.word	0xe000ed00
 8009024:	410fc271 	.word	0x410fc271
 8009028:	410fc270 	.word	0x410fc270
 800902c:	e000e400 	.word	0xe000e400
 8009030:	200005f8 	.word	0x200005f8
 8009034:	200005fc 	.word	0x200005fc
 8009038:	e000ed20 	.word	0xe000ed20
 800903c:	2000011c 	.word	0x2000011c
 8009040:	e000ef34 	.word	0xe000ef34

08009044 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
	__asm volatile
 800904a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904e:	f383 8811 	msr	BASEPRI, r3
 8009052:	f3bf 8f6f 	isb	sy
 8009056:	f3bf 8f4f 	dsb	sy
 800905a:	607b      	str	r3, [r7, #4]
}
 800905c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800905e:	4b0f      	ldr	r3, [pc, #60]	; (800909c <vPortEnterCritical+0x58>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	3301      	adds	r3, #1
 8009064:	4a0d      	ldr	r2, [pc, #52]	; (800909c <vPortEnterCritical+0x58>)
 8009066:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009068:	4b0c      	ldr	r3, [pc, #48]	; (800909c <vPortEnterCritical+0x58>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2b01      	cmp	r3, #1
 800906e:	d10f      	bne.n	8009090 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009070:	4b0b      	ldr	r3, [pc, #44]	; (80090a0 <vPortEnterCritical+0x5c>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	b2db      	uxtb	r3, r3
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00a      	beq.n	8009090 <vPortEnterCritical+0x4c>
	__asm volatile
 800907a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907e:	f383 8811 	msr	BASEPRI, r3
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	603b      	str	r3, [r7, #0]
}
 800908c:	bf00      	nop
 800908e:	e7fe      	b.n	800908e <vPortEnterCritical+0x4a>
	}
}
 8009090:	bf00      	nop
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr
 800909c:	2000011c 	.word	0x2000011c
 80090a0:	e000ed04 	.word	0xe000ed04

080090a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80090aa:	4b12      	ldr	r3, [pc, #72]	; (80090f4 <vPortExitCritical+0x50>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d10a      	bne.n	80090c8 <vPortExitCritical+0x24>
	__asm volatile
 80090b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b6:	f383 8811 	msr	BASEPRI, r3
 80090ba:	f3bf 8f6f 	isb	sy
 80090be:	f3bf 8f4f 	dsb	sy
 80090c2:	607b      	str	r3, [r7, #4]
}
 80090c4:	bf00      	nop
 80090c6:	e7fe      	b.n	80090c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80090c8:	4b0a      	ldr	r3, [pc, #40]	; (80090f4 <vPortExitCritical+0x50>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	3b01      	subs	r3, #1
 80090ce:	4a09      	ldr	r2, [pc, #36]	; (80090f4 <vPortExitCritical+0x50>)
 80090d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80090d2:	4b08      	ldr	r3, [pc, #32]	; (80090f4 <vPortExitCritical+0x50>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d105      	bne.n	80090e6 <vPortExitCritical+0x42>
 80090da:	2300      	movs	r3, #0
 80090dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	f383 8811 	msr	BASEPRI, r3
}
 80090e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80090e6:	bf00      	nop
 80090e8:	370c      	adds	r7, #12
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	2000011c 	.word	0x2000011c
	...

08009100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009100:	f3ef 8009 	mrs	r0, PSP
 8009104:	f3bf 8f6f 	isb	sy
 8009108:	4b15      	ldr	r3, [pc, #84]	; (8009160 <pxCurrentTCBConst>)
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	f01e 0f10 	tst.w	lr, #16
 8009110:	bf08      	it	eq
 8009112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800911a:	6010      	str	r0, [r2, #0]
 800911c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009120:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009124:	f380 8811 	msr	BASEPRI, r0
 8009128:	f3bf 8f4f 	dsb	sy
 800912c:	f3bf 8f6f 	isb	sy
 8009130:	f7ff fb0e 	bl	8008750 <vTaskSwitchContext>
 8009134:	f04f 0000 	mov.w	r0, #0
 8009138:	f380 8811 	msr	BASEPRI, r0
 800913c:	bc09      	pop	{r0, r3}
 800913e:	6819      	ldr	r1, [r3, #0]
 8009140:	6808      	ldr	r0, [r1, #0]
 8009142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009146:	f01e 0f10 	tst.w	lr, #16
 800914a:	bf08      	it	eq
 800914c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009150:	f380 8809 	msr	PSP, r0
 8009154:	f3bf 8f6f 	isb	sy
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	f3af 8000 	nop.w

08009160 <pxCurrentTCBConst>:
 8009160:	200004cc 	.word	0x200004cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009164:	bf00      	nop
 8009166:	bf00      	nop

08009168 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
	__asm volatile
 800916e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009172:	f383 8811 	msr	BASEPRI, r3
 8009176:	f3bf 8f6f 	isb	sy
 800917a:	f3bf 8f4f 	dsb	sy
 800917e:	607b      	str	r3, [r7, #4]
}
 8009180:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009182:	f7ff fa2d 	bl	80085e0 <xTaskIncrementTick>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d003      	beq.n	8009194 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800918c:	4b06      	ldr	r3, [pc, #24]	; (80091a8 <SysTick_Handler+0x40>)
 800918e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009192:	601a      	str	r2, [r3, #0]
 8009194:	2300      	movs	r3, #0
 8009196:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	f383 8811 	msr	BASEPRI, r3
}
 800919e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80091a0:	bf00      	nop
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	e000ed04 	.word	0xe000ed04

080091ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80091ac:	b480      	push	{r7}
 80091ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80091b0:	4b0b      	ldr	r3, [pc, #44]	; (80091e0 <vPortSetupTimerInterrupt+0x34>)
 80091b2:	2200      	movs	r2, #0
 80091b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80091b6:	4b0b      	ldr	r3, [pc, #44]	; (80091e4 <vPortSetupTimerInterrupt+0x38>)
 80091b8:	2200      	movs	r2, #0
 80091ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80091bc:	4b0a      	ldr	r3, [pc, #40]	; (80091e8 <vPortSetupTimerInterrupt+0x3c>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a0a      	ldr	r2, [pc, #40]	; (80091ec <vPortSetupTimerInterrupt+0x40>)
 80091c2:	fba2 2303 	umull	r2, r3, r2, r3
 80091c6:	099b      	lsrs	r3, r3, #6
 80091c8:	4a09      	ldr	r2, [pc, #36]	; (80091f0 <vPortSetupTimerInterrupt+0x44>)
 80091ca:	3b01      	subs	r3, #1
 80091cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80091ce:	4b04      	ldr	r3, [pc, #16]	; (80091e0 <vPortSetupTimerInterrupt+0x34>)
 80091d0:	2207      	movs	r2, #7
 80091d2:	601a      	str	r2, [r3, #0]
}
 80091d4:	bf00      	nop
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr
 80091de:	bf00      	nop
 80091e0:	e000e010 	.word	0xe000e010
 80091e4:	e000e018 	.word	0xe000e018
 80091e8:	20000000 	.word	0x20000000
 80091ec:	10624dd3 	.word	0x10624dd3
 80091f0:	e000e014 	.word	0xe000e014

080091f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80091f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009204 <vPortEnableVFP+0x10>
 80091f8:	6801      	ldr	r1, [r0, #0]
 80091fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80091fe:	6001      	str	r1, [r0, #0]
 8009200:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009202:	bf00      	nop
 8009204:	e000ed88 	.word	0xe000ed88

08009208 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800920e:	f3ef 8305 	mrs	r3, IPSR
 8009212:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2b0f      	cmp	r3, #15
 8009218:	d914      	bls.n	8009244 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800921a:	4a17      	ldr	r2, [pc, #92]	; (8009278 <vPortValidateInterruptPriority+0x70>)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	4413      	add	r3, r2
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009224:	4b15      	ldr	r3, [pc, #84]	; (800927c <vPortValidateInterruptPriority+0x74>)
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	7afa      	ldrb	r2, [r7, #11]
 800922a:	429a      	cmp	r2, r3
 800922c:	d20a      	bcs.n	8009244 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800922e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009232:	f383 8811 	msr	BASEPRI, r3
 8009236:	f3bf 8f6f 	isb	sy
 800923a:	f3bf 8f4f 	dsb	sy
 800923e:	607b      	str	r3, [r7, #4]
}
 8009240:	bf00      	nop
 8009242:	e7fe      	b.n	8009242 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009244:	4b0e      	ldr	r3, [pc, #56]	; (8009280 <vPortValidateInterruptPriority+0x78>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800924c:	4b0d      	ldr	r3, [pc, #52]	; (8009284 <vPortValidateInterruptPriority+0x7c>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	429a      	cmp	r2, r3
 8009252:	d90a      	bls.n	800926a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	603b      	str	r3, [r7, #0]
}
 8009266:	bf00      	nop
 8009268:	e7fe      	b.n	8009268 <vPortValidateInterruptPriority+0x60>
	}
 800926a:	bf00      	nop
 800926c:	3714      	adds	r7, #20
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	e000e3f0 	.word	0xe000e3f0
 800927c:	200005f8 	.word	0x200005f8
 8009280:	e000ed0c 	.word	0xe000ed0c
 8009284:	200005fc 	.word	0x200005fc

08009288 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b08a      	sub	sp, #40	; 0x28
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009290:	2300      	movs	r3, #0
 8009292:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009294:	f7ff f8fa 	bl	800848c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009298:	4b5b      	ldr	r3, [pc, #364]	; (8009408 <pvPortMalloc+0x180>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d101      	bne.n	80092a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80092a0:	f000 f920 	bl	80094e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80092a4:	4b59      	ldr	r3, [pc, #356]	; (800940c <pvPortMalloc+0x184>)
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4013      	ands	r3, r2
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f040 8093 	bne.w	80093d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d01d      	beq.n	80092f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80092b8:	2208      	movs	r2, #8
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	4413      	add	r3, r2
 80092be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f003 0307 	and.w	r3, r3, #7
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d014      	beq.n	80092f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f023 0307 	bic.w	r3, r3, #7
 80092d0:	3308      	adds	r3, #8
 80092d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f003 0307 	and.w	r3, r3, #7
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00a      	beq.n	80092f4 <pvPortMalloc+0x6c>
	__asm volatile
 80092de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e2:	f383 8811 	msr	BASEPRI, r3
 80092e6:	f3bf 8f6f 	isb	sy
 80092ea:	f3bf 8f4f 	dsb	sy
 80092ee:	617b      	str	r3, [r7, #20]
}
 80092f0:	bf00      	nop
 80092f2:	e7fe      	b.n	80092f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d06e      	beq.n	80093d8 <pvPortMalloc+0x150>
 80092fa:	4b45      	ldr	r3, [pc, #276]	; (8009410 <pvPortMalloc+0x188>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	429a      	cmp	r2, r3
 8009302:	d869      	bhi.n	80093d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009304:	4b43      	ldr	r3, [pc, #268]	; (8009414 <pvPortMalloc+0x18c>)
 8009306:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009308:	4b42      	ldr	r3, [pc, #264]	; (8009414 <pvPortMalloc+0x18c>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800930e:	e004      	b.n	800931a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009312:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800931a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	429a      	cmp	r2, r3
 8009322:	d903      	bls.n	800932c <pvPortMalloc+0xa4>
 8009324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1f1      	bne.n	8009310 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800932c:	4b36      	ldr	r3, [pc, #216]	; (8009408 <pvPortMalloc+0x180>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009332:	429a      	cmp	r2, r3
 8009334:	d050      	beq.n	80093d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009336:	6a3b      	ldr	r3, [r7, #32]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2208      	movs	r2, #8
 800933c:	4413      	add	r3, r2
 800933e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	6a3b      	ldr	r3, [r7, #32]
 8009346:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934a:	685a      	ldr	r2, [r3, #4]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	1ad2      	subs	r2, r2, r3
 8009350:	2308      	movs	r3, #8
 8009352:	005b      	lsls	r3, r3, #1
 8009354:	429a      	cmp	r2, r3
 8009356:	d91f      	bls.n	8009398 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4413      	add	r3, r2
 800935e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	f003 0307 	and.w	r3, r3, #7
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00a      	beq.n	8009380 <pvPortMalloc+0xf8>
	__asm volatile
 800936a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936e:	f383 8811 	msr	BASEPRI, r3
 8009372:	f3bf 8f6f 	isb	sy
 8009376:	f3bf 8f4f 	dsb	sy
 800937a:	613b      	str	r3, [r7, #16]
}
 800937c:	bf00      	nop
 800937e:	e7fe      	b.n	800937e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009382:	685a      	ldr	r2, [r3, #4]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	1ad2      	subs	r2, r2, r3
 8009388:	69bb      	ldr	r3, [r7, #24]
 800938a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800938c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009392:	69b8      	ldr	r0, [r7, #24]
 8009394:	f000 f908 	bl	80095a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009398:	4b1d      	ldr	r3, [pc, #116]	; (8009410 <pvPortMalloc+0x188>)
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	1ad3      	subs	r3, r2, r3
 80093a2:	4a1b      	ldr	r2, [pc, #108]	; (8009410 <pvPortMalloc+0x188>)
 80093a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80093a6:	4b1a      	ldr	r3, [pc, #104]	; (8009410 <pvPortMalloc+0x188>)
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	4b1b      	ldr	r3, [pc, #108]	; (8009418 <pvPortMalloc+0x190>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d203      	bcs.n	80093ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80093b2:	4b17      	ldr	r3, [pc, #92]	; (8009410 <pvPortMalloc+0x188>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a18      	ldr	r2, [pc, #96]	; (8009418 <pvPortMalloc+0x190>)
 80093b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80093ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093bc:	685a      	ldr	r2, [r3, #4]
 80093be:	4b13      	ldr	r3, [pc, #76]	; (800940c <pvPortMalloc+0x184>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	431a      	orrs	r2, r3
 80093c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80093c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ca:	2200      	movs	r2, #0
 80093cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80093ce:	4b13      	ldr	r3, [pc, #76]	; (800941c <pvPortMalloc+0x194>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	3301      	adds	r3, #1
 80093d4:	4a11      	ldr	r2, [pc, #68]	; (800941c <pvPortMalloc+0x194>)
 80093d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80093d8:	f7ff f866 	bl	80084a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	f003 0307 	and.w	r3, r3, #7
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00a      	beq.n	80093fc <pvPortMalloc+0x174>
	__asm volatile
 80093e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ea:	f383 8811 	msr	BASEPRI, r3
 80093ee:	f3bf 8f6f 	isb	sy
 80093f2:	f3bf 8f4f 	dsb	sy
 80093f6:	60fb      	str	r3, [r7, #12]
}
 80093f8:	bf00      	nop
 80093fa:	e7fe      	b.n	80093fa <pvPortMalloc+0x172>
	return pvReturn;
 80093fc:	69fb      	ldr	r3, [r7, #28]
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3728      	adds	r7, #40	; 0x28
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	20004208 	.word	0x20004208
 800940c:	2000421c 	.word	0x2000421c
 8009410:	2000420c 	.word	0x2000420c
 8009414:	20004200 	.word	0x20004200
 8009418:	20004210 	.word	0x20004210
 800941c:	20004214 	.word	0x20004214

08009420 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b086      	sub	sp, #24
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d04d      	beq.n	80094ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009432:	2308      	movs	r3, #8
 8009434:	425b      	negs	r3, r3
 8009436:	697a      	ldr	r2, [r7, #20]
 8009438:	4413      	add	r3, r2
 800943a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	685a      	ldr	r2, [r3, #4]
 8009444:	4b24      	ldr	r3, [pc, #144]	; (80094d8 <vPortFree+0xb8>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4013      	ands	r3, r2
 800944a:	2b00      	cmp	r3, #0
 800944c:	d10a      	bne.n	8009464 <vPortFree+0x44>
	__asm volatile
 800944e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009452:	f383 8811 	msr	BASEPRI, r3
 8009456:	f3bf 8f6f 	isb	sy
 800945a:	f3bf 8f4f 	dsb	sy
 800945e:	60fb      	str	r3, [r7, #12]
}
 8009460:	bf00      	nop
 8009462:	e7fe      	b.n	8009462 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d00a      	beq.n	8009482 <vPortFree+0x62>
	__asm volatile
 800946c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009470:	f383 8811 	msr	BASEPRI, r3
 8009474:	f3bf 8f6f 	isb	sy
 8009478:	f3bf 8f4f 	dsb	sy
 800947c:	60bb      	str	r3, [r7, #8]
}
 800947e:	bf00      	nop
 8009480:	e7fe      	b.n	8009480 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	685a      	ldr	r2, [r3, #4]
 8009486:	4b14      	ldr	r3, [pc, #80]	; (80094d8 <vPortFree+0xb8>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4013      	ands	r3, r2
 800948c:	2b00      	cmp	r3, #0
 800948e:	d01e      	beq.n	80094ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d11a      	bne.n	80094ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	685a      	ldr	r2, [r3, #4]
 800949c:	4b0e      	ldr	r3, [pc, #56]	; (80094d8 <vPortFree+0xb8>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	43db      	mvns	r3, r3
 80094a2:	401a      	ands	r2, r3
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80094a8:	f7fe fff0 	bl	800848c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	685a      	ldr	r2, [r3, #4]
 80094b0:	4b0a      	ldr	r3, [pc, #40]	; (80094dc <vPortFree+0xbc>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4413      	add	r3, r2
 80094b6:	4a09      	ldr	r2, [pc, #36]	; (80094dc <vPortFree+0xbc>)
 80094b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80094ba:	6938      	ldr	r0, [r7, #16]
 80094bc:	f000 f874 	bl	80095a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80094c0:	4b07      	ldr	r3, [pc, #28]	; (80094e0 <vPortFree+0xc0>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	3301      	adds	r3, #1
 80094c6:	4a06      	ldr	r2, [pc, #24]	; (80094e0 <vPortFree+0xc0>)
 80094c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80094ca:	f7fe ffed 	bl	80084a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80094ce:	bf00      	nop
 80094d0:	3718      	adds	r7, #24
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	2000421c 	.word	0x2000421c
 80094dc:	2000420c 	.word	0x2000420c
 80094e0:	20004218 	.word	0x20004218

080094e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80094ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80094ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80094f0:	4b27      	ldr	r3, [pc, #156]	; (8009590 <prvHeapInit+0xac>)
 80094f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f003 0307 	and.w	r3, r3, #7
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00c      	beq.n	8009518 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	3307      	adds	r3, #7
 8009502:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f023 0307 	bic.w	r3, r3, #7
 800950a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800950c:	68ba      	ldr	r2, [r7, #8]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	1ad3      	subs	r3, r2, r3
 8009512:	4a1f      	ldr	r2, [pc, #124]	; (8009590 <prvHeapInit+0xac>)
 8009514:	4413      	add	r3, r2
 8009516:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800951c:	4a1d      	ldr	r2, [pc, #116]	; (8009594 <prvHeapInit+0xb0>)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009522:	4b1c      	ldr	r3, [pc, #112]	; (8009594 <prvHeapInit+0xb0>)
 8009524:	2200      	movs	r2, #0
 8009526:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	68ba      	ldr	r2, [r7, #8]
 800952c:	4413      	add	r3, r2
 800952e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009530:	2208      	movs	r2, #8
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	1a9b      	subs	r3, r3, r2
 8009536:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f023 0307 	bic.w	r3, r3, #7
 800953e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	4a15      	ldr	r2, [pc, #84]	; (8009598 <prvHeapInit+0xb4>)
 8009544:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009546:	4b14      	ldr	r3, [pc, #80]	; (8009598 <prvHeapInit+0xb4>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2200      	movs	r2, #0
 800954c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800954e:	4b12      	ldr	r3, [pc, #72]	; (8009598 <prvHeapInit+0xb4>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	2200      	movs	r2, #0
 8009554:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	68fa      	ldr	r2, [r7, #12]
 800955e:	1ad2      	subs	r2, r2, r3
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009564:	4b0c      	ldr	r3, [pc, #48]	; (8009598 <prvHeapInit+0xb4>)
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	4a0a      	ldr	r2, [pc, #40]	; (800959c <prvHeapInit+0xb8>)
 8009572:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	4a09      	ldr	r2, [pc, #36]	; (80095a0 <prvHeapInit+0xbc>)
 800957a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800957c:	4b09      	ldr	r3, [pc, #36]	; (80095a4 <prvHeapInit+0xc0>)
 800957e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009582:	601a      	str	r2, [r3, #0]
}
 8009584:	bf00      	nop
 8009586:	3714      	adds	r7, #20
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr
 8009590:	20000600 	.word	0x20000600
 8009594:	20004200 	.word	0x20004200
 8009598:	20004208 	.word	0x20004208
 800959c:	20004210 	.word	0x20004210
 80095a0:	2000420c 	.word	0x2000420c
 80095a4:	2000421c 	.word	0x2000421c

080095a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80095b0:	4b28      	ldr	r3, [pc, #160]	; (8009654 <prvInsertBlockIntoFreeList+0xac>)
 80095b2:	60fb      	str	r3, [r7, #12]
 80095b4:	e002      	b.n	80095bc <prvInsertBlockIntoFreeList+0x14>
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	60fb      	str	r3, [r7, #12]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d8f7      	bhi.n	80095b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	68ba      	ldr	r2, [r7, #8]
 80095d0:	4413      	add	r3, r2
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d108      	bne.n	80095ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	685a      	ldr	r2, [r3, #4]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	441a      	add	r2, r3
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	68ba      	ldr	r2, [r7, #8]
 80095f4:	441a      	add	r2, r3
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d118      	bne.n	8009630 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	4b15      	ldr	r3, [pc, #84]	; (8009658 <prvInsertBlockIntoFreeList+0xb0>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	429a      	cmp	r2, r3
 8009608:	d00d      	beq.n	8009626 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	685a      	ldr	r2, [r3, #4]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	441a      	add	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	601a      	str	r2, [r3, #0]
 8009624:	e008      	b.n	8009638 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009626:	4b0c      	ldr	r3, [pc, #48]	; (8009658 <prvInsertBlockIntoFreeList+0xb0>)
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	601a      	str	r2, [r3, #0]
 800962e:	e003      	b.n	8009638 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009638:	68fa      	ldr	r2, [r7, #12]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	429a      	cmp	r2, r3
 800963e:	d002      	beq.n	8009646 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009646:	bf00      	nop
 8009648:	3714      	adds	r7, #20
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop
 8009654:	20004200 	.word	0x20004200
 8009658:	20004208 	.word	0x20004208

0800965c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009660:	2200      	movs	r2, #0
 8009662:	4912      	ldr	r1, [pc, #72]	; (80096ac <MX_USB_DEVICE_Init+0x50>)
 8009664:	4812      	ldr	r0, [pc, #72]	; (80096b0 <MX_USB_DEVICE_Init+0x54>)
 8009666:	f7fc fbd1 	bl	8005e0c <USBD_Init>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d001      	beq.n	8009674 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009670:	f7f7 f967 	bl	8000942 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009674:	490f      	ldr	r1, [pc, #60]	; (80096b4 <MX_USB_DEVICE_Init+0x58>)
 8009676:	480e      	ldr	r0, [pc, #56]	; (80096b0 <MX_USB_DEVICE_Init+0x54>)
 8009678:	f7fc fbf8 	bl	8005e6c <USBD_RegisterClass>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d001      	beq.n	8009686 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009682:	f7f7 f95e 	bl	8000942 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009686:	490c      	ldr	r1, [pc, #48]	; (80096b8 <MX_USB_DEVICE_Init+0x5c>)
 8009688:	4809      	ldr	r0, [pc, #36]	; (80096b0 <MX_USB_DEVICE_Init+0x54>)
 800968a:	f7fc fb19 	bl	8005cc0 <USBD_CDC_RegisterInterface>
 800968e:	4603      	mov	r3, r0
 8009690:	2b00      	cmp	r3, #0
 8009692:	d001      	beq.n	8009698 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009694:	f7f7 f955 	bl	8000942 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009698:	4805      	ldr	r0, [pc, #20]	; (80096b0 <MX_USB_DEVICE_Init+0x54>)
 800969a:	f7fc fc0e 	bl	8005eba <USBD_Start>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d001      	beq.n	80096a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80096a4:	f7f7 f94d 	bl	8000942 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80096a8:	bf00      	nop
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	20000134 	.word	0x20000134
 80096b0:	200044e0 	.word	0x200044e0
 80096b4:	20000018 	.word	0x20000018
 80096b8:	20000120 	.word	0x20000120

080096bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80096c0:	2200      	movs	r2, #0
 80096c2:	4905      	ldr	r1, [pc, #20]	; (80096d8 <CDC_Init_FS+0x1c>)
 80096c4:	4805      	ldr	r0, [pc, #20]	; (80096dc <CDC_Init_FS+0x20>)
 80096c6:	f7fc fb10 	bl	8005cea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80096ca:	4905      	ldr	r1, [pc, #20]	; (80096e0 <CDC_Init_FS+0x24>)
 80096cc:	4803      	ldr	r0, [pc, #12]	; (80096dc <CDC_Init_FS+0x20>)
 80096ce:	f7fc fb2a 	bl	8005d26 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80096d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	20004fb0 	.word	0x20004fb0
 80096dc:	200044e0 	.word	0x200044e0
 80096e0:	200047b0 	.word	0x200047b0

080096e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80096e4:	b480      	push	{r7}
 80096e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80096e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	4603      	mov	r3, r0
 80096fc:	6039      	str	r1, [r7, #0]
 80096fe:	71fb      	strb	r3, [r7, #7]
 8009700:	4613      	mov	r3, r2
 8009702:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009704:	79fb      	ldrb	r3, [r7, #7]
 8009706:	2b23      	cmp	r3, #35	; 0x23
 8009708:	d84a      	bhi.n	80097a0 <CDC_Control_FS+0xac>
 800970a:	a201      	add	r2, pc, #4	; (adr r2, 8009710 <CDC_Control_FS+0x1c>)
 800970c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009710:	080097a1 	.word	0x080097a1
 8009714:	080097a1 	.word	0x080097a1
 8009718:	080097a1 	.word	0x080097a1
 800971c:	080097a1 	.word	0x080097a1
 8009720:	080097a1 	.word	0x080097a1
 8009724:	080097a1 	.word	0x080097a1
 8009728:	080097a1 	.word	0x080097a1
 800972c:	080097a1 	.word	0x080097a1
 8009730:	080097a1 	.word	0x080097a1
 8009734:	080097a1 	.word	0x080097a1
 8009738:	080097a1 	.word	0x080097a1
 800973c:	080097a1 	.word	0x080097a1
 8009740:	080097a1 	.word	0x080097a1
 8009744:	080097a1 	.word	0x080097a1
 8009748:	080097a1 	.word	0x080097a1
 800974c:	080097a1 	.word	0x080097a1
 8009750:	080097a1 	.word	0x080097a1
 8009754:	080097a1 	.word	0x080097a1
 8009758:	080097a1 	.word	0x080097a1
 800975c:	080097a1 	.word	0x080097a1
 8009760:	080097a1 	.word	0x080097a1
 8009764:	080097a1 	.word	0x080097a1
 8009768:	080097a1 	.word	0x080097a1
 800976c:	080097a1 	.word	0x080097a1
 8009770:	080097a1 	.word	0x080097a1
 8009774:	080097a1 	.word	0x080097a1
 8009778:	080097a1 	.word	0x080097a1
 800977c:	080097a1 	.word	0x080097a1
 8009780:	080097a1 	.word	0x080097a1
 8009784:	080097a1 	.word	0x080097a1
 8009788:	080097a1 	.word	0x080097a1
 800978c:	080097a1 	.word	0x080097a1
 8009790:	080097a1 	.word	0x080097a1
 8009794:	080097a1 	.word	0x080097a1
 8009798:	080097a1 	.word	0x080097a1
 800979c:	080097a1 	.word	0x080097a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80097a0:	bf00      	nop
  }

  return (USBD_OK);
 80097a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	370c      	adds	r7, #12
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80097ba:	6879      	ldr	r1, [r7, #4]
 80097bc:	4807      	ldr	r0, [pc, #28]	; (80097dc <CDC_Receive_FS+0x2c>)
 80097be:	f7fc fab2 	bl	8005d26 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80097c2:	4806      	ldr	r0, [pc, #24]	; (80097dc <CDC_Receive_FS+0x2c>)
 80097c4:	f7fc faf8 	bl	8005db8 <USBD_CDC_ReceivePacket>
  putMsgIntoQueue(Buf[0]);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7f6 ff67 	bl	80006a0 <putMsgIntoQueue>
  return (USBD_OK);
 80097d2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3708      	adds	r7, #8
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}
 80097dc:	200044e0 	.word	0x200044e0

080097e0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	460b      	mov	r3, r1
 80097ea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80097ec:	2300      	movs	r3, #0
 80097ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80097f0:	4b0d      	ldr	r3, [pc, #52]	; (8009828 <CDC_Transmit_FS+0x48>)
 80097f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097f6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d001      	beq.n	8009806 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009802:	2301      	movs	r3, #1
 8009804:	e00b      	b.n	800981e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009806:	887b      	ldrh	r3, [r7, #2]
 8009808:	461a      	mov	r2, r3
 800980a:	6879      	ldr	r1, [r7, #4]
 800980c:	4806      	ldr	r0, [pc, #24]	; (8009828 <CDC_Transmit_FS+0x48>)
 800980e:	f7fc fa6c 	bl	8005cea <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009812:	4805      	ldr	r0, [pc, #20]	; (8009828 <CDC_Transmit_FS+0x48>)
 8009814:	f7fc faa0 	bl	8005d58 <USBD_CDC_TransmitPacket>
 8009818:	4603      	mov	r3, r0
 800981a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800981c:	7bfb      	ldrb	r3, [r7, #15]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3710      	adds	r7, #16
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	200044e0 	.word	0x200044e0

0800982c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800982c:	b480      	push	{r7}
 800982e:	b087      	sub	sp, #28
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	4613      	mov	r3, r2
 8009838:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800983a:	2300      	movs	r3, #0
 800983c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800983e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009842:	4618      	mov	r0, r3
 8009844:	371c      	adds	r7, #28
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr
	...

08009850 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	4603      	mov	r3, r0
 8009858:	6039      	str	r1, [r7, #0]
 800985a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	2212      	movs	r2, #18
 8009860:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009862:	4b03      	ldr	r3, [pc, #12]	; (8009870 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009864:	4618      	mov	r0, r3
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr
 8009870:	20000154 	.word	0x20000154

08009874 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
 800987a:	4603      	mov	r3, r0
 800987c:	6039      	str	r1, [r7, #0]
 800987e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	2204      	movs	r2, #4
 8009884:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009886:	4b03      	ldr	r3, [pc, #12]	; (8009894 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009888:	4618      	mov	r0, r3
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr
 8009894:	20000174 	.word	0x20000174

08009898 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	4603      	mov	r3, r0
 80098a0:	6039      	str	r1, [r7, #0]
 80098a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80098a4:	79fb      	ldrb	r3, [r7, #7]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d105      	bne.n	80098b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80098aa:	683a      	ldr	r2, [r7, #0]
 80098ac:	4907      	ldr	r1, [pc, #28]	; (80098cc <USBD_FS_ProductStrDescriptor+0x34>)
 80098ae:	4808      	ldr	r0, [pc, #32]	; (80098d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80098b0:	f7fd fb5f 	bl	8006f72 <USBD_GetString>
 80098b4:	e004      	b.n	80098c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80098b6:	683a      	ldr	r2, [r7, #0]
 80098b8:	4904      	ldr	r1, [pc, #16]	; (80098cc <USBD_FS_ProductStrDescriptor+0x34>)
 80098ba:	4805      	ldr	r0, [pc, #20]	; (80098d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80098bc:	f7fd fb59 	bl	8006f72 <USBD_GetString>
  }
  return USBD_StrDesc;
 80098c0:	4b02      	ldr	r3, [pc, #8]	; (80098cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3708      	adds	r7, #8
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	bf00      	nop
 80098cc:	200057b0 	.word	0x200057b0
 80098d0:	0800a420 	.word	0x0800a420

080098d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
 80098da:	4603      	mov	r3, r0
 80098dc:	6039      	str	r1, [r7, #0]
 80098de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80098e0:	683a      	ldr	r2, [r7, #0]
 80098e2:	4904      	ldr	r1, [pc, #16]	; (80098f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80098e4:	4804      	ldr	r0, [pc, #16]	; (80098f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80098e6:	f7fd fb44 	bl	8006f72 <USBD_GetString>
  return USBD_StrDesc;
 80098ea:	4b02      	ldr	r3, [pc, #8]	; (80098f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3708      	adds	r7, #8
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	200057b0 	.word	0x200057b0
 80098f8:	0800a438 	.word	0x0800a438

080098fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b082      	sub	sp, #8
 8009900:	af00      	add	r7, sp, #0
 8009902:	4603      	mov	r3, r0
 8009904:	6039      	str	r1, [r7, #0]
 8009906:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	221a      	movs	r2, #26
 800990c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800990e:	f000 f855 	bl	80099bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009912:	4b02      	ldr	r3, [pc, #8]	; (800991c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009914:	4618      	mov	r0, r3
 8009916:	3708      	adds	r7, #8
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}
 800991c:	20000178 	.word	0x20000178

08009920 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
 8009926:	4603      	mov	r3, r0
 8009928:	6039      	str	r1, [r7, #0]
 800992a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800992c:	79fb      	ldrb	r3, [r7, #7]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d105      	bne.n	800993e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009932:	683a      	ldr	r2, [r7, #0]
 8009934:	4907      	ldr	r1, [pc, #28]	; (8009954 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009936:	4808      	ldr	r0, [pc, #32]	; (8009958 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009938:	f7fd fb1b 	bl	8006f72 <USBD_GetString>
 800993c:	e004      	b.n	8009948 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800993e:	683a      	ldr	r2, [r7, #0]
 8009940:	4904      	ldr	r1, [pc, #16]	; (8009954 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009942:	4805      	ldr	r0, [pc, #20]	; (8009958 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009944:	f7fd fb15 	bl	8006f72 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009948:	4b02      	ldr	r3, [pc, #8]	; (8009954 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800994a:	4618      	mov	r0, r3
 800994c:	3708      	adds	r7, #8
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	200057b0 	.word	0x200057b0
 8009958:	0800a44c 	.word	0x0800a44c

0800995c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	4603      	mov	r3, r0
 8009964:	6039      	str	r1, [r7, #0]
 8009966:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009968:	79fb      	ldrb	r3, [r7, #7]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d105      	bne.n	800997a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800996e:	683a      	ldr	r2, [r7, #0]
 8009970:	4907      	ldr	r1, [pc, #28]	; (8009990 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009972:	4808      	ldr	r0, [pc, #32]	; (8009994 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009974:	f7fd fafd 	bl	8006f72 <USBD_GetString>
 8009978:	e004      	b.n	8009984 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800997a:	683a      	ldr	r2, [r7, #0]
 800997c:	4904      	ldr	r1, [pc, #16]	; (8009990 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800997e:	4805      	ldr	r0, [pc, #20]	; (8009994 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009980:	f7fd faf7 	bl	8006f72 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009984:	4b02      	ldr	r3, [pc, #8]	; (8009990 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009986:	4618      	mov	r0, r3
 8009988:	3708      	adds	r7, #8
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	200057b0 	.word	0x200057b0
 8009994:	0800a458 	.word	0x0800a458

08009998 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
 800999e:	4603      	mov	r3, r0
 80099a0:	6039      	str	r1, [r7, #0]
 80099a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	220c      	movs	r2, #12
 80099a8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80099aa:	4b03      	ldr	r3, [pc, #12]	; (80099b8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr
 80099b8:	20000168 	.word	0x20000168

080099bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80099c2:	4b0f      	ldr	r3, [pc, #60]	; (8009a00 <Get_SerialNum+0x44>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80099c8:	4b0e      	ldr	r3, [pc, #56]	; (8009a04 <Get_SerialNum+0x48>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80099ce:	4b0e      	ldr	r3, [pc, #56]	; (8009a08 <Get_SerialNum+0x4c>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80099d4:	68fa      	ldr	r2, [r7, #12]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	4413      	add	r3, r2
 80099da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d009      	beq.n	80099f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80099e2:	2208      	movs	r2, #8
 80099e4:	4909      	ldr	r1, [pc, #36]	; (8009a0c <Get_SerialNum+0x50>)
 80099e6:	68f8      	ldr	r0, [r7, #12]
 80099e8:	f000 f814 	bl	8009a14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80099ec:	2204      	movs	r2, #4
 80099ee:	4908      	ldr	r1, [pc, #32]	; (8009a10 <Get_SerialNum+0x54>)
 80099f0:	68b8      	ldr	r0, [r7, #8]
 80099f2:	f000 f80f 	bl	8009a14 <IntToUnicode>
  }
}
 80099f6:	bf00      	nop
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	1fff7a10 	.word	0x1fff7a10
 8009a04:	1fff7a14 	.word	0x1fff7a14
 8009a08:	1fff7a18 	.word	0x1fff7a18
 8009a0c:	2000017a 	.word	0x2000017a
 8009a10:	2000018a 	.word	0x2000018a

08009a14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b087      	sub	sp, #28
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	4613      	mov	r3, r2
 8009a20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009a22:	2300      	movs	r3, #0
 8009a24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009a26:	2300      	movs	r3, #0
 8009a28:	75fb      	strb	r3, [r7, #23]
 8009a2a:	e027      	b.n	8009a7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	0f1b      	lsrs	r3, r3, #28
 8009a30:	2b09      	cmp	r3, #9
 8009a32:	d80b      	bhi.n	8009a4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	0f1b      	lsrs	r3, r3, #28
 8009a38:	b2da      	uxtb	r2, r3
 8009a3a:	7dfb      	ldrb	r3, [r7, #23]
 8009a3c:	005b      	lsls	r3, r3, #1
 8009a3e:	4619      	mov	r1, r3
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	440b      	add	r3, r1
 8009a44:	3230      	adds	r2, #48	; 0x30
 8009a46:	b2d2      	uxtb	r2, r2
 8009a48:	701a      	strb	r2, [r3, #0]
 8009a4a:	e00a      	b.n	8009a62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	0f1b      	lsrs	r3, r3, #28
 8009a50:	b2da      	uxtb	r2, r3
 8009a52:	7dfb      	ldrb	r3, [r7, #23]
 8009a54:	005b      	lsls	r3, r3, #1
 8009a56:	4619      	mov	r1, r3
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	440b      	add	r3, r1
 8009a5c:	3237      	adds	r2, #55	; 0x37
 8009a5e:	b2d2      	uxtb	r2, r2
 8009a60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	011b      	lsls	r3, r3, #4
 8009a66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009a68:	7dfb      	ldrb	r3, [r7, #23]
 8009a6a:	005b      	lsls	r3, r3, #1
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	68ba      	ldr	r2, [r7, #8]
 8009a70:	4413      	add	r3, r2
 8009a72:	2200      	movs	r2, #0
 8009a74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009a76:	7dfb      	ldrb	r3, [r7, #23]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	75fb      	strb	r3, [r7, #23]
 8009a7c:	7dfa      	ldrb	r2, [r7, #23]
 8009a7e:	79fb      	ldrb	r3, [r7, #7]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d3d3      	bcc.n	8009a2c <IntToUnicode+0x18>
  }
}
 8009a84:	bf00      	nop
 8009a86:	bf00      	nop
 8009a88:	371c      	adds	r7, #28
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr
	...

08009a94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b0a0      	sub	sp, #128	; 0x80
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a9c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	601a      	str	r2, [r3, #0]
 8009aa4:	605a      	str	r2, [r3, #4]
 8009aa6:	609a      	str	r2, [r3, #8]
 8009aa8:	60da      	str	r2, [r3, #12]
 8009aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009aac:	f107 0310 	add.w	r3, r7, #16
 8009ab0:	225c      	movs	r2, #92	; 0x5c
 8009ab2:	2100      	movs	r1, #0
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f000 fba7 	bl	800a208 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ac2:	d156      	bne.n	8009b72 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8009ac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ac8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8009aca:	2300      	movs	r3, #0
 8009acc:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009ace:	f107 0310 	add.w	r3, r7, #16
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7f8 fec2 	bl	800285c <HAL_RCCEx_PeriphCLKConfig>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d001      	beq.n	8009ae2 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8009ade:	f7f6 ff30 	bl	8000942 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	60fb      	str	r3, [r7, #12]
 8009ae6:	4b25      	ldr	r3, [pc, #148]	; (8009b7c <HAL_PCD_MspInit+0xe8>)
 8009ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aea:	4a24      	ldr	r2, [pc, #144]	; (8009b7c <HAL_PCD_MspInit+0xe8>)
 8009aec:	f043 0301 	orr.w	r3, r3, #1
 8009af0:	6313      	str	r3, [r2, #48]	; 0x30
 8009af2:	4b22      	ldr	r3, [pc, #136]	; (8009b7c <HAL_PCD_MspInit+0xe8>)
 8009af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af6:	f003 0301 	and.w	r3, r3, #1
 8009afa:	60fb      	str	r3, [r7, #12]
 8009afc:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8009afe:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8009b02:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b04:	2302      	movs	r3, #2
 8009b06:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b0c:	2303      	movs	r3, #3
 8009b0e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009b10:	230a      	movs	r3, #10
 8009b12:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009b18:	4619      	mov	r1, r3
 8009b1a:	4819      	ldr	r0, [pc, #100]	; (8009b80 <HAL_PCD_MspInit+0xec>)
 8009b1c:	f7f7 f9bc 	bl	8000e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8009b20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b24:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009b26:	2300      	movs	r3, #0
 8009b28:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8009b2e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009b32:	4619      	mov	r1, r3
 8009b34:	4812      	ldr	r0, [pc, #72]	; (8009b80 <HAL_PCD_MspInit+0xec>)
 8009b36:	f7f7 f9af 	bl	8000e98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009b3a:	4b10      	ldr	r3, [pc, #64]	; (8009b7c <HAL_PCD_MspInit+0xe8>)
 8009b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b3e:	4a0f      	ldr	r2, [pc, #60]	; (8009b7c <HAL_PCD_MspInit+0xe8>)
 8009b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b44:	6353      	str	r3, [r2, #52]	; 0x34
 8009b46:	2300      	movs	r3, #0
 8009b48:	60bb      	str	r3, [r7, #8]
 8009b4a:	4b0c      	ldr	r3, [pc, #48]	; (8009b7c <HAL_PCD_MspInit+0xe8>)
 8009b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b4e:	4a0b      	ldr	r2, [pc, #44]	; (8009b7c <HAL_PCD_MspInit+0xe8>)
 8009b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b54:	6453      	str	r3, [r2, #68]	; 0x44
 8009b56:	4b09      	ldr	r3, [pc, #36]	; (8009b7c <HAL_PCD_MspInit+0xe8>)
 8009b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b5e:	60bb      	str	r3, [r7, #8]
 8009b60:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8009b62:	2200      	movs	r2, #0
 8009b64:	2105      	movs	r1, #5
 8009b66:	2043      	movs	r0, #67	; 0x43
 8009b68:	f7f7 f96c 	bl	8000e44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009b6c:	2043      	movs	r0, #67	; 0x43
 8009b6e:	f7f7 f985 	bl	8000e7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009b72:	bf00      	nop
 8009b74:	3780      	adds	r7, #128	; 0x80
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	40023800 	.word	0x40023800
 8009b80:	40020000 	.word	0x40020000

08009b84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009b98:	4619      	mov	r1, r3
 8009b9a:	4610      	mov	r0, r2
 8009b9c:	f7fc f9d8 	bl	8005f50 <USBD_LL_SetupStage>
}
 8009ba0:	bf00      	nop
 8009ba2:	3708      	adds	r7, #8
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009bba:	78fa      	ldrb	r2, [r7, #3]
 8009bbc:	6879      	ldr	r1, [r7, #4]
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	00db      	lsls	r3, r3, #3
 8009bc2:	1a9b      	subs	r3, r3, r2
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	440b      	add	r3, r1
 8009bc8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	78fb      	ldrb	r3, [r7, #3]
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	f7fc fa12 	bl	8005ffa <USBD_LL_DataOutStage>
}
 8009bd6:	bf00      	nop
 8009bd8:	3708      	adds	r7, #8
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b082      	sub	sp, #8
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
 8009be6:	460b      	mov	r3, r1
 8009be8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009bf0:	78fa      	ldrb	r2, [r7, #3]
 8009bf2:	6879      	ldr	r1, [r7, #4]
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	00db      	lsls	r3, r3, #3
 8009bf8:	1a9b      	subs	r3, r3, r2
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	440b      	add	r3, r1
 8009bfe:	3348      	adds	r3, #72	; 0x48
 8009c00:	681a      	ldr	r2, [r3, #0]
 8009c02:	78fb      	ldrb	r3, [r7, #3]
 8009c04:	4619      	mov	r1, r3
 8009c06:	f7fc fa5b 	bl	80060c0 <USBD_LL_DataInStage>
}
 8009c0a:	bf00      	nop
 8009c0c:	3708      	adds	r7, #8
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}

08009c12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c12:	b580      	push	{r7, lr}
 8009c14:	b082      	sub	sp, #8
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c20:	4618      	mov	r0, r3
 8009c22:	f7fc fb6f 	bl	8006304 <USBD_LL_SOF>
}
 8009c26:	bf00      	nop
 8009c28:	3708      	adds	r7, #8
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b084      	sub	sp, #16
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009c36:	2301      	movs	r3, #1
 8009c38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d102      	bne.n	8009c48 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009c42:	2300      	movs	r3, #0
 8009c44:	73fb      	strb	r3, [r7, #15]
 8009c46:	e008      	b.n	8009c5a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	2b02      	cmp	r3, #2
 8009c4e:	d102      	bne.n	8009c56 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009c50:	2301      	movs	r3, #1
 8009c52:	73fb      	strb	r3, [r7, #15]
 8009c54:	e001      	b.n	8009c5a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009c56:	f7f6 fe74 	bl	8000942 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c60:	7bfa      	ldrb	r2, [r7, #15]
 8009c62:	4611      	mov	r1, r2
 8009c64:	4618      	mov	r0, r3
 8009c66:	f7fc fb0f 	bl	8006288 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7fc fabb 	bl	80061ec <USBD_LL_Reset>
}
 8009c76:	bf00      	nop
 8009c78:	3710      	adds	r7, #16
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
	...

08009c80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7fc fb0a 	bl	80062a8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	6812      	ldr	r2, [r2, #0]
 8009ca2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009ca6:	f043 0301 	orr.w	r3, r3, #1
 8009caa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6a1b      	ldr	r3, [r3, #32]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d005      	beq.n	8009cc0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009cb4:	4b04      	ldr	r3, [pc, #16]	; (8009cc8 <HAL_PCD_SuspendCallback+0x48>)
 8009cb6:	691b      	ldr	r3, [r3, #16]
 8009cb8:	4a03      	ldr	r2, [pc, #12]	; (8009cc8 <HAL_PCD_SuspendCallback+0x48>)
 8009cba:	f043 0306 	orr.w	r3, r3, #6
 8009cbe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009cc0:	bf00      	nop
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}
 8009cc8:	e000ed00 	.word	0xe000ed00

08009ccc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7fc fafa 	bl	80062d4 <USBD_LL_Resume>
}
 8009ce0:	bf00      	nop
 8009ce2:	3708      	adds	r7, #8
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009cfa:	78fa      	ldrb	r2, [r7, #3]
 8009cfc:	4611      	mov	r1, r2
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7fc fb48 	bl	8006394 <USBD_LL_IsoOUTIncomplete>
}
 8009d04:	bf00      	nop
 8009d06:	3708      	adds	r7, #8
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	460b      	mov	r3, r1
 8009d16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009d1e:	78fa      	ldrb	r2, [r7, #3]
 8009d20:	4611      	mov	r1, r2
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7fc fb10 	bl	8006348 <USBD_LL_IsoINIncomplete>
}
 8009d28:	bf00      	nop
 8009d2a:	3708      	adds	r7, #8
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7fc fb4e 	bl	80063e0 <USBD_LL_DevConnected>
}
 8009d44:	bf00      	nop
 8009d46:	3708      	adds	r7, #8
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7fc fb4b 	bl	80063f6 <USBD_LL_DevDisconnected>
}
 8009d60:	bf00      	nop
 8009d62:	3708      	adds	r7, #8
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d13c      	bne.n	8009df2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009d78:	4a20      	ldr	r2, [pc, #128]	; (8009dfc <USBD_LL_Init+0x94>)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	4a1e      	ldr	r2, [pc, #120]	; (8009dfc <USBD_LL_Init+0x94>)
 8009d84:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009d88:	4b1c      	ldr	r3, [pc, #112]	; (8009dfc <USBD_LL_Init+0x94>)
 8009d8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009d8e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009d90:	4b1a      	ldr	r3, [pc, #104]	; (8009dfc <USBD_LL_Init+0x94>)
 8009d92:	2206      	movs	r2, #6
 8009d94:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009d96:	4b19      	ldr	r3, [pc, #100]	; (8009dfc <USBD_LL_Init+0x94>)
 8009d98:	2202      	movs	r2, #2
 8009d9a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009d9c:	4b17      	ldr	r3, [pc, #92]	; (8009dfc <USBD_LL_Init+0x94>)
 8009d9e:	2200      	movs	r2, #0
 8009da0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009da2:	4b16      	ldr	r3, [pc, #88]	; (8009dfc <USBD_LL_Init+0x94>)
 8009da4:	2202      	movs	r2, #2
 8009da6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009da8:	4b14      	ldr	r3, [pc, #80]	; (8009dfc <USBD_LL_Init+0x94>)
 8009daa:	2200      	movs	r2, #0
 8009dac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009dae:	4b13      	ldr	r3, [pc, #76]	; (8009dfc <USBD_LL_Init+0x94>)
 8009db0:	2200      	movs	r2, #0
 8009db2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009db4:	4b11      	ldr	r3, [pc, #68]	; (8009dfc <USBD_LL_Init+0x94>)
 8009db6:	2200      	movs	r2, #0
 8009db8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009dba:	4b10      	ldr	r3, [pc, #64]	; (8009dfc <USBD_LL_Init+0x94>)
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009dc0:	4b0e      	ldr	r3, [pc, #56]	; (8009dfc <USBD_LL_Init+0x94>)
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009dc6:	480d      	ldr	r0, [pc, #52]	; (8009dfc <USBD_LL_Init+0x94>)
 8009dc8:	f7f7 fa2d 	bl	8001226 <HAL_PCD_Init>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d001      	beq.n	8009dd6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009dd2:	f7f6 fdb6 	bl	8000942 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009dd6:	2180      	movs	r1, #128	; 0x80
 8009dd8:	4808      	ldr	r0, [pc, #32]	; (8009dfc <USBD_LL_Init+0x94>)
 8009dda:	f7f8 fbbe 	bl	800255a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009dde:	2240      	movs	r2, #64	; 0x40
 8009de0:	2100      	movs	r1, #0
 8009de2:	4806      	ldr	r0, [pc, #24]	; (8009dfc <USBD_LL_Init+0x94>)
 8009de4:	f7f8 fb72 	bl	80024cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009de8:	2280      	movs	r2, #128	; 0x80
 8009dea:	2101      	movs	r1, #1
 8009dec:	4803      	ldr	r0, [pc, #12]	; (8009dfc <USBD_LL_Init+0x94>)
 8009dee:	f7f8 fb6d 	bl	80024cc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009df2:	2300      	movs	r3, #0
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3708      	adds	r7, #8
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	200059b0 	.word	0x200059b0

08009e00 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7f7 fb29 	bl	800146e <HAL_PCD_Start>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e20:	7bfb      	ldrb	r3, [r7, #15]
 8009e22:	4618      	mov	r0, r3
 8009e24:	f000 f990 	bl	800a148 <USBD_Get_USB_Status>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}

08009e36 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009e36:	b580      	push	{r7, lr}
 8009e38:	b084      	sub	sp, #16
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
 8009e3e:	4608      	mov	r0, r1
 8009e40:	4611      	mov	r1, r2
 8009e42:	461a      	mov	r2, r3
 8009e44:	4603      	mov	r3, r0
 8009e46:	70fb      	strb	r3, [r7, #3]
 8009e48:	460b      	mov	r3, r1
 8009e4a:	70bb      	strb	r3, [r7, #2]
 8009e4c:	4613      	mov	r3, r2
 8009e4e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e50:	2300      	movs	r3, #0
 8009e52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e54:	2300      	movs	r3, #0
 8009e56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e5e:	78bb      	ldrb	r3, [r7, #2]
 8009e60:	883a      	ldrh	r2, [r7, #0]
 8009e62:	78f9      	ldrb	r1, [r7, #3]
 8009e64:	f7f7 ff3a 	bl	8001cdc <HAL_PCD_EP_Open>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e6c:	7bfb      	ldrb	r3, [r7, #15]
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f000 f96a 	bl	800a148 <USBD_Get_USB_Status>
 8009e74:	4603      	mov	r3, r0
 8009e76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e78:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3710      	adds	r7, #16
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}

08009e82 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e82:	b580      	push	{r7, lr}
 8009e84:	b084      	sub	sp, #16
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e92:	2300      	movs	r3, #0
 8009e94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e9c:	78fa      	ldrb	r2, [r7, #3]
 8009e9e:	4611      	mov	r1, r2
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7f7 ff83 	bl	8001dac <HAL_PCD_EP_Close>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009eaa:	7bfb      	ldrb	r3, [r7, #15]
 8009eac:	4618      	mov	r0, r3
 8009eae:	f000 f94b 	bl	800a148 <USBD_Get_USB_Status>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009eb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3710      	adds	r7, #16
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	460b      	mov	r3, r1
 8009eca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009eda:	78fa      	ldrb	r2, [r7, #3]
 8009edc:	4611      	mov	r1, r2
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7f8 f85b 	bl	8001f9a <HAL_PCD_EP_SetStall>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ee8:	7bfb      	ldrb	r3, [r7, #15]
 8009eea:	4618      	mov	r0, r3
 8009eec:	f000 f92c 	bl	800a148 <USBD_Get_USB_Status>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ef4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b084      	sub	sp, #16
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
 8009f06:	460b      	mov	r3, r1
 8009f08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f18:	78fa      	ldrb	r2, [r7, #3]
 8009f1a:	4611      	mov	r1, r2
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7f8 f8a0 	bl	8002062 <HAL_PCD_EP_ClrStall>
 8009f22:	4603      	mov	r3, r0
 8009f24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f26:	7bfb      	ldrb	r3, [r7, #15]
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f000 f90d 	bl	800a148 <USBD_Get_USB_Status>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f32:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3710      	adds	r7, #16
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b085      	sub	sp, #20
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	460b      	mov	r3, r1
 8009f46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f4e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009f50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	da0b      	bge.n	8009f70 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009f58:	78fb      	ldrb	r3, [r7, #3]
 8009f5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f5e:	68f9      	ldr	r1, [r7, #12]
 8009f60:	4613      	mov	r3, r2
 8009f62:	00db      	lsls	r3, r3, #3
 8009f64:	1a9b      	subs	r3, r3, r2
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	440b      	add	r3, r1
 8009f6a:	333e      	adds	r3, #62	; 0x3e
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	e00b      	b.n	8009f88 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009f70:	78fb      	ldrb	r3, [r7, #3]
 8009f72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f76:	68f9      	ldr	r1, [r7, #12]
 8009f78:	4613      	mov	r3, r2
 8009f7a:	00db      	lsls	r3, r3, #3
 8009f7c:	1a9b      	subs	r3, r3, r2
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	440b      	add	r3, r1
 8009f82:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009f86:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3714      	adds	r7, #20
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009fae:	78fa      	ldrb	r2, [r7, #3]
 8009fb0:	4611      	mov	r1, r2
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7f7 fe6d 	bl	8001c92 <HAL_PCD_SetAddress>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fbc:	7bfb      	ldrb	r3, [r7, #15]
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f000 f8c2 	bl	800a148 <USBD_Get_USB_Status>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b086      	sub	sp, #24
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	60f8      	str	r0, [r7, #12]
 8009fda:	607a      	str	r2, [r7, #4]
 8009fdc:	603b      	str	r3, [r7, #0]
 8009fde:	460b      	mov	r3, r1
 8009fe0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009ff0:	7af9      	ldrb	r1, [r7, #11]
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	f7f7 ff86 	bl	8001f06 <HAL_PCD_EP_Transmit>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ffe:	7dfb      	ldrb	r3, [r7, #23]
 800a000:	4618      	mov	r0, r3
 800a002:	f000 f8a1 	bl	800a148 <USBD_Get_USB_Status>
 800a006:	4603      	mov	r3, r0
 800a008:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a00a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3718      	adds	r7, #24
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b086      	sub	sp, #24
 800a018:	af00      	add	r7, sp, #0
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	607a      	str	r2, [r7, #4]
 800a01e:	603b      	str	r3, [r7, #0]
 800a020:	460b      	mov	r3, r1
 800a022:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a024:	2300      	movs	r3, #0
 800a026:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a028:	2300      	movs	r3, #0
 800a02a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a032:	7af9      	ldrb	r1, [r7, #11]
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	687a      	ldr	r2, [r7, #4]
 800a038:	f7f7 ff02 	bl	8001e40 <HAL_PCD_EP_Receive>
 800a03c:	4603      	mov	r3, r0
 800a03e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a040:	7dfb      	ldrb	r3, [r7, #23]
 800a042:	4618      	mov	r0, r3
 800a044:	f000 f880 	bl	800a148 <USBD_Get_USB_Status>
 800a048:	4603      	mov	r3, r0
 800a04a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a04c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3718      	adds	r7, #24
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a056:	b580      	push	{r7, lr}
 800a058:	b082      	sub	sp, #8
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
 800a05e:	460b      	mov	r3, r1
 800a060:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a068:	78fa      	ldrb	r2, [r7, #3]
 800a06a:	4611      	mov	r1, r2
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7f7 ff32 	bl	8001ed6 <HAL_PCD_EP_GetRxCount>
 800a072:	4603      	mov	r3, r0
}
 800a074:	4618      	mov	r0, r3
 800a076:	3708      	adds	r7, #8
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	460b      	mov	r3, r1
 800a086:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a088:	78fb      	ldrb	r3, [r7, #3]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d002      	beq.n	800a094 <HAL_PCDEx_LPM_Callback+0x18>
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d01f      	beq.n	800a0d2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a092:	e03b      	b.n	800a10c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6a1b      	ldr	r3, [r3, #32]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d007      	beq.n	800a0ac <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800a09c:	f7f6 fbd6 	bl	800084c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a0a0:	4b1c      	ldr	r3, [pc, #112]	; (800a114 <HAL_PCDEx_LPM_Callback+0x98>)
 800a0a2:	691b      	ldr	r3, [r3, #16]
 800a0a4:	4a1b      	ldr	r2, [pc, #108]	; (800a114 <HAL_PCDEx_LPM_Callback+0x98>)
 800a0a6:	f023 0306 	bic.w	r3, r3, #6
 800a0aa:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	687a      	ldr	r2, [r7, #4]
 800a0b8:	6812      	ldr	r2, [r2, #0]
 800a0ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a0be:	f023 0301 	bic.w	r3, r3, #1
 800a0c2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7fc f902 	bl	80062d4 <USBD_LL_Resume>
    break;
 800a0d0:	e01c      	b.n	800a10c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	6812      	ldr	r2, [r2, #0]
 800a0e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a0e4:	f043 0301 	orr.w	r3, r3, #1
 800a0e8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7fc f8d9 	bl	80062a8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6a1b      	ldr	r3, [r3, #32]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d005      	beq.n	800a10a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a0fe:	4b05      	ldr	r3, [pc, #20]	; (800a114 <HAL_PCDEx_LPM_Callback+0x98>)
 800a100:	691b      	ldr	r3, [r3, #16]
 800a102:	4a04      	ldr	r2, [pc, #16]	; (800a114 <HAL_PCDEx_LPM_Callback+0x98>)
 800a104:	f043 0306 	orr.w	r3, r3, #6
 800a108:	6113      	str	r3, [r2, #16]
    break;
 800a10a:	bf00      	nop
}
 800a10c:	bf00      	nop
 800a10e:	3708      	adds	r7, #8
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	e000ed00 	.word	0xe000ed00

0800a118 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a120:	4b03      	ldr	r3, [pc, #12]	; (800a130 <USBD_static_malloc+0x18>)
}
 800a122:	4618      	mov	r0, r3
 800a124:	370c      	adds	r7, #12
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr
 800a12e:	bf00      	nop
 800a130:	20004220 	.word	0x20004220

0800a134 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]

}
 800a13c:	bf00      	nop
 800a13e:	370c      	adds	r7, #12
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr

0800a148 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a148:	b480      	push	{r7}
 800a14a:	b085      	sub	sp, #20
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	4603      	mov	r3, r0
 800a150:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a152:	2300      	movs	r3, #0
 800a154:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a156:	79fb      	ldrb	r3, [r7, #7]
 800a158:	2b03      	cmp	r3, #3
 800a15a:	d817      	bhi.n	800a18c <USBD_Get_USB_Status+0x44>
 800a15c:	a201      	add	r2, pc, #4	; (adr r2, 800a164 <USBD_Get_USB_Status+0x1c>)
 800a15e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a162:	bf00      	nop
 800a164:	0800a175 	.word	0x0800a175
 800a168:	0800a17b 	.word	0x0800a17b
 800a16c:	0800a181 	.word	0x0800a181
 800a170:	0800a187 	.word	0x0800a187
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a174:	2300      	movs	r3, #0
 800a176:	73fb      	strb	r3, [r7, #15]
    break;
 800a178:	e00b      	b.n	800a192 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a17a:	2303      	movs	r3, #3
 800a17c:	73fb      	strb	r3, [r7, #15]
    break;
 800a17e:	e008      	b.n	800a192 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a180:	2301      	movs	r3, #1
 800a182:	73fb      	strb	r3, [r7, #15]
    break;
 800a184:	e005      	b.n	800a192 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a186:	2303      	movs	r3, #3
 800a188:	73fb      	strb	r3, [r7, #15]
    break;
 800a18a:	e002      	b.n	800a192 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a18c:	2303      	movs	r3, #3
 800a18e:	73fb      	strb	r3, [r7, #15]
    break;
 800a190:	bf00      	nop
  }
  return usb_status;
 800a192:	7bfb      	ldrb	r3, [r7, #15]
}
 800a194:	4618      	mov	r0, r3
 800a196:	3714      	adds	r7, #20
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <__libc_init_array>:
 800a1a0:	b570      	push	{r4, r5, r6, lr}
 800a1a2:	4d0d      	ldr	r5, [pc, #52]	; (800a1d8 <__libc_init_array+0x38>)
 800a1a4:	4c0d      	ldr	r4, [pc, #52]	; (800a1dc <__libc_init_array+0x3c>)
 800a1a6:	1b64      	subs	r4, r4, r5
 800a1a8:	10a4      	asrs	r4, r4, #2
 800a1aa:	2600      	movs	r6, #0
 800a1ac:	42a6      	cmp	r6, r4
 800a1ae:	d109      	bne.n	800a1c4 <__libc_init_array+0x24>
 800a1b0:	4d0b      	ldr	r5, [pc, #44]	; (800a1e0 <__libc_init_array+0x40>)
 800a1b2:	4c0c      	ldr	r4, [pc, #48]	; (800a1e4 <__libc_init_array+0x44>)
 800a1b4:	f000 f8f6 	bl	800a3a4 <_init>
 800a1b8:	1b64      	subs	r4, r4, r5
 800a1ba:	10a4      	asrs	r4, r4, #2
 800a1bc:	2600      	movs	r6, #0
 800a1be:	42a6      	cmp	r6, r4
 800a1c0:	d105      	bne.n	800a1ce <__libc_init_array+0x2e>
 800a1c2:	bd70      	pop	{r4, r5, r6, pc}
 800a1c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1c8:	4798      	blx	r3
 800a1ca:	3601      	adds	r6, #1
 800a1cc:	e7ee      	b.n	800a1ac <__libc_init_array+0xc>
 800a1ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1d2:	4798      	blx	r3
 800a1d4:	3601      	adds	r6, #1
 800a1d6:	e7f2      	b.n	800a1be <__libc_init_array+0x1e>
 800a1d8:	0800a4e8 	.word	0x0800a4e8
 800a1dc:	0800a4e8 	.word	0x0800a4e8
 800a1e0:	0800a4e8 	.word	0x0800a4e8
 800a1e4:	0800a4ec 	.word	0x0800a4ec

0800a1e8 <__retarget_lock_acquire_recursive>:
 800a1e8:	4770      	bx	lr

0800a1ea <__retarget_lock_release_recursive>:
 800a1ea:	4770      	bx	lr

0800a1ec <memcpy>:
 800a1ec:	440a      	add	r2, r1
 800a1ee:	4291      	cmp	r1, r2
 800a1f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1f4:	d100      	bne.n	800a1f8 <memcpy+0xc>
 800a1f6:	4770      	bx	lr
 800a1f8:	b510      	push	{r4, lr}
 800a1fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a202:	4291      	cmp	r1, r2
 800a204:	d1f9      	bne.n	800a1fa <memcpy+0xe>
 800a206:	bd10      	pop	{r4, pc}

0800a208 <memset>:
 800a208:	4402      	add	r2, r0
 800a20a:	4603      	mov	r3, r0
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d100      	bne.n	800a212 <memset+0xa>
 800a210:	4770      	bx	lr
 800a212:	f803 1b01 	strb.w	r1, [r3], #1
 800a216:	e7f9      	b.n	800a20c <memset+0x4>

0800a218 <cleanup_glue>:
 800a218:	b538      	push	{r3, r4, r5, lr}
 800a21a:	460c      	mov	r4, r1
 800a21c:	6809      	ldr	r1, [r1, #0]
 800a21e:	4605      	mov	r5, r0
 800a220:	b109      	cbz	r1, 800a226 <cleanup_glue+0xe>
 800a222:	f7ff fff9 	bl	800a218 <cleanup_glue>
 800a226:	4621      	mov	r1, r4
 800a228:	4628      	mov	r0, r5
 800a22a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a22e:	f000 b869 	b.w	800a304 <_free_r>
	...

0800a234 <_reclaim_reent>:
 800a234:	4b2c      	ldr	r3, [pc, #176]	; (800a2e8 <_reclaim_reent+0xb4>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4283      	cmp	r3, r0
 800a23a:	b570      	push	{r4, r5, r6, lr}
 800a23c:	4604      	mov	r4, r0
 800a23e:	d051      	beq.n	800a2e4 <_reclaim_reent+0xb0>
 800a240:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a242:	b143      	cbz	r3, 800a256 <_reclaim_reent+0x22>
 800a244:	68db      	ldr	r3, [r3, #12]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d14a      	bne.n	800a2e0 <_reclaim_reent+0xac>
 800a24a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a24c:	6819      	ldr	r1, [r3, #0]
 800a24e:	b111      	cbz	r1, 800a256 <_reclaim_reent+0x22>
 800a250:	4620      	mov	r0, r4
 800a252:	f000 f857 	bl	800a304 <_free_r>
 800a256:	6961      	ldr	r1, [r4, #20]
 800a258:	b111      	cbz	r1, 800a260 <_reclaim_reent+0x2c>
 800a25a:	4620      	mov	r0, r4
 800a25c:	f000 f852 	bl	800a304 <_free_r>
 800a260:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a262:	b111      	cbz	r1, 800a26a <_reclaim_reent+0x36>
 800a264:	4620      	mov	r0, r4
 800a266:	f000 f84d 	bl	800a304 <_free_r>
 800a26a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a26c:	b111      	cbz	r1, 800a274 <_reclaim_reent+0x40>
 800a26e:	4620      	mov	r0, r4
 800a270:	f000 f848 	bl	800a304 <_free_r>
 800a274:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a276:	b111      	cbz	r1, 800a27e <_reclaim_reent+0x4a>
 800a278:	4620      	mov	r0, r4
 800a27a:	f000 f843 	bl	800a304 <_free_r>
 800a27e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a280:	b111      	cbz	r1, 800a288 <_reclaim_reent+0x54>
 800a282:	4620      	mov	r0, r4
 800a284:	f000 f83e 	bl	800a304 <_free_r>
 800a288:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a28a:	b111      	cbz	r1, 800a292 <_reclaim_reent+0x5e>
 800a28c:	4620      	mov	r0, r4
 800a28e:	f000 f839 	bl	800a304 <_free_r>
 800a292:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a294:	b111      	cbz	r1, 800a29c <_reclaim_reent+0x68>
 800a296:	4620      	mov	r0, r4
 800a298:	f000 f834 	bl	800a304 <_free_r>
 800a29c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a29e:	b111      	cbz	r1, 800a2a6 <_reclaim_reent+0x72>
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	f000 f82f 	bl	800a304 <_free_r>
 800a2a6:	69a3      	ldr	r3, [r4, #24]
 800a2a8:	b1e3      	cbz	r3, 800a2e4 <_reclaim_reent+0xb0>
 800a2aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a2ac:	4620      	mov	r0, r4
 800a2ae:	4798      	blx	r3
 800a2b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a2b2:	b1b9      	cbz	r1, 800a2e4 <_reclaim_reent+0xb0>
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a2ba:	f7ff bfad 	b.w	800a218 <cleanup_glue>
 800a2be:	5949      	ldr	r1, [r1, r5]
 800a2c0:	b941      	cbnz	r1, 800a2d4 <_reclaim_reent+0xa0>
 800a2c2:	3504      	adds	r5, #4
 800a2c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2c6:	2d80      	cmp	r5, #128	; 0x80
 800a2c8:	68d9      	ldr	r1, [r3, #12]
 800a2ca:	d1f8      	bne.n	800a2be <_reclaim_reent+0x8a>
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	f000 f819 	bl	800a304 <_free_r>
 800a2d2:	e7ba      	b.n	800a24a <_reclaim_reent+0x16>
 800a2d4:	680e      	ldr	r6, [r1, #0]
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	f000 f814 	bl	800a304 <_free_r>
 800a2dc:	4631      	mov	r1, r6
 800a2de:	e7ef      	b.n	800a2c0 <_reclaim_reent+0x8c>
 800a2e0:	2500      	movs	r5, #0
 800a2e2:	e7ef      	b.n	800a2c4 <_reclaim_reent+0x90>
 800a2e4:	bd70      	pop	{r4, r5, r6, pc}
 800a2e6:	bf00      	nop
 800a2e8:	20000194 	.word	0x20000194

0800a2ec <__malloc_lock>:
 800a2ec:	4801      	ldr	r0, [pc, #4]	; (800a2f4 <__malloc_lock+0x8>)
 800a2ee:	f7ff bf7b 	b.w	800a1e8 <__retarget_lock_acquire_recursive>
 800a2f2:	bf00      	nop
 800a2f4:	20005dbc 	.word	0x20005dbc

0800a2f8 <__malloc_unlock>:
 800a2f8:	4801      	ldr	r0, [pc, #4]	; (800a300 <__malloc_unlock+0x8>)
 800a2fa:	f7ff bf76 	b.w	800a1ea <__retarget_lock_release_recursive>
 800a2fe:	bf00      	nop
 800a300:	20005dbc 	.word	0x20005dbc

0800a304 <_free_r>:
 800a304:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a306:	2900      	cmp	r1, #0
 800a308:	d048      	beq.n	800a39c <_free_r+0x98>
 800a30a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a30e:	9001      	str	r0, [sp, #4]
 800a310:	2b00      	cmp	r3, #0
 800a312:	f1a1 0404 	sub.w	r4, r1, #4
 800a316:	bfb8      	it	lt
 800a318:	18e4      	addlt	r4, r4, r3
 800a31a:	f7ff ffe7 	bl	800a2ec <__malloc_lock>
 800a31e:	4a20      	ldr	r2, [pc, #128]	; (800a3a0 <_free_r+0x9c>)
 800a320:	9801      	ldr	r0, [sp, #4]
 800a322:	6813      	ldr	r3, [r2, #0]
 800a324:	4615      	mov	r5, r2
 800a326:	b933      	cbnz	r3, 800a336 <_free_r+0x32>
 800a328:	6063      	str	r3, [r4, #4]
 800a32a:	6014      	str	r4, [r2, #0]
 800a32c:	b003      	add	sp, #12
 800a32e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a332:	f7ff bfe1 	b.w	800a2f8 <__malloc_unlock>
 800a336:	42a3      	cmp	r3, r4
 800a338:	d90b      	bls.n	800a352 <_free_r+0x4e>
 800a33a:	6821      	ldr	r1, [r4, #0]
 800a33c:	1862      	adds	r2, r4, r1
 800a33e:	4293      	cmp	r3, r2
 800a340:	bf04      	itt	eq
 800a342:	681a      	ldreq	r2, [r3, #0]
 800a344:	685b      	ldreq	r3, [r3, #4]
 800a346:	6063      	str	r3, [r4, #4]
 800a348:	bf04      	itt	eq
 800a34a:	1852      	addeq	r2, r2, r1
 800a34c:	6022      	streq	r2, [r4, #0]
 800a34e:	602c      	str	r4, [r5, #0]
 800a350:	e7ec      	b.n	800a32c <_free_r+0x28>
 800a352:	461a      	mov	r2, r3
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	b10b      	cbz	r3, 800a35c <_free_r+0x58>
 800a358:	42a3      	cmp	r3, r4
 800a35a:	d9fa      	bls.n	800a352 <_free_r+0x4e>
 800a35c:	6811      	ldr	r1, [r2, #0]
 800a35e:	1855      	adds	r5, r2, r1
 800a360:	42a5      	cmp	r5, r4
 800a362:	d10b      	bne.n	800a37c <_free_r+0x78>
 800a364:	6824      	ldr	r4, [r4, #0]
 800a366:	4421      	add	r1, r4
 800a368:	1854      	adds	r4, r2, r1
 800a36a:	42a3      	cmp	r3, r4
 800a36c:	6011      	str	r1, [r2, #0]
 800a36e:	d1dd      	bne.n	800a32c <_free_r+0x28>
 800a370:	681c      	ldr	r4, [r3, #0]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	6053      	str	r3, [r2, #4]
 800a376:	4421      	add	r1, r4
 800a378:	6011      	str	r1, [r2, #0]
 800a37a:	e7d7      	b.n	800a32c <_free_r+0x28>
 800a37c:	d902      	bls.n	800a384 <_free_r+0x80>
 800a37e:	230c      	movs	r3, #12
 800a380:	6003      	str	r3, [r0, #0]
 800a382:	e7d3      	b.n	800a32c <_free_r+0x28>
 800a384:	6825      	ldr	r5, [r4, #0]
 800a386:	1961      	adds	r1, r4, r5
 800a388:	428b      	cmp	r3, r1
 800a38a:	bf04      	itt	eq
 800a38c:	6819      	ldreq	r1, [r3, #0]
 800a38e:	685b      	ldreq	r3, [r3, #4]
 800a390:	6063      	str	r3, [r4, #4]
 800a392:	bf04      	itt	eq
 800a394:	1949      	addeq	r1, r1, r5
 800a396:	6021      	streq	r1, [r4, #0]
 800a398:	6054      	str	r4, [r2, #4]
 800a39a:	e7c7      	b.n	800a32c <_free_r+0x28>
 800a39c:	b003      	add	sp, #12
 800a39e:	bd30      	pop	{r4, r5, pc}
 800a3a0:	20004440 	.word	0x20004440

0800a3a4 <_init>:
 800a3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3a6:	bf00      	nop
 800a3a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3aa:	bc08      	pop	{r3}
 800a3ac:	469e      	mov	lr, r3
 800a3ae:	4770      	bx	lr

0800a3b0 <_fini>:
 800a3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b2:	bf00      	nop
 800a3b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3b6:	bc08      	pop	{r3}
 800a3b8:	469e      	mov	lr, r3
 800a3ba:	4770      	bx	lr
