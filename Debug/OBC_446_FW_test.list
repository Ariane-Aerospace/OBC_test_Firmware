
OBC_446_FW_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009028  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080091f8  080091f8  000191f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092e8  080092e8  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  080092e8  080092e8  000192e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092f0  080092f0  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092f0  080092f0  000192f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092f4  080092f4  000192f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  080092f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005bc4  200001f8  080094f0  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005dbc  080094f0  00025dbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002540b  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d34  00000000  00000000  00045633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001818  00000000  00000000  0004a368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001640  00000000  00000000  0004bb80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000274d6  00000000  00000000  0004d1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e483  00000000  00000000  00074696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd51e  00000000  00000000  00092b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00170037  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006688  00000000  00000000  0017008c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080091e0 	.word	0x080091e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	080091e0 	.word	0x080091e0

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4a07      	ldr	r2, [pc, #28]	; (8000534 <vApplicationGetIdleTaskMemory+0x2c>)
 8000518:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <vApplicationGetIdleTaskMemory+0x30>)
 800051e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20000214 	.word	0x20000214
 8000538:	200002c8 	.word	0x200002c8

0800053c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800053c:	b5b0      	push	{r4, r5, r7, lr}
 800053e:	b088      	sub	sp, #32
 8000540:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8000542:	4b0a      	ldr	r3, [pc, #40]	; (800056c <MX_FREERTOS_Init+0x30>)
 8000544:	1d3c      	adds	r4, r7, #4
 8000546:	461d      	mov	r5, r3
 8000548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800054c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000550:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2100      	movs	r1, #0
 8000558:	4618      	mov	r0, r3
 800055a:	f006 fd55 	bl	8007008 <osThreadCreate>
 800055e:	4603      	mov	r3, r0
 8000560:	4a03      	ldr	r2, [pc, #12]	; (8000570 <MX_FREERTOS_Init+0x34>)
 8000562:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000564:	bf00      	nop
 8000566:	3720      	adds	r7, #32
 8000568:	46bd      	mov	sp, r7
 800056a:	bdb0      	pop	{r4, r5, r7, pc}
 800056c:	08009204 	.word	0x08009204
 8000570:	20004444 	.word	0x20004444

08000574 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800057c:	f007 ff9e 	bl	80084bc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  uint8_t data = 0xAA;
 8000580:	23aa      	movs	r3, #170	; 0xaa
 8000582:	73fb      	strb	r3, [r7, #15]
	  CDC_Transmit_FS(&data, 1);
 8000584:	f107 030f 	add.w	r3, r7, #15
 8000588:	2101      	movs	r1, #1
 800058a:	4618      	mov	r0, r3
 800058c:	f008 f854 	bl	8008638 <CDC_Transmit_FS>
    osDelay(1000);
 8000590:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000594:	f006 fd84 	bl	80070a0 <osDelay>
  {
 8000598:	e7f2      	b.n	8000580 <StartDefaultTask+0xc>
	...

0800059c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08c      	sub	sp, #48	; 0x30
 80005a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a2:	f107 031c 	add.w	r3, r7, #28
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]
 80005b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	61bb      	str	r3, [r7, #24]
 80005b6:	4b4c      	ldr	r3, [pc, #304]	; (80006e8 <MX_GPIO_Init+0x14c>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a4b      	ldr	r2, [pc, #300]	; (80006e8 <MX_GPIO_Init+0x14c>)
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
 80005c2:	4b49      	ldr	r3, [pc, #292]	; (80006e8 <MX_GPIO_Init+0x14c>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0304 	and.w	r3, r3, #4
 80005ca:	61bb      	str	r3, [r7, #24]
 80005cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
 80005d2:	4b45      	ldr	r3, [pc, #276]	; (80006e8 <MX_GPIO_Init+0x14c>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	4a44      	ldr	r2, [pc, #272]	; (80006e8 <MX_GPIO_Init+0x14c>)
 80005d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005dc:	6313      	str	r3, [r2, #48]	; 0x30
 80005de:	4b42      	ldr	r3, [pc, #264]	; (80006e8 <MX_GPIO_Init+0x14c>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005e6:	617b      	str	r3, [r7, #20]
 80005e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	613b      	str	r3, [r7, #16]
 80005ee:	4b3e      	ldr	r3, [pc, #248]	; (80006e8 <MX_GPIO_Init+0x14c>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a3d      	ldr	r2, [pc, #244]	; (80006e8 <MX_GPIO_Init+0x14c>)
 80005f4:	f043 0302 	orr.w	r3, r3, #2
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b3b      	ldr	r3, [pc, #236]	; (80006e8 <MX_GPIO_Init+0x14c>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0302 	and.w	r3, r3, #2
 8000602:	613b      	str	r3, [r7, #16]
 8000604:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	4b37      	ldr	r3, [pc, #220]	; (80006e8 <MX_GPIO_Init+0x14c>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a36      	ldr	r2, [pc, #216]	; (80006e8 <MX_GPIO_Init+0x14c>)
 8000610:	f043 0308 	orr.w	r3, r3, #8
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b34      	ldr	r3, [pc, #208]	; (80006e8 <MX_GPIO_Init+0x14c>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0308 	and.w	r3, r3, #8
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	4b30      	ldr	r3, [pc, #192]	; (80006e8 <MX_GPIO_Init+0x14c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a2f      	ldr	r2, [pc, #188]	; (80006e8 <MX_GPIO_Init+0x14c>)
 800062c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
 8000632:	4b2d      	ldr	r3, [pc, #180]	; (80006e8 <MX_GPIO_Init+0x14c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <MX_GPIO_Init+0x14c>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <MX_GPIO_Init+0x14c>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b26      	ldr	r3, [pc, #152]	; (80006e8 <MX_GPIO_Init+0x14c>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000660:	4822      	ldr	r0, [pc, #136]	; (80006ec <MX_GPIO_Init+0x150>)
 8000662:	f000 fd13 	bl	800108c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	2140      	movs	r1, #64	; 0x40
 800066a:	4821      	ldr	r0, [pc, #132]	; (80006f0 <MX_GPIO_Init+0x154>)
 800066c:	f000 fd0e 	bl	800108c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000670:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000676:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800067a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000680:	f107 031c 	add.w	r3, r7, #28
 8000684:	4619      	mov	r1, r3
 8000686:	481b      	ldr	r0, [pc, #108]	; (80006f4 <MX_GPIO_Init+0x158>)
 8000688:	f000 fb6c 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800068c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	2301      	movs	r3, #1
 8000694:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	2300      	movs	r3, #0
 800069c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	4619      	mov	r1, r3
 80006a4:	4811      	ldr	r0, [pc, #68]	; (80006ec <MX_GPIO_Init+0x150>)
 80006a6:	f000 fb5d 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80006aa:	2340      	movs	r3, #64	; 0x40
 80006ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ae:	2301      	movs	r3, #1
 80006b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b6:	2300      	movs	r3, #0
 80006b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	4619      	mov	r1, r3
 80006c0:	480b      	ldr	r0, [pc, #44]	; (80006f0 <MX_GPIO_Init+0x154>)
 80006c2:	f000 fb4f 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80006c6:	2380      	movs	r3, #128	; 0x80
 80006c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ca:	2300      	movs	r3, #0
 80006cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	4619      	mov	r1, r3
 80006d8:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_GPIO_Init+0x154>)
 80006da:	f000 fb43 	bl	8000d64 <HAL_GPIO_Init>

}
 80006de:	bf00      	nop
 80006e0:	3730      	adds	r7, #48	; 0x30
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40020400 	.word	0x40020400
 80006f0:	40021800 	.word	0x40021800
 80006f4:	40020800 	.word	0x40020800

080006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fc:	f000 f9ea 	bl	8000ad4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000700:	f000 f80a 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000704:	f7ff ff4a 	bl	800059c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000708:	f000 f948 	bl	800099c <MX_USART3_UART_Init>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800070c:	f7ff ff16 	bl	800053c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000710:	f006 fc73 	bl	8006ffa <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000714:	e7fe      	b.n	8000714 <main+0x1c>
	...

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b094      	sub	sp, #80	; 0x50
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	2234      	movs	r2, #52	; 0x34
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f008 fc8c 	bl	8009044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	4b29      	ldr	r3, [pc, #164]	; (80007e8 <SystemClock_Config+0xd0>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	4a28      	ldr	r2, [pc, #160]	; (80007e8 <SystemClock_Config+0xd0>)
 8000746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074a:	6413      	str	r3, [r2, #64]	; 0x40
 800074c:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <SystemClock_Config+0xd0>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000758:	2300      	movs	r3, #0
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	4b23      	ldr	r3, [pc, #140]	; (80007ec <SystemClock_Config+0xd4>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000764:	4a21      	ldr	r2, [pc, #132]	; (80007ec <SystemClock_Config+0xd4>)
 8000766:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <SystemClock_Config+0xd4>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000778:	2301      	movs	r3, #1
 800077a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800077c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000780:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000782:	2302      	movs	r3, #2
 8000784:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000786:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800078a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800078c:	2304      	movs	r3, #4
 800078e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000790:	2348      	movs	r3, #72	; 0x48
 8000792:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000794:	2302      	movs	r3, #2
 8000796:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000798:	2303      	movs	r3, #3
 800079a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800079c:	2302      	movs	r3, #2
 800079e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4618      	mov	r0, r3
 80007a6:	f002 fc81 	bl	80030ac <HAL_RCC_OscConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007b0:	f000 f82d 	bl	800080e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b4:	230f      	movs	r3, #15
 80007b6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b8:	2302      	movs	r3, #2
 80007ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ca:	f107 0308 	add.w	r3, r7, #8
 80007ce:	2102      	movs	r1, #2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f001 fe43 	bl	800245c <HAL_RCC_ClockConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80007dc:	f000 f817 	bl	800080e <Error_Handler>
  }
}
 80007e0:	bf00      	nop
 80007e2:	3750      	adds	r7, #80	; 0x50
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40007000 	.word	0x40007000

080007f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000800:	d101      	bne.n	8000806 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000802:	f000 f989 	bl	8000b18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000812:	b672      	cpsid	i
}
 8000814:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000816:	e7fe      	b.n	8000816 <Error_Handler+0x8>

08000818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <HAL_MspInit+0x54>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000826:	4a11      	ldr	r2, [pc, #68]	; (800086c <HAL_MspInit+0x54>)
 8000828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082c:	6453      	str	r3, [r2, #68]	; 0x44
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <HAL_MspInit+0x54>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <HAL_MspInit+0x54>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <HAL_MspInit+0x54>)
 8000844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000848:	6413      	str	r3, [r2, #64]	; 0x40
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <HAL_MspInit+0x54>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	210f      	movs	r1, #15
 800085a:	f06f 0001 	mvn.w	r0, #1
 800085e:	f000 fa57 	bl	8000d10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800

08000870 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08c      	sub	sp, #48	; 0x30
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000880:	2200      	movs	r2, #0
 8000882:	6879      	ldr	r1, [r7, #4]
 8000884:	201c      	movs	r0, #28
 8000886:	f000 fa43 	bl	8000d10 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800088a:	201c      	movs	r0, #28
 800088c:	f000 fa5c 	bl	8000d48 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	4b20      	ldr	r3, [pc, #128]	; (8000918 <HAL_InitTick+0xa8>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000898:	4a1f      	ldr	r2, [pc, #124]	; (8000918 <HAL_InitTick+0xa8>)
 800089a:	f043 0301 	orr.w	r3, r3, #1
 800089e:	6413      	str	r3, [r2, #64]	; 0x40
 80008a0:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <HAL_InitTick+0xa8>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008ac:	f107 0210 	add.w	r2, r7, #16
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4611      	mov	r1, r2
 80008b6:	4618      	mov	r0, r3
 80008b8:	f001 feea 	bl	8002690 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80008bc:	f001 fec0 	bl	8002640 <HAL_RCC_GetPCLK1Freq>
 80008c0:	4603      	mov	r3, r0
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c8:	4a14      	ldr	r2, [pc, #80]	; (800091c <HAL_InitTick+0xac>)
 80008ca:	fba2 2303 	umull	r2, r3, r2, r3
 80008ce:	0c9b      	lsrs	r3, r3, #18
 80008d0:	3b01      	subs	r3, #1
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_InitTick+0xb0>)
 80008d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80008dc:	4b10      	ldr	r3, [pc, #64]	; (8000920 <HAL_InitTick+0xb0>)
 80008de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008e2:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80008e4:	4a0e      	ldr	r2, [pc, #56]	; (8000920 <HAL_InitTick+0xb0>)
 80008e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008e8:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <HAL_InitTick+0xb0>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f0:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <HAL_InitTick+0xb0>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80008f6:	480a      	ldr	r0, [pc, #40]	; (8000920 <HAL_InitTick+0xb0>)
 80008f8:	f002 fe76 	bl	80035e8 <HAL_TIM_Base_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d104      	bne.n	800090c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000902:	4807      	ldr	r0, [pc, #28]	; (8000920 <HAL_InitTick+0xb0>)
 8000904:	f002 feca 	bl	800369c <HAL_TIM_Base_Start_IT>
 8000908:	4603      	mov	r3, r0
 800090a:	e000      	b.n	800090e <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 800090c:	2301      	movs	r3, #1
}
 800090e:	4618      	mov	r0, r3
 8000910:	3730      	adds	r7, #48	; 0x30
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800
 800091c:	431bde83 	.word	0x431bde83
 8000920:	20004448 	.word	0x20004448

08000924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <NMI_Handler+0x4>

0800092a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <HardFault_Handler+0x4>

08000930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <MemManage_Handler+0x4>

08000936 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <BusFault_Handler+0x4>

0800093c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <UsageFault_Handler+0x4>

08000942 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000954:	4802      	ldr	r0, [pc, #8]	; (8000960 <TIM2_IRQHandler+0x10>)
 8000956:	f002 ff11 	bl	800377c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20004448 	.word	0x20004448

08000964 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000968:	4802      	ldr	r0, [pc, #8]	; (8000974 <OTG_FS_IRQHandler+0x10>)
 800096a:	f000 fcff 	bl	800136c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200059a8 	.word	0x200059a8

08000978 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <SystemInit+0x20>)
 800097e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000982:	4a05      	ldr	r2, [pc, #20]	; (8000998 <SystemInit+0x20>)
 8000984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <MX_USART3_UART_Init+0x50>)
 80009a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009c2:	220c      	movs	r2, #12
 80009c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009d2:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009d4:	f003 f8b6 	bl	8003b44 <HAL_UART_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009de:	f7ff ff16 	bl	800080e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20004490 	.word	0x20004490
 80009ec:	40004800 	.word	0x40004800

080009f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a19      	ldr	r2, [pc, #100]	; (8000a74 <HAL_UART_MspInit+0x84>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d12c      	bne.n	8000a6c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <HAL_UART_MspInit+0x88>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	4a17      	ldr	r2, [pc, #92]	; (8000a78 <HAL_UART_MspInit+0x88>)
 8000a1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a20:	6413      	str	r3, [r2, #64]	; 0x40
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <HAL_UART_MspInit+0x88>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <HAL_UART_MspInit+0x88>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a10      	ldr	r2, [pc, #64]	; (8000a78 <HAL_UART_MspInit+0x88>)
 8000a38:	f043 0308 	orr.w	r3, r3, #8
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <HAL_UART_MspInit+0x88>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0308 	and.w	r3, r3, #8
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a5c:	2307      	movs	r3, #7
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	4805      	ldr	r0, [pc, #20]	; (8000a7c <HAL_UART_MspInit+0x8c>)
 8000a68:	f000 f97c 	bl	8000d64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	3728      	adds	r7, #40	; 0x28
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40004800 	.word	0x40004800
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020c00 	.word	0x40020c00

08000a80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a84:	480d      	ldr	r0, [pc, #52]	; (8000abc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a86:	490e      	ldr	r1, [pc, #56]	; (8000ac0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a88:	4a0e      	ldr	r2, [pc, #56]	; (8000ac4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a8c:	e002      	b.n	8000a94 <LoopCopyDataInit>

08000a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a92:	3304      	adds	r3, #4

08000a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a98:	d3f9      	bcc.n	8000a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a9c:	4c0b      	ldr	r4, [pc, #44]	; (8000acc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa0:	e001      	b.n	8000aa6 <LoopFillZerobss>

08000aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa4:	3204      	adds	r2, #4

08000aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa8:	d3fb      	bcc.n	8000aa2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000aaa:	f7ff ff65 	bl	8000978 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aae:	f008 faa3 	bl	8008ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ab2:	f7ff fe21 	bl	80006f8 <main>
  bx  lr    
 8000ab6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ab8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac0:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8000ac4:	080092f8 	.word	0x080092f8
  ldr r2, =_sbss
 8000ac8:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8000acc:	20005dbc 	.word	0x20005dbc

08000ad0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ad0:	e7fe      	b.n	8000ad0 <ADC_IRQHandler>
	...

08000ad4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <HAL_Init+0x40>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0d      	ldr	r2, [pc, #52]	; (8000b14 <HAL_Init+0x40>)
 8000ade:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ae2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <HAL_Init+0x40>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <HAL_Init+0x40>)
 8000aea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <HAL_Init+0x40>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <HAL_Init+0x40>)
 8000af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000afa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000afc:	2003      	movs	r0, #3
 8000afe:	f000 f8fc 	bl	8000cfa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b02:	200f      	movs	r0, #15
 8000b04:	f7ff feb4 	bl	8000870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b08:	f7ff fe86 	bl	8000818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40023c00 	.word	0x40023c00

08000b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_IncTick+0x20>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_IncTick+0x24>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <HAL_IncTick+0x24>)
 8000b2a:	6013      	str	r3, [r2, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	200044d4 	.word	0x200044d4

08000b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return uwTick;
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <HAL_GetTick+0x14>)
 8000b46:	681b      	ldr	r3, [r3, #0]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	200044d4 	.word	0x200044d4

08000b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b60:	f7ff ffee 	bl	8000b40 <HAL_GetTick>
 8000b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b70:	d005      	beq.n	8000b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b72:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <HAL_Delay+0x44>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	461a      	mov	r2, r3
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b7e:	bf00      	nop
 8000b80:	f7ff ffde 	bl	8000b40 <HAL_GetTick>
 8000b84:	4602      	mov	r2, r0
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d8f7      	bhi.n	8000b80 <HAL_Delay+0x28>
  {
  }
}
 8000b90:	bf00      	nop
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000008 	.word	0x20000008

08000ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd2:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	60d3      	str	r3, [r2, #12]
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <__NVIC_GetPriorityGrouping+0x18>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	0a1b      	lsrs	r3, r3, #8
 8000bf2:	f003 0307 	and.w	r3, r3, #7
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	db0b      	blt.n	8000c2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	f003 021f 	and.w	r2, r3, #31
 8000c1c:	4907      	ldr	r1, [pc, #28]	; (8000c3c <__NVIC_EnableIRQ+0x38>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	095b      	lsrs	r3, r3, #5
 8000c24:	2001      	movs	r0, #1
 8000c26:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000e100 	.word	0xe000e100

08000c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db0a      	blt.n	8000c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	490c      	ldr	r1, [pc, #48]	; (8000c8c <__NVIC_SetPriority+0x4c>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	0112      	lsls	r2, r2, #4
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	440b      	add	r3, r1
 8000c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c68:	e00a      	b.n	8000c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4908      	ldr	r1, [pc, #32]	; (8000c90 <__NVIC_SetPriority+0x50>)
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	f003 030f 	and.w	r3, r3, #15
 8000c76:	3b04      	subs	r3, #4
 8000c78:	0112      	lsls	r2, r2, #4
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	761a      	strb	r2, [r3, #24]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000e100 	.word	0xe000e100
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b089      	sub	sp, #36	; 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	f1c3 0307 	rsb	r3, r3, #7
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	bf28      	it	cs
 8000cb2:	2304      	movcs	r3, #4
 8000cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	2b06      	cmp	r3, #6
 8000cbc:	d902      	bls.n	8000cc4 <NVIC_EncodePriority+0x30>
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3b03      	subs	r3, #3
 8000cc2:	e000      	b.n	8000cc6 <NVIC_EncodePriority+0x32>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce6:	43d9      	mvns	r1, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	4313      	orrs	r3, r2
         );
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3724      	adds	r7, #36	; 0x24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff ff4c 	bl	8000ba0 <__NVIC_SetPriorityGrouping>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
 8000d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d22:	f7ff ff61 	bl	8000be8 <__NVIC_GetPriorityGrouping>
 8000d26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	68b9      	ldr	r1, [r7, #8]
 8000d2c:	6978      	ldr	r0, [r7, #20]
 8000d2e:	f7ff ffb1 	bl	8000c94 <NVIC_EncodePriority>
 8000d32:	4602      	mov	r2, r0
 8000d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d38:	4611      	mov	r1, r2
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff ff80 	bl	8000c40 <__NVIC_SetPriority>
}
 8000d40:	bf00      	nop
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff ff54 	bl	8000c04 <__NVIC_EnableIRQ>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
 8000d7e:	e165      	b.n	800104c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d80:	2201      	movs	r2, #1
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	697a      	ldr	r2, [r7, #20]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	f040 8154 	bne.w	8001046 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d005      	beq.n	8000db6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d130      	bne.n	8000e18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	68da      	ldr	r2, [r3, #12]
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dec:	2201      	movs	r2, #1
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	091b      	lsrs	r3, r3, #4
 8000e02:	f003 0201 	and.w	r2, r3, #1
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	2b03      	cmp	r3, #3
 8000e22:	d017      	beq.n	8000e54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d123      	bne.n	8000ea8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	08da      	lsrs	r2, r3, #3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3208      	adds	r2, #8
 8000e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	f003 0307 	and.w	r3, r3, #7
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	220f      	movs	r2, #15
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	691a      	ldr	r2, [r3, #16]
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	08da      	lsrs	r2, r3, #3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3208      	adds	r2, #8
 8000ea2:	69b9      	ldr	r1, [r7, #24]
 8000ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 0203 	and.w	r2, r3, #3
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f000 80ae 	beq.w	8001046 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b5d      	ldr	r3, [pc, #372]	; (8001064 <HAL_GPIO_Init+0x300>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	4a5c      	ldr	r2, [pc, #368]	; (8001064 <HAL_GPIO_Init+0x300>)
 8000ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8000efa:	4b5a      	ldr	r3, [pc, #360]	; (8001064 <HAL_GPIO_Init+0x300>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f06:	4a58      	ldr	r2, [pc, #352]	; (8001068 <HAL_GPIO_Init+0x304>)
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	089b      	lsrs	r3, r3, #2
 8000f0c:	3302      	adds	r3, #2
 8000f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f003 0303 	and.w	r3, r3, #3
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	220f      	movs	r2, #15
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4013      	ands	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a4f      	ldr	r2, [pc, #316]	; (800106c <HAL_GPIO_Init+0x308>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d025      	beq.n	8000f7e <HAL_GPIO_Init+0x21a>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a4e      	ldr	r2, [pc, #312]	; (8001070 <HAL_GPIO_Init+0x30c>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d01f      	beq.n	8000f7a <HAL_GPIO_Init+0x216>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a4d      	ldr	r2, [pc, #308]	; (8001074 <HAL_GPIO_Init+0x310>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d019      	beq.n	8000f76 <HAL_GPIO_Init+0x212>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4c      	ldr	r2, [pc, #304]	; (8001078 <HAL_GPIO_Init+0x314>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d013      	beq.n	8000f72 <HAL_GPIO_Init+0x20e>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4b      	ldr	r2, [pc, #300]	; (800107c <HAL_GPIO_Init+0x318>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d00d      	beq.n	8000f6e <HAL_GPIO_Init+0x20a>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4a      	ldr	r2, [pc, #296]	; (8001080 <HAL_GPIO_Init+0x31c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d007      	beq.n	8000f6a <HAL_GPIO_Init+0x206>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a49      	ldr	r2, [pc, #292]	; (8001084 <HAL_GPIO_Init+0x320>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d101      	bne.n	8000f66 <HAL_GPIO_Init+0x202>
 8000f62:	2306      	movs	r3, #6
 8000f64:	e00c      	b.n	8000f80 <HAL_GPIO_Init+0x21c>
 8000f66:	2307      	movs	r3, #7
 8000f68:	e00a      	b.n	8000f80 <HAL_GPIO_Init+0x21c>
 8000f6a:	2305      	movs	r3, #5
 8000f6c:	e008      	b.n	8000f80 <HAL_GPIO_Init+0x21c>
 8000f6e:	2304      	movs	r3, #4
 8000f70:	e006      	b.n	8000f80 <HAL_GPIO_Init+0x21c>
 8000f72:	2303      	movs	r3, #3
 8000f74:	e004      	b.n	8000f80 <HAL_GPIO_Init+0x21c>
 8000f76:	2302      	movs	r3, #2
 8000f78:	e002      	b.n	8000f80 <HAL_GPIO_Init+0x21c>
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e000      	b.n	8000f80 <HAL_GPIO_Init+0x21c>
 8000f7e:	2300      	movs	r3, #0
 8000f80:	69fa      	ldr	r2, [r7, #28]
 8000f82:	f002 0203 	and.w	r2, r2, #3
 8000f86:	0092      	lsls	r2, r2, #2
 8000f88:	4093      	lsls	r3, r2
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f90:	4935      	ldr	r1, [pc, #212]	; (8001068 <HAL_GPIO_Init+0x304>)
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	089b      	lsrs	r3, r3, #2
 8000f96:	3302      	adds	r3, #2
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f9e:	4b3a      	ldr	r3, [pc, #232]	; (8001088 <HAL_GPIO_Init+0x324>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fc2:	4a31      	ldr	r2, [pc, #196]	; (8001088 <HAL_GPIO_Init+0x324>)
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fc8:	4b2f      	ldr	r3, [pc, #188]	; (8001088 <HAL_GPIO_Init+0x324>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fec:	4a26      	ldr	r2, [pc, #152]	; (8001088 <HAL_GPIO_Init+0x324>)
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ff2:	4b25      	ldr	r3, [pc, #148]	; (8001088 <HAL_GPIO_Init+0x324>)
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4013      	ands	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001016:	4a1c      	ldr	r2, [pc, #112]	; (8001088 <HAL_GPIO_Init+0x324>)
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800101c:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <HAL_GPIO_Init+0x324>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d003      	beq.n	8001040 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001040:	4a11      	ldr	r2, [pc, #68]	; (8001088 <HAL_GPIO_Init+0x324>)
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3301      	adds	r3, #1
 800104a:	61fb      	str	r3, [r7, #28]
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	2b0f      	cmp	r3, #15
 8001050:	f67f ae96 	bls.w	8000d80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	3724      	adds	r7, #36	; 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40023800 	.word	0x40023800
 8001068:	40013800 	.word	0x40013800
 800106c:	40020000 	.word	0x40020000
 8001070:	40020400 	.word	0x40020400
 8001074:	40020800 	.word	0x40020800
 8001078:	40020c00 	.word	0x40020c00
 800107c:	40021000 	.word	0x40021000
 8001080:	40021400 	.word	0x40021400
 8001084:	40021800 	.word	0x40021800
 8001088:	40013c00 	.word	0x40013c00

0800108c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
 8001098:	4613      	mov	r3, r2
 800109a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800109c:	787b      	ldrb	r3, [r7, #1]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010a2:	887a      	ldrh	r2, [r7, #2]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010a8:	e003      	b.n	80010b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010aa:	887b      	ldrh	r3, [r7, #2]
 80010ac:	041a      	lsls	r2, r3, #16
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	619a      	str	r2, [r3, #24]
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010c0:	b08f      	sub	sp, #60	; 0x3c
 80010c2:	af0a      	add	r7, sp, #40	; 0x28
 80010c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e116      	b.n	80012fe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d106      	bne.n	80010f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f007 fbfe 	bl	80088ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2203      	movs	r2, #3
 80010f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001100:	2b00      	cmp	r3, #0
 8001102:	d102      	bne.n	800110a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f003 f843 	bl	800419a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	603b      	str	r3, [r7, #0]
 800111a:	687e      	ldr	r6, [r7, #4]
 800111c:	466d      	mov	r5, sp
 800111e:	f106 0410 	add.w	r4, r6, #16
 8001122:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001124:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001126:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001128:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800112a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800112e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001132:	1d33      	adds	r3, r6, #4
 8001134:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001136:	6838      	ldr	r0, [r7, #0]
 8001138:	f002 ff1a 	bl	8003f70 <USB_CoreInit>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d005      	beq.n	800114e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2202      	movs	r2, #2
 8001146:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e0d7      	b.n	80012fe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f003 f831 	bl	80041bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800115a:	2300      	movs	r3, #0
 800115c:	73fb      	strb	r3, [r7, #15]
 800115e:	e04a      	b.n	80011f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001160:	7bfa      	ldrb	r2, [r7, #15]
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	4613      	mov	r3, r2
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	1a9b      	subs	r3, r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	440b      	add	r3, r1
 800116e:	333d      	adds	r3, #61	; 0x3d
 8001170:	2201      	movs	r2, #1
 8001172:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001174:	7bfa      	ldrb	r2, [r7, #15]
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	4613      	mov	r3, r2
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	1a9b      	subs	r3, r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	440b      	add	r3, r1
 8001182:	333c      	adds	r3, #60	; 0x3c
 8001184:	7bfa      	ldrb	r2, [r7, #15]
 8001186:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001188:	7bfa      	ldrb	r2, [r7, #15]
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	b298      	uxth	r0, r3
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	4613      	mov	r3, r2
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	1a9b      	subs	r3, r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	440b      	add	r3, r1
 800119a:	3342      	adds	r3, #66	; 0x42
 800119c:	4602      	mov	r2, r0
 800119e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011a0:	7bfa      	ldrb	r2, [r7, #15]
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	4613      	mov	r3, r2
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	1a9b      	subs	r3, r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	440b      	add	r3, r1
 80011ae:	333f      	adds	r3, #63	; 0x3f
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011b4:	7bfa      	ldrb	r2, [r7, #15]
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	4613      	mov	r3, r2
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	1a9b      	subs	r3, r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	440b      	add	r3, r1
 80011c2:	3344      	adds	r3, #68	; 0x44
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011c8:	7bfa      	ldrb	r2, [r7, #15]
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	4613      	mov	r3, r2
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	1a9b      	subs	r3, r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	3348      	adds	r3, #72	; 0x48
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011dc:	7bfa      	ldrb	r2, [r7, #15]
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	4613      	mov	r3, r2
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	1a9b      	subs	r3, r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	440b      	add	r3, r1
 80011ea:	3350      	adds	r3, #80	; 0x50
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	3301      	adds	r3, #1
 80011f4:	73fb      	strb	r3, [r7, #15]
 80011f6:	7bfa      	ldrb	r2, [r7, #15]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d3af      	bcc.n	8001160 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001200:	2300      	movs	r3, #0
 8001202:	73fb      	strb	r3, [r7, #15]
 8001204:	e044      	b.n	8001290 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001206:	7bfa      	ldrb	r2, [r7, #15]
 8001208:	6879      	ldr	r1, [r7, #4]
 800120a:	4613      	mov	r3, r2
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	1a9b      	subs	r3, r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	440b      	add	r3, r1
 8001214:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800121c:	7bfa      	ldrb	r2, [r7, #15]
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	4613      	mov	r3, r2
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	1a9b      	subs	r3, r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	440b      	add	r3, r1
 800122a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800122e:	7bfa      	ldrb	r2, [r7, #15]
 8001230:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001232:	7bfa      	ldrb	r2, [r7, #15]
 8001234:	6879      	ldr	r1, [r7, #4]
 8001236:	4613      	mov	r3, r2
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	1a9b      	subs	r3, r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	440b      	add	r3, r1
 8001240:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001248:	7bfa      	ldrb	r2, [r7, #15]
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	4613      	mov	r3, r2
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	1a9b      	subs	r3, r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	440b      	add	r3, r1
 8001256:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800125e:	7bfa      	ldrb	r2, [r7, #15]
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	4613      	mov	r3, r2
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	1a9b      	subs	r3, r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	440b      	add	r3, r1
 800126c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001274:	7bfa      	ldrb	r2, [r7, #15]
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	4613      	mov	r3, r2
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	1a9b      	subs	r3, r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	440b      	add	r3, r1
 8001282:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	3301      	adds	r3, #1
 800128e:	73fb      	strb	r3, [r7, #15]
 8001290:	7bfa      	ldrb	r2, [r7, #15]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	429a      	cmp	r2, r3
 8001298:	d3b5      	bcc.n	8001206 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	687e      	ldr	r6, [r7, #4]
 80012a2:	466d      	mov	r5, sp
 80012a4:	f106 0410 	add.w	r4, r6, #16
 80012a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80012b8:	1d33      	adds	r3, r6, #4
 80012ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012bc:	6838      	ldr	r0, [r7, #0]
 80012be:	f002 ffc9 	bl	8004254 <USB_DevInit>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2202      	movs	r2, #2
 80012cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e014      	b.n	80012fe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2201      	movs	r2, #1
 80012e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d102      	bne.n	80012f2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f001 f891 	bl	8002414 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f004 f838 	bl	800536c <USB_DevDisconnect>

  return HAL_OK;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001306 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b084      	sub	sp, #16
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800131a:	2b01      	cmp	r3, #1
 800131c:	d101      	bne.n	8001322 <HAL_PCD_Start+0x1c>
 800131e:	2302      	movs	r3, #2
 8001320:	e020      	b.n	8001364 <HAL_PCD_Start+0x5e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2201      	movs	r2, #1
 8001326:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132e:	2b01      	cmp	r3, #1
 8001330:	d109      	bne.n	8001346 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001336:	2b01      	cmp	r3, #1
 8001338:	d005      	beq.n	8001346 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800133e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f002 ff14 	bl	8004178 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f003 ffe8 	bl	800532a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b08d      	sub	sp, #52	; 0x34
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800137a:	6a3b      	ldr	r3, [r7, #32]
 800137c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f004 f8a6 	bl	80054d4 <USB_GetMode>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	f040 83ca 	bne.w	8001b24 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f004 f80a 	bl	80053ae <USB_ReadInterrupts>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	f000 83c0 	beq.w	8001b22 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f004 f801 	bl	80053ae <USB_ReadInterrupts>
 80013ac:	4603      	mov	r3, r0
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d107      	bne.n	80013c6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	695a      	ldr	r2, [r3, #20]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f002 0202 	and.w	r2, r2, #2
 80013c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f003 ffef 	bl	80053ae <USB_ReadInterrupts>
 80013d0:	4603      	mov	r3, r0
 80013d2:	f003 0310 	and.w	r3, r3, #16
 80013d6:	2b10      	cmp	r3, #16
 80013d8:	d161      	bne.n	800149e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	699a      	ldr	r2, [r3, #24]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 0210 	bic.w	r2, r2, #16
 80013e8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80013ea:	6a3b      	ldr	r3, [r7, #32]
 80013ec:	6a1b      	ldr	r3, [r3, #32]
 80013ee:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	f003 020f 	and.w	r2, r3, #15
 80013f6:	4613      	mov	r3, r2
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	1a9b      	subs	r3, r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	3304      	adds	r3, #4
 8001408:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	0c5b      	lsrs	r3, r3, #17
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	2b02      	cmp	r3, #2
 8001414:	d124      	bne.n	8001460 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800141c:	4013      	ands	r3, r2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d035      	beq.n	800148e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	091b      	lsrs	r3, r3, #4
 800142a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800142c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001430:	b29b      	uxth	r3, r3
 8001432:	461a      	mov	r2, r3
 8001434:	6a38      	ldr	r0, [r7, #32]
 8001436:	f003 fe26 	bl	8005086 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	68da      	ldr	r2, [r3, #12]
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	091b      	lsrs	r3, r3, #4
 8001442:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001446:	441a      	add	r2, r3
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	699a      	ldr	r2, [r3, #24]
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	091b      	lsrs	r3, r3, #4
 8001454:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001458:	441a      	add	r2, r3
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	619a      	str	r2, [r3, #24]
 800145e:	e016      	b.n	800148e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	0c5b      	lsrs	r3, r3, #17
 8001464:	f003 030f 	and.w	r3, r3, #15
 8001468:	2b06      	cmp	r3, #6
 800146a:	d110      	bne.n	800148e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001472:	2208      	movs	r2, #8
 8001474:	4619      	mov	r1, r3
 8001476:	6a38      	ldr	r0, [r7, #32]
 8001478:	f003 fe05 	bl	8005086 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	699a      	ldr	r2, [r3, #24]
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	091b      	lsrs	r3, r3, #4
 8001484:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001488:	441a      	add	r2, r3
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	699a      	ldr	r2, [r3, #24]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f042 0210 	orr.w	r2, r2, #16
 800149c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f003 ff83 	bl	80053ae <USB_ReadInterrupts>
 80014a8:	4603      	mov	r3, r0
 80014aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80014b2:	d16e      	bne.n	8001592 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f003 ff89 	bl	80053d4 <USB_ReadDevAllOutEpInterrupt>
 80014c2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80014c4:	e062      	b.n	800158c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80014c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d057      	beq.n	8001580 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	4611      	mov	r1, r2
 80014da:	4618      	mov	r0, r3
 80014dc:	f003 ffae 	bl	800543c <USB_ReadDevOutEPInterrupt>
 80014e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d00c      	beq.n	8001506 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	015a      	lsls	r2, r3, #5
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	4413      	add	r3, r2
 80014f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014f8:	461a      	mov	r2, r3
 80014fa:	2301      	movs	r3, #1
 80014fc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 fddd 	bl	80020c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	f003 0308 	and.w	r3, r3, #8
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00c      	beq.n	800152a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	015a      	lsls	r2, r3, #5
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	4413      	add	r3, r2
 8001518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800151c:	461a      	mov	r2, r3
 800151e:	2308      	movs	r3, #8
 8001520:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001522:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 fed7 	bl	80022d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	f003 0310 	and.w	r3, r3, #16
 8001530:	2b00      	cmp	r3, #0
 8001532:	d008      	beq.n	8001546 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	015a      	lsls	r2, r3, #5
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	4413      	add	r3, r2
 800153c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001540:	461a      	mov	r2, r3
 8001542:	2310      	movs	r3, #16
 8001544:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	f003 0320 	and.w	r3, r3, #32
 800154c:	2b00      	cmp	r3, #0
 800154e:	d008      	beq.n	8001562 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	015a      	lsls	r2, r3, #5
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	4413      	add	r3, r2
 8001558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800155c:	461a      	mov	r2, r3
 800155e:	2320      	movs	r3, #32
 8001560:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d009      	beq.n	8001580 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	015a      	lsls	r2, r3, #5
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	4413      	add	r3, r2
 8001574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001578:	461a      	mov	r2, r3
 800157a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800157e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	3301      	adds	r3, #1
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001588:	085b      	lsrs	r3, r3, #1
 800158a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800158c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158e:	2b00      	cmp	r3, #0
 8001590:	d199      	bne.n	80014c6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f003 ff09 	bl	80053ae <USB_ReadInterrupts>
 800159c:	4603      	mov	r3, r0
 800159e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80015a6:	f040 80c0 	bne.w	800172a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f003 ff2a 	bl	8005408 <USB_ReadDevAllInEpInterrupt>
 80015b4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80015ba:	e0b2      	b.n	8001722 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80015bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f000 80a7 	beq.w	8001716 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	4611      	mov	r1, r2
 80015d2:	4618      	mov	r0, r3
 80015d4:	f003 ff50 	bl	8005478 <USB_ReadDevInEPInterrupt>
 80015d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d057      	beq.n	8001694 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	2201      	movs	r2, #1
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	69f9      	ldr	r1, [r7, #28]
 8001600:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001604:	4013      	ands	r3, r2
 8001606:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	015a      	lsls	r2, r3, #5
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	4413      	add	r3, r2
 8001610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001614:	461a      	mov	r2, r3
 8001616:	2301      	movs	r3, #1
 8001618:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d132      	bne.n	8001688 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001626:	4613      	mov	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	1a9b      	subs	r3, r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	440b      	add	r3, r1
 8001630:	3348      	adds	r3, #72	; 0x48
 8001632:	6819      	ldr	r1, [r3, #0]
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001638:	4613      	mov	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	1a9b      	subs	r3, r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4403      	add	r3, r0
 8001642:	3344      	adds	r3, #68	; 0x44
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4419      	add	r1, r3
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800164c:	4613      	mov	r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	1a9b      	subs	r3, r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4403      	add	r3, r0
 8001656:	3348      	adds	r3, #72	; 0x48
 8001658:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	2b00      	cmp	r3, #0
 800165e:	d113      	bne.n	8001688 <HAL_PCD_IRQHandler+0x31c>
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001664:	4613      	mov	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	1a9b      	subs	r3, r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	440b      	add	r3, r1
 800166e:	3350      	adds	r3, #80	; 0x50
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d108      	bne.n	8001688 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6818      	ldr	r0, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001680:	461a      	mov	r2, r3
 8001682:	2101      	movs	r1, #1
 8001684:	f003 ff58 	bl	8005538 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	b2db      	uxtb	r3, r3
 800168c:	4619      	mov	r1, r3
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f007 f9d1 	bl	8008a36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d008      	beq.n	80016b0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	015a      	lsls	r2, r3, #5
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	4413      	add	r3, r2
 80016a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016aa:	461a      	mov	r2, r3
 80016ac:	2308      	movs	r3, #8
 80016ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	f003 0310 	and.w	r3, r3, #16
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d008      	beq.n	80016cc <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	015a      	lsls	r2, r3, #5
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	4413      	add	r3, r2
 80016c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016c6:	461a      	mov	r2, r3
 80016c8:	2310      	movs	r3, #16
 80016ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d008      	beq.n	80016e8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	015a      	lsls	r2, r3, #5
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	4413      	add	r3, r2
 80016de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016e2:	461a      	mov	r2, r3
 80016e4:	2340      	movs	r3, #64	; 0x40
 80016e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d008      	beq.n	8001704 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	015a      	lsls	r2, r3, #5
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	4413      	add	r3, r2
 80016fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016fe:	461a      	mov	r2, r3
 8001700:	2302      	movs	r3, #2
 8001702:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800170e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 fc48 	bl	8001fa6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	3301      	adds	r3, #1
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800171c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800171e:	085b      	lsrs	r3, r3, #1
 8001720:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001724:	2b00      	cmp	r3, #0
 8001726:	f47f af49 	bne.w	80015bc <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f003 fe3d 	bl	80053ae <USB_ReadInterrupts>
 8001734:	4603      	mov	r3, r0
 8001736:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800173a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800173e:	d122      	bne.n	8001786 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	69fa      	ldr	r2, [r7, #28]
 800174a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800174e:	f023 0301 	bic.w	r3, r3, #1
 8001752:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800175a:	2b01      	cmp	r3, #1
 800175c:	d108      	bne.n	8001770 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001766:	2100      	movs	r1, #0
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f007 fbb3 	bl	8008ed4 <HAL_PCDEx_LPM_Callback>
 800176e:	e002      	b.n	8001776 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f007 f9d7 	bl	8008b24 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	695a      	ldr	r2, [r3, #20]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001784:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f003 fe0f 	bl	80053ae <USB_ReadInterrupts>
 8001790:	4603      	mov	r3, r0
 8001792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001796:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800179a:	d112      	bne.n	80017c2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d102      	bne.n	80017b2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f007 f993 	bl	8008ad8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	695a      	ldr	r2, [r3, #20]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80017c0:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f003 fdf1 	bl	80053ae <USB_ReadInterrupts>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80017d6:	d121      	bne.n	800181c <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	695a      	ldr	r2, [r3, #20]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80017e6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d111      	bne.n	8001816 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001800:	089b      	lsrs	r3, r3, #2
 8001802:	f003 020f 	and.w	r2, r3, #15
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800180c:	2101      	movs	r1, #1
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f007 fb60 	bl	8008ed4 <HAL_PCDEx_LPM_Callback>
 8001814:	e002      	b.n	800181c <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f007 f95e 	bl	8008ad8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f003 fdc4 	bl	80053ae <USB_ReadInterrupts>
 8001826:	4603      	mov	r3, r0
 8001828:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800182c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001830:	f040 80c7 	bne.w	80019c2 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	69fa      	ldr	r2, [r7, #28]
 800183e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001842:	f023 0301 	bic.w	r3, r3, #1
 8001846:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2110      	movs	r1, #16
 800184e:	4618      	mov	r0, r3
 8001850:	f002 fe5e 	bl	8004510 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001854:	2300      	movs	r3, #0
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001858:	e056      	b.n	8001908 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800185a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185c:	015a      	lsls	r2, r3, #5
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	4413      	add	r3, r2
 8001862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001866:	461a      	mov	r2, r3
 8001868:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800186c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800186e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001870:	015a      	lsls	r2, r3, #5
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	4413      	add	r3, r2
 8001876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800187e:	0151      	lsls	r1, r2, #5
 8001880:	69fa      	ldr	r2, [r7, #28]
 8001882:	440a      	add	r2, r1
 8001884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001888:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800188c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800188e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001890:	015a      	lsls	r2, r3, #5
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	4413      	add	r3, r2
 8001896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800189e:	0151      	lsls	r1, r2, #5
 80018a0:	69fa      	ldr	r2, [r7, #28]
 80018a2:	440a      	add	r2, r1
 80018a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80018a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80018ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b0:	015a      	lsls	r2, r3, #5
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	4413      	add	r3, r2
 80018b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018ba:	461a      	mov	r2, r3
 80018bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018c0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80018c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c4:	015a      	lsls	r2, r3, #5
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	4413      	add	r3, r2
 80018ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018d2:	0151      	lsls	r1, r2, #5
 80018d4:	69fa      	ldr	r2, [r7, #28]
 80018d6:	440a      	add	r2, r1
 80018d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80018e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e4:	015a      	lsls	r2, r3, #5
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	4413      	add	r3, r2
 80018ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018f2:	0151      	lsls	r1, r2, #5
 80018f4:	69fa      	ldr	r2, [r7, #28]
 80018f6:	440a      	add	r2, r1
 80018f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001900:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001904:	3301      	adds	r3, #1
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800190e:	429a      	cmp	r2, r3
 8001910:	d3a3      	bcc.n	800185a <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	69fa      	ldr	r2, [r7, #28]
 800191c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001920:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001924:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	2b00      	cmp	r3, #0
 800192c:	d016      	beq.n	800195c <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001934:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001938:	69fa      	ldr	r2, [r7, #28]
 800193a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800193e:	f043 030b 	orr.w	r3, r3, #11
 8001942:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001954:	f043 030b 	orr.w	r3, r3, #11
 8001958:	6453      	str	r3, [r2, #68]	; 0x44
 800195a:	e015      	b.n	8001988 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	69fa      	ldr	r2, [r7, #28]
 8001966:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800196a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800196e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001972:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	69fa      	ldr	r2, [r7, #28]
 800197e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001982:	f043 030b 	orr.w	r3, r3, #11
 8001986:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	69fa      	ldr	r2, [r7, #28]
 8001992:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001996:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800199a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6818      	ldr	r0, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019ac:	461a      	mov	r2, r3
 80019ae:	f003 fdc3 	bl	8005538 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	695a      	ldr	r2, [r3, #20]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80019c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f003 fcf1 	bl	80053ae <USB_ReadInterrupts>
 80019cc:	4603      	mov	r3, r0
 80019ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019d6:	d124      	bne.n	8001a22 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f003 fd87 	bl	80054f0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f002 fdef 	bl	80045ca <USB_GetDevSpeed>
 80019ec:	4603      	mov	r3, r0
 80019ee:	461a      	mov	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681c      	ldr	r4, [r3, #0]
 80019f8:	f000 fe16 	bl	8002628 <HAL_RCC_GetHCLKFreq>
 80019fc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	461a      	mov	r2, r3
 8001a06:	4620      	mov	r0, r4
 8001a08:	f002 fb14 	bl	8004034 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f007 f83a 	bl	8008a86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	695a      	ldr	r2, [r3, #20]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001a20:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f003 fcc1 	bl	80053ae <USB_ReadInterrupts>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	2b08      	cmp	r3, #8
 8001a34:	d10a      	bne.n	8001a4c <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f007 f817 	bl	8008a6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	695a      	ldr	r2, [r3, #20]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f002 0208 	and.w	r2, r2, #8
 8001a4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f003 fcac 	bl	80053ae <USB_ReadInterrupts>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a60:	d10f      	bne.n	8001a82 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f007 f879 	bl	8008b64 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	695a      	ldr	r2, [r3, #20]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001a80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f003 fc91 	bl	80053ae <USB_ReadInterrupts>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a96:	d10f      	bne.n	8001ab8 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f007 f84c 	bl	8008b40 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	695a      	ldr	r2, [r3, #20]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001ab6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f003 fc76 	bl	80053ae <USB_ReadInterrupts>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001acc:	d10a      	bne.n	8001ae4 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f007 f85a 	bl	8008b88 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	695a      	ldr	r2, [r3, #20]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001ae2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f003 fc60 	bl	80053ae <USB_ReadInterrupts>
 8001aee:	4603      	mov	r3, r0
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b04      	cmp	r3, #4
 8001af6:	d115      	bne.n	8001b24 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f007 f84a 	bl	8008ba4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6859      	ldr	r1, [r3, #4]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	e000      	b.n	8001b24 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8001b22:	bf00      	nop
    }
  }
}
 8001b24:	3734      	adds	r7, #52	; 0x34
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd90      	pop	{r4, r7, pc}

08001b2a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	460b      	mov	r3, r1
 8001b34:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d101      	bne.n	8001b44 <HAL_PCD_SetAddress+0x1a>
 8001b40:	2302      	movs	r3, #2
 8001b42:	e013      	b.n	8001b6c <HAL_PCD_SetAddress+0x42>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	78fa      	ldrb	r2, [r7, #3]
 8001b50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	78fa      	ldrb	r2, [r7, #3]
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f003 fbbe 	bl	80052de <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	4608      	mov	r0, r1
 8001b7e:	4611      	mov	r1, r2
 8001b80:	461a      	mov	r2, r3
 8001b82:	4603      	mov	r3, r0
 8001b84:	70fb      	strb	r3, [r7, #3]
 8001b86:	460b      	mov	r3, r1
 8001b88:	803b      	strh	r3, [r7, #0]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	da0f      	bge.n	8001bba <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	f003 020f 	and.w	r2, r3, #15
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	1a9b      	subs	r3, r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	3338      	adds	r3, #56	; 0x38
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	3304      	adds	r3, #4
 8001bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	705a      	strb	r2, [r3, #1]
 8001bb8:	e00f      	b.n	8001bda <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	f003 020f 	and.w	r2, r3, #15
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	1a9b      	subs	r3, r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	4413      	add	r3, r2
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001bda:	78fb      	ldrb	r3, [r7, #3]
 8001bdc:	f003 030f 	and.w	r3, r3, #15
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001be6:	883a      	ldrh	r2, [r7, #0]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	78ba      	ldrb	r2, [r7, #2]
 8001bf0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	785b      	ldrb	r3, [r3, #1]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d004      	beq.n	8001c04 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c04:	78bb      	ldrb	r3, [r7, #2]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d102      	bne.n	8001c10 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d101      	bne.n	8001c1e <HAL_PCD_EP_Open+0xaa>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e00e      	b.n	8001c3c <HAL_PCD_EP_Open+0xc8>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68f9      	ldr	r1, [r7, #12]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f002 fcf1 	bl	8004614 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001c3a:	7afb      	ldrb	r3, [r7, #11]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	da0f      	bge.n	8001c78 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	f003 020f 	and.w	r2, r3, #15
 8001c5e:	4613      	mov	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	1a9b      	subs	r3, r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	3338      	adds	r3, #56	; 0x38
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2201      	movs	r2, #1
 8001c74:	705a      	strb	r2, [r3, #1]
 8001c76:	e00f      	b.n	8001c98 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	f003 020f 	and.w	r2, r3, #15
 8001c7e:	4613      	mov	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	1a9b      	subs	r3, r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3304      	adds	r3, #4
 8001c90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c98:	78fb      	ldrb	r3, [r7, #3]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <HAL_PCD_EP_Close+0x6e>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e00e      	b.n	8001cd0 <HAL_PCD_EP_Close+0x8c>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68f9      	ldr	r1, [r7, #12]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f002 fd2f 	bl	8004724 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	607a      	str	r2, [r7, #4]
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ce8:	7afb      	ldrb	r3, [r7, #11]
 8001cea:	f003 020f 	and.w	r2, r3, #15
 8001cee:	4613      	mov	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	1a9b      	subs	r3, r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3304      	adds	r3, #4
 8001d00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	2200      	movs	r2, #0
 8001d12:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	2200      	movs	r2, #0
 8001d18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d1a:	7afb      	ldrb	r3, [r7, #11]
 8001d1c:	f003 030f 	and.w	r3, r3, #15
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d102      	bne.n	8001d34 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d34:	7afb      	ldrb	r3, [r7, #11]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d109      	bne.n	8001d52 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6818      	ldr	r0, [r3, #0]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	461a      	mov	r2, r3
 8001d4a:	6979      	ldr	r1, [r7, #20]
 8001d4c:	f003 f80a 	bl	8004d64 <USB_EP0StartXfer>
 8001d50:	e008      	b.n	8001d64 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6818      	ldr	r0, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	6979      	ldr	r1, [r7, #20]
 8001d60:	f002 fdbc 	bl	80048dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	460b      	mov	r3, r1
 8001d78:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d7a:	78fb      	ldrb	r3, [r7, #3]
 8001d7c:	f003 020f 	and.w	r2, r3, #15
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	1a9b      	subs	r3, r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001d90:	681b      	ldr	r3, [r3, #0]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b086      	sub	sp, #24
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	60f8      	str	r0, [r7, #12]
 8001da6:	607a      	str	r2, [r7, #4]
 8001da8:	603b      	str	r3, [r7, #0]
 8001daa:	460b      	mov	r3, r1
 8001dac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dae:	7afb      	ldrb	r3, [r7, #11]
 8001db0:	f003 020f 	and.w	r2, r3, #15
 8001db4:	4613      	mov	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	1a9b      	subs	r3, r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	3338      	adds	r3, #56	; 0x38
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dde:	7afb      	ldrb	r3, [r7, #11]
 8001de0:	f003 030f 	and.w	r3, r3, #15
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d102      	bne.n	8001df8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001df8:	7afb      	ldrb	r3, [r7, #11]
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d109      	bne.n	8001e16 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	6979      	ldr	r1, [r7, #20]
 8001e10:	f002 ffa8 	bl	8004d64 <USB_EP0StartXfer>
 8001e14:	e008      	b.n	8001e28 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	461a      	mov	r2, r3
 8001e22:	6979      	ldr	r1, [r7, #20]
 8001e24:	f002 fd5a 	bl	80048dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b084      	sub	sp, #16
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e3e:	78fb      	ldrb	r3, [r7, #3]
 8001e40:	f003 020f 	and.w	r2, r3, #15
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d901      	bls.n	8001e50 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e050      	b.n	8001ef2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	da0f      	bge.n	8001e78 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	f003 020f 	and.w	r2, r3, #15
 8001e5e:	4613      	mov	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	3338      	adds	r3, #56	; 0x38
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2201      	movs	r2, #1
 8001e74:	705a      	strb	r2, [r3, #1]
 8001e76:	e00d      	b.n	8001e94 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e78:	78fa      	ldrb	r2, [r7, #3]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	1a9b      	subs	r3, r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2201      	movs	r2, #1
 8001e98:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e9a:	78fb      	ldrb	r3, [r7, #3]
 8001e9c:	f003 030f 	and.w	r3, r3, #15
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_PCD_EP_SetStall+0x82>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e01e      	b.n	8001ef2 <HAL_PCD_EP_SetStall+0xc0>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68f9      	ldr	r1, [r7, #12]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f003 f937 	bl	8005136 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10a      	bne.n	8001ee8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6818      	ldr	r0, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	b2d9      	uxtb	r1, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	f003 fb28 	bl	8005538 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b084      	sub	sp, #16
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	460b      	mov	r3, r1
 8001f04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	f003 020f 	and.w	r2, r3, #15
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d901      	bls.n	8001f18 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e042      	b.n	8001f9e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	da0f      	bge.n	8001f40 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	f003 020f 	and.w	r2, r3, #15
 8001f26:	4613      	mov	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	1a9b      	subs	r3, r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	3338      	adds	r3, #56	; 0x38
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	4413      	add	r3, r2
 8001f34:	3304      	adds	r3, #4
 8001f36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	705a      	strb	r2, [r3, #1]
 8001f3e:	e00f      	b.n	8001f60 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	f003 020f 	and.w	r2, r3, #15
 8001f46:	4613      	mov	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	1a9b      	subs	r3, r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	3304      	adds	r3, #4
 8001f58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	f003 030f 	and.w	r3, r3, #15
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d101      	bne.n	8001f80 <HAL_PCD_EP_ClrStall+0x86>
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	e00e      	b.n	8001f9e <HAL_PCD_EP_ClrStall+0xa4>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68f9      	ldr	r1, [r7, #12]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f003 f93f 	bl	8005212 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b08a      	sub	sp, #40	; 0x28
 8001faa:	af02      	add	r7, sp, #8
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	1a9b      	subs	r3, r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	3338      	adds	r3, #56	; 0x38
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	3304      	adds	r3, #4
 8001fcc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	699a      	ldr	r2, [r3, #24]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d901      	bls.n	8001fde <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e06c      	b.n	80020b8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	695a      	ldr	r2, [r3, #20]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	69fa      	ldr	r2, [r7, #28]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d902      	bls.n	8001ffa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3303      	adds	r3, #3
 8001ffe:	089b      	lsrs	r3, r3, #2
 8002000:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002002:	e02b      	b.n	800205c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	695a      	ldr	r2, [r3, #20]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	69fa      	ldr	r2, [r7, #28]
 8002016:	429a      	cmp	r2, r3
 8002018:	d902      	bls.n	8002020 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	3303      	adds	r3, #3
 8002024:	089b      	lsrs	r3, r3, #2
 8002026:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	68d9      	ldr	r1, [r3, #12]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	b2da      	uxtb	r2, r3
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002038:	b2db      	uxtb	r3, r3
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	4603      	mov	r3, r0
 800203e:	6978      	ldr	r0, [r7, #20]
 8002040:	f002 ffe3 	bl	800500a <USB_WritePacket>

    ep->xfer_buff  += len;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	441a      	add	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	699a      	ldr	r2, [r3, #24]
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	441a      	add	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	015a      	lsls	r2, r3, #5
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	4413      	add	r3, r2
 8002064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	b29b      	uxth	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	429a      	cmp	r2, r3
 8002070:	d809      	bhi.n	8002086 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	699a      	ldr	r2, [r3, #24]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800207a:	429a      	cmp	r2, r3
 800207c:	d203      	bcs.n	8002086 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1be      	bne.n	8002004 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	695a      	ldr	r2, [r3, #20]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	429a      	cmp	r2, r3
 8002090:	d811      	bhi.n	80020b6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	f003 030f 	and.w	r3, r3, #15
 8002098:	2201      	movs	r2, #1
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	6939      	ldr	r1, [r7, #16]
 80020ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020b2:	4013      	ands	r3, r2
 80020b4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3720      	adds	r7, #32
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	333c      	adds	r3, #60	; 0x3c
 80020d8:	3304      	adds	r3, #4
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	015a      	lsls	r2, r3, #5
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4413      	add	r3, r2
 80020e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	f040 80a0 	bne.w	8002238 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d015      	beq.n	800212e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4a72      	ldr	r2, [pc, #456]	; (80022d0 <PCD_EP_OutXfrComplete_int+0x210>)
 8002106:	4293      	cmp	r3, r2
 8002108:	f240 80dd 	bls.w	80022c6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 80d7 	beq.w	80022c6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	015a      	lsls	r2, r3, #5
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4413      	add	r3, r2
 8002120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002124:	461a      	mov	r2, r3
 8002126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800212a:	6093      	str	r3, [r2, #8]
 800212c:	e0cb      	b.n	80022c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	f003 0320 	and.w	r3, r3, #32
 8002134:	2b00      	cmp	r3, #0
 8002136:	d009      	beq.n	800214c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	015a      	lsls	r2, r3, #5
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4413      	add	r3, r2
 8002140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002144:	461a      	mov	r2, r3
 8002146:	2320      	movs	r3, #32
 8002148:	6093      	str	r3, [r2, #8]
 800214a:	e0bc      	b.n	80022c6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002152:	2b00      	cmp	r3, #0
 8002154:	f040 80b7 	bne.w	80022c6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4a5d      	ldr	r2, [pc, #372]	; (80022d0 <PCD_EP_OutXfrComplete_int+0x210>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d90f      	bls.n	8002180 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00a      	beq.n	8002180 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	015a      	lsls	r2, r3, #5
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4413      	add	r3, r2
 8002172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002176:	461a      	mov	r2, r3
 8002178:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800217c:	6093      	str	r3, [r2, #8]
 800217e:	e0a2      	b.n	80022c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	4613      	mov	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	1a9b      	subs	r3, r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002192:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	0159      	lsls	r1, r3, #5
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	440b      	add	r3, r1
 800219c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80021a6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	4613      	mov	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	1a9b      	subs	r3, r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4403      	add	r3, r0
 80021b6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80021ba:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	4613      	mov	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	1a9b      	subs	r3, r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021ce:	6819      	ldr	r1, [r3, #0]
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	4613      	mov	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	1a9b      	subs	r3, r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4403      	add	r3, r0
 80021de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4419      	add	r1, r3
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	4613      	mov	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	1a9b      	subs	r3, r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4403      	add	r3, r0
 80021f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021f8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d114      	bne.n	800222a <PCD_EP_OutXfrComplete_int+0x16a>
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	4613      	mov	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	1a9b      	subs	r3, r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d108      	bne.n	800222a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6818      	ldr	r0, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002222:	461a      	mov	r2, r3
 8002224:	2101      	movs	r1, #1
 8002226:	f003 f987 	bl	8005538 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	b2db      	uxtb	r3, r3
 800222e:	4619      	mov	r1, r3
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f006 fbe5 	bl	8008a00 <HAL_PCD_DataOutStageCallback>
 8002236:	e046      	b.n	80022c6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4a26      	ldr	r2, [pc, #152]	; (80022d4 <PCD_EP_OutXfrComplete_int+0x214>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d124      	bne.n	800228a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00a      	beq.n	8002260 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	015a      	lsls	r2, r3, #5
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4413      	add	r3, r2
 8002252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002256:	461a      	mov	r2, r3
 8002258:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800225c:	6093      	str	r3, [r2, #8]
 800225e:	e032      	b.n	80022c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f003 0320 	and.w	r3, r3, #32
 8002266:	2b00      	cmp	r3, #0
 8002268:	d008      	beq.n	800227c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4413      	add	r3, r2
 8002272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002276:	461a      	mov	r2, r3
 8002278:	2320      	movs	r3, #32
 800227a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	b2db      	uxtb	r3, r3
 8002280:	4619      	mov	r1, r3
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f006 fbbc 	bl	8008a00 <HAL_PCD_DataOutStageCallback>
 8002288:	e01d      	b.n	80022c6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d114      	bne.n	80022ba <PCD_EP_OutXfrComplete_int+0x1fa>
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	4613      	mov	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	1a9b      	subs	r3, r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d108      	bne.n	80022ba <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6818      	ldr	r0, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022b2:	461a      	mov	r2, r3
 80022b4:	2100      	movs	r1, #0
 80022b6:	f003 f93f 	bl	8005538 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	4619      	mov	r1, r3
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f006 fb9d 	bl	8008a00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	4f54300a 	.word	0x4f54300a
 80022d4:	4f54310a 	.word	0x4f54310a

080022d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	333c      	adds	r3, #60	; 0x3c
 80022f0:	3304      	adds	r3, #4
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4a15      	ldr	r2, [pc, #84]	; (8002360 <PCD_EP_OutSetupPacket_int+0x88>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d90e      	bls.n	800232c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002314:	2b00      	cmp	r3, #0
 8002316:	d009      	beq.n	800232c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4413      	add	r3, r2
 8002320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002324:	461a      	mov	r2, r3
 8002326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800232a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f006 fb55 	bl	80089dc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <PCD_EP_OutSetupPacket_int+0x88>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d90c      	bls.n	8002354 <PCD_EP_OutSetupPacket_int+0x7c>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d108      	bne.n	8002354 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6818      	ldr	r0, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800234c:	461a      	mov	r2, r3
 800234e:	2101      	movs	r1, #1
 8002350:	f003 f8f2 	bl	8005538 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	4f54300a 	.word	0x4f54300a

08002364 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	70fb      	strb	r3, [r7, #3]
 8002370:	4613      	mov	r3, r2
 8002372:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800237c:	78fb      	ldrb	r3, [r7, #3]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d107      	bne.n	8002392 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002382:	883b      	ldrh	r3, [r7, #0]
 8002384:	0419      	lsls	r1, r3, #16
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	430a      	orrs	r2, r1
 800238e:	629a      	str	r2, [r3, #40]	; 0x28
 8002390:	e028      	b.n	80023e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	0c1b      	lsrs	r3, r3, #16
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	4413      	add	r3, r2
 800239e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023a0:	2300      	movs	r3, #0
 80023a2:	73fb      	strb	r3, [r7, #15]
 80023a4:	e00d      	b.n	80023c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	3340      	adds	r3, #64	; 0x40
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	0c1b      	lsrs	r3, r3, #16
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	4413      	add	r3, r2
 80023ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	3301      	adds	r3, #1
 80023c0:	73fb      	strb	r3, [r7, #15]
 80023c2:	7bfa      	ldrb	r2, [r7, #15]
 80023c4:	78fb      	ldrb	r3, [r7, #3]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d3ec      	bcc.n	80023a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023cc:	883b      	ldrh	r3, [r7, #0]
 80023ce:	0418      	lsls	r0, r3, #16
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6819      	ldr	r1, [r3, #0]
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	4302      	orrs	r2, r0
 80023dc:	3340      	adds	r3, #64	; 0x40
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	460b      	mov	r3, r1
 80023fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	887a      	ldrh	r2, [r7, #2]
 8002404:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002446:	f043 0303 	orr.w	r3, r3, #3
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e0cc      	b.n	800260a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002470:	4b68      	ldr	r3, [pc, #416]	; (8002614 <HAL_RCC_ClockConfig+0x1b8>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 030f 	and.w	r3, r3, #15
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d90c      	bls.n	8002498 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247e:	4b65      	ldr	r3, [pc, #404]	; (8002614 <HAL_RCC_ClockConfig+0x1b8>)
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002486:	4b63      	ldr	r3, [pc, #396]	; (8002614 <HAL_RCC_ClockConfig+0x1b8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d001      	beq.n	8002498 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0b8      	b.n	800260a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d020      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d005      	beq.n	80024bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024b0:	4b59      	ldr	r3, [pc, #356]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	4a58      	ldr	r2, [pc, #352]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024c8:	4b53      	ldr	r3, [pc, #332]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	4a52      	ldr	r2, [pc, #328]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d4:	4b50      	ldr	r3, [pc, #320]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	494d      	ldr	r1, [pc, #308]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d044      	beq.n	800257c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d107      	bne.n	800250a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fa:	4b47      	ldr	r3, [pc, #284]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d119      	bne.n	800253a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e07f      	b.n	800260a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d003      	beq.n	800251a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002516:	2b03      	cmp	r3, #3
 8002518:	d107      	bne.n	800252a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251a:	4b3f      	ldr	r3, [pc, #252]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d109      	bne.n	800253a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e06f      	b.n	800260a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252a:	4b3b      	ldr	r3, [pc, #236]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e067      	b.n	800260a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800253a:	4b37      	ldr	r3, [pc, #220]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f023 0203 	bic.w	r2, r3, #3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	4934      	ldr	r1, [pc, #208]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 8002548:	4313      	orrs	r3, r2
 800254a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800254c:	f7fe faf8 	bl	8000b40 <HAL_GetTick>
 8002550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002552:	e00a      	b.n	800256a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002554:	f7fe faf4 	bl	8000b40 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e04f      	b.n	800260a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256a:	4b2b      	ldr	r3, [pc, #172]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 020c 	and.w	r2, r3, #12
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	429a      	cmp	r2, r3
 800257a:	d1eb      	bne.n	8002554 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800257c:	4b25      	ldr	r3, [pc, #148]	; (8002614 <HAL_RCC_ClockConfig+0x1b8>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 030f 	and.w	r3, r3, #15
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d20c      	bcs.n	80025a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258a:	4b22      	ldr	r3, [pc, #136]	; (8002614 <HAL_RCC_ClockConfig+0x1b8>)
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002592:	4b20      	ldr	r3, [pc, #128]	; (8002614 <HAL_RCC_ClockConfig+0x1b8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e032      	b.n	800260a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b0:	4b19      	ldr	r3, [pc, #100]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4916      	ldr	r1, [pc, #88]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d009      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025ce:	4b12      	ldr	r3, [pc, #72]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	490e      	ldr	r1, [pc, #56]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025e2:	f000 fbb1 	bl	8002d48 <HAL_RCC_GetSysClockFreq>
 80025e6:	4602      	mov	r2, r0
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	091b      	lsrs	r3, r3, #4
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	490a      	ldr	r1, [pc, #40]	; (800261c <HAL_RCC_ClockConfig+0x1c0>)
 80025f4:	5ccb      	ldrb	r3, [r1, r3]
 80025f6:	fa22 f303 	lsr.w	r3, r2, r3
 80025fa:	4a09      	ldr	r2, [pc, #36]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80025fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025fe:	4b09      	ldr	r3, [pc, #36]	; (8002624 <HAL_RCC_ClockConfig+0x1c8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7fe f934 	bl	8000870 <HAL_InitTick>

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40023c00 	.word	0x40023c00
 8002618:	40023800 	.word	0x40023800
 800261c:	08009270 	.word	0x08009270
 8002620:	20000000 	.word	0x20000000
 8002624:	20000004 	.word	0x20000004

08002628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800262c:	4b03      	ldr	r3, [pc, #12]	; (800263c <HAL_RCC_GetHCLKFreq+0x14>)
 800262e:	681b      	ldr	r3, [r3, #0]
}
 8002630:	4618      	mov	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	20000000 	.word	0x20000000

08002640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002644:	f7ff fff0 	bl	8002628 <HAL_RCC_GetHCLKFreq>
 8002648:	4602      	mov	r2, r0
 800264a:	4b05      	ldr	r3, [pc, #20]	; (8002660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	0a9b      	lsrs	r3, r3, #10
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	4903      	ldr	r1, [pc, #12]	; (8002664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002656:	5ccb      	ldrb	r3, [r1, r3]
 8002658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800265c:	4618      	mov	r0, r3
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40023800 	.word	0x40023800
 8002664:	08009280 	.word	0x08009280

08002668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800266c:	f7ff ffdc 	bl	8002628 <HAL_RCC_GetHCLKFreq>
 8002670:	4602      	mov	r2, r0
 8002672:	4b05      	ldr	r3, [pc, #20]	; (8002688 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	0b5b      	lsrs	r3, r3, #13
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	4903      	ldr	r1, [pc, #12]	; (800268c <HAL_RCC_GetPCLK2Freq+0x24>)
 800267e:	5ccb      	ldrb	r3, [r1, r3]
 8002680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002684:	4618      	mov	r0, r3
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40023800 	.word	0x40023800
 800268c:	08009280 	.word	0x08009280

08002690 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	220f      	movs	r2, #15
 800269e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80026a0:	4b12      	ldr	r3, [pc, #72]	; (80026ec <HAL_RCC_GetClockConfig+0x5c>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 0203 	and.w	r2, r3, #3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80026ac:	4b0f      	ldr	r3, [pc, #60]	; (80026ec <HAL_RCC_GetClockConfig+0x5c>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80026b8:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <HAL_RCC_GetClockConfig+0x5c>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80026c4:	4b09      	ldr	r3, [pc, #36]	; (80026ec <HAL_RCC_GetClockConfig+0x5c>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	08db      	lsrs	r3, r3, #3
 80026ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80026d2:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <HAL_RCC_GetClockConfig+0x60>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 020f 	and.w	r2, r3, #15
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	601a      	str	r2, [r3, #0]
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40023800 	.word	0x40023800
 80026f0:	40023c00 	.word	0x40023c00

080026f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08c      	sub	sp, #48	; 0x30
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002700:	2300      	movs	r3, #0
 8002702:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002708:	2300      	movs	r3, #0
 800270a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800271c:	2300      	movs	r3, #0
 800271e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d010      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800272c:	4b6f      	ldr	r3, [pc, #444]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800272e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002732:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273a:	496c      	ldr	r1, [pc, #432]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800274a:	2301      	movs	r3, #1
 800274c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d010      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800275a:	4b64      	ldr	r3, [pc, #400]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800275c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002760:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002768:	4960      	ldr	r1, [pc, #384]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800276a:	4313      	orrs	r3, r2
 800276c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002778:	2301      	movs	r3, #1
 800277a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d017      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002788:	4b58      	ldr	r3, [pc, #352]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800278a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800278e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	4955      	ldr	r1, [pc, #340]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002798:	4313      	orrs	r3, r2
 800279a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027a6:	d101      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80027a8:	2301      	movs	r3, #1
 80027aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80027b4:	2301      	movs	r3, #1
 80027b6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0308 	and.w	r3, r3, #8
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d017      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027c4:	4b49      	ldr	r3, [pc, #292]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d2:	4946      	ldr	r1, [pc, #280]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027e2:	d101      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80027e4:	2301      	movs	r3, #1
 80027e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80027f0:	2301      	movs	r3, #1
 80027f2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0320 	and.w	r3, r3, #32
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 808a 	beq.w	8002916 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	4b39      	ldr	r3, [pc, #228]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	4a38      	ldr	r2, [pc, #224]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800280c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002810:	6413      	str	r3, [r2, #64]	; 0x40
 8002812:	4b36      	ldr	r3, [pc, #216]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281a:	60bb      	str	r3, [r7, #8]
 800281c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800281e:	4b34      	ldr	r3, [pc, #208]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a33      	ldr	r2, [pc, #204]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002828:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800282a:	f7fe f989 	bl	8000b40 <HAL_GetTick>
 800282e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002830:	e008      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002832:	f7fe f985 	bl	8000b40 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e278      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002844:	4b2a      	ldr	r3, [pc, #168]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0f0      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002850:	4b26      	ldr	r3, [pc, #152]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002854:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002858:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d02f      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002868:	6a3a      	ldr	r2, [r7, #32]
 800286a:	429a      	cmp	r2, r3
 800286c:	d028      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800286e:	4b1f      	ldr	r3, [pc, #124]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002876:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002878:	4b1e      	ldr	r3, [pc, #120]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800287a:	2201      	movs	r2, #1
 800287c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800287e:	4b1d      	ldr	r3, [pc, #116]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002884:	4a19      	ldr	r2, [pc, #100]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800288a:	4b18      	ldr	r3, [pc, #96]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800288c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b01      	cmp	r3, #1
 8002894:	d114      	bne.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002896:	f7fe f953 	bl	8000b40 <HAL_GetTick>
 800289a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289c:	e00a      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800289e:	f7fe f94f 	bl	8000b40 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e240      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b4:	4b0d      	ldr	r3, [pc, #52]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0ee      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028cc:	d114      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80028ce:	4b07      	ldr	r3, [pc, #28]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80028de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028e2:	4902      	ldr	r1, [pc, #8]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	608b      	str	r3, [r1, #8]
 80028e8:	e00c      	b.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80028ea:	bf00      	nop
 80028ec:	40023800 	.word	0x40023800
 80028f0:	40007000 	.word	0x40007000
 80028f4:	42470e40 	.word	0x42470e40
 80028f8:	4b4a      	ldr	r3, [pc, #296]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	4a49      	ldr	r2, [pc, #292]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028fe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002902:	6093      	str	r3, [r2, #8]
 8002904:	4b47      	ldr	r3, [pc, #284]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002906:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002910:	4944      	ldr	r1, [pc, #272]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002912:	4313      	orrs	r3, r2
 8002914:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0310 	and.w	r3, r3, #16
 800291e:	2b00      	cmp	r3, #0
 8002920:	d004      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002928:	4b3f      	ldr	r3, [pc, #252]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800292a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00a      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002938:	4b3a      	ldr	r3, [pc, #232]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800293a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800293e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002946:	4937      	ldr	r1, [pc, #220]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002948:	4313      	orrs	r3, r2
 800294a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00a      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800295a:	4b32      	ldr	r3, [pc, #200]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800295c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002960:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002968:	492e      	ldr	r1, [pc, #184]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800296a:	4313      	orrs	r3, r2
 800296c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002978:	2b00      	cmp	r3, #0
 800297a:	d011      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800297c:	4b29      	ldr	r3, [pc, #164]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800297e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002982:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298a:	4926      	ldr	r1, [pc, #152]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800298c:	4313      	orrs	r3, r2
 800298e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002996:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800299a:	d101      	bne.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800299c:	2301      	movs	r3, #1
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80029ac:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	491a      	ldr	r1, [pc, #104]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d011      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80029ce:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029d4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029dc:	4911      	ldr	r1, [pc, #68]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029ec:	d101      	bne.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80029ee:	2301      	movs	r3, #1
 80029f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80029f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d005      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a00:	f040 80ff 	bne.w	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a04:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a0a:	f7fe f899 	bl	8000b40 <HAL_GetTick>
 8002a0e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a10:	e00e      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a12:	f7fe f895 	bl	8000b40 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d907      	bls.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e188      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002a24:	40023800 	.word	0x40023800
 8002a28:	424711e0 	.word	0x424711e0
 8002a2c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a30:	4b7e      	ldr	r3, [pc, #504]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1ea      	bne.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d009      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d028      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d124      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002a64:	4b71      	ldr	r3, [pc, #452]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a6a:	0c1b      	lsrs	r3, r3, #16
 8002a6c:	f003 0303 	and.w	r3, r3, #3
 8002a70:	3301      	adds	r3, #1
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a76:	4b6d      	ldr	r3, [pc, #436]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a7c:	0e1b      	lsrs	r3, r3, #24
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	019b      	lsls	r3, r3, #6
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	085b      	lsrs	r3, r3, #1
 8002a94:	3b01      	subs	r3, #1
 8002a96:	041b      	lsls	r3, r3, #16
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	061b      	lsls	r3, r3, #24
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	071b      	lsls	r3, r3, #28
 8002aa6:	4961      	ldr	r1, [pc, #388]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0304 	and.w	r3, r3, #4
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d004      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ac2:	d00a      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d035      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ad8:	d130      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002ada:	4b54      	ldr	r3, [pc, #336]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ae0:	0c1b      	lsrs	r3, r3, #16
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002aec:	4b4f      	ldr	r3, [pc, #316]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002af2:	0f1b      	lsrs	r3, r3, #28
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	019b      	lsls	r3, r3, #6
 8002b04:	431a      	orrs	r2, r3
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	085b      	lsrs	r3, r3, #1
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	041b      	lsls	r3, r3, #16
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	061b      	lsls	r3, r3, #24
 8002b16:	431a      	orrs	r2, r3
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	071b      	lsls	r3, r3, #28
 8002b1c:	4943      	ldr	r1, [pc, #268]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b24:	4b41      	ldr	r3, [pc, #260]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b2a:	f023 021f 	bic.w	r2, r3, #31
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b32:	3b01      	subs	r3, #1
 8002b34:	493d      	ldr	r1, [pc, #244]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d029      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b50:	d124      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002b52:	4b36      	ldr	r3, [pc, #216]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b58:	0c1b      	lsrs	r3, r3, #16
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	3301      	adds	r3, #1
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b64:	4b31      	ldr	r3, [pc, #196]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b6a:	0f1b      	lsrs	r3, r3, #28
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	019b      	lsls	r3, r3, #6
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	085b      	lsrs	r3, r3, #1
 8002b84:	3b01      	subs	r3, #1
 8002b86:	041b      	lsls	r3, r3, #16
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	061b      	lsls	r3, r3, #24
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	071b      	lsls	r3, r3, #28
 8002b94:	4925      	ldr	r1, [pc, #148]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d016      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	019b      	lsls	r3, r3, #6
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	085b      	lsrs	r3, r3, #1
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	041b      	lsls	r3, r3, #16
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	061b      	lsls	r3, r3, #24
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	071b      	lsls	r3, r3, #28
 8002bce:	4917      	ldr	r1, [pc, #92]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002bd6:	4b16      	ldr	r3, [pc, #88]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002bdc:	f7fd ffb0 	bl	8000b40 <HAL_GetTick>
 8002be0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002be4:	f7fd ffac 	bl	8000b40 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e09f      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0f0      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	f040 8095 	bne.w	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c0a:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c10:	f7fd ff96 	bl	8000b40 <HAL_GetTick>
 8002c14:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c16:	e00f      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002c18:	f7fd ff92 	bl	8000b40 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d908      	bls.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e085      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002c2a:	bf00      	nop
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	42470068 	.word	0x42470068
 8002c34:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c38:	4b41      	ldr	r3, [pc, #260]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c44:	d0e8      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d02b      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d127      	bne.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002c6e:	4b34      	ldr	r3, [pc, #208]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c74:	0c1b      	lsrs	r3, r3, #16
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	699a      	ldr	r2, [r3, #24]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	019b      	lsls	r3, r3, #6
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	085b      	lsrs	r3, r3, #1
 8002c90:	3b01      	subs	r3, #1
 8002c92:	041b      	lsls	r3, r3, #16
 8002c94:	431a      	orrs	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	061b      	lsls	r3, r3, #24
 8002c9c:	4928      	ldr	r1, [pc, #160]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002ca4:	4b26      	ldr	r3, [pc, #152]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002caa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	021b      	lsls	r3, r3, #8
 8002cb6:	4922      	ldr	r1, [pc, #136]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d01d      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cd2:	d118      	bne.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002cd4:	4b1a      	ldr	r3, [pc, #104]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cda:	0e1b      	lsrs	r3, r3, #24
 8002cdc:	f003 030f 	and.w	r3, r3, #15
 8002ce0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699a      	ldr	r2, [r3, #24]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	019b      	lsls	r3, r3, #6
 8002cec:	431a      	orrs	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	085b      	lsrs	r3, r3, #1
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	041b      	lsls	r3, r3, #16
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	061b      	lsls	r3, r3, #24
 8002cfe:	4910      	ldr	r1, [pc, #64]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002d06:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002d08:	2201      	movs	r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d0c:	f7fd ff18 	bl	8000b40 <HAL_GetTick>
 8002d10:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002d14:	f7fd ff14 	bl	8000b40 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e007      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d26:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d32:	d1ef      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3730      	adds	r7, #48	; 0x30
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40023800 	.word	0x40023800
 8002d44:	42470070 	.word	0x42470070

08002d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d4c:	b088      	sub	sp, #32
 8002d4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002d60:	2300      	movs	r3, #0
 8002d62:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d64:	4bce      	ldr	r3, [pc, #824]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 030c 	and.w	r3, r3, #12
 8002d6c:	2b0c      	cmp	r3, #12
 8002d6e:	f200 818d 	bhi.w	800308c <HAL_RCC_GetSysClockFreq+0x344>
 8002d72:	a201      	add	r2, pc, #4	; (adr r2, 8002d78 <HAL_RCC_GetSysClockFreq+0x30>)
 8002d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d78:	08002dad 	.word	0x08002dad
 8002d7c:	0800308d 	.word	0x0800308d
 8002d80:	0800308d 	.word	0x0800308d
 8002d84:	0800308d 	.word	0x0800308d
 8002d88:	08002db3 	.word	0x08002db3
 8002d8c:	0800308d 	.word	0x0800308d
 8002d90:	0800308d 	.word	0x0800308d
 8002d94:	0800308d 	.word	0x0800308d
 8002d98:	08002db9 	.word	0x08002db9
 8002d9c:	0800308d 	.word	0x0800308d
 8002da0:	0800308d 	.word	0x0800308d
 8002da4:	0800308d 	.word	0x0800308d
 8002da8:	08002f2d 	.word	0x08002f2d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dac:	4bbd      	ldr	r3, [pc, #756]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002dae:	61bb      	str	r3, [r7, #24]
       break;
 8002db0:	e16f      	b.n	8003092 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002db2:	4bbd      	ldr	r3, [pc, #756]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x360>)
 8002db4:	61bb      	str	r3, [r7, #24]
      break;
 8002db6:	e16c      	b.n	8003092 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002db8:	4bb9      	ldr	r3, [pc, #740]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dc0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dc2:	4bb7      	ldr	r3, [pc, #732]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d053      	beq.n	8002e76 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dce:	4bb4      	ldr	r3, [pc, #720]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	099b      	lsrs	r3, r3, #6
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	f04f 0300 	mov.w	r3, #0
 8002dda:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002dde:	f04f 0100 	mov.w	r1, #0
 8002de2:	ea02 0400 	and.w	r4, r2, r0
 8002de6:	603c      	str	r4, [r7, #0]
 8002de8:	400b      	ands	r3, r1
 8002dea:	607b      	str	r3, [r7, #4]
 8002dec:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002df0:	4620      	mov	r0, r4
 8002df2:	4629      	mov	r1, r5
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	014b      	lsls	r3, r1, #5
 8002dfe:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e02:	0142      	lsls	r2, r0, #5
 8002e04:	4610      	mov	r0, r2
 8002e06:	4619      	mov	r1, r3
 8002e08:	4623      	mov	r3, r4
 8002e0a:	1ac0      	subs	r0, r0, r3
 8002e0c:	462b      	mov	r3, r5
 8002e0e:	eb61 0103 	sbc.w	r1, r1, r3
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	f04f 0300 	mov.w	r3, #0
 8002e1a:	018b      	lsls	r3, r1, #6
 8002e1c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e20:	0182      	lsls	r2, r0, #6
 8002e22:	1a12      	subs	r2, r2, r0
 8002e24:	eb63 0301 	sbc.w	r3, r3, r1
 8002e28:	f04f 0000 	mov.w	r0, #0
 8002e2c:	f04f 0100 	mov.w	r1, #0
 8002e30:	00d9      	lsls	r1, r3, #3
 8002e32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e36:	00d0      	lsls	r0, r2, #3
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4621      	mov	r1, r4
 8002e3e:	1852      	adds	r2, r2, r1
 8002e40:	4629      	mov	r1, r5
 8002e42:	eb43 0101 	adc.w	r1, r3, r1
 8002e46:	460b      	mov	r3, r1
 8002e48:	f04f 0000 	mov.w	r0, #0
 8002e4c:	f04f 0100 	mov.w	r1, #0
 8002e50:	0259      	lsls	r1, r3, #9
 8002e52:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002e56:	0250      	lsls	r0, r2, #9
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	4619      	mov	r1, r3
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	461a      	mov	r2, r3
 8002e64:	f04f 0300 	mov.w	r3, #0
 8002e68:	f7fd f9d2 	bl	8000210 <__aeabi_uldivmod>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4613      	mov	r3, r2
 8002e72:	61fb      	str	r3, [r7, #28]
 8002e74:	e04c      	b.n	8002f10 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e76:	4b8a      	ldr	r3, [pc, #552]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	099b      	lsrs	r3, r3, #6
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e86:	f04f 0100 	mov.w	r1, #0
 8002e8a:	ea02 0a00 	and.w	sl, r2, r0
 8002e8e:	ea03 0b01 	and.w	fp, r3, r1
 8002e92:	4650      	mov	r0, sl
 8002e94:	4659      	mov	r1, fp
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	014b      	lsls	r3, r1, #5
 8002ea0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ea4:	0142      	lsls	r2, r0, #5
 8002ea6:	4610      	mov	r0, r2
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	ebb0 000a 	subs.w	r0, r0, sl
 8002eae:	eb61 010b 	sbc.w	r1, r1, fp
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	f04f 0300 	mov.w	r3, #0
 8002eba:	018b      	lsls	r3, r1, #6
 8002ebc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ec0:	0182      	lsls	r2, r0, #6
 8002ec2:	1a12      	subs	r2, r2, r0
 8002ec4:	eb63 0301 	sbc.w	r3, r3, r1
 8002ec8:	f04f 0000 	mov.w	r0, #0
 8002ecc:	f04f 0100 	mov.w	r1, #0
 8002ed0:	00d9      	lsls	r1, r3, #3
 8002ed2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ed6:	00d0      	lsls	r0, r2, #3
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	eb12 020a 	adds.w	r2, r2, sl
 8002ee0:	eb43 030b 	adc.w	r3, r3, fp
 8002ee4:	f04f 0000 	mov.w	r0, #0
 8002ee8:	f04f 0100 	mov.w	r1, #0
 8002eec:	0299      	lsls	r1, r3, #10
 8002eee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002ef2:	0290      	lsls	r0, r2, #10
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4610      	mov	r0, r2
 8002efa:	4619      	mov	r1, r3
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	461a      	mov	r2, r3
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	f7fd f984 	bl	8000210 <__aeabi_uldivmod>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f10:	4b63      	ldr	r3, [pc, #396]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	0c1b      	lsrs	r3, r3, #16
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002f20:	69fa      	ldr	r2, [r7, #28]
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f28:	61bb      	str	r3, [r7, #24]
      break;
 8002f2a:	e0b2      	b.n	8003092 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f2c:	4b5c      	ldr	r3, [pc, #368]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f34:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f36:	4b5a      	ldr	r3, [pc, #360]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d04d      	beq.n	8002fde <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f42:	4b57      	ldr	r3, [pc, #348]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	099b      	lsrs	r3, r3, #6
 8002f48:	461a      	mov	r2, r3
 8002f4a:	f04f 0300 	mov.w	r3, #0
 8002f4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f52:	f04f 0100 	mov.w	r1, #0
 8002f56:	ea02 0800 	and.w	r8, r2, r0
 8002f5a:	ea03 0901 	and.w	r9, r3, r1
 8002f5e:	4640      	mov	r0, r8
 8002f60:	4649      	mov	r1, r9
 8002f62:	f04f 0200 	mov.w	r2, #0
 8002f66:	f04f 0300 	mov.w	r3, #0
 8002f6a:	014b      	lsls	r3, r1, #5
 8002f6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f70:	0142      	lsls	r2, r0, #5
 8002f72:	4610      	mov	r0, r2
 8002f74:	4619      	mov	r1, r3
 8002f76:	ebb0 0008 	subs.w	r0, r0, r8
 8002f7a:	eb61 0109 	sbc.w	r1, r1, r9
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	f04f 0300 	mov.w	r3, #0
 8002f86:	018b      	lsls	r3, r1, #6
 8002f88:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f8c:	0182      	lsls	r2, r0, #6
 8002f8e:	1a12      	subs	r2, r2, r0
 8002f90:	eb63 0301 	sbc.w	r3, r3, r1
 8002f94:	f04f 0000 	mov.w	r0, #0
 8002f98:	f04f 0100 	mov.w	r1, #0
 8002f9c:	00d9      	lsls	r1, r3, #3
 8002f9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fa2:	00d0      	lsls	r0, r2, #3
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	eb12 0208 	adds.w	r2, r2, r8
 8002fac:	eb43 0309 	adc.w	r3, r3, r9
 8002fb0:	f04f 0000 	mov.w	r0, #0
 8002fb4:	f04f 0100 	mov.w	r1, #0
 8002fb8:	0259      	lsls	r1, r3, #9
 8002fba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002fbe:	0250      	lsls	r0, r2, #9
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	f7fd f91e 	bl	8000210 <__aeabi_uldivmod>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	4613      	mov	r3, r2
 8002fda:	61fb      	str	r3, [r7, #28]
 8002fdc:	e04a      	b.n	8003074 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fde:	4b30      	ldr	r3, [pc, #192]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	099b      	lsrs	r3, r3, #6
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	f04f 0300 	mov.w	r3, #0
 8002fea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002fee:	f04f 0100 	mov.w	r1, #0
 8002ff2:	ea02 0400 	and.w	r4, r2, r0
 8002ff6:	ea03 0501 	and.w	r5, r3, r1
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	4629      	mov	r1, r5
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	014b      	lsls	r3, r1, #5
 8003008:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800300c:	0142      	lsls	r2, r0, #5
 800300e:	4610      	mov	r0, r2
 8003010:	4619      	mov	r1, r3
 8003012:	1b00      	subs	r0, r0, r4
 8003014:	eb61 0105 	sbc.w	r1, r1, r5
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	018b      	lsls	r3, r1, #6
 8003022:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003026:	0182      	lsls	r2, r0, #6
 8003028:	1a12      	subs	r2, r2, r0
 800302a:	eb63 0301 	sbc.w	r3, r3, r1
 800302e:	f04f 0000 	mov.w	r0, #0
 8003032:	f04f 0100 	mov.w	r1, #0
 8003036:	00d9      	lsls	r1, r3, #3
 8003038:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800303c:	00d0      	lsls	r0, r2, #3
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	1912      	adds	r2, r2, r4
 8003044:	eb45 0303 	adc.w	r3, r5, r3
 8003048:	f04f 0000 	mov.w	r0, #0
 800304c:	f04f 0100 	mov.w	r1, #0
 8003050:	0299      	lsls	r1, r3, #10
 8003052:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003056:	0290      	lsls	r0, r2, #10
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	4610      	mov	r0, r2
 800305e:	4619      	mov	r1, r3
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	461a      	mov	r2, r3
 8003064:	f04f 0300 	mov.w	r3, #0
 8003068:	f7fd f8d2 	bl	8000210 <__aeabi_uldivmod>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4613      	mov	r3, r2
 8003072:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003074:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	0f1b      	lsrs	r3, r3, #28
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003080:	69fa      	ldr	r2, [r7, #28]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	fbb2 f3f3 	udiv	r3, r2, r3
 8003088:	61bb      	str	r3, [r7, #24]
      break;
 800308a:	e002      	b.n	8003092 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800308c:	4b05      	ldr	r3, [pc, #20]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 800308e:	61bb      	str	r3, [r7, #24]
      break;
 8003090:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003092:	69bb      	ldr	r3, [r7, #24]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3720      	adds	r7, #32
 8003098:	46bd      	mov	sp, r7
 800309a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800309e:	bf00      	nop
 80030a0:	40023800 	.word	0x40023800
 80030a4:	00f42400 	.word	0x00f42400
 80030a8:	007a1200 	.word	0x007a1200

080030ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e28d      	b.n	80035da <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 8083 	beq.w	80031d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030cc:	4b94      	ldr	r3, [pc, #592]	; (8003320 <HAL_RCC_OscConfig+0x274>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 030c 	and.w	r3, r3, #12
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d019      	beq.n	800310c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030d8:	4b91      	ldr	r3, [pc, #580]	; (8003320 <HAL_RCC_OscConfig+0x274>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d106      	bne.n	80030f2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030e4:	4b8e      	ldr	r3, [pc, #568]	; (8003320 <HAL_RCC_OscConfig+0x274>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030f0:	d00c      	beq.n	800310c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030f2:	4b8b      	ldr	r3, [pc, #556]	; (8003320 <HAL_RCC_OscConfig+0x274>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030fa:	2b0c      	cmp	r3, #12
 80030fc:	d112      	bne.n	8003124 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030fe:	4b88      	ldr	r3, [pc, #544]	; (8003320 <HAL_RCC_OscConfig+0x274>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003106:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800310a:	d10b      	bne.n	8003124 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800310c:	4b84      	ldr	r3, [pc, #528]	; (8003320 <HAL_RCC_OscConfig+0x274>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d05b      	beq.n	80031d0 <HAL_RCC_OscConfig+0x124>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d157      	bne.n	80031d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e25a      	b.n	80035da <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800312c:	d106      	bne.n	800313c <HAL_RCC_OscConfig+0x90>
 800312e:	4b7c      	ldr	r3, [pc, #496]	; (8003320 <HAL_RCC_OscConfig+0x274>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a7b      	ldr	r2, [pc, #492]	; (8003320 <HAL_RCC_OscConfig+0x274>)
 8003134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	e01d      	b.n	8003178 <HAL_RCC_OscConfig+0xcc>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003144:	d10c      	bne.n	8003160 <HAL_RCC_OscConfig+0xb4>
 8003146:	4b76      	ldr	r3, [pc, #472]	; (8003320 <HAL_RCC_OscConfig+0x274>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a75      	ldr	r2, [pc, #468]	; (8003320 <HAL_RCC_OscConfig+0x274>)
 800314c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	4b73      	ldr	r3, [pc, #460]	; (8003320 <HAL_RCC_OscConfig+0x274>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a72      	ldr	r2, [pc, #456]	; (8003320 <HAL_RCC_OscConfig+0x274>)
 8003158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800315c:	6013      	str	r3, [r2, #0]
 800315e:	e00b      	b.n	8003178 <HAL_RCC_OscConfig+0xcc>
 8003160:	4b6f      	ldr	r3, [pc, #444]	; (8003320 <HAL_RCC_OscConfig+0x274>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a6e      	ldr	r2, [pc, #440]	; (8003320 <HAL_RCC_OscConfig+0x274>)
 8003166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	4b6c      	ldr	r3, [pc, #432]	; (8003320 <HAL_RCC_OscConfig+0x274>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a6b      	ldr	r2, [pc, #428]	; (8003320 <HAL_RCC_OscConfig+0x274>)
 8003172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003176:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d013      	beq.n	80031a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003180:	f7fd fcde 	bl	8000b40 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003188:	f7fd fcda 	bl	8000b40 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b64      	cmp	r3, #100	; 0x64
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e21f      	b.n	80035da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319a:	4b61      	ldr	r3, [pc, #388]	; (8003320 <HAL_RCC_OscConfig+0x274>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0f0      	beq.n	8003188 <HAL_RCC_OscConfig+0xdc>
 80031a6:	e014      	b.n	80031d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7fd fcca 	bl	8000b40 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031b0:	f7fd fcc6 	bl	8000b40 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b64      	cmp	r3, #100	; 0x64
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e20b      	b.n	80035da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031c2:	4b57      	ldr	r3, [pc, #348]	; (8003320 <HAL_RCC_OscConfig+0x274>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f0      	bne.n	80031b0 <HAL_RCC_OscConfig+0x104>
 80031ce:	e000      	b.n	80031d2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d06f      	beq.n	80032be <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031de:	4b50      	ldr	r3, [pc, #320]	; (8003320 <HAL_RCC_OscConfig+0x274>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 030c 	and.w	r3, r3, #12
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d017      	beq.n	800321a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031ea:	4b4d      	ldr	r3, [pc, #308]	; (8003320 <HAL_RCC_OscConfig+0x274>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d105      	bne.n	8003202 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031f6:	4b4a      	ldr	r3, [pc, #296]	; (8003320 <HAL_RCC_OscConfig+0x274>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00b      	beq.n	800321a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003202:	4b47      	ldr	r3, [pc, #284]	; (8003320 <HAL_RCC_OscConfig+0x274>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800320a:	2b0c      	cmp	r3, #12
 800320c:	d11c      	bne.n	8003248 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800320e:	4b44      	ldr	r3, [pc, #272]	; (8003320 <HAL_RCC_OscConfig+0x274>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d116      	bne.n	8003248 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321a:	4b41      	ldr	r3, [pc, #260]	; (8003320 <HAL_RCC_OscConfig+0x274>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d005      	beq.n	8003232 <HAL_RCC_OscConfig+0x186>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d001      	beq.n	8003232 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e1d3      	b.n	80035da <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003232:	4b3b      	ldr	r3, [pc, #236]	; (8003320 <HAL_RCC_OscConfig+0x274>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4937      	ldr	r1, [pc, #220]	; (8003320 <HAL_RCC_OscConfig+0x274>)
 8003242:	4313      	orrs	r3, r2
 8003244:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003246:	e03a      	b.n	80032be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d020      	beq.n	8003292 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003250:	4b34      	ldr	r3, [pc, #208]	; (8003324 <HAL_RCC_OscConfig+0x278>)
 8003252:	2201      	movs	r2, #1
 8003254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003256:	f7fd fc73 	bl	8000b40 <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800325e:	f7fd fc6f 	bl	8000b40 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e1b4      	b.n	80035da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003270:	4b2b      	ldr	r3, [pc, #172]	; (8003320 <HAL_RCC_OscConfig+0x274>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0f0      	beq.n	800325e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800327c:	4b28      	ldr	r3, [pc, #160]	; (8003320 <HAL_RCC_OscConfig+0x274>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	4925      	ldr	r1, [pc, #148]	; (8003320 <HAL_RCC_OscConfig+0x274>)
 800328c:	4313      	orrs	r3, r2
 800328e:	600b      	str	r3, [r1, #0]
 8003290:	e015      	b.n	80032be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003292:	4b24      	ldr	r3, [pc, #144]	; (8003324 <HAL_RCC_OscConfig+0x278>)
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003298:	f7fd fc52 	bl	8000b40 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032a0:	f7fd fc4e 	bl	8000b40 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e193      	b.n	80035da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032b2:	4b1b      	ldr	r3, [pc, #108]	; (8003320 <HAL_RCC_OscConfig+0x274>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f0      	bne.n	80032a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d036      	beq.n	8003338 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d016      	beq.n	8003300 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032d2:	4b15      	ldr	r3, [pc, #84]	; (8003328 <HAL_RCC_OscConfig+0x27c>)
 80032d4:	2201      	movs	r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d8:	f7fd fc32 	bl	8000b40 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032e0:	f7fd fc2e 	bl	8000b40 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e173      	b.n	80035da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f2:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <HAL_RCC_OscConfig+0x274>)
 80032f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0f0      	beq.n	80032e0 <HAL_RCC_OscConfig+0x234>
 80032fe:	e01b      	b.n	8003338 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003300:	4b09      	ldr	r3, [pc, #36]	; (8003328 <HAL_RCC_OscConfig+0x27c>)
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003306:	f7fd fc1b 	bl	8000b40 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800330c:	e00e      	b.n	800332c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800330e:	f7fd fc17 	bl	8000b40 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d907      	bls.n	800332c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e15c      	b.n	80035da <HAL_RCC_OscConfig+0x52e>
 8003320:	40023800 	.word	0x40023800
 8003324:	42470000 	.word	0x42470000
 8003328:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800332c:	4b8a      	ldr	r3, [pc, #552]	; (8003558 <HAL_RCC_OscConfig+0x4ac>)
 800332e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1ea      	bne.n	800330e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 8097 	beq.w	8003474 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003346:	2300      	movs	r3, #0
 8003348:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800334a:	4b83      	ldr	r3, [pc, #524]	; (8003558 <HAL_RCC_OscConfig+0x4ac>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10f      	bne.n	8003376 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	4b7f      	ldr	r3, [pc, #508]	; (8003558 <HAL_RCC_OscConfig+0x4ac>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	4a7e      	ldr	r2, [pc, #504]	; (8003558 <HAL_RCC_OscConfig+0x4ac>)
 8003360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003364:	6413      	str	r3, [r2, #64]	; 0x40
 8003366:	4b7c      	ldr	r3, [pc, #496]	; (8003558 <HAL_RCC_OscConfig+0x4ac>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336e:	60bb      	str	r3, [r7, #8]
 8003370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003372:	2301      	movs	r3, #1
 8003374:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003376:	4b79      	ldr	r3, [pc, #484]	; (800355c <HAL_RCC_OscConfig+0x4b0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337e:	2b00      	cmp	r3, #0
 8003380:	d118      	bne.n	80033b4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003382:	4b76      	ldr	r3, [pc, #472]	; (800355c <HAL_RCC_OscConfig+0x4b0>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a75      	ldr	r2, [pc, #468]	; (800355c <HAL_RCC_OscConfig+0x4b0>)
 8003388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800338c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800338e:	f7fd fbd7 	bl	8000b40 <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003394:	e008      	b.n	80033a8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003396:	f7fd fbd3 	bl	8000b40 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e118      	b.n	80035da <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a8:	4b6c      	ldr	r3, [pc, #432]	; (800355c <HAL_RCC_OscConfig+0x4b0>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0f0      	beq.n	8003396 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d106      	bne.n	80033ca <HAL_RCC_OscConfig+0x31e>
 80033bc:	4b66      	ldr	r3, [pc, #408]	; (8003558 <HAL_RCC_OscConfig+0x4ac>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	4a65      	ldr	r2, [pc, #404]	; (8003558 <HAL_RCC_OscConfig+0x4ac>)
 80033c2:	f043 0301 	orr.w	r3, r3, #1
 80033c6:	6713      	str	r3, [r2, #112]	; 0x70
 80033c8:	e01c      	b.n	8003404 <HAL_RCC_OscConfig+0x358>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	2b05      	cmp	r3, #5
 80033d0:	d10c      	bne.n	80033ec <HAL_RCC_OscConfig+0x340>
 80033d2:	4b61      	ldr	r3, [pc, #388]	; (8003558 <HAL_RCC_OscConfig+0x4ac>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d6:	4a60      	ldr	r2, [pc, #384]	; (8003558 <HAL_RCC_OscConfig+0x4ac>)
 80033d8:	f043 0304 	orr.w	r3, r3, #4
 80033dc:	6713      	str	r3, [r2, #112]	; 0x70
 80033de:	4b5e      	ldr	r3, [pc, #376]	; (8003558 <HAL_RCC_OscConfig+0x4ac>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e2:	4a5d      	ldr	r2, [pc, #372]	; (8003558 <HAL_RCC_OscConfig+0x4ac>)
 80033e4:	f043 0301 	orr.w	r3, r3, #1
 80033e8:	6713      	str	r3, [r2, #112]	; 0x70
 80033ea:	e00b      	b.n	8003404 <HAL_RCC_OscConfig+0x358>
 80033ec:	4b5a      	ldr	r3, [pc, #360]	; (8003558 <HAL_RCC_OscConfig+0x4ac>)
 80033ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f0:	4a59      	ldr	r2, [pc, #356]	; (8003558 <HAL_RCC_OscConfig+0x4ac>)
 80033f2:	f023 0301 	bic.w	r3, r3, #1
 80033f6:	6713      	str	r3, [r2, #112]	; 0x70
 80033f8:	4b57      	ldr	r3, [pc, #348]	; (8003558 <HAL_RCC_OscConfig+0x4ac>)
 80033fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fc:	4a56      	ldr	r2, [pc, #344]	; (8003558 <HAL_RCC_OscConfig+0x4ac>)
 80033fe:	f023 0304 	bic.w	r3, r3, #4
 8003402:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d015      	beq.n	8003438 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340c:	f7fd fb98 	bl	8000b40 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003412:	e00a      	b.n	800342a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003414:	f7fd fb94 	bl	8000b40 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003422:	4293      	cmp	r3, r2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e0d7      	b.n	80035da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800342a:	4b4b      	ldr	r3, [pc, #300]	; (8003558 <HAL_RCC_OscConfig+0x4ac>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0ee      	beq.n	8003414 <HAL_RCC_OscConfig+0x368>
 8003436:	e014      	b.n	8003462 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003438:	f7fd fb82 	bl	8000b40 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800343e:	e00a      	b.n	8003456 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003440:	f7fd fb7e 	bl	8000b40 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	f241 3288 	movw	r2, #5000	; 0x1388
 800344e:	4293      	cmp	r3, r2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e0c1      	b.n	80035da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003456:	4b40      	ldr	r3, [pc, #256]	; (8003558 <HAL_RCC_OscConfig+0x4ac>)
 8003458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1ee      	bne.n	8003440 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003462:	7dfb      	ldrb	r3, [r7, #23]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d105      	bne.n	8003474 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003468:	4b3b      	ldr	r3, [pc, #236]	; (8003558 <HAL_RCC_OscConfig+0x4ac>)
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	4a3a      	ldr	r2, [pc, #232]	; (8003558 <HAL_RCC_OscConfig+0x4ac>)
 800346e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003472:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80ad 	beq.w	80035d8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800347e:	4b36      	ldr	r3, [pc, #216]	; (8003558 <HAL_RCC_OscConfig+0x4ac>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 030c 	and.w	r3, r3, #12
 8003486:	2b08      	cmp	r3, #8
 8003488:	d060      	beq.n	800354c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d145      	bne.n	800351e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003492:	4b33      	ldr	r3, [pc, #204]	; (8003560 <HAL_RCC_OscConfig+0x4b4>)
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003498:	f7fd fb52 	bl	8000b40 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a0:	f7fd fb4e 	bl	8000b40 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e093      	b.n	80035da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034b2:	4b29      	ldr	r3, [pc, #164]	; (8003558 <HAL_RCC_OscConfig+0x4ac>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f0      	bne.n	80034a0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69da      	ldr	r2, [r3, #28]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	019b      	lsls	r3, r3, #6
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d4:	085b      	lsrs	r3, r3, #1
 80034d6:	3b01      	subs	r3, #1
 80034d8:	041b      	lsls	r3, r3, #16
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	061b      	lsls	r3, r3, #24
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e8:	071b      	lsls	r3, r3, #28
 80034ea:	491b      	ldr	r1, [pc, #108]	; (8003558 <HAL_RCC_OscConfig+0x4ac>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034f0:	4b1b      	ldr	r3, [pc, #108]	; (8003560 <HAL_RCC_OscConfig+0x4b4>)
 80034f2:	2201      	movs	r2, #1
 80034f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f6:	f7fd fb23 	bl	8000b40 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034fe:	f7fd fb1f 	bl	8000b40 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e064      	b.n	80035da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003510:	4b11      	ldr	r3, [pc, #68]	; (8003558 <HAL_RCC_OscConfig+0x4ac>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0f0      	beq.n	80034fe <HAL_RCC_OscConfig+0x452>
 800351c:	e05c      	b.n	80035d8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351e:	4b10      	ldr	r3, [pc, #64]	; (8003560 <HAL_RCC_OscConfig+0x4b4>)
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003524:	f7fd fb0c 	bl	8000b40 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800352c:	f7fd fb08 	bl	8000b40 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e04d      	b.n	80035da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800353e:	4b06      	ldr	r3, [pc, #24]	; (8003558 <HAL_RCC_OscConfig+0x4ac>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1f0      	bne.n	800352c <HAL_RCC_OscConfig+0x480>
 800354a:	e045      	b.n	80035d8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d107      	bne.n	8003564 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e040      	b.n	80035da <HAL_RCC_OscConfig+0x52e>
 8003558:	40023800 	.word	0x40023800
 800355c:	40007000 	.word	0x40007000
 8003560:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003564:	4b1f      	ldr	r3, [pc, #124]	; (80035e4 <HAL_RCC_OscConfig+0x538>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d030      	beq.n	80035d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800357c:	429a      	cmp	r2, r3
 800357e:	d129      	bne.n	80035d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800358a:	429a      	cmp	r2, r3
 800358c:	d122      	bne.n	80035d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003594:	4013      	ands	r3, r2
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800359a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800359c:	4293      	cmp	r3, r2
 800359e:	d119      	bne.n	80035d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035aa:	085b      	lsrs	r3, r3, #1
 80035ac:	3b01      	subs	r3, #1
 80035ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d10f      	bne.n	80035d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d107      	bne.n	80035d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d001      	beq.n	80035d8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e000      	b.n	80035da <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3718      	adds	r7, #24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40023800 	.word	0x40023800

080035e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e041      	b.n	800367e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d106      	bne.n	8003614 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f839 	bl	8003686 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3304      	adds	r3, #4
 8003624:	4619      	mov	r1, r3
 8003626:	4610      	mov	r0, r2
 8003628:	f000 f9d8 	bl	80039dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
	...

0800369c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d001      	beq.n	80036b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e04e      	b.n	8003752 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0201 	orr.w	r2, r2, #1
 80036ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a23      	ldr	r2, [pc, #140]	; (8003760 <HAL_TIM_Base_Start_IT+0xc4>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d022      	beq.n	800371c <HAL_TIM_Base_Start_IT+0x80>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036de:	d01d      	beq.n	800371c <HAL_TIM_Base_Start_IT+0x80>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a1f      	ldr	r2, [pc, #124]	; (8003764 <HAL_TIM_Base_Start_IT+0xc8>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d018      	beq.n	800371c <HAL_TIM_Base_Start_IT+0x80>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a1e      	ldr	r2, [pc, #120]	; (8003768 <HAL_TIM_Base_Start_IT+0xcc>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d013      	beq.n	800371c <HAL_TIM_Base_Start_IT+0x80>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a1c      	ldr	r2, [pc, #112]	; (800376c <HAL_TIM_Base_Start_IT+0xd0>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d00e      	beq.n	800371c <HAL_TIM_Base_Start_IT+0x80>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a1b      	ldr	r2, [pc, #108]	; (8003770 <HAL_TIM_Base_Start_IT+0xd4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d009      	beq.n	800371c <HAL_TIM_Base_Start_IT+0x80>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a19      	ldr	r2, [pc, #100]	; (8003774 <HAL_TIM_Base_Start_IT+0xd8>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d004      	beq.n	800371c <HAL_TIM_Base_Start_IT+0x80>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a18      	ldr	r2, [pc, #96]	; (8003778 <HAL_TIM_Base_Start_IT+0xdc>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d111      	bne.n	8003740 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2b06      	cmp	r3, #6
 800372c:	d010      	beq.n	8003750 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f042 0201 	orr.w	r2, r2, #1
 800373c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373e:	e007      	b.n	8003750 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	40010000 	.word	0x40010000
 8003764:	40000400 	.word	0x40000400
 8003768:	40000800 	.word	0x40000800
 800376c:	40000c00 	.word	0x40000c00
 8003770:	40010400 	.word	0x40010400
 8003774:	40014000 	.word	0x40014000
 8003778:	40001800 	.word	0x40001800

0800377c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b02      	cmp	r3, #2
 8003790:	d122      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b02      	cmp	r3, #2
 800379e:	d11b      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f06f 0202 	mvn.w	r2, #2
 80037a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f8ee 	bl	80039a0 <HAL_TIM_IC_CaptureCallback>
 80037c4:	e005      	b.n	80037d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f8e0 	bl	800398c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f8f1 	bl	80039b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f003 0304 	and.w	r3, r3, #4
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d122      	bne.n	800382c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d11b      	bne.n	800382c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f06f 0204 	mvn.w	r2, #4
 80037fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2202      	movs	r2, #2
 8003802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f8c4 	bl	80039a0 <HAL_TIM_IC_CaptureCallback>
 8003818:	e005      	b.n	8003826 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f8b6 	bl	800398c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f8c7 	bl	80039b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	2b08      	cmp	r3, #8
 8003838:	d122      	bne.n	8003880 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b08      	cmp	r3, #8
 8003846:	d11b      	bne.n	8003880 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f06f 0208 	mvn.w	r2, #8
 8003850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2204      	movs	r2, #4
 8003856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f89a 	bl	80039a0 <HAL_TIM_IC_CaptureCallback>
 800386c:	e005      	b.n	800387a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f88c 	bl	800398c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f89d 	bl	80039b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f003 0310 	and.w	r3, r3, #16
 800388a:	2b10      	cmp	r3, #16
 800388c:	d122      	bne.n	80038d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f003 0310 	and.w	r3, r3, #16
 8003898:	2b10      	cmp	r3, #16
 800389a:	d11b      	bne.n	80038d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f06f 0210 	mvn.w	r2, #16
 80038a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2208      	movs	r2, #8
 80038aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f870 	bl	80039a0 <HAL_TIM_IC_CaptureCallback>
 80038c0:	e005      	b.n	80038ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f862 	bl	800398c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f873 	bl	80039b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d10e      	bne.n	8003900 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d107      	bne.n	8003900 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f06f 0201 	mvn.w	r2, #1
 80038f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7fc ff78 	bl	80007f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390a:	2b80      	cmp	r3, #128	; 0x80
 800390c:	d10e      	bne.n	800392c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003918:	2b80      	cmp	r3, #128	; 0x80
 800391a:	d107      	bne.n	800392c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f902 	bl	8003b30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003936:	2b40      	cmp	r3, #64	; 0x40
 8003938:	d10e      	bne.n	8003958 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003944:	2b40      	cmp	r3, #64	; 0x40
 8003946:	d107      	bne.n	8003958 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f838 	bl	80039c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f003 0320 	and.w	r3, r3, #32
 8003962:	2b20      	cmp	r3, #32
 8003964:	d10e      	bne.n	8003984 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f003 0320 	and.w	r3, r3, #32
 8003970:	2b20      	cmp	r3, #32
 8003972:	d107      	bne.n	8003984 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f06f 0220 	mvn.w	r2, #32
 800397c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f8cc 	bl	8003b1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003984:	bf00      	nop
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a40      	ldr	r2, [pc, #256]	; (8003af0 <TIM_Base_SetConfig+0x114>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d013      	beq.n	8003a1c <TIM_Base_SetConfig+0x40>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039fa:	d00f      	beq.n	8003a1c <TIM_Base_SetConfig+0x40>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a3d      	ldr	r2, [pc, #244]	; (8003af4 <TIM_Base_SetConfig+0x118>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d00b      	beq.n	8003a1c <TIM_Base_SetConfig+0x40>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a3c      	ldr	r2, [pc, #240]	; (8003af8 <TIM_Base_SetConfig+0x11c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d007      	beq.n	8003a1c <TIM_Base_SetConfig+0x40>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a3b      	ldr	r2, [pc, #236]	; (8003afc <TIM_Base_SetConfig+0x120>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d003      	beq.n	8003a1c <TIM_Base_SetConfig+0x40>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a3a      	ldr	r2, [pc, #232]	; (8003b00 <TIM_Base_SetConfig+0x124>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d108      	bne.n	8003a2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a2f      	ldr	r2, [pc, #188]	; (8003af0 <TIM_Base_SetConfig+0x114>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d02b      	beq.n	8003a8e <TIM_Base_SetConfig+0xb2>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3c:	d027      	beq.n	8003a8e <TIM_Base_SetConfig+0xb2>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a2c      	ldr	r2, [pc, #176]	; (8003af4 <TIM_Base_SetConfig+0x118>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d023      	beq.n	8003a8e <TIM_Base_SetConfig+0xb2>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a2b      	ldr	r2, [pc, #172]	; (8003af8 <TIM_Base_SetConfig+0x11c>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d01f      	beq.n	8003a8e <TIM_Base_SetConfig+0xb2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a2a      	ldr	r2, [pc, #168]	; (8003afc <TIM_Base_SetConfig+0x120>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d01b      	beq.n	8003a8e <TIM_Base_SetConfig+0xb2>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a29      	ldr	r2, [pc, #164]	; (8003b00 <TIM_Base_SetConfig+0x124>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d017      	beq.n	8003a8e <TIM_Base_SetConfig+0xb2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a28      	ldr	r2, [pc, #160]	; (8003b04 <TIM_Base_SetConfig+0x128>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d013      	beq.n	8003a8e <TIM_Base_SetConfig+0xb2>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a27      	ldr	r2, [pc, #156]	; (8003b08 <TIM_Base_SetConfig+0x12c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d00f      	beq.n	8003a8e <TIM_Base_SetConfig+0xb2>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a26      	ldr	r2, [pc, #152]	; (8003b0c <TIM_Base_SetConfig+0x130>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00b      	beq.n	8003a8e <TIM_Base_SetConfig+0xb2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a25      	ldr	r2, [pc, #148]	; (8003b10 <TIM_Base_SetConfig+0x134>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d007      	beq.n	8003a8e <TIM_Base_SetConfig+0xb2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a24      	ldr	r2, [pc, #144]	; (8003b14 <TIM_Base_SetConfig+0x138>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d003      	beq.n	8003a8e <TIM_Base_SetConfig+0xb2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a23      	ldr	r2, [pc, #140]	; (8003b18 <TIM_Base_SetConfig+0x13c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d108      	bne.n	8003aa0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a0a      	ldr	r2, [pc, #40]	; (8003af0 <TIM_Base_SetConfig+0x114>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d003      	beq.n	8003ad4 <TIM_Base_SetConfig+0xf8>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a0c      	ldr	r2, [pc, #48]	; (8003b00 <TIM_Base_SetConfig+0x124>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d103      	bne.n	8003adc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	691a      	ldr	r2, [r3, #16]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	615a      	str	r2, [r3, #20]
}
 8003ae2:	bf00      	nop
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	40010000 	.word	0x40010000
 8003af4:	40000400 	.word	0x40000400
 8003af8:	40000800 	.word	0x40000800
 8003afc:	40000c00 	.word	0x40000c00
 8003b00:	40010400 	.word	0x40010400
 8003b04:	40014000 	.word	0x40014000
 8003b08:	40014400 	.word	0x40014400
 8003b0c:	40014800 	.word	0x40014800
 8003b10:	40001800 	.word	0x40001800
 8003b14:	40001c00 	.word	0x40001c00
 8003b18:	40002000 	.word	0x40002000

08003b1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e03f      	b.n	8003bd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d106      	bne.n	8003b70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7fc ff40 	bl	80009f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2224      	movs	r2, #36	; 0x24
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f829 	bl	8003be0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	691a      	ldr	r2, [r3, #16]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695a      	ldr	r2, [r3, #20]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68da      	ldr	r2, [r3, #12]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
	...

08003be0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003be4:	b09f      	sub	sp, #124	; 0x7c
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bf6:	68d9      	ldr	r1, [r3, #12]
 8003bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	ea40 0301 	orr.w	r3, r0, r1
 8003c00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	431a      	orrs	r2, r3
 8003c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c24:	f021 010c 	bic.w	r1, r1, #12
 8003c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c2e:	430b      	orrs	r3, r1
 8003c30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c3e:	6999      	ldr	r1, [r3, #24]
 8003c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	ea40 0301 	orr.w	r3, r0, r1
 8003c48:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	4bc5      	ldr	r3, [pc, #788]	; (8003f64 <UART_SetConfig+0x384>)
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d004      	beq.n	8003c5e <UART_SetConfig+0x7e>
 8003c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	4bc3      	ldr	r3, [pc, #780]	; (8003f68 <UART_SetConfig+0x388>)
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d103      	bne.n	8003c66 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c5e:	f7fe fd03 	bl	8002668 <HAL_RCC_GetPCLK2Freq>
 8003c62:	6778      	str	r0, [r7, #116]	; 0x74
 8003c64:	e002      	b.n	8003c6c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c66:	f7fe fceb 	bl	8002640 <HAL_RCC_GetPCLK1Freq>
 8003c6a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c74:	f040 80b6 	bne.w	8003de4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c7a:	461c      	mov	r4, r3
 8003c7c:	f04f 0500 	mov.w	r5, #0
 8003c80:	4622      	mov	r2, r4
 8003c82:	462b      	mov	r3, r5
 8003c84:	1891      	adds	r1, r2, r2
 8003c86:	6439      	str	r1, [r7, #64]	; 0x40
 8003c88:	415b      	adcs	r3, r3
 8003c8a:	647b      	str	r3, [r7, #68]	; 0x44
 8003c8c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c90:	1912      	adds	r2, r2, r4
 8003c92:	eb45 0303 	adc.w	r3, r5, r3
 8003c96:	f04f 0000 	mov.w	r0, #0
 8003c9a:	f04f 0100 	mov.w	r1, #0
 8003c9e:	00d9      	lsls	r1, r3, #3
 8003ca0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ca4:	00d0      	lsls	r0, r2, #3
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	1911      	adds	r1, r2, r4
 8003cac:	6639      	str	r1, [r7, #96]	; 0x60
 8003cae:	416b      	adcs	r3, r5
 8003cb0:	667b      	str	r3, [r7, #100]	; 0x64
 8003cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	f04f 0300 	mov.w	r3, #0
 8003cbc:	1891      	adds	r1, r2, r2
 8003cbe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003cc0:	415b      	adcs	r3, r3
 8003cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003cc8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003ccc:	f7fc faa0 	bl	8000210 <__aeabi_uldivmod>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4ba5      	ldr	r3, [pc, #660]	; (8003f6c <UART_SetConfig+0x38c>)
 8003cd6:	fba3 2302 	umull	r2, r3, r3, r2
 8003cda:	095b      	lsrs	r3, r3, #5
 8003cdc:	011e      	lsls	r6, r3, #4
 8003cde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ce0:	461c      	mov	r4, r3
 8003ce2:	f04f 0500 	mov.w	r5, #0
 8003ce6:	4622      	mov	r2, r4
 8003ce8:	462b      	mov	r3, r5
 8003cea:	1891      	adds	r1, r2, r2
 8003cec:	6339      	str	r1, [r7, #48]	; 0x30
 8003cee:	415b      	adcs	r3, r3
 8003cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8003cf2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003cf6:	1912      	adds	r2, r2, r4
 8003cf8:	eb45 0303 	adc.w	r3, r5, r3
 8003cfc:	f04f 0000 	mov.w	r0, #0
 8003d00:	f04f 0100 	mov.w	r1, #0
 8003d04:	00d9      	lsls	r1, r3, #3
 8003d06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d0a:	00d0      	lsls	r0, r2, #3
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	1911      	adds	r1, r2, r4
 8003d12:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d14:	416b      	adcs	r3, r5
 8003d16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	f04f 0300 	mov.w	r3, #0
 8003d22:	1891      	adds	r1, r2, r2
 8003d24:	62b9      	str	r1, [r7, #40]	; 0x28
 8003d26:	415b      	adcs	r3, r3
 8003d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d2e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003d32:	f7fc fa6d 	bl	8000210 <__aeabi_uldivmod>
 8003d36:	4602      	mov	r2, r0
 8003d38:	460b      	mov	r3, r1
 8003d3a:	4b8c      	ldr	r3, [pc, #560]	; (8003f6c <UART_SetConfig+0x38c>)
 8003d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d40:	095b      	lsrs	r3, r3, #5
 8003d42:	2164      	movs	r1, #100	; 0x64
 8003d44:	fb01 f303 	mul.w	r3, r1, r3
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	3332      	adds	r3, #50	; 0x32
 8003d4e:	4a87      	ldr	r2, [pc, #540]	; (8003f6c <UART_SetConfig+0x38c>)
 8003d50:	fba2 2303 	umull	r2, r3, r2, r3
 8003d54:	095b      	lsrs	r3, r3, #5
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d5c:	441e      	add	r6, r3
 8003d5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d60:	4618      	mov	r0, r3
 8003d62:	f04f 0100 	mov.w	r1, #0
 8003d66:	4602      	mov	r2, r0
 8003d68:	460b      	mov	r3, r1
 8003d6a:	1894      	adds	r4, r2, r2
 8003d6c:	623c      	str	r4, [r7, #32]
 8003d6e:	415b      	adcs	r3, r3
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
 8003d72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d76:	1812      	adds	r2, r2, r0
 8003d78:	eb41 0303 	adc.w	r3, r1, r3
 8003d7c:	f04f 0400 	mov.w	r4, #0
 8003d80:	f04f 0500 	mov.w	r5, #0
 8003d84:	00dd      	lsls	r5, r3, #3
 8003d86:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d8a:	00d4      	lsls	r4, r2, #3
 8003d8c:	4622      	mov	r2, r4
 8003d8e:	462b      	mov	r3, r5
 8003d90:	1814      	adds	r4, r2, r0
 8003d92:	653c      	str	r4, [r7, #80]	; 0x50
 8003d94:	414b      	adcs	r3, r1
 8003d96:	657b      	str	r3, [r7, #84]	; 0x54
 8003d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	f04f 0300 	mov.w	r3, #0
 8003da2:	1891      	adds	r1, r2, r2
 8003da4:	61b9      	str	r1, [r7, #24]
 8003da6:	415b      	adcs	r3, r3
 8003da8:	61fb      	str	r3, [r7, #28]
 8003daa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003db2:	f7fc fa2d 	bl	8000210 <__aeabi_uldivmod>
 8003db6:	4602      	mov	r2, r0
 8003db8:	460b      	mov	r3, r1
 8003dba:	4b6c      	ldr	r3, [pc, #432]	; (8003f6c <UART_SetConfig+0x38c>)
 8003dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8003dc0:	095b      	lsrs	r3, r3, #5
 8003dc2:	2164      	movs	r1, #100	; 0x64
 8003dc4:	fb01 f303 	mul.w	r3, r1, r3
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	3332      	adds	r3, #50	; 0x32
 8003dce:	4a67      	ldr	r2, [pc, #412]	; (8003f6c <UART_SetConfig+0x38c>)
 8003dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd4:	095b      	lsrs	r3, r3, #5
 8003dd6:	f003 0207 	and.w	r2, r3, #7
 8003dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4432      	add	r2, r6
 8003de0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003de2:	e0b9      	b.n	8003f58 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003de4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003de6:	461c      	mov	r4, r3
 8003de8:	f04f 0500 	mov.w	r5, #0
 8003dec:	4622      	mov	r2, r4
 8003dee:	462b      	mov	r3, r5
 8003df0:	1891      	adds	r1, r2, r2
 8003df2:	6139      	str	r1, [r7, #16]
 8003df4:	415b      	adcs	r3, r3
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003dfc:	1912      	adds	r2, r2, r4
 8003dfe:	eb45 0303 	adc.w	r3, r5, r3
 8003e02:	f04f 0000 	mov.w	r0, #0
 8003e06:	f04f 0100 	mov.w	r1, #0
 8003e0a:	00d9      	lsls	r1, r3, #3
 8003e0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e10:	00d0      	lsls	r0, r2, #3
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	eb12 0804 	adds.w	r8, r2, r4
 8003e1a:	eb43 0905 	adc.w	r9, r3, r5
 8003e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f04f 0100 	mov.w	r1, #0
 8003e28:	f04f 0200 	mov.w	r2, #0
 8003e2c:	f04f 0300 	mov.w	r3, #0
 8003e30:	008b      	lsls	r3, r1, #2
 8003e32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003e36:	0082      	lsls	r2, r0, #2
 8003e38:	4640      	mov	r0, r8
 8003e3a:	4649      	mov	r1, r9
 8003e3c:	f7fc f9e8 	bl	8000210 <__aeabi_uldivmod>
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4b49      	ldr	r3, [pc, #292]	; (8003f6c <UART_SetConfig+0x38c>)
 8003e46:	fba3 2302 	umull	r2, r3, r3, r2
 8003e4a:	095b      	lsrs	r3, r3, #5
 8003e4c:	011e      	lsls	r6, r3, #4
 8003e4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e50:	4618      	mov	r0, r3
 8003e52:	f04f 0100 	mov.w	r1, #0
 8003e56:	4602      	mov	r2, r0
 8003e58:	460b      	mov	r3, r1
 8003e5a:	1894      	adds	r4, r2, r2
 8003e5c:	60bc      	str	r4, [r7, #8]
 8003e5e:	415b      	adcs	r3, r3
 8003e60:	60fb      	str	r3, [r7, #12]
 8003e62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e66:	1812      	adds	r2, r2, r0
 8003e68:	eb41 0303 	adc.w	r3, r1, r3
 8003e6c:	f04f 0400 	mov.w	r4, #0
 8003e70:	f04f 0500 	mov.w	r5, #0
 8003e74:	00dd      	lsls	r5, r3, #3
 8003e76:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e7a:	00d4      	lsls	r4, r2, #3
 8003e7c:	4622      	mov	r2, r4
 8003e7e:	462b      	mov	r3, r5
 8003e80:	1814      	adds	r4, r2, r0
 8003e82:	64bc      	str	r4, [r7, #72]	; 0x48
 8003e84:	414b      	adcs	r3, r1
 8003e86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f04f 0100 	mov.w	r1, #0
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	f04f 0300 	mov.w	r3, #0
 8003e9a:	008b      	lsls	r3, r1, #2
 8003e9c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ea0:	0082      	lsls	r2, r0, #2
 8003ea2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003ea6:	f7fc f9b3 	bl	8000210 <__aeabi_uldivmod>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	4b2f      	ldr	r3, [pc, #188]	; (8003f6c <UART_SetConfig+0x38c>)
 8003eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8003eb4:	095b      	lsrs	r3, r3, #5
 8003eb6:	2164      	movs	r1, #100	; 0x64
 8003eb8:	fb01 f303 	mul.w	r3, r1, r3
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	3332      	adds	r3, #50	; 0x32
 8003ec2:	4a2a      	ldr	r2, [pc, #168]	; (8003f6c <UART_SetConfig+0x38c>)
 8003ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec8:	095b      	lsrs	r3, r3, #5
 8003eca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ece:	441e      	add	r6, r3
 8003ed0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f04f 0100 	mov.w	r1, #0
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	1894      	adds	r4, r2, r2
 8003ede:	603c      	str	r4, [r7, #0]
 8003ee0:	415b      	adcs	r3, r3
 8003ee2:	607b      	str	r3, [r7, #4]
 8003ee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ee8:	1812      	adds	r2, r2, r0
 8003eea:	eb41 0303 	adc.w	r3, r1, r3
 8003eee:	f04f 0400 	mov.w	r4, #0
 8003ef2:	f04f 0500 	mov.w	r5, #0
 8003ef6:	00dd      	lsls	r5, r3, #3
 8003ef8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003efc:	00d4      	lsls	r4, r2, #3
 8003efe:	4622      	mov	r2, r4
 8003f00:	462b      	mov	r3, r5
 8003f02:	eb12 0a00 	adds.w	sl, r2, r0
 8003f06:	eb43 0b01 	adc.w	fp, r3, r1
 8003f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f04f 0100 	mov.w	r1, #0
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	f04f 0300 	mov.w	r3, #0
 8003f1c:	008b      	lsls	r3, r1, #2
 8003f1e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f22:	0082      	lsls	r2, r0, #2
 8003f24:	4650      	mov	r0, sl
 8003f26:	4659      	mov	r1, fp
 8003f28:	f7fc f972 	bl	8000210 <__aeabi_uldivmod>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	4b0e      	ldr	r3, [pc, #56]	; (8003f6c <UART_SetConfig+0x38c>)
 8003f32:	fba3 1302 	umull	r1, r3, r3, r2
 8003f36:	095b      	lsrs	r3, r3, #5
 8003f38:	2164      	movs	r1, #100	; 0x64
 8003f3a:	fb01 f303 	mul.w	r3, r1, r3
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	3332      	adds	r3, #50	; 0x32
 8003f44:	4a09      	ldr	r2, [pc, #36]	; (8003f6c <UART_SetConfig+0x38c>)
 8003f46:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4a:	095b      	lsrs	r3, r3, #5
 8003f4c:	f003 020f 	and.w	r2, r3, #15
 8003f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4432      	add	r2, r6
 8003f56:	609a      	str	r2, [r3, #8]
}
 8003f58:	bf00      	nop
 8003f5a:	377c      	adds	r7, #124	; 0x7c
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f62:	bf00      	nop
 8003f64:	40011000 	.word	0x40011000
 8003f68:	40011400 	.word	0x40011400
 8003f6c:	51eb851f 	.word	0x51eb851f

08003f70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f70:	b084      	sub	sp, #16
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b084      	sub	sp, #16
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
 8003f7a:	f107 001c 	add.w	r0, r7, #28
 8003f7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d122      	bne.n	8003fce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003f9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d105      	bne.n	8003fc2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f001 fb16 	bl	80055f4 <USB_CoreReset>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	73fb      	strb	r3, [r7, #15]
 8003fcc:	e01a      	b.n	8004004 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f001 fb0a 	bl	80055f4 <USB_CoreReset>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d106      	bne.n	8003ff8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	639a      	str	r2, [r3, #56]	; 0x38
 8003ff6:	e005      	b.n	8004004 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004006:	2b01      	cmp	r3, #1
 8004008:	d10b      	bne.n	8004022 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f043 0206 	orr.w	r2, r3, #6
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f043 0220 	orr.w	r2, r3, #32
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004022:	7bfb      	ldrb	r3, [r7, #15]
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800402e:	b004      	add	sp, #16
 8004030:	4770      	bx	lr
	...

08004034 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004034:	b480      	push	{r7}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	4613      	mov	r3, r2
 8004040:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004042:	79fb      	ldrb	r3, [r7, #7]
 8004044:	2b02      	cmp	r3, #2
 8004046:	d165      	bne.n	8004114 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	4a41      	ldr	r2, [pc, #260]	; (8004150 <USB_SetTurnaroundTime+0x11c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d906      	bls.n	800405e <USB_SetTurnaroundTime+0x2a>
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	4a40      	ldr	r2, [pc, #256]	; (8004154 <USB_SetTurnaroundTime+0x120>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d202      	bcs.n	800405e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004058:	230f      	movs	r3, #15
 800405a:	617b      	str	r3, [r7, #20]
 800405c:	e062      	b.n	8004124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	4a3c      	ldr	r2, [pc, #240]	; (8004154 <USB_SetTurnaroundTime+0x120>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d306      	bcc.n	8004074 <USB_SetTurnaroundTime+0x40>
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	4a3b      	ldr	r2, [pc, #236]	; (8004158 <USB_SetTurnaroundTime+0x124>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d202      	bcs.n	8004074 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800406e:	230e      	movs	r3, #14
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	e057      	b.n	8004124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	4a38      	ldr	r2, [pc, #224]	; (8004158 <USB_SetTurnaroundTime+0x124>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d306      	bcc.n	800408a <USB_SetTurnaroundTime+0x56>
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	4a37      	ldr	r2, [pc, #220]	; (800415c <USB_SetTurnaroundTime+0x128>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d202      	bcs.n	800408a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004084:	230d      	movs	r3, #13
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	e04c      	b.n	8004124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	4a33      	ldr	r2, [pc, #204]	; (800415c <USB_SetTurnaroundTime+0x128>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d306      	bcc.n	80040a0 <USB_SetTurnaroundTime+0x6c>
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	4a32      	ldr	r2, [pc, #200]	; (8004160 <USB_SetTurnaroundTime+0x12c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d802      	bhi.n	80040a0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800409a:	230c      	movs	r3, #12
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	e041      	b.n	8004124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	4a2f      	ldr	r2, [pc, #188]	; (8004160 <USB_SetTurnaroundTime+0x12c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d906      	bls.n	80040b6 <USB_SetTurnaroundTime+0x82>
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	4a2e      	ldr	r2, [pc, #184]	; (8004164 <USB_SetTurnaroundTime+0x130>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d802      	bhi.n	80040b6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80040b0:	230b      	movs	r3, #11
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	e036      	b.n	8004124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	4a2a      	ldr	r2, [pc, #168]	; (8004164 <USB_SetTurnaroundTime+0x130>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d906      	bls.n	80040cc <USB_SetTurnaroundTime+0x98>
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	4a29      	ldr	r2, [pc, #164]	; (8004168 <USB_SetTurnaroundTime+0x134>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d802      	bhi.n	80040cc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80040c6:	230a      	movs	r3, #10
 80040c8:	617b      	str	r3, [r7, #20]
 80040ca:	e02b      	b.n	8004124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	4a26      	ldr	r2, [pc, #152]	; (8004168 <USB_SetTurnaroundTime+0x134>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d906      	bls.n	80040e2 <USB_SetTurnaroundTime+0xae>
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	4a25      	ldr	r2, [pc, #148]	; (800416c <USB_SetTurnaroundTime+0x138>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d202      	bcs.n	80040e2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80040dc:	2309      	movs	r3, #9
 80040de:	617b      	str	r3, [r7, #20]
 80040e0:	e020      	b.n	8004124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	4a21      	ldr	r2, [pc, #132]	; (800416c <USB_SetTurnaroundTime+0x138>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d306      	bcc.n	80040f8 <USB_SetTurnaroundTime+0xc4>
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	4a20      	ldr	r2, [pc, #128]	; (8004170 <USB_SetTurnaroundTime+0x13c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d802      	bhi.n	80040f8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80040f2:	2308      	movs	r3, #8
 80040f4:	617b      	str	r3, [r7, #20]
 80040f6:	e015      	b.n	8004124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	4a1d      	ldr	r2, [pc, #116]	; (8004170 <USB_SetTurnaroundTime+0x13c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d906      	bls.n	800410e <USB_SetTurnaroundTime+0xda>
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	4a1c      	ldr	r2, [pc, #112]	; (8004174 <USB_SetTurnaroundTime+0x140>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d202      	bcs.n	800410e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004108:	2307      	movs	r3, #7
 800410a:	617b      	str	r3, [r7, #20]
 800410c:	e00a      	b.n	8004124 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800410e:	2306      	movs	r3, #6
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	e007      	b.n	8004124 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004114:	79fb      	ldrb	r3, [r7, #7]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d102      	bne.n	8004120 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800411a:	2309      	movs	r3, #9
 800411c:	617b      	str	r3, [r7, #20]
 800411e:	e001      	b.n	8004124 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004120:	2309      	movs	r3, #9
 8004122:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	029b      	lsls	r3, r3, #10
 8004138:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800413c:	431a      	orrs	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	371c      	adds	r7, #28
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	00d8acbf 	.word	0x00d8acbf
 8004154:	00e4e1c0 	.word	0x00e4e1c0
 8004158:	00f42400 	.word	0x00f42400
 800415c:	01067380 	.word	0x01067380
 8004160:	011a499f 	.word	0x011a499f
 8004164:	01312cff 	.word	0x01312cff
 8004168:	014ca43f 	.word	0x014ca43f
 800416c:	016e3600 	.word	0x016e3600
 8004170:	01a6ab1f 	.word	0x01a6ab1f
 8004174:	01e84800 	.word	0x01e84800

08004178 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f043 0201 	orr.w	r2, r3, #1
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f023 0201 	bic.w	r2, r3, #1
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	460b      	mov	r3, r1
 80041c6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80041d8:	78fb      	ldrb	r3, [r7, #3]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d115      	bne.n	800420a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80041ea:	2001      	movs	r0, #1
 80041ec:	f7fc fcb4 	bl	8000b58 <HAL_Delay>
      ms++;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	3301      	adds	r3, #1
 80041f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f001 f96c 	bl	80054d4 <USB_GetMode>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d01e      	beq.n	8004240 <USB_SetCurrentMode+0x84>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2b31      	cmp	r3, #49	; 0x31
 8004206:	d9f0      	bls.n	80041ea <USB_SetCurrentMode+0x2e>
 8004208:	e01a      	b.n	8004240 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800420a:	78fb      	ldrb	r3, [r7, #3]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d115      	bne.n	800423c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800421c:	2001      	movs	r0, #1
 800421e:	f7fc fc9b 	bl	8000b58 <HAL_Delay>
      ms++;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	3301      	adds	r3, #1
 8004226:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f001 f953 	bl	80054d4 <USB_GetMode>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d005      	beq.n	8004240 <USB_SetCurrentMode+0x84>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2b31      	cmp	r3, #49	; 0x31
 8004238:	d9f0      	bls.n	800421c <USB_SetCurrentMode+0x60>
 800423a:	e001      	b.n	8004240 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e005      	b.n	800424c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b32      	cmp	r3, #50	; 0x32
 8004244:	d101      	bne.n	800424a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e000      	b.n	800424c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004254:	b084      	sub	sp, #16
 8004256:	b580      	push	{r7, lr}
 8004258:	b086      	sub	sp, #24
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
 800425e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004262:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800426e:	2300      	movs	r3, #0
 8004270:	613b      	str	r3, [r7, #16]
 8004272:	e009      	b.n	8004288 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	3340      	adds	r3, #64	; 0x40
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	2200      	movs	r2, #0
 8004280:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	3301      	adds	r3, #1
 8004286:	613b      	str	r3, [r7, #16]
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	2b0e      	cmp	r3, #14
 800428c:	d9f2      	bls.n	8004274 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800428e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004290:	2b00      	cmp	r3, #0
 8004292:	d11c      	bne.n	80042ce <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042a2:	f043 0302 	orr.w	r3, r3, #2
 80042a6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	e005      	b.n	80042da <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80042e0:	461a      	mov	r2, r3
 80042e2:	2300      	movs	r3, #0
 80042e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ec:	4619      	mov	r1, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f4:	461a      	mov	r2, r3
 80042f6:	680b      	ldr	r3, [r1, #0]
 80042f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d10c      	bne.n	800431a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004302:	2b00      	cmp	r3, #0
 8004304:	d104      	bne.n	8004310 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004306:	2100      	movs	r1, #0
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f945 	bl	8004598 <USB_SetDevSpeed>
 800430e:	e008      	b.n	8004322 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004310:	2101      	movs	r1, #1
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f940 	bl	8004598 <USB_SetDevSpeed>
 8004318:	e003      	b.n	8004322 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800431a:	2103      	movs	r1, #3
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f93b 	bl	8004598 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004322:	2110      	movs	r1, #16
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f8f3 	bl	8004510 <USB_FlushTxFifo>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f90f 	bl	8004558 <USB_FlushRxFifo>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800434a:	461a      	mov	r2, r3
 800434c:	2300      	movs	r3, #0
 800434e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004356:	461a      	mov	r2, r3
 8004358:	2300      	movs	r3, #0
 800435a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004362:	461a      	mov	r2, r3
 8004364:	2300      	movs	r3, #0
 8004366:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004368:	2300      	movs	r3, #0
 800436a:	613b      	str	r3, [r7, #16]
 800436c:	e043      	b.n	80043f6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	015a      	lsls	r2, r3, #5
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4413      	add	r3, r2
 8004376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004380:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004384:	d118      	bne.n	80043b8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10a      	bne.n	80043a2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4413      	add	r3, r2
 8004394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004398:	461a      	mov	r2, r3
 800439a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800439e:	6013      	str	r3, [r2, #0]
 80043a0:	e013      	b.n	80043ca <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	015a      	lsls	r2, r3, #5
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	4413      	add	r3, r2
 80043aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ae:	461a      	mov	r2, r3
 80043b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	e008      	b.n	80043ca <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c4:	461a      	mov	r2, r3
 80043c6:	2300      	movs	r3, #0
 80043c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	015a      	lsls	r2, r3, #5
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d6:	461a      	mov	r2, r3
 80043d8:	2300      	movs	r3, #0
 80043da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	015a      	lsls	r2, r3, #5
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e8:	461a      	mov	r2, r3
 80043ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	3301      	adds	r3, #1
 80043f4:	613b      	str	r3, [r7, #16]
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d3b7      	bcc.n	800436e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043fe:	2300      	movs	r3, #0
 8004400:	613b      	str	r3, [r7, #16]
 8004402:	e043      	b.n	800448c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4413      	add	r3, r2
 800440c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004416:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800441a:	d118      	bne.n	800444e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10a      	bne.n	8004438 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4413      	add	r3, r2
 800442a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800442e:	461a      	mov	r2, r3
 8004430:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004434:	6013      	str	r3, [r2, #0]
 8004436:	e013      	b.n	8004460 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4413      	add	r3, r2
 8004440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004444:	461a      	mov	r2, r3
 8004446:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	e008      	b.n	8004460 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4413      	add	r3, r2
 8004456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800445a:	461a      	mov	r2, r3
 800445c:	2300      	movs	r3, #0
 800445e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800446c:	461a      	mov	r2, r3
 800446e:	2300      	movs	r3, #0
 8004470:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	4413      	add	r3, r2
 800447a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800447e:	461a      	mov	r2, r3
 8004480:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004484:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	3301      	adds	r3, #1
 800448a:	613b      	str	r3, [r7, #16]
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	429a      	cmp	r2, r3
 8004492:	d3b7      	bcc.n	8004404 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80044b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80044b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d105      	bne.n	80044c8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	f043 0210 	orr.w	r2, r3, #16
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	699a      	ldr	r2, [r3, #24]
 80044cc:	4b0f      	ldr	r3, [pc, #60]	; (800450c <USB_DevInit+0x2b8>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80044d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d005      	beq.n	80044e6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	f043 0208 	orr.w	r2, r3, #8
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80044e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d107      	bne.n	80044fc <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044f4:	f043 0304 	orr.w	r3, r3, #4
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80044fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004508:	b004      	add	sp, #16
 800450a:	4770      	bx	lr
 800450c:	803c3800 	.word	0x803c3800

08004510 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800451a:	2300      	movs	r3, #0
 800451c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	019b      	lsls	r3, r3, #6
 8004522:	f043 0220 	orr.w	r2, r3, #32
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	3301      	adds	r3, #1
 800452e:	60fb      	str	r3, [r7, #12]
 8004530:	4a08      	ldr	r2, [pc, #32]	; (8004554 <USB_FlushTxFifo+0x44>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d901      	bls.n	800453a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e006      	b.n	8004548 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f003 0320 	and.w	r3, r3, #32
 8004542:	2b20      	cmp	r3, #32
 8004544:	d0f1      	beq.n	800452a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	00030d40 	.word	0x00030d40

08004558 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2210      	movs	r2, #16
 8004568:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	3301      	adds	r3, #1
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	4a08      	ldr	r2, [pc, #32]	; (8004594 <USB_FlushRxFifo+0x3c>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d901      	bls.n	800457a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e006      	b.n	8004588 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	f003 0310 	and.w	r3, r3, #16
 8004582:	2b10      	cmp	r3, #16
 8004584:	d0f1      	beq.n	800456a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	00030d40 	.word	0x00030d40

08004598 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	460b      	mov	r3, r1
 80045a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	78fb      	ldrb	r3, [r7, #3]
 80045b2:	68f9      	ldr	r1, [r7, #12]
 80045b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045b8:	4313      	orrs	r3, r2
 80045ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b087      	sub	sp, #28
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 0306 	and.w	r3, r3, #6
 80045e2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d102      	bne.n	80045f0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80045ea:	2300      	movs	r3, #0
 80045ec:	75fb      	strb	r3, [r7, #23]
 80045ee:	e00a      	b.n	8004606 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d002      	beq.n	80045fc <USB_GetDevSpeed+0x32>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2b06      	cmp	r3, #6
 80045fa:	d102      	bne.n	8004602 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80045fc:	2302      	movs	r3, #2
 80045fe:	75fb      	strb	r3, [r7, #23]
 8004600:	e001      	b.n	8004606 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004602:	230f      	movs	r3, #15
 8004604:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004606:	7dfb      	ldrb	r3, [r7, #23]
}
 8004608:	4618      	mov	r0, r3
 800460a:	371c      	adds	r7, #28
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	785b      	ldrb	r3, [r3, #1]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d13a      	bne.n	80046a6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004636:	69da      	ldr	r2, [r3, #28]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	f003 030f 	and.w	r3, r3, #15
 8004640:	2101      	movs	r1, #1
 8004642:	fa01 f303 	lsl.w	r3, r1, r3
 8004646:	b29b      	uxth	r3, r3
 8004648:	68f9      	ldr	r1, [r7, #12]
 800464a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800464e:	4313      	orrs	r3, r2
 8004650:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	4413      	add	r3, r2
 800465a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d155      	bne.n	8004714 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4413      	add	r3, r2
 8004670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	78db      	ldrb	r3, [r3, #3]
 8004682:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004684:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	059b      	lsls	r3, r3, #22
 800468a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800468c:	4313      	orrs	r3, r2
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	0151      	lsls	r1, r2, #5
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	440a      	add	r2, r1
 8004696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800469a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800469e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046a2:	6013      	str	r3, [r2, #0]
 80046a4:	e036      	b.n	8004714 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ac:	69da      	ldr	r2, [r3, #28]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	f003 030f 	and.w	r3, r3, #15
 80046b6:	2101      	movs	r1, #1
 80046b8:	fa01 f303 	lsl.w	r3, r1, r3
 80046bc:	041b      	lsls	r3, r3, #16
 80046be:	68f9      	ldr	r1, [r7, #12]
 80046c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046c4:	4313      	orrs	r3, r2
 80046c6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d11a      	bne.n	8004714 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	78db      	ldrb	r3, [r3, #3]
 80046f8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046fa:	430b      	orrs	r3, r1
 80046fc:	4313      	orrs	r3, r2
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	0151      	lsls	r1, r2, #5
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	440a      	add	r2, r1
 8004706:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800470a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800470e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004712:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
	...

08004724 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	785b      	ldrb	r3, [r3, #1]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d161      	bne.n	8004804 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4413      	add	r3, r2
 8004748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004752:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004756:	d11f      	bne.n	8004798 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	015a      	lsls	r2, r3, #5
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4413      	add	r3, r2
 8004760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	0151      	lsls	r1, r2, #5
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	440a      	add	r2, r1
 800476e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004772:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004776:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	0151      	lsls	r1, r2, #5
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	440a      	add	r2, r1
 800478e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004792:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004796:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800479e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	f003 030f 	and.w	r3, r3, #15
 80047a8:	2101      	movs	r1, #1
 80047aa:	fa01 f303 	lsl.w	r3, r1, r3
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	43db      	mvns	r3, r3
 80047b2:	68f9      	ldr	r1, [r7, #12]
 80047b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047b8:	4013      	ands	r3, r2
 80047ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c2:	69da      	ldr	r2, [r3, #28]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	f003 030f 	and.w	r3, r3, #15
 80047cc:	2101      	movs	r1, #1
 80047ce:	fa01 f303 	lsl.w	r3, r1, r3
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	43db      	mvns	r3, r3
 80047d6:	68f9      	ldr	r1, [r7, #12]
 80047d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047dc:	4013      	ands	r3, r2
 80047de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	0159      	lsls	r1, r3, #5
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	440b      	add	r3, r1
 80047f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047fa:	4619      	mov	r1, r3
 80047fc:	4b35      	ldr	r3, [pc, #212]	; (80048d4 <USB_DeactivateEndpoint+0x1b0>)
 80047fe:	4013      	ands	r3, r2
 8004800:	600b      	str	r3, [r1, #0]
 8004802:	e060      	b.n	80048c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4413      	add	r3, r2
 800480c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004816:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800481a:	d11f      	bne.n	800485c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	015a      	lsls	r2, r3, #5
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4413      	add	r3, r2
 8004824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	0151      	lsls	r1, r2, #5
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	440a      	add	r2, r1
 8004832:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004836:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800483a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	0151      	lsls	r1, r2, #5
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	440a      	add	r2, r1
 8004852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004856:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800485a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004862:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	f003 030f 	and.w	r3, r3, #15
 800486c:	2101      	movs	r1, #1
 800486e:	fa01 f303 	lsl.w	r3, r1, r3
 8004872:	041b      	lsls	r3, r3, #16
 8004874:	43db      	mvns	r3, r3
 8004876:	68f9      	ldr	r1, [r7, #12]
 8004878:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800487c:	4013      	ands	r3, r2
 800487e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004886:	69da      	ldr	r2, [r3, #28]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	f003 030f 	and.w	r3, r3, #15
 8004890:	2101      	movs	r1, #1
 8004892:	fa01 f303 	lsl.w	r3, r1, r3
 8004896:	041b      	lsls	r3, r3, #16
 8004898:	43db      	mvns	r3, r3
 800489a:	68f9      	ldr	r1, [r7, #12]
 800489c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048a0:	4013      	ands	r3, r2
 80048a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	015a      	lsls	r2, r3, #5
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4413      	add	r3, r2
 80048ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	0159      	lsls	r1, r3, #5
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	440b      	add	r3, r1
 80048ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048be:	4619      	mov	r1, r3
 80048c0:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <USB_DeactivateEndpoint+0x1b4>)
 80048c2:	4013      	ands	r3, r2
 80048c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr
 80048d4:	ec337800 	.word	0xec337800
 80048d8:	eff37800 	.word	0xeff37800

080048dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b08a      	sub	sp, #40	; 0x28
 80048e0:	af02      	add	r7, sp, #8
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	4613      	mov	r3, r2
 80048e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	785b      	ldrb	r3, [r3, #1]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	f040 815c 	bne.w	8004bb6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d132      	bne.n	800496c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	4413      	add	r3, r2
 800490e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	0151      	lsls	r1, r2, #5
 8004918:	69fa      	ldr	r2, [r7, #28]
 800491a:	440a      	add	r2, r1
 800491c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004920:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004924:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004928:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	4413      	add	r3, r2
 8004932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	0151      	lsls	r1, r2, #5
 800493c:	69fa      	ldr	r2, [r7, #28]
 800493e:	440a      	add	r2, r1
 8004940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004944:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004948:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	015a      	lsls	r2, r3, #5
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	4413      	add	r3, r2
 8004952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	0151      	lsls	r1, r2, #5
 800495c:	69fa      	ldr	r2, [r7, #28]
 800495e:	440a      	add	r2, r1
 8004960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004964:	0cdb      	lsrs	r3, r3, #19
 8004966:	04db      	lsls	r3, r3, #19
 8004968:	6113      	str	r3, [r2, #16]
 800496a:	e074      	b.n	8004a56 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	015a      	lsls	r2, r3, #5
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	4413      	add	r3, r2
 8004974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	0151      	lsls	r1, r2, #5
 800497e:	69fa      	ldr	r2, [r7, #28]
 8004980:	440a      	add	r2, r1
 8004982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004986:	0cdb      	lsrs	r3, r3, #19
 8004988:	04db      	lsls	r3, r3, #19
 800498a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	4413      	add	r3, r2
 8004994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	0151      	lsls	r1, r2, #5
 800499e:	69fa      	ldr	r2, [r7, #28]
 80049a0:	440a      	add	r2, r1
 80049a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049bc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	6959      	ldr	r1, [r3, #20]
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	440b      	add	r3, r1
 80049c8:	1e59      	subs	r1, r3, #1
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80049d2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80049d4:	4b9d      	ldr	r3, [pc, #628]	; (8004c4c <USB_EPStartXfer+0x370>)
 80049d6:	400b      	ands	r3, r1
 80049d8:	69b9      	ldr	r1, [r7, #24]
 80049da:	0148      	lsls	r0, r1, #5
 80049dc:	69f9      	ldr	r1, [r7, #28]
 80049de:	4401      	add	r1, r0
 80049e0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049e4:	4313      	orrs	r3, r2
 80049e6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	015a      	lsls	r2, r3, #5
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	4413      	add	r3, r2
 80049f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f4:	691a      	ldr	r2, [r3, #16]
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049fe:	69b9      	ldr	r1, [r7, #24]
 8004a00:	0148      	lsls	r0, r1, #5
 8004a02:	69f9      	ldr	r1, [r7, #28]
 8004a04:	4401      	add	r1, r0
 8004a06:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	78db      	ldrb	r3, [r3, #3]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d11f      	bne.n	8004a56 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	015a      	lsls	r2, r3, #5
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	0151      	lsls	r1, r2, #5
 8004a28:	69fa      	ldr	r2, [r7, #28]
 8004a2a:	440a      	add	r2, r1
 8004a2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a30:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004a34:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	0151      	lsls	r1, r2, #5
 8004a48:	69fa      	ldr	r2, [r7, #28]
 8004a4a:	440a      	add	r2, r1
 8004a4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a54:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004a56:	79fb      	ldrb	r3, [r7, #7]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d14b      	bne.n	8004af4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d009      	beq.n	8004a78 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a70:	461a      	mov	r2, r3
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	78db      	ldrb	r3, [r3, #3]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d128      	bne.n	8004ad2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d110      	bne.n	8004ab2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	015a      	lsls	r2, r3, #5
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	0151      	lsls	r1, r2, #5
 8004aa2:	69fa      	ldr	r2, [r7, #28]
 8004aa4:	440a      	add	r2, r1
 8004aa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aaa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004aae:	6013      	str	r3, [r2, #0]
 8004ab0:	e00f      	b.n	8004ad2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	0151      	lsls	r1, r2, #5
 8004ac4:	69fa      	ldr	r2, [r7, #28]
 8004ac6:	440a      	add	r2, r1
 8004ac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	015a      	lsls	r2, r3, #5
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	0151      	lsls	r1, r2, #5
 8004ae4:	69fa      	ldr	r2, [r7, #28]
 8004ae6:	440a      	add	r2, r1
 8004ae8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004af0:	6013      	str	r3, [r2, #0]
 8004af2:	e12f      	b.n	8004d54 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	0151      	lsls	r1, r2, #5
 8004b06:	69fa      	ldr	r2, [r7, #28]
 8004b08:	440a      	add	r2, r1
 8004b0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b12:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	78db      	ldrb	r3, [r3, #3]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d015      	beq.n	8004b48 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 8117 	beq.w	8004d54 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	2101      	movs	r1, #1
 8004b38:	fa01 f303 	lsl.w	r3, r1, r3
 8004b3c:	69f9      	ldr	r1, [r7, #28]
 8004b3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b42:	4313      	orrs	r3, r2
 8004b44:	634b      	str	r3, [r1, #52]	; 0x34
 8004b46:	e105      	b.n	8004d54 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d110      	bne.n	8004b7a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	0151      	lsls	r1, r2, #5
 8004b6a:	69fa      	ldr	r2, [r7, #28]
 8004b6c:	440a      	add	r2, r1
 8004b6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b76:	6013      	str	r3, [r2, #0]
 8004b78:	e00f      	b.n	8004b9a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	0151      	lsls	r1, r2, #5
 8004b8c:	69fa      	ldr	r2, [r7, #28]
 8004b8e:	440a      	add	r2, r1
 8004b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b98:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	68d9      	ldr	r1, [r3, #12]
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	781a      	ldrb	r2, [r3, #0]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	b298      	uxth	r0, r3
 8004ba8:	79fb      	ldrb	r3, [r7, #7]
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	4603      	mov	r3, r0
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f000 fa2b 	bl	800500a <USB_WritePacket>
 8004bb4:	e0ce      	b.n	8004d54 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	0151      	lsls	r1, r2, #5
 8004bc8:	69fa      	ldr	r2, [r7, #28]
 8004bca:	440a      	add	r2, r1
 8004bcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bd0:	0cdb      	lsrs	r3, r3, #19
 8004bd2:	04db      	lsls	r3, r3, #19
 8004bd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	0151      	lsls	r1, r2, #5
 8004be8:	69fa      	ldr	r2, [r7, #28]
 8004bea:	440a      	add	r2, r1
 8004bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bf0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bf4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bf8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d126      	bne.n	8004c50 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	015a      	lsls	r2, r3, #5
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	4413      	add	r3, r2
 8004c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c0e:	691a      	ldr	r2, [r3, #16]
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c18:	69b9      	ldr	r1, [r7, #24]
 8004c1a:	0148      	lsls	r0, r1, #5
 8004c1c:	69f9      	ldr	r1, [r7, #28]
 8004c1e:	4401      	add	r1, r0
 8004c20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c24:	4313      	orrs	r3, r2
 8004c26:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	0151      	lsls	r1, r2, #5
 8004c3a:	69fa      	ldr	r2, [r7, #28]
 8004c3c:	440a      	add	r2, r1
 8004c3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c46:	6113      	str	r3, [r2, #16]
 8004c48:	e036      	b.n	8004cb8 <USB_EPStartXfer+0x3dc>
 8004c4a:	bf00      	nop
 8004c4c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	695a      	ldr	r2, [r3, #20]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	4413      	add	r3, r2
 8004c5a:	1e5a      	subs	r2, r3, #1
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c64:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	015a      	lsls	r2, r3, #5
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c72:	691a      	ldr	r2, [r3, #16]
 8004c74:	8afb      	ldrh	r3, [r7, #22]
 8004c76:	04d9      	lsls	r1, r3, #19
 8004c78:	4b39      	ldr	r3, [pc, #228]	; (8004d60 <USB_EPStartXfer+0x484>)
 8004c7a:	400b      	ands	r3, r1
 8004c7c:	69b9      	ldr	r1, [r7, #24]
 8004c7e:	0148      	lsls	r0, r1, #5
 8004c80:	69f9      	ldr	r1, [r7, #28]
 8004c82:	4401      	add	r1, r0
 8004c84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c98:	691a      	ldr	r2, [r3, #16]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	8af9      	ldrh	r1, [r7, #22]
 8004ca0:	fb01 f303 	mul.w	r3, r1, r3
 8004ca4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ca8:	69b9      	ldr	r1, [r7, #24]
 8004caa:	0148      	lsls	r0, r1, #5
 8004cac:	69f9      	ldr	r1, [r7, #28]
 8004cae:	4401      	add	r1, r0
 8004cb0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004cb8:	79fb      	ldrb	r3, [r7, #7]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d10d      	bne.n	8004cda <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d009      	beq.n	8004cda <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	68d9      	ldr	r1, [r3, #12]
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd6:	460a      	mov	r2, r1
 8004cd8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	78db      	ldrb	r3, [r3, #3]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d128      	bne.n	8004d34 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d110      	bne.n	8004d14 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	0151      	lsls	r1, r2, #5
 8004d04:	69fa      	ldr	r2, [r7, #28]
 8004d06:	440a      	add	r2, r1
 8004d08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	e00f      	b.n	8004d34 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	0151      	lsls	r1, r2, #5
 8004d26:	69fa      	ldr	r2, [r7, #28]
 8004d28:	440a      	add	r2, r1
 8004d2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d32:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	0151      	lsls	r1, r2, #5
 8004d46:	69fa      	ldr	r2, [r7, #28]
 8004d48:	440a      	add	r2, r1
 8004d4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3720      	adds	r7, #32
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	1ff80000 	.word	0x1ff80000

08004d64 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b087      	sub	sp, #28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	785b      	ldrb	r3, [r3, #1]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	f040 80cd 	bne.w	8004f20 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d132      	bne.n	8004df4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	0151      	lsls	r1, r2, #5
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	440a      	add	r2, r1
 8004da4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004da8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004dac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004db0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	015a      	lsls	r2, r3, #5
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	4413      	add	r3, r2
 8004dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	0151      	lsls	r1, r2, #5
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	440a      	add	r2, r1
 8004dc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dcc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004dd0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	015a      	lsls	r2, r3, #5
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	0151      	lsls	r1, r2, #5
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	440a      	add	r2, r1
 8004de8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dec:	0cdb      	lsrs	r3, r3, #19
 8004dee:	04db      	lsls	r3, r3, #19
 8004df0:	6113      	str	r3, [r2, #16]
 8004df2:	e04e      	b.n	8004e92 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	0151      	lsls	r1, r2, #5
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	440a      	add	r2, r1
 8004e0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e0e:	0cdb      	lsrs	r3, r3, #19
 8004e10:	04db      	lsls	r3, r3, #19
 8004e12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	0151      	lsls	r1, r2, #5
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	440a      	add	r2, r1
 8004e2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e2e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e32:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e36:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	695a      	ldr	r2, [r3, #20]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d903      	bls.n	8004e4c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	0151      	lsls	r1, r2, #5
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	440a      	add	r2, r1
 8004e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e78:	691a      	ldr	r2, [r3, #16]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e82:	6939      	ldr	r1, [r7, #16]
 8004e84:	0148      	lsls	r0, r1, #5
 8004e86:	6979      	ldr	r1, [r7, #20]
 8004e88:	4401      	add	r1, r0
 8004e8a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004e92:	79fb      	ldrb	r3, [r7, #7]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d11e      	bne.n	8004ed6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d009      	beq.n	8004eb4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	015a      	lsls	r2, r3, #5
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eac:	461a      	mov	r2, r3
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	0151      	lsls	r1, r2, #5
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	440a      	add	r2, r1
 8004eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ece:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ed2:	6013      	str	r3, [r2, #0]
 8004ed4:	e092      	b.n	8004ffc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	015a      	lsls	r2, r3, #5
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	4413      	add	r3, r2
 8004ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	0151      	lsls	r1, r2, #5
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	440a      	add	r2, r1
 8004eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ef4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d07e      	beq.n	8004ffc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	2101      	movs	r1, #1
 8004f10:	fa01 f303 	lsl.w	r3, r1, r3
 8004f14:	6979      	ldr	r1, [r7, #20]
 8004f16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	634b      	str	r3, [r1, #52]	; 0x34
 8004f1e:	e06d      	b.n	8004ffc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	0151      	lsls	r1, r2, #5
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	440a      	add	r2, r1
 8004f36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f3a:	0cdb      	lsrs	r3, r3, #19
 8004f3c:	04db      	lsls	r3, r3, #19
 8004f3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	0151      	lsls	r1, r2, #5
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	440a      	add	r2, r1
 8004f56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f62:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	0151      	lsls	r1, r2, #5
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	440a      	add	r2, r1
 8004f8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f92:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	015a      	lsls	r2, r3, #5
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa0:	691a      	ldr	r2, [r3, #16]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004faa:	6939      	ldr	r1, [r7, #16]
 8004fac:	0148      	lsls	r0, r1, #5
 8004fae:	6979      	ldr	r1, [r7, #20]
 8004fb0:	4401      	add	r1, r0
 8004fb2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004fba:	79fb      	ldrb	r3, [r7, #7]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d10d      	bne.n	8004fdc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d009      	beq.n	8004fdc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	68d9      	ldr	r1, [r3, #12]
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd8:	460a      	mov	r2, r1
 8004fda:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	0151      	lsls	r1, r2, #5
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	440a      	add	r2, r1
 8004ff2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ff6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ffa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	371c      	adds	r7, #28
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800500a:	b480      	push	{r7}
 800500c:	b089      	sub	sp, #36	; 0x24
 800500e:	af00      	add	r7, sp, #0
 8005010:	60f8      	str	r0, [r7, #12]
 8005012:	60b9      	str	r1, [r7, #8]
 8005014:	4611      	mov	r1, r2
 8005016:	461a      	mov	r2, r3
 8005018:	460b      	mov	r3, r1
 800501a:	71fb      	strb	r3, [r7, #7]
 800501c:	4613      	mov	r3, r2
 800501e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005028:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800502c:	2b00      	cmp	r3, #0
 800502e:	d123      	bne.n	8005078 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005030:	88bb      	ldrh	r3, [r7, #4]
 8005032:	3303      	adds	r3, #3
 8005034:	089b      	lsrs	r3, r3, #2
 8005036:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005038:	2300      	movs	r3, #0
 800503a:	61bb      	str	r3, [r7, #24]
 800503c:	e018      	b.n	8005070 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800503e:	79fb      	ldrb	r3, [r7, #7]
 8005040:	031a      	lsls	r2, r3, #12
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	4413      	add	r3, r2
 8005046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800504a:	461a      	mov	r2, r3
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	3301      	adds	r3, #1
 8005056:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	3301      	adds	r3, #1
 800505c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	3301      	adds	r3, #1
 8005062:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	3301      	adds	r3, #1
 8005068:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	3301      	adds	r3, #1
 800506e:	61bb      	str	r3, [r7, #24]
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	429a      	cmp	r2, r3
 8005076:	d3e2      	bcc.n	800503e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3724      	adds	r7, #36	; 0x24
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005086:	b480      	push	{r7}
 8005088:	b08b      	sub	sp, #44	; 0x2c
 800508a:	af00      	add	r7, sp, #0
 800508c:	60f8      	str	r0, [r7, #12]
 800508e:	60b9      	str	r1, [r7, #8]
 8005090:	4613      	mov	r3, r2
 8005092:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800509c:	88fb      	ldrh	r3, [r7, #6]
 800509e:	089b      	lsrs	r3, r3, #2
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80050a4:	88fb      	ldrh	r3, [r7, #6]
 80050a6:	f003 0303 	and.w	r3, r3, #3
 80050aa:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80050ac:	2300      	movs	r3, #0
 80050ae:	623b      	str	r3, [r7, #32]
 80050b0:	e014      	b.n	80050dc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	601a      	str	r2, [r3, #0]
    pDest++;
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	3301      	adds	r3, #1
 80050c2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	3301      	adds	r3, #1
 80050c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	3301      	adds	r3, #1
 80050ce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d2:	3301      	adds	r3, #1
 80050d4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	3301      	adds	r3, #1
 80050da:	623b      	str	r3, [r7, #32]
 80050dc:	6a3a      	ldr	r2, [r7, #32]
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d3e6      	bcc.n	80050b2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80050e4:	8bfb      	ldrh	r3, [r7, #30]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d01e      	beq.n	8005128 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050f4:	461a      	mov	r2, r3
 80050f6:	f107 0310 	add.w	r3, r7, #16
 80050fa:	6812      	ldr	r2, [r2, #0]
 80050fc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	6a3b      	ldr	r3, [r7, #32]
 8005102:	b2db      	uxtb	r3, r3
 8005104:	00db      	lsls	r3, r3, #3
 8005106:	fa22 f303 	lsr.w	r3, r2, r3
 800510a:	b2da      	uxtb	r2, r3
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	701a      	strb	r2, [r3, #0]
      i++;
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	3301      	adds	r3, #1
 8005114:	623b      	str	r3, [r7, #32]
      pDest++;
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	3301      	adds	r3, #1
 800511a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800511c:	8bfb      	ldrh	r3, [r7, #30]
 800511e:	3b01      	subs	r3, #1
 8005120:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005122:	8bfb      	ldrh	r3, [r7, #30]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1ea      	bne.n	80050fe <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800512a:	4618      	mov	r0, r3
 800512c:	372c      	adds	r7, #44	; 0x2c
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005136:	b480      	push	{r7}
 8005138:	b085      	sub	sp, #20
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
 800513e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	785b      	ldrb	r3, [r3, #1]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d12c      	bne.n	80051ac <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4413      	add	r3, r2
 800515a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	db12      	blt.n	800518a <USB_EPSetStall+0x54>
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00f      	beq.n	800518a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	4413      	add	r3, r2
 8005172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	0151      	lsls	r1, r2, #5
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	440a      	add	r2, r1
 8005180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005184:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005188:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	015a      	lsls	r2, r3, #5
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4413      	add	r3, r2
 8005192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	0151      	lsls	r1, r2, #5
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	440a      	add	r2, r1
 80051a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	e02b      	b.n	8005204 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	db12      	blt.n	80051e4 <USB_EPSetStall+0xae>
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00f      	beq.n	80051e4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	0151      	lsls	r1, r2, #5
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	440a      	add	r2, r1
 80051da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051e2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	0151      	lsls	r1, r2, #5
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	440a      	add	r2, r1
 80051fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005202:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005212:	b480      	push	{r7}
 8005214:	b085      	sub	sp, #20
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	785b      	ldrb	r3, [r3, #1]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d128      	bne.n	8005280 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	4413      	add	r3, r2
 8005236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	0151      	lsls	r1, r2, #5
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	440a      	add	r2, r1
 8005244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005248:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800524c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	78db      	ldrb	r3, [r3, #3]
 8005252:	2b03      	cmp	r3, #3
 8005254:	d003      	beq.n	800525e <USB_EPClearStall+0x4c>
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	78db      	ldrb	r3, [r3, #3]
 800525a:	2b02      	cmp	r3, #2
 800525c:	d138      	bne.n	80052d0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	0151      	lsls	r1, r2, #5
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	440a      	add	r2, r1
 8005274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800527c:	6013      	str	r3, [r2, #0]
 800527e:	e027      	b.n	80052d0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4413      	add	r3, r2
 8005288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	0151      	lsls	r1, r2, #5
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	440a      	add	r2, r1
 8005296:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800529a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800529e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	78db      	ldrb	r3, [r3, #3]
 80052a4:	2b03      	cmp	r3, #3
 80052a6:	d003      	beq.n	80052b0 <USB_EPClearStall+0x9e>
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	78db      	ldrb	r3, [r3, #3]
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d10f      	bne.n	80052d0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	0151      	lsls	r1, r2, #5
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	440a      	add	r2, r1
 80052c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ce:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80052de:	b480      	push	{r7}
 80052e0:	b085      	sub	sp, #20
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	460b      	mov	r3, r1
 80052e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005300:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	78fb      	ldrb	r3, [r7, #3]
 800530c:	011b      	lsls	r3, r3, #4
 800530e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005312:	68f9      	ldr	r1, [r7, #12]
 8005314:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005318:	4313      	orrs	r3, r2
 800531a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800532a:	b480      	push	{r7}
 800532c:	b085      	sub	sp, #20
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005344:	f023 0303 	bic.w	r3, r3, #3
 8005348:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005358:	f023 0302 	bic.w	r3, r3, #2
 800535c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005386:	f023 0303 	bic.w	r3, r3, #3
 800538a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800539a:	f043 0302 	orr.w	r3, r3, #2
 800539e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b085      	sub	sp, #20
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4013      	ands	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80053c6:	68fb      	ldr	r3, [r7, #12]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	4013      	ands	r3, r2
 80053f6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	0c1b      	lsrs	r3, r3, #16
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	4013      	ands	r3, r2
 800542a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	b29b      	uxth	r3, r3
}
 8005430:	4618      	mov	r0, r3
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	460b      	mov	r3, r1
 8005446:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800544c:	78fb      	ldrb	r3, [r7, #3]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4413      	add	r3, r2
 8005454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	4013      	ands	r3, r2
 8005468:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800546a:	68bb      	ldr	r3, [r7, #8]
}
 800546c:	4618      	mov	r0, r3
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	460b      	mov	r3, r1
 8005482:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800549c:	78fb      	ldrb	r3, [r7, #3]
 800549e:	f003 030f 	and.w	r3, r3, #15
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	fa22 f303 	lsr.w	r3, r2, r3
 80054a8:	01db      	lsls	r3, r3, #7
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80054b2:	78fb      	ldrb	r3, [r7, #3]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	4013      	ands	r3, r2
 80054c4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80054c6:	68bb      	ldr	r3, [r7, #8]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	371c      	adds	r7, #28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	f003 0301 	and.w	r3, r3, #1
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800550a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800550e:	f023 0307 	bic.w	r3, r3, #7
 8005512:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005526:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3714      	adds	r7, #20
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
	...

08005538 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	460b      	mov	r3, r1
 8005542:	607a      	str	r2, [r7, #4]
 8005544:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	333c      	adds	r3, #60	; 0x3c
 800554e:	3304      	adds	r3, #4
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	4a26      	ldr	r2, [pc, #152]	; (80055f0 <USB_EP0_OutStart+0xb8>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d90a      	bls.n	8005572 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005568:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800556c:	d101      	bne.n	8005572 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	e037      	b.n	80055e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005578:	461a      	mov	r2, r3
 800557a:	2300      	movs	r3, #0
 800557c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800558c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005590:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055a0:	f043 0318 	orr.w	r3, r3, #24
 80055a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055b4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80055b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80055ba:	7afb      	ldrb	r3, [r7, #11]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d10f      	bne.n	80055e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c6:	461a      	mov	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055da:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80055de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	371c      	adds	r7, #28
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	4f54300a 	.word	0x4f54300a

080055f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055fc:	2300      	movs	r3, #0
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	3301      	adds	r3, #1
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	4a13      	ldr	r2, [pc, #76]	; (8005654 <USB_CoreReset+0x60>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d901      	bls.n	8005610 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e01a      	b.n	8005646 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	2b00      	cmp	r3, #0
 8005616:	daf3      	bge.n	8005600 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005618:	2300      	movs	r3, #0
 800561a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	f043 0201 	orr.w	r2, r3, #1
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	3301      	adds	r3, #1
 800562c:	60fb      	str	r3, [r7, #12]
 800562e:	4a09      	ldr	r2, [pc, #36]	; (8005654 <USB_CoreReset+0x60>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d901      	bls.n	8005638 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e006      	b.n	8005646 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	2b01      	cmp	r3, #1
 8005642:	d0f1      	beq.n	8005628 <USB_CoreReset+0x34>

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	00030d40 	.word	0x00030d40

08005658 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	460b      	mov	r3, r1
 8005662:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005664:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005668:	f003 fc82 	bl	8008f70 <USBD_static_malloc>
 800566c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d105      	bne.n	8005680 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800567c:	2302      	movs	r3, #2
 800567e:	e066      	b.n	800574e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	7c1b      	ldrb	r3, [r3, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d119      	bne.n	80056c4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005690:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005694:	2202      	movs	r2, #2
 8005696:	2181      	movs	r1, #129	; 0x81
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f003 faf8 	bl	8008c8e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80056a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056a8:	2202      	movs	r2, #2
 80056aa:	2101      	movs	r1, #1
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f003 faee 	bl	8008c8e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2210      	movs	r2, #16
 80056be:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80056c2:	e016      	b.n	80056f2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80056c4:	2340      	movs	r3, #64	; 0x40
 80056c6:	2202      	movs	r2, #2
 80056c8:	2181      	movs	r1, #129	; 0x81
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f003 fadf 	bl	8008c8e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80056d6:	2340      	movs	r3, #64	; 0x40
 80056d8:	2202      	movs	r2, #2
 80056da:	2101      	movs	r1, #1
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f003 fad6 	bl	8008c8e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2210      	movs	r2, #16
 80056ee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80056f2:	2308      	movs	r3, #8
 80056f4:	2203      	movs	r2, #3
 80056f6:	2182      	movs	r1, #130	; 0x82
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f003 fac8 	bl	8008c8e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	7c1b      	ldrb	r3, [r3, #16]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d109      	bne.n	800573c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800572e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005732:	2101      	movs	r1, #1
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f003 fb99 	bl	8008e6c <USBD_LL_PrepareReceive>
 800573a:	e007      	b.n	800574c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005742:	2340      	movs	r3, #64	; 0x40
 8005744:	2101      	movs	r1, #1
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f003 fb90 	bl	8008e6c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b082      	sub	sp, #8
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	460b      	mov	r3, r1
 8005760:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005762:	2181      	movs	r1, #129	; 0x81
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f003 fab8 	bl	8008cda <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005770:	2101      	movs	r1, #1
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f003 fab1 	bl	8008cda <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005780:	2182      	movs	r1, #130	; 0x82
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f003 faa9 	bl	8008cda <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00e      	beq.n	80057c0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057b2:	4618      	mov	r0, r3
 80057b4:	f003 fbea 	bl	8008f8c <USBD_static_free>
    pdev->pClassData = NULL;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057dc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80057de:	2300      	movs	r3, #0
 80057e0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80057e2:	2300      	movs	r3, #0
 80057e4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e0af      	b.n	8005954 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d03f      	beq.n	8005880 <USBD_CDC_Setup+0xb4>
 8005800:	2b20      	cmp	r3, #32
 8005802:	f040 809f 	bne.w	8005944 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	88db      	ldrh	r3, [r3, #6]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d02e      	beq.n	800586c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	b25b      	sxtb	r3, r3
 8005814:	2b00      	cmp	r3, #0
 8005816:	da16      	bge.n	8005846 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005824:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	88d2      	ldrh	r2, [r2, #6]
 800582a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	88db      	ldrh	r3, [r3, #6]
 8005830:	2b07      	cmp	r3, #7
 8005832:	bf28      	it	cs
 8005834:	2307      	movcs	r3, #7
 8005836:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	89fa      	ldrh	r2, [r7, #14]
 800583c:	4619      	mov	r1, r3
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f001 fb43 	bl	8006eca <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005844:	e085      	b.n	8005952 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	785a      	ldrb	r2, [r3, #1]
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	88db      	ldrh	r3, [r3, #6]
 8005854:	b2da      	uxtb	r2, r3
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800585c:	6939      	ldr	r1, [r7, #16]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	88db      	ldrh	r3, [r3, #6]
 8005862:	461a      	mov	r2, r3
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f001 fb5c 	bl	8006f22 <USBD_CtlPrepareRx>
      break;
 800586a:	e072      	b.n	8005952 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	7850      	ldrb	r0, [r2, #1]
 8005878:	2200      	movs	r2, #0
 800587a:	6839      	ldr	r1, [r7, #0]
 800587c:	4798      	blx	r3
      break;
 800587e:	e068      	b.n	8005952 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	785b      	ldrb	r3, [r3, #1]
 8005884:	2b0b      	cmp	r3, #11
 8005886:	d852      	bhi.n	800592e <USBD_CDC_Setup+0x162>
 8005888:	a201      	add	r2, pc, #4	; (adr r2, 8005890 <USBD_CDC_Setup+0xc4>)
 800588a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588e:	bf00      	nop
 8005890:	080058c1 	.word	0x080058c1
 8005894:	0800593d 	.word	0x0800593d
 8005898:	0800592f 	.word	0x0800592f
 800589c:	0800592f 	.word	0x0800592f
 80058a0:	0800592f 	.word	0x0800592f
 80058a4:	0800592f 	.word	0x0800592f
 80058a8:	0800592f 	.word	0x0800592f
 80058ac:	0800592f 	.word	0x0800592f
 80058b0:	0800592f 	.word	0x0800592f
 80058b4:	0800592f 	.word	0x0800592f
 80058b8:	080058eb 	.word	0x080058eb
 80058bc:	08005915 	.word	0x08005915
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b03      	cmp	r3, #3
 80058ca:	d107      	bne.n	80058dc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80058cc:	f107 030a 	add.w	r3, r7, #10
 80058d0:	2202      	movs	r2, #2
 80058d2:	4619      	mov	r1, r3
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f001 faf8 	bl	8006eca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058da:	e032      	b.n	8005942 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80058dc:	6839      	ldr	r1, [r7, #0]
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f001 fa82 	bl	8006de8 <USBD_CtlError>
            ret = USBD_FAIL;
 80058e4:	2303      	movs	r3, #3
 80058e6:	75fb      	strb	r3, [r7, #23]
          break;
 80058e8:	e02b      	b.n	8005942 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b03      	cmp	r3, #3
 80058f4:	d107      	bne.n	8005906 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80058f6:	f107 030d 	add.w	r3, r7, #13
 80058fa:	2201      	movs	r2, #1
 80058fc:	4619      	mov	r1, r3
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f001 fae3 	bl	8006eca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005904:	e01d      	b.n	8005942 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005906:	6839      	ldr	r1, [r7, #0]
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f001 fa6d 	bl	8006de8 <USBD_CtlError>
            ret = USBD_FAIL;
 800590e:	2303      	movs	r3, #3
 8005910:	75fb      	strb	r3, [r7, #23]
          break;
 8005912:	e016      	b.n	8005942 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800591a:	b2db      	uxtb	r3, r3
 800591c:	2b03      	cmp	r3, #3
 800591e:	d00f      	beq.n	8005940 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005920:	6839      	ldr	r1, [r7, #0]
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f001 fa60 	bl	8006de8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005928:	2303      	movs	r3, #3
 800592a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800592c:	e008      	b.n	8005940 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800592e:	6839      	ldr	r1, [r7, #0]
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f001 fa59 	bl	8006de8 <USBD_CtlError>
          ret = USBD_FAIL;
 8005936:	2303      	movs	r3, #3
 8005938:	75fb      	strb	r3, [r7, #23]
          break;
 800593a:	e002      	b.n	8005942 <USBD_CDC_Setup+0x176>
          break;
 800593c:	bf00      	nop
 800593e:	e008      	b.n	8005952 <USBD_CDC_Setup+0x186>
          break;
 8005940:	bf00      	nop
      }
      break;
 8005942:	e006      	b.n	8005952 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005944:	6839      	ldr	r1, [r7, #0]
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f001 fa4e 	bl	8006de8 <USBD_CtlError>
      ret = USBD_FAIL;
 800594c:	2303      	movs	r3, #3
 800594e:	75fb      	strb	r3, [r7, #23]
      break;
 8005950:	bf00      	nop
  }

  return (uint8_t)ret;
 8005952:	7dfb      	ldrb	r3, [r7, #23]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3718      	adds	r7, #24
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800596e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800597a:	2303      	movs	r3, #3
 800597c:	e04f      	b.n	8005a1e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005984:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005986:	78fa      	ldrb	r2, [r7, #3]
 8005988:	6879      	ldr	r1, [r7, #4]
 800598a:	4613      	mov	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	440b      	add	r3, r1
 8005994:	3318      	adds	r3, #24
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d029      	beq.n	80059f0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800599c:	78fa      	ldrb	r2, [r7, #3]
 800599e:	6879      	ldr	r1, [r7, #4]
 80059a0:	4613      	mov	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	440b      	add	r3, r1
 80059aa:	3318      	adds	r3, #24
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	78f9      	ldrb	r1, [r7, #3]
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	460b      	mov	r3, r1
 80059b4:	00db      	lsls	r3, r3, #3
 80059b6:	1a5b      	subs	r3, r3, r1
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4403      	add	r3, r0
 80059bc:	3344      	adds	r3, #68	; 0x44
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	fbb2 f1f3 	udiv	r1, r2, r3
 80059c4:	fb03 f301 	mul.w	r3, r3, r1
 80059c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d110      	bne.n	80059f0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80059ce:	78fa      	ldrb	r2, [r7, #3]
 80059d0:	6879      	ldr	r1, [r7, #4]
 80059d2:	4613      	mov	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	440b      	add	r3, r1
 80059dc:	3318      	adds	r3, #24
 80059de:	2200      	movs	r2, #0
 80059e0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80059e2:	78f9      	ldrb	r1, [r7, #3]
 80059e4:	2300      	movs	r3, #0
 80059e6:	2200      	movs	r2, #0
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f003 fa1e 	bl	8008e2a <USBD_LL_Transmit>
 80059ee:	e015      	b.n	8005a1c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00b      	beq.n	8005a1c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005a18:	78fa      	ldrb	r2, [r7, #3]
 8005a1a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b084      	sub	sp, #16
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
 8005a2e:	460b      	mov	r3, r1
 8005a30:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a38:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e015      	b.n	8005a74 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005a48:	78fb      	ldrb	r3, [r7, #3]
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f003 fa2e 	bl	8008eae <USBD_LL_GetRxDataSize>
 8005a52:	4602      	mov	r2, r0
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005a6e:	4611      	mov	r1, r2
 8005a70:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a8a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e01b      	b.n	8005ace <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d015      	beq.n	8005acc <USBD_CDC_EP0_RxReady+0x50>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005aa6:	2bff      	cmp	r3, #255	; 0xff
 8005aa8:	d010      	beq.n	8005acc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005ab8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005ac0:	b292      	uxth	r2, r2
 8005ac2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	22ff      	movs	r2, #255	; 0xff
 8005ac8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
	...

08005ad8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2243      	movs	r2, #67	; 0x43
 8005ae4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005ae6:	4b03      	ldr	r3, [pc, #12]	; (8005af4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	20000094 	.word	0x20000094

08005af8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2243      	movs	r2, #67	; 0x43
 8005b04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005b06:	4b03      	ldr	r3, [pc, #12]	; (8005b14 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr
 8005b14:	20000050 	.word	0x20000050

08005b18 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2243      	movs	r2, #67	; 0x43
 8005b24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005b26:	4b03      	ldr	r3, [pc, #12]	; (8005b34 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	200000d8 	.word	0x200000d8

08005b38 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	220a      	movs	r2, #10
 8005b44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005b46:	4b03      	ldr	r3, [pc, #12]	; (8005b54 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	2000000c 	.word	0x2000000c

08005b58 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e004      	b.n	8005b76 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b087      	sub	sp, #28
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	60f8      	str	r0, [r7, #12]
 8005b8a:	60b9      	str	r1, [r7, #8]
 8005b8c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b94:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e008      	b.n	8005bb2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	371c      	adds	r7, #28
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b085      	sub	sp, #20
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
 8005bc6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bce:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e004      	b.n	8005be4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	683a      	ldr	r2, [r7, #0]
 8005bde:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bfe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005c00:	2301      	movs	r3, #1
 8005c02:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e01a      	b.n	8005c48 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d114      	bne.n	8005c46 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005c3a:	2181      	movs	r1, #129	; 0x81
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f003 f8f4 	bl	8008e2a <USBD_LL_Transmit>

    ret = USBD_OK;
 8005c42:	2300      	movs	r3, #0
 8005c44:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e016      	b.n	8005c9c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	7c1b      	ldrb	r3, [r3, #16]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d109      	bne.n	8005c8a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c80:	2101      	movs	r1, #1
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f003 f8f2 	bl	8008e6c <USBD_LL_PrepareReceive>
 8005c88:	e007      	b.n	8005c9a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c90:	2340      	movs	r3, #64	; 0x40
 8005c92:	2101      	movs	r1, #1
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f003 f8e9 	bl	8008e6c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d101      	bne.n	8005cbc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e01f      	b.n	8005cfc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	79fa      	ldrb	r2, [r7, #7]
 8005cee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f002 ff65 	bl	8008bc0 <USBD_LL_Init>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3718      	adds	r7, #24
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d101      	bne.n	8005d1c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e016      	b.n	8005d4a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00b      	beq.n	8005d48 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d38:	f107 020e 	add.w	r2, r7, #14
 8005d3c:	4610      	mov	r0, r2
 8005d3e:	4798      	blx	r3
 8005d40:	4602      	mov	r2, r0
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b082      	sub	sp, #8
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f002 ff7c 	bl	8008c58 <USBD_LL_Start>
 8005d60:	4603      	mov	r3, r0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b083      	sub	sp, #12
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	460b      	mov	r3, r1
 8005d8a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d009      	beq.n	8005dae <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	78fa      	ldrb	r2, [r7, #3]
 8005da4:	4611      	mov	r1, r2
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	4798      	blx	r3
 8005daa:	4603      	mov	r3, r0
 8005dac:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d007      	beq.n	8005dde <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	78fa      	ldrb	r2, [r7, #3]
 8005dd8:	4611      	mov	r1, r2
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	4798      	blx	r3
  }

  return USBD_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005df8:	6839      	ldr	r1, [r7, #0]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 ffba 	bl	8006d74 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005e0e:	461a      	mov	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e1c:	f003 031f 	and.w	r3, r3, #31
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d01a      	beq.n	8005e5a <USBD_LL_SetupStage+0x72>
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d822      	bhi.n	8005e6e <USBD_LL_SetupStage+0x86>
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d002      	beq.n	8005e32 <USBD_LL_SetupStage+0x4a>
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d00a      	beq.n	8005e46 <USBD_LL_SetupStage+0x5e>
 8005e30:	e01d      	b.n	8005e6e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e38:	4619      	mov	r1, r3
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fa62 	bl	8006304 <USBD_StdDevReq>
 8005e40:	4603      	mov	r3, r0
 8005e42:	73fb      	strb	r3, [r7, #15]
      break;
 8005e44:	e020      	b.n	8005e88 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fac6 	bl	80063e0 <USBD_StdItfReq>
 8005e54:	4603      	mov	r3, r0
 8005e56:	73fb      	strb	r3, [r7, #15]
      break;
 8005e58:	e016      	b.n	8005e88 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e60:	4619      	mov	r1, r3
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 fb05 	bl	8006472 <USBD_StdEPReq>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e6c:	e00c      	b.n	8005e88 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e74:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f002 ff4b 	bl	8008d18 <USBD_LL_StallEP>
 8005e82:	4603      	mov	r3, r0
 8005e84:	73fb      	strb	r3, [r7, #15]
      break;
 8005e86:	bf00      	nop
  }

  return ret;
 8005e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b086      	sub	sp, #24
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	60f8      	str	r0, [r7, #12]
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	607a      	str	r2, [r7, #4]
 8005e9e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005ea0:	7afb      	ldrb	r3, [r7, #11]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d138      	bne.n	8005f18 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005eac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005eb4:	2b03      	cmp	r3, #3
 8005eb6:	d14a      	bne.n	8005f4e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	689a      	ldr	r2, [r3, #8]
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d913      	bls.n	8005eec <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	689a      	ldr	r2, [r3, #8]
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	1ad2      	subs	r2, r2, r3
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	4293      	cmp	r3, r2
 8005edc:	bf28      	it	cs
 8005ede:	4613      	movcs	r3, r2
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	6879      	ldr	r1, [r7, #4]
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f001 f839 	bl	8006f5c <USBD_CtlContinueRx>
 8005eea:	e030      	b.n	8005f4e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	2b03      	cmp	r3, #3
 8005ef6:	d10b      	bne.n	8005f10 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d005      	beq.n	8005f10 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f001 f834 	bl	8006f7e <USBD_CtlSendStatus>
 8005f16:	e01a      	b.n	8005f4e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d114      	bne.n	8005f4e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00e      	beq.n	8005f4e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	7afa      	ldrb	r2, [r7, #11]
 8005f3a:	4611      	mov	r1, r2
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	4798      	blx	r3
 8005f40:	4603      	mov	r3, r0
 8005f42:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005f44:	7dfb      	ldrb	r3, [r7, #23]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d001      	beq.n	8005f4e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005f4a:	7dfb      	ldrb	r3, [r7, #23]
 8005f4c:	e000      	b.n	8005f50 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3718      	adds	r7, #24
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	460b      	mov	r3, r1
 8005f62:	607a      	str	r2, [r7, #4]
 8005f64:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005f66:	7afb      	ldrb	r3, [r7, #11]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d16b      	bne.n	8006044 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	3314      	adds	r3, #20
 8005f70:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d156      	bne.n	800602a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	689a      	ldr	r2, [r3, #8]
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d914      	bls.n	8005fb2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	689a      	ldr	r2, [r3, #8]
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	1ad2      	subs	r2, r2, r3
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	6879      	ldr	r1, [r7, #4]
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 ffae 	bl	8006f00 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	2100      	movs	r1, #0
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f002 ff5e 	bl	8008e6c <USBD_LL_PrepareReceive>
 8005fb0:	e03b      	b.n	800602a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	68da      	ldr	r2, [r3, #12]
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d11c      	bne.n	8005ff8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d316      	bcc.n	8005ff8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d20f      	bcs.n	8005ff8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005fd8:	2200      	movs	r2, #0
 8005fda:	2100      	movs	r1, #0
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 ff8f 	bl	8006f00 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005fea:	2300      	movs	r3, #0
 8005fec:	2200      	movs	r2, #0
 8005fee:	2100      	movs	r1, #0
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f002 ff3b 	bl	8008e6c <USBD_LL_PrepareReceive>
 8005ff6:	e018      	b.n	800602a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b03      	cmp	r3, #3
 8006002:	d10b      	bne.n	800601c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d005      	beq.n	800601c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800601c:	2180      	movs	r1, #128	; 0x80
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f002 fe7a 	bl	8008d18 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 ffbd 	bl	8006fa4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006030:	2b01      	cmp	r3, #1
 8006032:	d122      	bne.n	800607a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f7ff fe98 	bl	8005d6a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006042:	e01a      	b.n	800607a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b03      	cmp	r3, #3
 800604e:	d114      	bne.n	800607a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00e      	beq.n	800607a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006062:	695b      	ldr	r3, [r3, #20]
 8006064:	7afa      	ldrb	r2, [r7, #11]
 8006066:	4611      	mov	r1, r2
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	4798      	blx	r3
 800606c:	4603      	mov	r3, r0
 800606e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006070:	7dfb      	ldrb	r3, [r7, #23]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006076:	7dfb      	ldrb	r3, [r7, #23]
 8006078:	e000      	b.n	800607c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3718      	adds	r7, #24
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d101      	bne.n	80060b8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e02f      	b.n	8006118 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00f      	beq.n	80060e2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d009      	beq.n	80060e2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	6852      	ldr	r2, [r2, #4]
 80060da:	b2d2      	uxtb	r2, r2
 80060dc:	4611      	mov	r1, r2
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060e2:	2340      	movs	r3, #64	; 0x40
 80060e4:	2200      	movs	r2, #0
 80060e6:	2100      	movs	r1, #0
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f002 fdd0 	bl	8008c8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2240      	movs	r2, #64	; 0x40
 80060fa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060fe:	2340      	movs	r3, #64	; 0x40
 8006100:	2200      	movs	r2, #0
 8006102:	2180      	movs	r1, #128	; 0x80
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f002 fdc2 	bl	8008c8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2240      	movs	r2, #64	; 0x40
 8006114:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	460b      	mov	r3, r1
 800612a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	78fa      	ldrb	r2, [r7, #3]
 8006130:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800614e:	b2da      	uxtb	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2204      	movs	r2, #4
 800615a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b04      	cmp	r3, #4
 800617e:	d106      	bne.n	800618e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006186:	b2da      	uxtb	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e012      	b.n	80061d8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	d10b      	bne.n	80061d6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d005      	beq.n	80061d6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061d0:	69db      	ldr	r3, [r3, #28]
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	460b      	mov	r3, r1
 80061ea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e014      	b.n	8006224 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b03      	cmp	r3, #3
 8006204:	d10d      	bne.n	8006222 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d007      	beq.n	8006222 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	78fa      	ldrb	r2, [r7, #3]
 800621c:	4611      	mov	r1, r2
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3708      	adds	r7, #8
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	460b      	mov	r3, r1
 8006236:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006242:	2303      	movs	r3, #3
 8006244:	e014      	b.n	8006270 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b03      	cmp	r3, #3
 8006250:	d10d      	bne.n	800626e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625a:	2b00      	cmp	r3, #0
 800625c:	d007      	beq.n	800626e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006266:	78fa      	ldrb	r2, [r7, #3]
 8006268:	4611      	mov	r1, r2
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	370c      	adds	r7, #12
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b082      	sub	sp, #8
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d009      	beq.n	80062bc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	6852      	ldr	r2, [r2, #4]
 80062b4:	b2d2      	uxtb	r2, r2
 80062b6:	4611      	mov	r1, r2
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	4798      	blx	r3
  }

  return USBD_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b087      	sub	sp, #28
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	3301      	adds	r3, #1
 80062dc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80062e4:	8a3b      	ldrh	r3, [r7, #16]
 80062e6:	021b      	lsls	r3, r3, #8
 80062e8:	b21a      	sxth	r2, r3
 80062ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	b21b      	sxth	r3, r3
 80062f2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80062f4:	89fb      	ldrh	r3, [r7, #14]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	371c      	adds	r7, #28
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
	...

08006304 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800630e:	2300      	movs	r3, #0
 8006310:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800631a:	2b40      	cmp	r3, #64	; 0x40
 800631c:	d005      	beq.n	800632a <USBD_StdDevReq+0x26>
 800631e:	2b40      	cmp	r3, #64	; 0x40
 8006320:	d853      	bhi.n	80063ca <USBD_StdDevReq+0xc6>
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00b      	beq.n	800633e <USBD_StdDevReq+0x3a>
 8006326:	2b20      	cmp	r3, #32
 8006328:	d14f      	bne.n	80063ca <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	6839      	ldr	r1, [r7, #0]
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	4798      	blx	r3
 8006338:	4603      	mov	r3, r0
 800633a:	73fb      	strb	r3, [r7, #15]
      break;
 800633c:	e04a      	b.n	80063d4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	785b      	ldrb	r3, [r3, #1]
 8006342:	2b09      	cmp	r3, #9
 8006344:	d83b      	bhi.n	80063be <USBD_StdDevReq+0xba>
 8006346:	a201      	add	r2, pc, #4	; (adr r2, 800634c <USBD_StdDevReq+0x48>)
 8006348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634c:	080063a1 	.word	0x080063a1
 8006350:	080063b5 	.word	0x080063b5
 8006354:	080063bf 	.word	0x080063bf
 8006358:	080063ab 	.word	0x080063ab
 800635c:	080063bf 	.word	0x080063bf
 8006360:	0800637f 	.word	0x0800637f
 8006364:	08006375 	.word	0x08006375
 8006368:	080063bf 	.word	0x080063bf
 800636c:	08006397 	.word	0x08006397
 8006370:	08006389 	.word	0x08006389
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006374:	6839      	ldr	r1, [r7, #0]
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f9de 	bl	8006738 <USBD_GetDescriptor>
          break;
 800637c:	e024      	b.n	80063c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800637e:	6839      	ldr	r1, [r7, #0]
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 fb6d 	bl	8006a60 <USBD_SetAddress>
          break;
 8006386:	e01f      	b.n	80063c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006388:	6839      	ldr	r1, [r7, #0]
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 fbac 	bl	8006ae8 <USBD_SetConfig>
 8006390:	4603      	mov	r3, r0
 8006392:	73fb      	strb	r3, [r7, #15]
          break;
 8006394:	e018      	b.n	80063c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006396:	6839      	ldr	r1, [r7, #0]
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 fc4b 	bl	8006c34 <USBD_GetConfig>
          break;
 800639e:	e013      	b.n	80063c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80063a0:	6839      	ldr	r1, [r7, #0]
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fc7c 	bl	8006ca0 <USBD_GetStatus>
          break;
 80063a8:	e00e      	b.n	80063c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80063aa:	6839      	ldr	r1, [r7, #0]
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 fcab 	bl	8006d08 <USBD_SetFeature>
          break;
 80063b2:	e009      	b.n	80063c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80063b4:	6839      	ldr	r1, [r7, #0]
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 fcba 	bl	8006d30 <USBD_ClrFeature>
          break;
 80063bc:	e004      	b.n	80063c8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80063be:	6839      	ldr	r1, [r7, #0]
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fd11 	bl	8006de8 <USBD_CtlError>
          break;
 80063c6:	bf00      	nop
      }
      break;
 80063c8:	e004      	b.n	80063d4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80063ca:	6839      	ldr	r1, [r7, #0]
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 fd0b 	bl	8006de8 <USBD_CtlError>
      break;
 80063d2:	bf00      	nop
  }

  return ret;
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop

080063e0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063f6:	2b40      	cmp	r3, #64	; 0x40
 80063f8:	d005      	beq.n	8006406 <USBD_StdItfReq+0x26>
 80063fa:	2b40      	cmp	r3, #64	; 0x40
 80063fc:	d82f      	bhi.n	800645e <USBD_StdItfReq+0x7e>
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d001      	beq.n	8006406 <USBD_StdItfReq+0x26>
 8006402:	2b20      	cmp	r3, #32
 8006404:	d12b      	bne.n	800645e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800640c:	b2db      	uxtb	r3, r3
 800640e:	3b01      	subs	r3, #1
 8006410:	2b02      	cmp	r3, #2
 8006412:	d81d      	bhi.n	8006450 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	889b      	ldrh	r3, [r3, #4]
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b01      	cmp	r3, #1
 800641c:	d813      	bhi.n	8006446 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	6839      	ldr	r1, [r7, #0]
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	4798      	blx	r3
 800642c:	4603      	mov	r3, r0
 800642e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	88db      	ldrh	r3, [r3, #6]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d110      	bne.n	800645a <USBD_StdItfReq+0x7a>
 8006438:	7bfb      	ldrb	r3, [r7, #15]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d10d      	bne.n	800645a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fd9d 	bl	8006f7e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006444:	e009      	b.n	800645a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006446:	6839      	ldr	r1, [r7, #0]
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 fccd 	bl	8006de8 <USBD_CtlError>
          break;
 800644e:	e004      	b.n	800645a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006450:	6839      	ldr	r1, [r7, #0]
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fcc8 	bl	8006de8 <USBD_CtlError>
          break;
 8006458:	e000      	b.n	800645c <USBD_StdItfReq+0x7c>
          break;
 800645a:	bf00      	nop
      }
      break;
 800645c:	e004      	b.n	8006468 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800645e:	6839      	ldr	r1, [r7, #0]
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 fcc1 	bl	8006de8 <USBD_CtlError>
      break;
 8006466:	bf00      	nop
  }

  return ret;
 8006468:	7bfb      	ldrb	r3, [r7, #15]
}
 800646a:	4618      	mov	r0, r3
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b084      	sub	sp, #16
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
 800647a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800647c:	2300      	movs	r3, #0
 800647e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	889b      	ldrh	r3, [r3, #4]
 8006484:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800648e:	2b40      	cmp	r3, #64	; 0x40
 8006490:	d007      	beq.n	80064a2 <USBD_StdEPReq+0x30>
 8006492:	2b40      	cmp	r3, #64	; 0x40
 8006494:	f200 8145 	bhi.w	8006722 <USBD_StdEPReq+0x2b0>
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00c      	beq.n	80064b6 <USBD_StdEPReq+0x44>
 800649c:	2b20      	cmp	r3, #32
 800649e:	f040 8140 	bne.w	8006722 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	6839      	ldr	r1, [r7, #0]
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	4798      	blx	r3
 80064b0:	4603      	mov	r3, r0
 80064b2:	73fb      	strb	r3, [r7, #15]
      break;
 80064b4:	e13a      	b.n	800672c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	785b      	ldrb	r3, [r3, #1]
 80064ba:	2b03      	cmp	r3, #3
 80064bc:	d007      	beq.n	80064ce <USBD_StdEPReq+0x5c>
 80064be:	2b03      	cmp	r3, #3
 80064c0:	f300 8129 	bgt.w	8006716 <USBD_StdEPReq+0x2a4>
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d07f      	beq.n	80065c8 <USBD_StdEPReq+0x156>
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d03c      	beq.n	8006546 <USBD_StdEPReq+0xd4>
 80064cc:	e123      	b.n	8006716 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d002      	beq.n	80064e0 <USBD_StdEPReq+0x6e>
 80064da:	2b03      	cmp	r3, #3
 80064dc:	d016      	beq.n	800650c <USBD_StdEPReq+0x9a>
 80064de:	e02c      	b.n	800653a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064e0:	7bbb      	ldrb	r3, [r7, #14]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00d      	beq.n	8006502 <USBD_StdEPReq+0x90>
 80064e6:	7bbb      	ldrb	r3, [r7, #14]
 80064e8:	2b80      	cmp	r3, #128	; 0x80
 80064ea:	d00a      	beq.n	8006502 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80064ec:	7bbb      	ldrb	r3, [r7, #14]
 80064ee:	4619      	mov	r1, r3
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f002 fc11 	bl	8008d18 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80064f6:	2180      	movs	r1, #128	; 0x80
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f002 fc0d 	bl	8008d18 <USBD_LL_StallEP>
 80064fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006500:	e020      	b.n	8006544 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006502:	6839      	ldr	r1, [r7, #0]
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 fc6f 	bl	8006de8 <USBD_CtlError>
              break;
 800650a:	e01b      	b.n	8006544 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	885b      	ldrh	r3, [r3, #2]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10e      	bne.n	8006532 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006514:	7bbb      	ldrb	r3, [r7, #14]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00b      	beq.n	8006532 <USBD_StdEPReq+0xc0>
 800651a:	7bbb      	ldrb	r3, [r7, #14]
 800651c:	2b80      	cmp	r3, #128	; 0x80
 800651e:	d008      	beq.n	8006532 <USBD_StdEPReq+0xc0>
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	88db      	ldrh	r3, [r3, #6]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d104      	bne.n	8006532 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006528:	7bbb      	ldrb	r3, [r7, #14]
 800652a:	4619      	mov	r1, r3
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f002 fbf3 	bl	8008d18 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fd23 	bl	8006f7e <USBD_CtlSendStatus>

              break;
 8006538:	e004      	b.n	8006544 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800653a:	6839      	ldr	r1, [r7, #0]
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 fc53 	bl	8006de8 <USBD_CtlError>
              break;
 8006542:	bf00      	nop
          }
          break;
 8006544:	e0ec      	b.n	8006720 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b02      	cmp	r3, #2
 8006550:	d002      	beq.n	8006558 <USBD_StdEPReq+0xe6>
 8006552:	2b03      	cmp	r3, #3
 8006554:	d016      	beq.n	8006584 <USBD_StdEPReq+0x112>
 8006556:	e030      	b.n	80065ba <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006558:	7bbb      	ldrb	r3, [r7, #14]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00d      	beq.n	800657a <USBD_StdEPReq+0x108>
 800655e:	7bbb      	ldrb	r3, [r7, #14]
 8006560:	2b80      	cmp	r3, #128	; 0x80
 8006562:	d00a      	beq.n	800657a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006564:	7bbb      	ldrb	r3, [r7, #14]
 8006566:	4619      	mov	r1, r3
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f002 fbd5 	bl	8008d18 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800656e:	2180      	movs	r1, #128	; 0x80
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f002 fbd1 	bl	8008d18 <USBD_LL_StallEP>
 8006576:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006578:	e025      	b.n	80065c6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800657a:	6839      	ldr	r1, [r7, #0]
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 fc33 	bl	8006de8 <USBD_CtlError>
              break;
 8006582:	e020      	b.n	80065c6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	885b      	ldrh	r3, [r3, #2]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d11b      	bne.n	80065c4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800658c:	7bbb      	ldrb	r3, [r7, #14]
 800658e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006592:	2b00      	cmp	r3, #0
 8006594:	d004      	beq.n	80065a0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006596:	7bbb      	ldrb	r3, [r7, #14]
 8006598:	4619      	mov	r1, r3
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f002 fbdb 	bl	8008d56 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fcec 	bl	8006f7e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	6839      	ldr	r1, [r7, #0]
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	4798      	blx	r3
 80065b4:	4603      	mov	r3, r0
 80065b6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80065b8:	e004      	b.n	80065c4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80065ba:	6839      	ldr	r1, [r7, #0]
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 fc13 	bl	8006de8 <USBD_CtlError>
              break;
 80065c2:	e000      	b.n	80065c6 <USBD_StdEPReq+0x154>
              break;
 80065c4:	bf00      	nop
          }
          break;
 80065c6:	e0ab      	b.n	8006720 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d002      	beq.n	80065da <USBD_StdEPReq+0x168>
 80065d4:	2b03      	cmp	r3, #3
 80065d6:	d032      	beq.n	800663e <USBD_StdEPReq+0x1cc>
 80065d8:	e097      	b.n	800670a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065da:	7bbb      	ldrb	r3, [r7, #14]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d007      	beq.n	80065f0 <USBD_StdEPReq+0x17e>
 80065e0:	7bbb      	ldrb	r3, [r7, #14]
 80065e2:	2b80      	cmp	r3, #128	; 0x80
 80065e4:	d004      	beq.n	80065f0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80065e6:	6839      	ldr	r1, [r7, #0]
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fbfd 	bl	8006de8 <USBD_CtlError>
                break;
 80065ee:	e091      	b.n	8006714 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	da0b      	bge.n	8006610 <USBD_StdEPReq+0x19e>
 80065f8:	7bbb      	ldrb	r3, [r7, #14]
 80065fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065fe:	4613      	mov	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	3310      	adds	r3, #16
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	4413      	add	r3, r2
 800660c:	3304      	adds	r3, #4
 800660e:	e00b      	b.n	8006628 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006610:	7bbb      	ldrb	r3, [r7, #14]
 8006612:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006616:	4613      	mov	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	4413      	add	r3, r2
 8006626:	3304      	adds	r3, #4
 8006628:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	2200      	movs	r2, #0
 800662e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	2202      	movs	r2, #2
 8006634:	4619      	mov	r1, r3
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 fc47 	bl	8006eca <USBD_CtlSendData>
              break;
 800663c:	e06a      	b.n	8006714 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800663e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006642:	2b00      	cmp	r3, #0
 8006644:	da11      	bge.n	800666a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006646:	7bbb      	ldrb	r3, [r7, #14]
 8006648:	f003 020f 	and.w	r2, r3, #15
 800664c:	6879      	ldr	r1, [r7, #4]
 800664e:	4613      	mov	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	4413      	add	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	440b      	add	r3, r1
 8006658:	3324      	adds	r3, #36	; 0x24
 800665a:	881b      	ldrh	r3, [r3, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d117      	bne.n	8006690 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006660:	6839      	ldr	r1, [r7, #0]
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fbc0 	bl	8006de8 <USBD_CtlError>
                  break;
 8006668:	e054      	b.n	8006714 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800666a:	7bbb      	ldrb	r3, [r7, #14]
 800666c:	f003 020f 	and.w	r2, r3, #15
 8006670:	6879      	ldr	r1, [r7, #4]
 8006672:	4613      	mov	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	4413      	add	r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	440b      	add	r3, r1
 800667c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006680:	881b      	ldrh	r3, [r3, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d104      	bne.n	8006690 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006686:	6839      	ldr	r1, [r7, #0]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 fbad 	bl	8006de8 <USBD_CtlError>
                  break;
 800668e:	e041      	b.n	8006714 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006690:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006694:	2b00      	cmp	r3, #0
 8006696:	da0b      	bge.n	80066b0 <USBD_StdEPReq+0x23e>
 8006698:	7bbb      	ldrb	r3, [r7, #14]
 800669a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800669e:	4613      	mov	r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4413      	add	r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	3310      	adds	r3, #16
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	4413      	add	r3, r2
 80066ac:	3304      	adds	r3, #4
 80066ae:	e00b      	b.n	80066c8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80066b0:	7bbb      	ldrb	r3, [r7, #14]
 80066b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066b6:	4613      	mov	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	4413      	add	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	4413      	add	r3, r2
 80066c6:	3304      	adds	r3, #4
 80066c8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80066ca:	7bbb      	ldrb	r3, [r7, #14]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d002      	beq.n	80066d6 <USBD_StdEPReq+0x264>
 80066d0:	7bbb      	ldrb	r3, [r7, #14]
 80066d2:	2b80      	cmp	r3, #128	; 0x80
 80066d4:	d103      	bne.n	80066de <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	2200      	movs	r2, #0
 80066da:	601a      	str	r2, [r3, #0]
 80066dc:	e00e      	b.n	80066fc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80066de:	7bbb      	ldrb	r3, [r7, #14]
 80066e0:	4619      	mov	r1, r3
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f002 fb56 	bl	8008d94 <USBD_LL_IsStallEP>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	2201      	movs	r2, #1
 80066f2:	601a      	str	r2, [r3, #0]
 80066f4:	e002      	b.n	80066fc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	2200      	movs	r2, #0
 80066fa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	2202      	movs	r2, #2
 8006700:	4619      	mov	r1, r3
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fbe1 	bl	8006eca <USBD_CtlSendData>
              break;
 8006708:	e004      	b.n	8006714 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800670a:	6839      	ldr	r1, [r7, #0]
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fb6b 	bl	8006de8 <USBD_CtlError>
              break;
 8006712:	bf00      	nop
          }
          break;
 8006714:	e004      	b.n	8006720 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006716:	6839      	ldr	r1, [r7, #0]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fb65 	bl	8006de8 <USBD_CtlError>
          break;
 800671e:	bf00      	nop
      }
      break;
 8006720:	e004      	b.n	800672c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006722:	6839      	ldr	r1, [r7, #0]
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 fb5f 	bl	8006de8 <USBD_CtlError>
      break;
 800672a:	bf00      	nop
  }

  return ret;
 800672c:	7bfb      	ldrb	r3, [r7, #15]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
	...

08006738 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006742:	2300      	movs	r3, #0
 8006744:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006746:	2300      	movs	r3, #0
 8006748:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800674a:	2300      	movs	r3, #0
 800674c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	885b      	ldrh	r3, [r3, #2]
 8006752:	0a1b      	lsrs	r3, r3, #8
 8006754:	b29b      	uxth	r3, r3
 8006756:	3b01      	subs	r3, #1
 8006758:	2b0e      	cmp	r3, #14
 800675a:	f200 8152 	bhi.w	8006a02 <USBD_GetDescriptor+0x2ca>
 800675e:	a201      	add	r2, pc, #4	; (adr r2, 8006764 <USBD_GetDescriptor+0x2c>)
 8006760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006764:	080067d5 	.word	0x080067d5
 8006768:	080067ed 	.word	0x080067ed
 800676c:	0800682d 	.word	0x0800682d
 8006770:	08006a03 	.word	0x08006a03
 8006774:	08006a03 	.word	0x08006a03
 8006778:	080069a3 	.word	0x080069a3
 800677c:	080069cf 	.word	0x080069cf
 8006780:	08006a03 	.word	0x08006a03
 8006784:	08006a03 	.word	0x08006a03
 8006788:	08006a03 	.word	0x08006a03
 800678c:	08006a03 	.word	0x08006a03
 8006790:	08006a03 	.word	0x08006a03
 8006794:	08006a03 	.word	0x08006a03
 8006798:	08006a03 	.word	0x08006a03
 800679c:	080067a1 	.word	0x080067a1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00b      	beq.n	80067c4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	7c12      	ldrb	r2, [r2, #16]
 80067b8:	f107 0108 	add.w	r1, r7, #8
 80067bc:	4610      	mov	r0, r2
 80067be:	4798      	blx	r3
 80067c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067c2:	e126      	b.n	8006a12 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80067c4:	6839      	ldr	r1, [r7, #0]
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fb0e 	bl	8006de8 <USBD_CtlError>
        err++;
 80067cc:	7afb      	ldrb	r3, [r7, #11]
 80067ce:	3301      	adds	r3, #1
 80067d0:	72fb      	strb	r3, [r7, #11]
      break;
 80067d2:	e11e      	b.n	8006a12 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	7c12      	ldrb	r2, [r2, #16]
 80067e0:	f107 0108 	add.w	r1, r7, #8
 80067e4:	4610      	mov	r0, r2
 80067e6:	4798      	blx	r3
 80067e8:	60f8      	str	r0, [r7, #12]
      break;
 80067ea:	e112      	b.n	8006a12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	7c1b      	ldrb	r3, [r3, #16]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10d      	bne.n	8006810 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fc:	f107 0208 	add.w	r2, r7, #8
 8006800:	4610      	mov	r0, r2
 8006802:	4798      	blx	r3
 8006804:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	3301      	adds	r3, #1
 800680a:	2202      	movs	r2, #2
 800680c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800680e:	e100      	b.n	8006a12 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006818:	f107 0208 	add.w	r2, r7, #8
 800681c:	4610      	mov	r0, r2
 800681e:	4798      	blx	r3
 8006820:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	3301      	adds	r3, #1
 8006826:	2202      	movs	r2, #2
 8006828:	701a      	strb	r2, [r3, #0]
      break;
 800682a:	e0f2      	b.n	8006a12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	885b      	ldrh	r3, [r3, #2]
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b05      	cmp	r3, #5
 8006834:	f200 80ac 	bhi.w	8006990 <USBD_GetDescriptor+0x258>
 8006838:	a201      	add	r2, pc, #4	; (adr r2, 8006840 <USBD_GetDescriptor+0x108>)
 800683a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683e:	bf00      	nop
 8006840:	08006859 	.word	0x08006859
 8006844:	0800688d 	.word	0x0800688d
 8006848:	080068c1 	.word	0x080068c1
 800684c:	080068f5 	.word	0x080068f5
 8006850:	08006929 	.word	0x08006929
 8006854:	0800695d 	.word	0x0800695d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00b      	beq.n	800687c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	7c12      	ldrb	r2, [r2, #16]
 8006870:	f107 0108 	add.w	r1, r7, #8
 8006874:	4610      	mov	r0, r2
 8006876:	4798      	blx	r3
 8006878:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800687a:	e091      	b.n	80069a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800687c:	6839      	ldr	r1, [r7, #0]
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fab2 	bl	8006de8 <USBD_CtlError>
            err++;
 8006884:	7afb      	ldrb	r3, [r7, #11]
 8006886:	3301      	adds	r3, #1
 8006888:	72fb      	strb	r3, [r7, #11]
          break;
 800688a:	e089      	b.n	80069a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00b      	beq.n	80068b0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	7c12      	ldrb	r2, [r2, #16]
 80068a4:	f107 0108 	add.w	r1, r7, #8
 80068a8:	4610      	mov	r0, r2
 80068aa:	4798      	blx	r3
 80068ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068ae:	e077      	b.n	80069a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80068b0:	6839      	ldr	r1, [r7, #0]
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fa98 	bl	8006de8 <USBD_CtlError>
            err++;
 80068b8:	7afb      	ldrb	r3, [r7, #11]
 80068ba:	3301      	adds	r3, #1
 80068bc:	72fb      	strb	r3, [r7, #11]
          break;
 80068be:	e06f      	b.n	80069a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00b      	beq.n	80068e4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	7c12      	ldrb	r2, [r2, #16]
 80068d8:	f107 0108 	add.w	r1, r7, #8
 80068dc:	4610      	mov	r0, r2
 80068de:	4798      	blx	r3
 80068e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068e2:	e05d      	b.n	80069a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80068e4:	6839      	ldr	r1, [r7, #0]
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 fa7e 	bl	8006de8 <USBD_CtlError>
            err++;
 80068ec:	7afb      	ldrb	r3, [r7, #11]
 80068ee:	3301      	adds	r3, #1
 80068f0:	72fb      	strb	r3, [r7, #11]
          break;
 80068f2:	e055      	b.n	80069a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00b      	beq.n	8006918 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	7c12      	ldrb	r2, [r2, #16]
 800690c:	f107 0108 	add.w	r1, r7, #8
 8006910:	4610      	mov	r0, r2
 8006912:	4798      	blx	r3
 8006914:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006916:	e043      	b.n	80069a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006918:	6839      	ldr	r1, [r7, #0]
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 fa64 	bl	8006de8 <USBD_CtlError>
            err++;
 8006920:	7afb      	ldrb	r3, [r7, #11]
 8006922:	3301      	adds	r3, #1
 8006924:	72fb      	strb	r3, [r7, #11]
          break;
 8006926:	e03b      	b.n	80069a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00b      	beq.n	800694c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800693a:	695b      	ldr	r3, [r3, #20]
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	7c12      	ldrb	r2, [r2, #16]
 8006940:	f107 0108 	add.w	r1, r7, #8
 8006944:	4610      	mov	r0, r2
 8006946:	4798      	blx	r3
 8006948:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800694a:	e029      	b.n	80069a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800694c:	6839      	ldr	r1, [r7, #0]
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fa4a 	bl	8006de8 <USBD_CtlError>
            err++;
 8006954:	7afb      	ldrb	r3, [r7, #11]
 8006956:	3301      	adds	r3, #1
 8006958:	72fb      	strb	r3, [r7, #11]
          break;
 800695a:	e021      	b.n	80069a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00b      	beq.n	8006980 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	7c12      	ldrb	r2, [r2, #16]
 8006974:	f107 0108 	add.w	r1, r7, #8
 8006978:	4610      	mov	r0, r2
 800697a:	4798      	blx	r3
 800697c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800697e:	e00f      	b.n	80069a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006980:	6839      	ldr	r1, [r7, #0]
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fa30 	bl	8006de8 <USBD_CtlError>
            err++;
 8006988:	7afb      	ldrb	r3, [r7, #11]
 800698a:	3301      	adds	r3, #1
 800698c:	72fb      	strb	r3, [r7, #11]
          break;
 800698e:	e007      	b.n	80069a0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006990:	6839      	ldr	r1, [r7, #0]
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fa28 	bl	8006de8 <USBD_CtlError>
          err++;
 8006998:	7afb      	ldrb	r3, [r7, #11]
 800699a:	3301      	adds	r3, #1
 800699c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800699e:	bf00      	nop
      }
      break;
 80069a0:	e037      	b.n	8006a12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	7c1b      	ldrb	r3, [r3, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d109      	bne.n	80069be <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069b2:	f107 0208 	add.w	r2, r7, #8
 80069b6:	4610      	mov	r0, r2
 80069b8:	4798      	blx	r3
 80069ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069bc:	e029      	b.n	8006a12 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80069be:	6839      	ldr	r1, [r7, #0]
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fa11 	bl	8006de8 <USBD_CtlError>
        err++;
 80069c6:	7afb      	ldrb	r3, [r7, #11]
 80069c8:	3301      	adds	r3, #1
 80069ca:	72fb      	strb	r3, [r7, #11]
      break;
 80069cc:	e021      	b.n	8006a12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	7c1b      	ldrb	r3, [r3, #16]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10d      	bne.n	80069f2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069de:	f107 0208 	add.w	r2, r7, #8
 80069e2:	4610      	mov	r0, r2
 80069e4:	4798      	blx	r3
 80069e6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	3301      	adds	r3, #1
 80069ec:	2207      	movs	r2, #7
 80069ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069f0:	e00f      	b.n	8006a12 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80069f2:	6839      	ldr	r1, [r7, #0]
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 f9f7 	bl	8006de8 <USBD_CtlError>
        err++;
 80069fa:	7afb      	ldrb	r3, [r7, #11]
 80069fc:	3301      	adds	r3, #1
 80069fe:	72fb      	strb	r3, [r7, #11]
      break;
 8006a00:	e007      	b.n	8006a12 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006a02:	6839      	ldr	r1, [r7, #0]
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 f9ef 	bl	8006de8 <USBD_CtlError>
      err++;
 8006a0a:	7afb      	ldrb	r3, [r7, #11]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	72fb      	strb	r3, [r7, #11]
      break;
 8006a10:	bf00      	nop
  }

  if (err != 0U)
 8006a12:	7afb      	ldrb	r3, [r7, #11]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d11e      	bne.n	8006a56 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	88db      	ldrh	r3, [r3, #6]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d016      	beq.n	8006a4e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006a20:	893b      	ldrh	r3, [r7, #8]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00e      	beq.n	8006a44 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	88da      	ldrh	r2, [r3, #6]
 8006a2a:	893b      	ldrh	r3, [r7, #8]
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	bf28      	it	cs
 8006a30:	4613      	movcs	r3, r2
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006a36:	893b      	ldrh	r3, [r7, #8]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	68f9      	ldr	r1, [r7, #12]
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fa44 	bl	8006eca <USBD_CtlSendData>
 8006a42:	e009      	b.n	8006a58 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006a44:	6839      	ldr	r1, [r7, #0]
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f9ce 	bl	8006de8 <USBD_CtlError>
 8006a4c:	e004      	b.n	8006a58 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fa95 	bl	8006f7e <USBD_CtlSendStatus>
 8006a54:	e000      	b.n	8006a58 <USBD_GetDescriptor+0x320>
    return;
 8006a56:	bf00      	nop
  }
}
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop

08006a60 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	889b      	ldrh	r3, [r3, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d131      	bne.n	8006ad6 <USBD_SetAddress+0x76>
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	88db      	ldrh	r3, [r3, #6]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d12d      	bne.n	8006ad6 <USBD_SetAddress+0x76>
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	885b      	ldrh	r3, [r3, #2]
 8006a7e:	2b7f      	cmp	r3, #127	; 0x7f
 8006a80:	d829      	bhi.n	8006ad6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	885b      	ldrh	r3, [r3, #2]
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b03      	cmp	r3, #3
 8006a98:	d104      	bne.n	8006aa4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006a9a:	6839      	ldr	r1, [r7, #0]
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f9a3 	bl	8006de8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aa2:	e01d      	b.n	8006ae0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	7bfa      	ldrb	r2, [r7, #15]
 8006aa8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
 8006aae:	4619      	mov	r1, r3
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f002 f99b 	bl	8008dec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 fa61 	bl	8006f7e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d004      	beq.n	8006acc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2202      	movs	r2, #2
 8006ac6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aca:	e009      	b.n	8006ae0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ad4:	e004      	b.n	8006ae0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006ad6:	6839      	ldr	r1, [r7, #0]
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 f985 	bl	8006de8 <USBD_CtlError>
  }
}
 8006ade:	bf00      	nop
 8006ae0:	bf00      	nop
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006af2:	2300      	movs	r3, #0
 8006af4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	885b      	ldrh	r3, [r3, #2]
 8006afa:	b2da      	uxtb	r2, r3
 8006afc:	4b4c      	ldr	r3, [pc, #304]	; (8006c30 <USBD_SetConfig+0x148>)
 8006afe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006b00:	4b4b      	ldr	r3, [pc, #300]	; (8006c30 <USBD_SetConfig+0x148>)
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d905      	bls.n	8006b14 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006b08:	6839      	ldr	r1, [r7, #0]
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f96c 	bl	8006de8 <USBD_CtlError>
    return USBD_FAIL;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e088      	b.n	8006c26 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d002      	beq.n	8006b26 <USBD_SetConfig+0x3e>
 8006b20:	2b03      	cmp	r3, #3
 8006b22:	d025      	beq.n	8006b70 <USBD_SetConfig+0x88>
 8006b24:	e071      	b.n	8006c0a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006b26:	4b42      	ldr	r3, [pc, #264]	; (8006c30 <USBD_SetConfig+0x148>)
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d01c      	beq.n	8006b68 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006b2e:	4b40      	ldr	r3, [pc, #256]	; (8006c30 <USBD_SetConfig+0x148>)
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b38:	4b3d      	ldr	r3, [pc, #244]	; (8006c30 <USBD_SetConfig+0x148>)
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7ff f91e 	bl	8005d80 <USBD_SetClassConfig>
 8006b44:	4603      	mov	r3, r0
 8006b46:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d004      	beq.n	8006b58 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006b4e:	6839      	ldr	r1, [r7, #0]
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 f949 	bl	8006de8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006b56:	e065      	b.n	8006c24 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 fa10 	bl	8006f7e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2203      	movs	r2, #3
 8006b62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006b66:	e05d      	b.n	8006c24 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 fa08 	bl	8006f7e <USBD_CtlSendStatus>
      break;
 8006b6e:	e059      	b.n	8006c24 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006b70:	4b2f      	ldr	r3, [pc, #188]	; (8006c30 <USBD_SetConfig+0x148>)
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d112      	bne.n	8006b9e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006b80:	4b2b      	ldr	r3, [pc, #172]	; (8006c30 <USBD_SetConfig+0x148>)
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	461a      	mov	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b8a:	4b29      	ldr	r3, [pc, #164]	; (8006c30 <USBD_SetConfig+0x148>)
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	4619      	mov	r1, r3
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f7ff f911 	bl	8005db8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f9f1 	bl	8006f7e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006b9c:	e042      	b.n	8006c24 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006b9e:	4b24      	ldr	r3, [pc, #144]	; (8006c30 <USBD_SetConfig+0x148>)
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d02a      	beq.n	8006c02 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7ff f8ff 	bl	8005db8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006bba:	4b1d      	ldr	r3, [pc, #116]	; (8006c30 <USBD_SetConfig+0x148>)
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006bc4:	4b1a      	ldr	r3, [pc, #104]	; (8006c30 <USBD_SetConfig+0x148>)
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	4619      	mov	r1, r3
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7ff f8d8 	bl	8005d80 <USBD_SetClassConfig>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006bd4:	7bfb      	ldrb	r3, [r7, #15]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00f      	beq.n	8006bfa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006bda:	6839      	ldr	r1, [r7, #0]
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f903 	bl	8006de8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	4619      	mov	r1, r3
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f7ff f8e4 	bl	8005db8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006bf8:	e014      	b.n	8006c24 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f9bf 	bl	8006f7e <USBD_CtlSendStatus>
      break;
 8006c00:	e010      	b.n	8006c24 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f9bb 	bl	8006f7e <USBD_CtlSendStatus>
      break;
 8006c08:	e00c      	b.n	8006c24 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006c0a:	6839      	ldr	r1, [r7, #0]
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 f8eb 	bl	8006de8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c12:	4b07      	ldr	r3, [pc, #28]	; (8006c30 <USBD_SetConfig+0x148>)
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	4619      	mov	r1, r3
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f7ff f8cd 	bl	8005db8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	73fb      	strb	r3, [r7, #15]
      break;
 8006c22:	bf00      	nop
  }

  return ret;
 8006c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	200004c8 	.word	0x200004c8

08006c34 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	88db      	ldrh	r3, [r3, #6]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d004      	beq.n	8006c50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006c46:	6839      	ldr	r1, [r7, #0]
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 f8cd 	bl	8006de8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006c4e:	e023      	b.n	8006c98 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	dc02      	bgt.n	8006c62 <USBD_GetConfig+0x2e>
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	dc03      	bgt.n	8006c68 <USBD_GetConfig+0x34>
 8006c60:	e015      	b.n	8006c8e <USBD_GetConfig+0x5a>
 8006c62:	2b03      	cmp	r3, #3
 8006c64:	d00b      	beq.n	8006c7e <USBD_GetConfig+0x4a>
 8006c66:	e012      	b.n	8006c8e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	3308      	adds	r3, #8
 8006c72:	2201      	movs	r2, #1
 8006c74:	4619      	mov	r1, r3
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f927 	bl	8006eca <USBD_CtlSendData>
        break;
 8006c7c:	e00c      	b.n	8006c98 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	3304      	adds	r3, #4
 8006c82:	2201      	movs	r2, #1
 8006c84:	4619      	mov	r1, r3
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f91f 	bl	8006eca <USBD_CtlSendData>
        break;
 8006c8c:	e004      	b.n	8006c98 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006c8e:	6839      	ldr	r1, [r7, #0]
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 f8a9 	bl	8006de8 <USBD_CtlError>
        break;
 8006c96:	bf00      	nop
}
 8006c98:	bf00      	nop
 8006c9a:	3708      	adds	r7, #8
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d81e      	bhi.n	8006cf6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	88db      	ldrh	r3, [r3, #6]
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d004      	beq.n	8006cca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006cc0:	6839      	ldr	r1, [r7, #0]
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f890 	bl	8006de8 <USBD_CtlError>
        break;
 8006cc8:	e01a      	b.n	8006d00 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d005      	beq.n	8006ce6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	f043 0202 	orr.w	r2, r3, #2
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	330c      	adds	r3, #12
 8006cea:	2202      	movs	r2, #2
 8006cec:	4619      	mov	r1, r3
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f8eb 	bl	8006eca <USBD_CtlSendData>
      break;
 8006cf4:	e004      	b.n	8006d00 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006cf6:	6839      	ldr	r1, [r7, #0]
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 f875 	bl	8006de8 <USBD_CtlError>
      break;
 8006cfe:	bf00      	nop
  }
}
 8006d00:	bf00      	nop
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	885b      	ldrh	r3, [r3, #2]
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d106      	bne.n	8006d28 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f92b 	bl	8006f7e <USBD_CtlSendStatus>
  }
}
 8006d28:	bf00      	nop
 8006d2a:	3708      	adds	r7, #8
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	3b01      	subs	r3, #1
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d80b      	bhi.n	8006d60 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	885b      	ldrh	r3, [r3, #2]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d10c      	bne.n	8006d6a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 f910 	bl	8006f7e <USBD_CtlSendStatus>
      }
      break;
 8006d5e:	e004      	b.n	8006d6a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006d60:	6839      	ldr	r1, [r7, #0]
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f840 	bl	8006de8 <USBD_CtlError>
      break;
 8006d68:	e000      	b.n	8006d6c <USBD_ClrFeature+0x3c>
      break;
 8006d6a:	bf00      	nop
  }
}
 8006d6c:	bf00      	nop
 8006d6e:	3708      	adds	r7, #8
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	781a      	ldrb	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	781a      	ldrb	r2, [r3, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f7ff fa91 	bl	80062c6 <SWAPBYTE>
 8006da4:	4603      	mov	r3, r0
 8006da6:	461a      	mov	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	3301      	adds	r3, #1
 8006db0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	3301      	adds	r3, #1
 8006db6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f7ff fa84 	bl	80062c6 <SWAPBYTE>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f7ff fa77 	bl	80062c6 <SWAPBYTE>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	461a      	mov	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	80da      	strh	r2, [r3, #6]
}
 8006de0:	bf00      	nop
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006df2:	2180      	movs	r1, #128	; 0x80
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f001 ff8f 	bl	8008d18 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f001 ff8b 	bl	8008d18 <USBD_LL_StallEP>
}
 8006e02:	bf00      	nop
 8006e04:	3708      	adds	r7, #8
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b086      	sub	sp, #24
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	60f8      	str	r0, [r7, #12]
 8006e12:	60b9      	str	r1, [r7, #8]
 8006e14:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006e16:	2300      	movs	r3, #0
 8006e18:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d036      	beq.n	8006e8e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006e24:	6938      	ldr	r0, [r7, #16]
 8006e26:	f000 f836 	bl	8006e96 <USBD_GetLen>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	005b      	lsls	r3, r3, #1
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006e38:	7dfb      	ldrb	r3, [r7, #23]
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	7812      	ldrb	r2, [r2, #0]
 8006e42:	701a      	strb	r2, [r3, #0]
  idx++;
 8006e44:	7dfb      	ldrb	r3, [r7, #23]
 8006e46:	3301      	adds	r3, #1
 8006e48:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006e4a:	7dfb      	ldrb	r3, [r7, #23]
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	4413      	add	r3, r2
 8006e50:	2203      	movs	r2, #3
 8006e52:	701a      	strb	r2, [r3, #0]
  idx++;
 8006e54:	7dfb      	ldrb	r3, [r7, #23]
 8006e56:	3301      	adds	r3, #1
 8006e58:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006e5a:	e013      	b.n	8006e84 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006e5c:	7dfb      	ldrb	r3, [r7, #23]
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	4413      	add	r3, r2
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	7812      	ldrb	r2, [r2, #0]
 8006e66:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	613b      	str	r3, [r7, #16]
    idx++;
 8006e6e:	7dfb      	ldrb	r3, [r7, #23]
 8006e70:	3301      	adds	r3, #1
 8006e72:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006e74:	7dfb      	ldrb	r3, [r7, #23]
 8006e76:	68ba      	ldr	r2, [r7, #8]
 8006e78:	4413      	add	r3, r2
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	701a      	strb	r2, [r3, #0]
    idx++;
 8006e7e:	7dfb      	ldrb	r3, [r7, #23]
 8006e80:	3301      	adds	r3, #1
 8006e82:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1e7      	bne.n	8006e5c <USBD_GetString+0x52>
 8006e8c:	e000      	b.n	8006e90 <USBD_GetString+0x86>
    return;
 8006e8e:	bf00      	nop
  }
}
 8006e90:	3718      	adds	r7, #24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b085      	sub	sp, #20
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006ea6:	e005      	b.n	8006eb4 <USBD_GetLen+0x1e>
  {
    len++;
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1f5      	bne.n	8006ea8 <USBD_GetLen+0x12>
  }

  return len;
 8006ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b084      	sub	sp, #16
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	60f8      	str	r0, [r7, #12]
 8006ed2:	60b9      	str	r1, [r7, #8]
 8006ed4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2202      	movs	r2, #2
 8006eda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68ba      	ldr	r2, [r7, #8]
 8006eee:	2100      	movs	r1, #0
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f001 ff9a 	bl	8008e2a <USBD_LL_Transmit>

  return USBD_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	2100      	movs	r1, #0
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f001 ff89 	bl	8008e2a <USBD_LL_Transmit>

  return USBD_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b084      	sub	sp, #16
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	60f8      	str	r0, [r7, #12]
 8006f2a:	60b9      	str	r1, [r7, #8]
 8006f2c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2203      	movs	r2, #3
 8006f32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	2100      	movs	r1, #0
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f001 ff8d 	bl	8008e6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f001 ff7c 	bl	8008e6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b082      	sub	sp, #8
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2204      	movs	r2, #4
 8006f8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006f8e:	2300      	movs	r3, #0
 8006f90:	2200      	movs	r2, #0
 8006f92:	2100      	movs	r1, #0
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f001 ff48 	bl	8008e2a <USBD_LL_Transmit>

  return USBD_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2205      	movs	r2, #5
 8006fb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	2100      	movs	r1, #0
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f001 ff56 	bl	8008e6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b085      	sub	sp, #20
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006fd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006fdc:	2b84      	cmp	r3, #132	; 0x84
 8006fde:	d005      	beq.n	8006fec <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006fe0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	3303      	adds	r3, #3
 8006fea:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006fec:	68fb      	ldr	r3, [r7, #12]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3714      	adds	r7, #20
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr

08006ffa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006ffe:	f000 faf5 	bl	80075ec <vTaskStartScheduler>
  
  return osOK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	bd80      	pop	{r7, pc}

08007008 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800700a:	b089      	sub	sp, #36	; 0x24
 800700c:	af04      	add	r7, sp, #16
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d020      	beq.n	800705c <osThreadCreate+0x54>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d01c      	beq.n	800705c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	685c      	ldr	r4, [r3, #4]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681d      	ldr	r5, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	691e      	ldr	r6, [r3, #16]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007034:	4618      	mov	r0, r3
 8007036:	f7ff ffc8 	bl	8006fca <makeFreeRtosPriority>
 800703a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	695b      	ldr	r3, [r3, #20]
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007044:	9202      	str	r2, [sp, #8]
 8007046:	9301      	str	r3, [sp, #4]
 8007048:	9100      	str	r1, [sp, #0]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	4632      	mov	r2, r6
 800704e:	4629      	mov	r1, r5
 8007050:	4620      	mov	r0, r4
 8007052:	f000 f8ed 	bl	8007230 <xTaskCreateStatic>
 8007056:	4603      	mov	r3, r0
 8007058:	60fb      	str	r3, [r7, #12]
 800705a:	e01c      	b.n	8007096 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685c      	ldr	r4, [r3, #4]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007068:	b29e      	uxth	r6, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007070:	4618      	mov	r0, r3
 8007072:	f7ff ffaa 	bl	8006fca <makeFreeRtosPriority>
 8007076:	4602      	mov	r2, r0
 8007078:	f107 030c 	add.w	r3, r7, #12
 800707c:	9301      	str	r3, [sp, #4]
 800707e:	9200      	str	r2, [sp, #0]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	4632      	mov	r2, r6
 8007084:	4629      	mov	r1, r5
 8007086:	4620      	mov	r0, r4
 8007088:	f000 f92f 	bl	80072ea <xTaskCreate>
 800708c:	4603      	mov	r3, r0
 800708e:	2b01      	cmp	r3, #1
 8007090:	d001      	beq.n	8007096 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007092:	2300      	movs	r3, #0
 8007094:	e000      	b.n	8007098 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007096:	68fb      	ldr	r3, [r7, #12]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3714      	adds	r7, #20
 800709c:	46bd      	mov	sp, r7
 800709e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080070a0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d001      	beq.n	80070b6 <osDelay+0x16>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	e000      	b.n	80070b8 <osDelay+0x18>
 80070b6:	2301      	movs	r3, #1
 80070b8:	4618      	mov	r0, r3
 80070ba:	f000 fa63 	bl	8007584 <vTaskDelay>
  
  return osOK;
 80070be:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f103 0208 	add.w	r2, r3, #8
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f04f 32ff 	mov.w	r2, #4294967295
 80070e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f103 0208 	add.w	r2, r3, #8
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f103 0208 	add.w	r2, r3, #8
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80070fc:	bf00      	nop
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007116:	bf00      	nop
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007122:	b480      	push	{r7}
 8007124:	b085      	sub	sp, #20
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
 800712a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	689a      	ldr	r2, [r3, #8]
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	683a      	ldr	r2, [r7, #0]
 8007146:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	683a      	ldr	r2, [r7, #0]
 800714c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	1c5a      	adds	r2, r3, #1
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	601a      	str	r2, [r3, #0]
}
 800715e:	bf00      	nop
 8007160:	3714      	adds	r7, #20
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr

0800716a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800716a:	b480      	push	{r7}
 800716c:	b085      	sub	sp, #20
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
 8007172:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007180:	d103      	bne.n	800718a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	60fb      	str	r3, [r7, #12]
 8007188:	e00c      	b.n	80071a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	3308      	adds	r3, #8
 800718e:	60fb      	str	r3, [r7, #12]
 8007190:	e002      	b.n	8007198 <vListInsert+0x2e>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68ba      	ldr	r2, [r7, #8]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d2f6      	bcs.n	8007192 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	683a      	ldr	r2, [r7, #0]
 80071b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	683a      	ldr	r2, [r7, #0]
 80071be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	1c5a      	adds	r2, r3, #1
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	601a      	str	r2, [r3, #0]
}
 80071d0:	bf00      	nop
 80071d2:	3714      	adds	r7, #20
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	6892      	ldr	r2, [r2, #8]
 80071f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	6852      	ldr	r2, [r2, #4]
 80071fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	429a      	cmp	r2, r3
 8007206:	d103      	bne.n	8007210 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	689a      	ldr	r2, [r3, #8]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	1e5a      	subs	r2, r3, #1
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
}
 8007224:	4618      	mov	r0, r3
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007230:	b580      	push	{r7, lr}
 8007232:	b08e      	sub	sp, #56	; 0x38
 8007234:	af04      	add	r7, sp, #16
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
 800723c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800723e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10a      	bne.n	800725a <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007248:	f383 8811 	msr	BASEPRI, r3
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007256:	bf00      	nop
 8007258:	e7fe      	b.n	8007258 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800725a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10a      	bne.n	8007276 <xTaskCreateStatic+0x46>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	61fb      	str	r3, [r7, #28]
}
 8007272:	bf00      	nop
 8007274:	e7fe      	b.n	8007274 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007276:	23b4      	movs	r3, #180	; 0xb4
 8007278:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	2bb4      	cmp	r3, #180	; 0xb4
 800727e:	d00a      	beq.n	8007296 <xTaskCreateStatic+0x66>
	__asm volatile
 8007280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007284:	f383 8811 	msr	BASEPRI, r3
 8007288:	f3bf 8f6f 	isb	sy
 800728c:	f3bf 8f4f 	dsb	sy
 8007290:	61bb      	str	r3, [r7, #24]
}
 8007292:	bf00      	nop
 8007294:	e7fe      	b.n	8007294 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007296:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729a:	2b00      	cmp	r3, #0
 800729c:	d01e      	beq.n	80072dc <xTaskCreateStatic+0xac>
 800729e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d01b      	beq.n	80072dc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80072a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80072a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80072ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b0:	2202      	movs	r2, #2
 80072b2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80072b6:	2300      	movs	r3, #0
 80072b8:	9303      	str	r3, [sp, #12]
 80072ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072bc:	9302      	str	r3, [sp, #8]
 80072be:	f107 0314 	add.w	r3, r7, #20
 80072c2:	9301      	str	r3, [sp, #4]
 80072c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c6:	9300      	str	r3, [sp, #0]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	68b9      	ldr	r1, [r7, #8]
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f000 f850 	bl	8007374 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072d6:	f000 f8eb 	bl	80074b0 <prvAddNewTaskToReadyList>
 80072da:	e001      	b.n	80072e0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80072dc:	2300      	movs	r3, #0
 80072de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80072e0:	697b      	ldr	r3, [r7, #20]
	}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3728      	adds	r7, #40	; 0x28
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b08c      	sub	sp, #48	; 0x30
 80072ee:	af04      	add	r7, sp, #16
 80072f0:	60f8      	str	r0, [r7, #12]
 80072f2:	60b9      	str	r1, [r7, #8]
 80072f4:	603b      	str	r3, [r7, #0]
 80072f6:	4613      	mov	r3, r2
 80072f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80072fa:	88fb      	ldrh	r3, [r7, #6]
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4618      	mov	r0, r3
 8007300:	f000 fef2 	bl	80080e8 <pvPortMalloc>
 8007304:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00e      	beq.n	800732a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800730c:	20b4      	movs	r0, #180	; 0xb4
 800730e:	f000 feeb 	bl	80080e8 <pvPortMalloc>
 8007312:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d003      	beq.n	8007322 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	697a      	ldr	r2, [r7, #20]
 800731e:	631a      	str	r2, [r3, #48]	; 0x30
 8007320:	e005      	b.n	800732e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007322:	6978      	ldr	r0, [r7, #20]
 8007324:	f000 ffac 	bl	8008280 <vPortFree>
 8007328:	e001      	b.n	800732e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800732a:	2300      	movs	r3, #0
 800732c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d017      	beq.n	8007364 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800733c:	88fa      	ldrh	r2, [r7, #6]
 800733e:	2300      	movs	r3, #0
 8007340:	9303      	str	r3, [sp, #12]
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	9302      	str	r3, [sp, #8]
 8007346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007348:	9301      	str	r3, [sp, #4]
 800734a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	68b9      	ldr	r1, [r7, #8]
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f000 f80e 	bl	8007374 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007358:	69f8      	ldr	r0, [r7, #28]
 800735a:	f000 f8a9 	bl	80074b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800735e:	2301      	movs	r3, #1
 8007360:	61bb      	str	r3, [r7, #24]
 8007362:	e002      	b.n	800736a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007364:	f04f 33ff 	mov.w	r3, #4294967295
 8007368:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800736a:	69bb      	ldr	r3, [r7, #24]
	}
 800736c:	4618      	mov	r0, r3
 800736e:	3720      	adds	r7, #32
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b088      	sub	sp, #32
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	607a      	str	r2, [r7, #4]
 8007380:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800738c:	3b01      	subs	r3, #1
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	f023 0307 	bic.w	r3, r3, #7
 800739a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	f003 0307 	and.w	r3, r3, #7
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00a      	beq.n	80073bc <prvInitialiseNewTask+0x48>
	__asm volatile
 80073a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073aa:	f383 8811 	msr	BASEPRI, r3
 80073ae:	f3bf 8f6f 	isb	sy
 80073b2:	f3bf 8f4f 	dsb	sy
 80073b6:	617b      	str	r3, [r7, #20]
}
 80073b8:	bf00      	nop
 80073ba:	e7fe      	b.n	80073ba <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d01f      	beq.n	8007402 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073c2:	2300      	movs	r3, #0
 80073c4:	61fb      	str	r3, [r7, #28]
 80073c6:	e012      	b.n	80073ee <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	4413      	add	r3, r2
 80073ce:	7819      	ldrb	r1, [r3, #0]
 80073d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	4413      	add	r3, r2
 80073d6:	3334      	adds	r3, #52	; 0x34
 80073d8:	460a      	mov	r2, r1
 80073da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	4413      	add	r3, r2
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d006      	beq.n	80073f6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	3301      	adds	r3, #1
 80073ec:	61fb      	str	r3, [r7, #28]
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	2b0f      	cmp	r3, #15
 80073f2:	d9e9      	bls.n	80073c8 <prvInitialiseNewTask+0x54>
 80073f4:	e000      	b.n	80073f8 <prvInitialiseNewTask+0x84>
			{
				break;
 80073f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80073f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007400:	e003      	b.n	800740a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007404:	2200      	movs	r2, #0
 8007406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800740a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740c:	2b06      	cmp	r3, #6
 800740e:	d901      	bls.n	8007414 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007410:	2306      	movs	r3, #6
 8007412:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007418:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800741a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800741e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007422:	2200      	movs	r2, #0
 8007424:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007428:	3304      	adds	r3, #4
 800742a:	4618      	mov	r0, r3
 800742c:	f7ff fe6c 	bl	8007108 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007432:	3318      	adds	r3, #24
 8007434:	4618      	mov	r0, r3
 8007436:	f7ff fe67 	bl	8007108 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800743a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800743e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007442:	f1c3 0207 	rsb	r2, r3, #7
 8007446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007448:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800744a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800744e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007452:	2200      	movs	r2, #0
 8007454:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745a:	2200      	movs	r2, #0
 800745c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007462:	334c      	adds	r3, #76	; 0x4c
 8007464:	2260      	movs	r2, #96	; 0x60
 8007466:	2100      	movs	r1, #0
 8007468:	4618      	mov	r0, r3
 800746a:	f001 fdeb 	bl	8009044 <memset>
 800746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007470:	4a0c      	ldr	r2, [pc, #48]	; (80074a4 <prvInitialiseNewTask+0x130>)
 8007472:	651a      	str	r2, [r3, #80]	; 0x50
 8007474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007476:	4a0c      	ldr	r2, [pc, #48]	; (80074a8 <prvInitialiseNewTask+0x134>)
 8007478:	655a      	str	r2, [r3, #84]	; 0x54
 800747a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747c:	4a0b      	ldr	r2, [pc, #44]	; (80074ac <prvInitialiseNewTask+0x138>)
 800747e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007480:	683a      	ldr	r2, [r7, #0]
 8007482:	68f9      	ldr	r1, [r7, #12]
 8007484:	69b8      	ldr	r0, [r7, #24]
 8007486:	f000 fc1f 	bl	8007cc8 <pxPortInitialiseStack>
 800748a:	4602      	mov	r2, r0
 800748c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007492:	2b00      	cmp	r3, #0
 8007494:	d002      	beq.n	800749c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800749a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800749c:	bf00      	nop
 800749e:	3720      	adds	r7, #32
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	080092a8 	.word	0x080092a8
 80074a8:	080092c8 	.word	0x080092c8
 80074ac:	08009288 	.word	0x08009288

080074b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80074b8:	f000 fd34 	bl	8007f24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80074bc:	4b2a      	ldr	r3, [pc, #168]	; (8007568 <prvAddNewTaskToReadyList+0xb8>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	3301      	adds	r3, #1
 80074c2:	4a29      	ldr	r2, [pc, #164]	; (8007568 <prvAddNewTaskToReadyList+0xb8>)
 80074c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80074c6:	4b29      	ldr	r3, [pc, #164]	; (800756c <prvAddNewTaskToReadyList+0xbc>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d109      	bne.n	80074e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80074ce:	4a27      	ldr	r2, [pc, #156]	; (800756c <prvAddNewTaskToReadyList+0xbc>)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80074d4:	4b24      	ldr	r3, [pc, #144]	; (8007568 <prvAddNewTaskToReadyList+0xb8>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d110      	bne.n	80074fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80074dc:	f000 facc 	bl	8007a78 <prvInitialiseTaskLists>
 80074e0:	e00d      	b.n	80074fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80074e2:	4b23      	ldr	r3, [pc, #140]	; (8007570 <prvAddNewTaskToReadyList+0xc0>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d109      	bne.n	80074fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80074ea:	4b20      	ldr	r3, [pc, #128]	; (800756c <prvAddNewTaskToReadyList+0xbc>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d802      	bhi.n	80074fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80074f8:	4a1c      	ldr	r2, [pc, #112]	; (800756c <prvAddNewTaskToReadyList+0xbc>)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80074fe:	4b1d      	ldr	r3, [pc, #116]	; (8007574 <prvAddNewTaskToReadyList+0xc4>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	3301      	adds	r3, #1
 8007504:	4a1b      	ldr	r2, [pc, #108]	; (8007574 <prvAddNewTaskToReadyList+0xc4>)
 8007506:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750c:	2201      	movs	r2, #1
 800750e:	409a      	lsls	r2, r3
 8007510:	4b19      	ldr	r3, [pc, #100]	; (8007578 <prvAddNewTaskToReadyList+0xc8>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4313      	orrs	r3, r2
 8007516:	4a18      	ldr	r2, [pc, #96]	; (8007578 <prvAddNewTaskToReadyList+0xc8>)
 8007518:	6013      	str	r3, [r2, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800751e:	4613      	mov	r3, r2
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	4413      	add	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4a15      	ldr	r2, [pc, #84]	; (800757c <prvAddNewTaskToReadyList+0xcc>)
 8007528:	441a      	add	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	3304      	adds	r3, #4
 800752e:	4619      	mov	r1, r3
 8007530:	4610      	mov	r0, r2
 8007532:	f7ff fdf6 	bl	8007122 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007536:	f000 fd25 	bl	8007f84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800753a:	4b0d      	ldr	r3, [pc, #52]	; (8007570 <prvAddNewTaskToReadyList+0xc0>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00e      	beq.n	8007560 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007542:	4b0a      	ldr	r3, [pc, #40]	; (800756c <prvAddNewTaskToReadyList+0xbc>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800754c:	429a      	cmp	r2, r3
 800754e:	d207      	bcs.n	8007560 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007550:	4b0b      	ldr	r3, [pc, #44]	; (8007580 <prvAddNewTaskToReadyList+0xd0>)
 8007552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007556:	601a      	str	r2, [r3, #0]
 8007558:	f3bf 8f4f 	dsb	sy
 800755c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007560:	bf00      	nop
 8007562:	3708      	adds	r7, #8
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	200005cc 	.word	0x200005cc
 800756c:	200004cc 	.word	0x200004cc
 8007570:	200005d8 	.word	0x200005d8
 8007574:	200005e8 	.word	0x200005e8
 8007578:	200005d4 	.word	0x200005d4
 800757c:	200004d0 	.word	0x200004d0
 8007580:	e000ed04 	.word	0xe000ed04

08007584 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800758c:	2300      	movs	r3, #0
 800758e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d017      	beq.n	80075c6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007596:	4b13      	ldr	r3, [pc, #76]	; (80075e4 <vTaskDelay+0x60>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00a      	beq.n	80075b4 <vTaskDelay+0x30>
	__asm volatile
 800759e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a2:	f383 8811 	msr	BASEPRI, r3
 80075a6:	f3bf 8f6f 	isb	sy
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	60bb      	str	r3, [r7, #8]
}
 80075b0:	bf00      	nop
 80075b2:	e7fe      	b.n	80075b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80075b4:	f000 f884 	bl	80076c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80075b8:	2100      	movs	r1, #0
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fb1e 	bl	8007bfc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80075c0:	f000 f88c 	bl	80076dc <xTaskResumeAll>
 80075c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d107      	bne.n	80075dc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80075cc:	4b06      	ldr	r3, [pc, #24]	; (80075e8 <vTaskDelay+0x64>)
 80075ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075d2:	601a      	str	r2, [r3, #0]
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80075dc:	bf00      	nop
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	200005f4 	.word	0x200005f4
 80075e8:	e000ed04 	.word	0xe000ed04

080075ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b08a      	sub	sp, #40	; 0x28
 80075f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80075f2:	2300      	movs	r3, #0
 80075f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80075f6:	2300      	movs	r3, #0
 80075f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80075fa:	463a      	mov	r2, r7
 80075fc:	1d39      	adds	r1, r7, #4
 80075fe:	f107 0308 	add.w	r3, r7, #8
 8007602:	4618      	mov	r0, r3
 8007604:	f7f8 ff80 	bl	8000508 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007608:	6839      	ldr	r1, [r7, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	9202      	str	r2, [sp, #8]
 8007610:	9301      	str	r3, [sp, #4]
 8007612:	2300      	movs	r3, #0
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	2300      	movs	r3, #0
 8007618:	460a      	mov	r2, r1
 800761a:	4921      	ldr	r1, [pc, #132]	; (80076a0 <vTaskStartScheduler+0xb4>)
 800761c:	4821      	ldr	r0, [pc, #132]	; (80076a4 <vTaskStartScheduler+0xb8>)
 800761e:	f7ff fe07 	bl	8007230 <xTaskCreateStatic>
 8007622:	4603      	mov	r3, r0
 8007624:	4a20      	ldr	r2, [pc, #128]	; (80076a8 <vTaskStartScheduler+0xbc>)
 8007626:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007628:	4b1f      	ldr	r3, [pc, #124]	; (80076a8 <vTaskStartScheduler+0xbc>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d002      	beq.n	8007636 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007630:	2301      	movs	r3, #1
 8007632:	617b      	str	r3, [r7, #20]
 8007634:	e001      	b.n	800763a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007636:	2300      	movs	r3, #0
 8007638:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d11b      	bne.n	8007678 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	613b      	str	r3, [r7, #16]
}
 8007652:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007654:	4b15      	ldr	r3, [pc, #84]	; (80076ac <vTaskStartScheduler+0xc0>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	334c      	adds	r3, #76	; 0x4c
 800765a:	4a15      	ldr	r2, [pc, #84]	; (80076b0 <vTaskStartScheduler+0xc4>)
 800765c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800765e:	4b15      	ldr	r3, [pc, #84]	; (80076b4 <vTaskStartScheduler+0xc8>)
 8007660:	f04f 32ff 	mov.w	r2, #4294967295
 8007664:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007666:	4b14      	ldr	r3, [pc, #80]	; (80076b8 <vTaskStartScheduler+0xcc>)
 8007668:	2201      	movs	r2, #1
 800766a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800766c:	4b13      	ldr	r3, [pc, #76]	; (80076bc <vTaskStartScheduler+0xd0>)
 800766e:	2200      	movs	r2, #0
 8007670:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007672:	f000 fbb5 	bl	8007de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007676:	e00e      	b.n	8007696 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800767e:	d10a      	bne.n	8007696 <vTaskStartScheduler+0xaa>
	__asm volatile
 8007680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007684:	f383 8811 	msr	BASEPRI, r3
 8007688:	f3bf 8f6f 	isb	sy
 800768c:	f3bf 8f4f 	dsb	sy
 8007690:	60fb      	str	r3, [r7, #12]
}
 8007692:	bf00      	nop
 8007694:	e7fe      	b.n	8007694 <vTaskStartScheduler+0xa8>
}
 8007696:	bf00      	nop
 8007698:	3718      	adds	r7, #24
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	08009220 	.word	0x08009220
 80076a4:	08007a49 	.word	0x08007a49
 80076a8:	200005f0 	.word	0x200005f0
 80076ac:	200004cc 	.word	0x200004cc
 80076b0:	20000194 	.word	0x20000194
 80076b4:	200005ec 	.word	0x200005ec
 80076b8:	200005d8 	.word	0x200005d8
 80076bc:	200005d0 	.word	0x200005d0

080076c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80076c0:	b480      	push	{r7}
 80076c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80076c4:	4b04      	ldr	r3, [pc, #16]	; (80076d8 <vTaskSuspendAll+0x18>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	3301      	adds	r3, #1
 80076ca:	4a03      	ldr	r2, [pc, #12]	; (80076d8 <vTaskSuspendAll+0x18>)
 80076cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80076ce:	bf00      	nop
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr
 80076d8:	200005f4 	.word	0x200005f4

080076dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80076e2:	2300      	movs	r3, #0
 80076e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80076e6:	2300      	movs	r3, #0
 80076e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80076ea:	4b41      	ldr	r3, [pc, #260]	; (80077f0 <xTaskResumeAll+0x114>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10a      	bne.n	8007708 <xTaskResumeAll+0x2c>
	__asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	603b      	str	r3, [r7, #0]
}
 8007704:	bf00      	nop
 8007706:	e7fe      	b.n	8007706 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007708:	f000 fc0c 	bl	8007f24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800770c:	4b38      	ldr	r3, [pc, #224]	; (80077f0 <xTaskResumeAll+0x114>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	3b01      	subs	r3, #1
 8007712:	4a37      	ldr	r2, [pc, #220]	; (80077f0 <xTaskResumeAll+0x114>)
 8007714:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007716:	4b36      	ldr	r3, [pc, #216]	; (80077f0 <xTaskResumeAll+0x114>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d161      	bne.n	80077e2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800771e:	4b35      	ldr	r3, [pc, #212]	; (80077f4 <xTaskResumeAll+0x118>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d05d      	beq.n	80077e2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007726:	e02e      	b.n	8007786 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007728:	4b33      	ldr	r3, [pc, #204]	; (80077f8 <xTaskResumeAll+0x11c>)
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	3318      	adds	r3, #24
 8007734:	4618      	mov	r0, r3
 8007736:	f7ff fd51 	bl	80071dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	3304      	adds	r3, #4
 800773e:	4618      	mov	r0, r3
 8007740:	f7ff fd4c 	bl	80071dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007748:	2201      	movs	r2, #1
 800774a:	409a      	lsls	r2, r3
 800774c:	4b2b      	ldr	r3, [pc, #172]	; (80077fc <xTaskResumeAll+0x120>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4313      	orrs	r3, r2
 8007752:	4a2a      	ldr	r2, [pc, #168]	; (80077fc <xTaskResumeAll+0x120>)
 8007754:	6013      	str	r3, [r2, #0]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800775a:	4613      	mov	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	4413      	add	r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	4a27      	ldr	r2, [pc, #156]	; (8007800 <xTaskResumeAll+0x124>)
 8007764:	441a      	add	r2, r3
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	3304      	adds	r3, #4
 800776a:	4619      	mov	r1, r3
 800776c:	4610      	mov	r0, r2
 800776e:	f7ff fcd8 	bl	8007122 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007776:	4b23      	ldr	r3, [pc, #140]	; (8007804 <xTaskResumeAll+0x128>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777c:	429a      	cmp	r2, r3
 800777e:	d302      	bcc.n	8007786 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007780:	4b21      	ldr	r3, [pc, #132]	; (8007808 <xTaskResumeAll+0x12c>)
 8007782:	2201      	movs	r2, #1
 8007784:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007786:	4b1c      	ldr	r3, [pc, #112]	; (80077f8 <xTaskResumeAll+0x11c>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1cc      	bne.n	8007728 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d001      	beq.n	8007798 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007794:	f000 fa12 	bl	8007bbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007798:	4b1c      	ldr	r3, [pc, #112]	; (800780c <xTaskResumeAll+0x130>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d010      	beq.n	80077c6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80077a4:	f000 f836 	bl	8007814 <xTaskIncrementTick>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d002      	beq.n	80077b4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80077ae:	4b16      	ldr	r3, [pc, #88]	; (8007808 <xTaskResumeAll+0x12c>)
 80077b0:	2201      	movs	r2, #1
 80077b2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	3b01      	subs	r3, #1
 80077b8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d1f1      	bne.n	80077a4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80077c0:	4b12      	ldr	r3, [pc, #72]	; (800780c <xTaskResumeAll+0x130>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80077c6:	4b10      	ldr	r3, [pc, #64]	; (8007808 <xTaskResumeAll+0x12c>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d009      	beq.n	80077e2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80077ce:	2301      	movs	r3, #1
 80077d0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80077d2:	4b0f      	ldr	r3, [pc, #60]	; (8007810 <xTaskResumeAll+0x134>)
 80077d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077d8:	601a      	str	r2, [r3, #0]
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80077e2:	f000 fbcf 	bl	8007f84 <vPortExitCritical>

	return xAlreadyYielded;
 80077e6:	68bb      	ldr	r3, [r7, #8]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	200005f4 	.word	0x200005f4
 80077f4:	200005cc 	.word	0x200005cc
 80077f8:	2000058c 	.word	0x2000058c
 80077fc:	200005d4 	.word	0x200005d4
 8007800:	200004d0 	.word	0x200004d0
 8007804:	200004cc 	.word	0x200004cc
 8007808:	200005e0 	.word	0x200005e0
 800780c:	200005dc 	.word	0x200005dc
 8007810:	e000ed04 	.word	0xe000ed04

08007814 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b086      	sub	sp, #24
 8007818:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800781a:	2300      	movs	r3, #0
 800781c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800781e:	4b4e      	ldr	r3, [pc, #312]	; (8007958 <xTaskIncrementTick+0x144>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2b00      	cmp	r3, #0
 8007824:	f040 808e 	bne.w	8007944 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007828:	4b4c      	ldr	r3, [pc, #304]	; (800795c <xTaskIncrementTick+0x148>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	3301      	adds	r3, #1
 800782e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007830:	4a4a      	ldr	r2, [pc, #296]	; (800795c <xTaskIncrementTick+0x148>)
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d120      	bne.n	800787e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800783c:	4b48      	ldr	r3, [pc, #288]	; (8007960 <xTaskIncrementTick+0x14c>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00a      	beq.n	800785c <xTaskIncrementTick+0x48>
	__asm volatile
 8007846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784a:	f383 8811 	msr	BASEPRI, r3
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	603b      	str	r3, [r7, #0]
}
 8007858:	bf00      	nop
 800785a:	e7fe      	b.n	800785a <xTaskIncrementTick+0x46>
 800785c:	4b40      	ldr	r3, [pc, #256]	; (8007960 <xTaskIncrementTick+0x14c>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	60fb      	str	r3, [r7, #12]
 8007862:	4b40      	ldr	r3, [pc, #256]	; (8007964 <xTaskIncrementTick+0x150>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a3e      	ldr	r2, [pc, #248]	; (8007960 <xTaskIncrementTick+0x14c>)
 8007868:	6013      	str	r3, [r2, #0]
 800786a:	4a3e      	ldr	r2, [pc, #248]	; (8007964 <xTaskIncrementTick+0x150>)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6013      	str	r3, [r2, #0]
 8007870:	4b3d      	ldr	r3, [pc, #244]	; (8007968 <xTaskIncrementTick+0x154>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	3301      	adds	r3, #1
 8007876:	4a3c      	ldr	r2, [pc, #240]	; (8007968 <xTaskIncrementTick+0x154>)
 8007878:	6013      	str	r3, [r2, #0]
 800787a:	f000 f99f 	bl	8007bbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800787e:	4b3b      	ldr	r3, [pc, #236]	; (800796c <xTaskIncrementTick+0x158>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	693a      	ldr	r2, [r7, #16]
 8007884:	429a      	cmp	r2, r3
 8007886:	d348      	bcc.n	800791a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007888:	4b35      	ldr	r3, [pc, #212]	; (8007960 <xTaskIncrementTick+0x14c>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d104      	bne.n	800789c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007892:	4b36      	ldr	r3, [pc, #216]	; (800796c <xTaskIncrementTick+0x158>)
 8007894:	f04f 32ff 	mov.w	r2, #4294967295
 8007898:	601a      	str	r2, [r3, #0]
					break;
 800789a:	e03e      	b.n	800791a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800789c:	4b30      	ldr	r3, [pc, #192]	; (8007960 <xTaskIncrementTick+0x14c>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d203      	bcs.n	80078bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80078b4:	4a2d      	ldr	r2, [pc, #180]	; (800796c <xTaskIncrementTick+0x158>)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80078ba:	e02e      	b.n	800791a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	3304      	adds	r3, #4
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7ff fc8b 	bl	80071dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d004      	beq.n	80078d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	3318      	adds	r3, #24
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7ff fc82 	bl	80071dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078dc:	2201      	movs	r2, #1
 80078de:	409a      	lsls	r2, r3
 80078e0:	4b23      	ldr	r3, [pc, #140]	; (8007970 <xTaskIncrementTick+0x15c>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	4a22      	ldr	r2, [pc, #136]	; (8007970 <xTaskIncrementTick+0x15c>)
 80078e8:	6013      	str	r3, [r2, #0]
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ee:	4613      	mov	r3, r2
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	4413      	add	r3, r2
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	4a1f      	ldr	r2, [pc, #124]	; (8007974 <xTaskIncrementTick+0x160>)
 80078f8:	441a      	add	r2, r3
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	3304      	adds	r3, #4
 80078fe:	4619      	mov	r1, r3
 8007900:	4610      	mov	r0, r2
 8007902:	f7ff fc0e 	bl	8007122 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800790a:	4b1b      	ldr	r3, [pc, #108]	; (8007978 <xTaskIncrementTick+0x164>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007910:	429a      	cmp	r2, r3
 8007912:	d3b9      	bcc.n	8007888 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007914:	2301      	movs	r3, #1
 8007916:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007918:	e7b6      	b.n	8007888 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800791a:	4b17      	ldr	r3, [pc, #92]	; (8007978 <xTaskIncrementTick+0x164>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007920:	4914      	ldr	r1, [pc, #80]	; (8007974 <xTaskIncrementTick+0x160>)
 8007922:	4613      	mov	r3, r2
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	4413      	add	r3, r2
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	440b      	add	r3, r1
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b01      	cmp	r3, #1
 8007930:	d901      	bls.n	8007936 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007932:	2301      	movs	r3, #1
 8007934:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007936:	4b11      	ldr	r3, [pc, #68]	; (800797c <xTaskIncrementTick+0x168>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d007      	beq.n	800794e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800793e:	2301      	movs	r3, #1
 8007940:	617b      	str	r3, [r7, #20]
 8007942:	e004      	b.n	800794e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007944:	4b0e      	ldr	r3, [pc, #56]	; (8007980 <xTaskIncrementTick+0x16c>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	3301      	adds	r3, #1
 800794a:	4a0d      	ldr	r2, [pc, #52]	; (8007980 <xTaskIncrementTick+0x16c>)
 800794c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800794e:	697b      	ldr	r3, [r7, #20]
}
 8007950:	4618      	mov	r0, r3
 8007952:	3718      	adds	r7, #24
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	200005f4 	.word	0x200005f4
 800795c:	200005d0 	.word	0x200005d0
 8007960:	20000584 	.word	0x20000584
 8007964:	20000588 	.word	0x20000588
 8007968:	200005e4 	.word	0x200005e4
 800796c:	200005ec 	.word	0x200005ec
 8007970:	200005d4 	.word	0x200005d4
 8007974:	200004d0 	.word	0x200004d0
 8007978:	200004cc 	.word	0x200004cc
 800797c:	200005e0 	.word	0x200005e0
 8007980:	200005dc 	.word	0x200005dc

08007984 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007984:	b480      	push	{r7}
 8007986:	b087      	sub	sp, #28
 8007988:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800798a:	4b29      	ldr	r3, [pc, #164]	; (8007a30 <vTaskSwitchContext+0xac>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d003      	beq.n	800799a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007992:	4b28      	ldr	r3, [pc, #160]	; (8007a34 <vTaskSwitchContext+0xb0>)
 8007994:	2201      	movs	r2, #1
 8007996:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007998:	e044      	b.n	8007a24 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800799a:	4b26      	ldr	r3, [pc, #152]	; (8007a34 <vTaskSwitchContext+0xb0>)
 800799c:	2200      	movs	r2, #0
 800799e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079a0:	4b25      	ldr	r3, [pc, #148]	; (8007a38 <vTaskSwitchContext+0xb4>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	fab3 f383 	clz	r3, r3
 80079ac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80079ae:	7afb      	ldrb	r3, [r7, #11]
 80079b0:	f1c3 031f 	rsb	r3, r3, #31
 80079b4:	617b      	str	r3, [r7, #20]
 80079b6:	4921      	ldr	r1, [pc, #132]	; (8007a3c <vTaskSwitchContext+0xb8>)
 80079b8:	697a      	ldr	r2, [r7, #20]
 80079ba:	4613      	mov	r3, r2
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	4413      	add	r3, r2
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	440b      	add	r3, r1
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d10a      	bne.n	80079e0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80079ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ce:	f383 8811 	msr	BASEPRI, r3
 80079d2:	f3bf 8f6f 	isb	sy
 80079d6:	f3bf 8f4f 	dsb	sy
 80079da:	607b      	str	r3, [r7, #4]
}
 80079dc:	bf00      	nop
 80079de:	e7fe      	b.n	80079de <vTaskSwitchContext+0x5a>
 80079e0:	697a      	ldr	r2, [r7, #20]
 80079e2:	4613      	mov	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	4413      	add	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4a14      	ldr	r2, [pc, #80]	; (8007a3c <vTaskSwitchContext+0xb8>)
 80079ec:	4413      	add	r3, r2
 80079ee:	613b      	str	r3, [r7, #16]
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	685a      	ldr	r2, [r3, #4]
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	605a      	str	r2, [r3, #4]
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	685a      	ldr	r2, [r3, #4]
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	3308      	adds	r3, #8
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d104      	bne.n	8007a10 <vTaskSwitchContext+0x8c>
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	605a      	str	r2, [r3, #4]
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	4a0a      	ldr	r2, [pc, #40]	; (8007a40 <vTaskSwitchContext+0xbc>)
 8007a18:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a1a:	4b09      	ldr	r3, [pc, #36]	; (8007a40 <vTaskSwitchContext+0xbc>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	334c      	adds	r3, #76	; 0x4c
 8007a20:	4a08      	ldr	r2, [pc, #32]	; (8007a44 <vTaskSwitchContext+0xc0>)
 8007a22:	6013      	str	r3, [r2, #0]
}
 8007a24:	bf00      	nop
 8007a26:	371c      	adds	r7, #28
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr
 8007a30:	200005f4 	.word	0x200005f4
 8007a34:	200005e0 	.word	0x200005e0
 8007a38:	200005d4 	.word	0x200005d4
 8007a3c:	200004d0 	.word	0x200004d0
 8007a40:	200004cc 	.word	0x200004cc
 8007a44:	20000194 	.word	0x20000194

08007a48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a50:	f000 f852 	bl	8007af8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a54:	4b06      	ldr	r3, [pc, #24]	; (8007a70 <prvIdleTask+0x28>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d9f9      	bls.n	8007a50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a5c:	4b05      	ldr	r3, [pc, #20]	; (8007a74 <prvIdleTask+0x2c>)
 8007a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a62:	601a      	str	r2, [r3, #0]
 8007a64:	f3bf 8f4f 	dsb	sy
 8007a68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a6c:	e7f0      	b.n	8007a50 <prvIdleTask+0x8>
 8007a6e:	bf00      	nop
 8007a70:	200004d0 	.word	0x200004d0
 8007a74:	e000ed04 	.word	0xe000ed04

08007a78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a7e:	2300      	movs	r3, #0
 8007a80:	607b      	str	r3, [r7, #4]
 8007a82:	e00c      	b.n	8007a9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	4613      	mov	r3, r2
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	4413      	add	r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	4a12      	ldr	r2, [pc, #72]	; (8007ad8 <prvInitialiseTaskLists+0x60>)
 8007a90:	4413      	add	r3, r2
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7ff fb18 	bl	80070c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	607b      	str	r3, [r7, #4]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2b06      	cmp	r3, #6
 8007aa2:	d9ef      	bls.n	8007a84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007aa4:	480d      	ldr	r0, [pc, #52]	; (8007adc <prvInitialiseTaskLists+0x64>)
 8007aa6:	f7ff fb0f 	bl	80070c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007aaa:	480d      	ldr	r0, [pc, #52]	; (8007ae0 <prvInitialiseTaskLists+0x68>)
 8007aac:	f7ff fb0c 	bl	80070c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ab0:	480c      	ldr	r0, [pc, #48]	; (8007ae4 <prvInitialiseTaskLists+0x6c>)
 8007ab2:	f7ff fb09 	bl	80070c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ab6:	480c      	ldr	r0, [pc, #48]	; (8007ae8 <prvInitialiseTaskLists+0x70>)
 8007ab8:	f7ff fb06 	bl	80070c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007abc:	480b      	ldr	r0, [pc, #44]	; (8007aec <prvInitialiseTaskLists+0x74>)
 8007abe:	f7ff fb03 	bl	80070c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ac2:	4b0b      	ldr	r3, [pc, #44]	; (8007af0 <prvInitialiseTaskLists+0x78>)
 8007ac4:	4a05      	ldr	r2, [pc, #20]	; (8007adc <prvInitialiseTaskLists+0x64>)
 8007ac6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ac8:	4b0a      	ldr	r3, [pc, #40]	; (8007af4 <prvInitialiseTaskLists+0x7c>)
 8007aca:	4a05      	ldr	r2, [pc, #20]	; (8007ae0 <prvInitialiseTaskLists+0x68>)
 8007acc:	601a      	str	r2, [r3, #0]
}
 8007ace:	bf00      	nop
 8007ad0:	3708      	adds	r7, #8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	200004d0 	.word	0x200004d0
 8007adc:	2000055c 	.word	0x2000055c
 8007ae0:	20000570 	.word	0x20000570
 8007ae4:	2000058c 	.word	0x2000058c
 8007ae8:	200005a0 	.word	0x200005a0
 8007aec:	200005b8 	.word	0x200005b8
 8007af0:	20000584 	.word	0x20000584
 8007af4:	20000588 	.word	0x20000588

08007af8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007afe:	e019      	b.n	8007b34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b00:	f000 fa10 	bl	8007f24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b04:	4b10      	ldr	r3, [pc, #64]	; (8007b48 <prvCheckTasksWaitingTermination+0x50>)
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	3304      	adds	r3, #4
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7ff fb63 	bl	80071dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b16:	4b0d      	ldr	r3, [pc, #52]	; (8007b4c <prvCheckTasksWaitingTermination+0x54>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	4a0b      	ldr	r2, [pc, #44]	; (8007b4c <prvCheckTasksWaitingTermination+0x54>)
 8007b1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b20:	4b0b      	ldr	r3, [pc, #44]	; (8007b50 <prvCheckTasksWaitingTermination+0x58>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3b01      	subs	r3, #1
 8007b26:	4a0a      	ldr	r2, [pc, #40]	; (8007b50 <prvCheckTasksWaitingTermination+0x58>)
 8007b28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b2a:	f000 fa2b 	bl	8007f84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f810 	bl	8007b54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b34:	4b06      	ldr	r3, [pc, #24]	; (8007b50 <prvCheckTasksWaitingTermination+0x58>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1e1      	bne.n	8007b00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b3c:	bf00      	nop
 8007b3e:	bf00      	nop
 8007b40:	3708      	adds	r7, #8
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	200005a0 	.word	0x200005a0
 8007b4c:	200005cc 	.word	0x200005cc
 8007b50:	200005b4 	.word	0x200005b4

08007b54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	334c      	adds	r3, #76	; 0x4c
 8007b60:	4618      	mov	r0, r3
 8007b62:	f001 fa85 	bl	8009070 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d108      	bne.n	8007b82 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b74:	4618      	mov	r0, r3
 8007b76:	f000 fb83 	bl	8008280 <vPortFree>
				vPortFree( pxTCB );
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 fb80 	bl	8008280 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b80:	e018      	b.n	8007bb4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d103      	bne.n	8007b94 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fb77 	bl	8008280 <vPortFree>
	}
 8007b92:	e00f      	b.n	8007bb4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d00a      	beq.n	8007bb4 <prvDeleteTCB+0x60>
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	60fb      	str	r3, [r7, #12]
}
 8007bb0:	bf00      	nop
 8007bb2:	e7fe      	b.n	8007bb2 <prvDeleteTCB+0x5e>
	}
 8007bb4:	bf00      	nop
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bc2:	4b0c      	ldr	r3, [pc, #48]	; (8007bf4 <prvResetNextTaskUnblockTime+0x38>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d104      	bne.n	8007bd6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007bcc:	4b0a      	ldr	r3, [pc, #40]	; (8007bf8 <prvResetNextTaskUnblockTime+0x3c>)
 8007bce:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007bd4:	e008      	b.n	8007be8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bd6:	4b07      	ldr	r3, [pc, #28]	; (8007bf4 <prvResetNextTaskUnblockTime+0x38>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	4a04      	ldr	r2, [pc, #16]	; (8007bf8 <prvResetNextTaskUnblockTime+0x3c>)
 8007be6:	6013      	str	r3, [r2, #0]
}
 8007be8:	bf00      	nop
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr
 8007bf4:	20000584 	.word	0x20000584
 8007bf8:	200005ec 	.word	0x200005ec

08007bfc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c06:	4b29      	ldr	r3, [pc, #164]	; (8007cac <prvAddCurrentTaskToDelayedList+0xb0>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c0c:	4b28      	ldr	r3, [pc, #160]	; (8007cb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	3304      	adds	r3, #4
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7ff fae2 	bl	80071dc <uxListRemove>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10b      	bne.n	8007c36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007c1e:	4b24      	ldr	r3, [pc, #144]	; (8007cb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c24:	2201      	movs	r2, #1
 8007c26:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2a:	43da      	mvns	r2, r3
 8007c2c:	4b21      	ldr	r3, [pc, #132]	; (8007cb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4013      	ands	r3, r2
 8007c32:	4a20      	ldr	r2, [pc, #128]	; (8007cb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007c34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c3c:	d10a      	bne.n	8007c54 <prvAddCurrentTaskToDelayedList+0x58>
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d007      	beq.n	8007c54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c44:	4b1a      	ldr	r3, [pc, #104]	; (8007cb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	3304      	adds	r3, #4
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	481a      	ldr	r0, [pc, #104]	; (8007cb8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007c4e:	f7ff fa68 	bl	8007122 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c52:	e026      	b.n	8007ca2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4413      	add	r3, r2
 8007c5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c5c:	4b14      	ldr	r3, [pc, #80]	; (8007cb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	68ba      	ldr	r2, [r7, #8]
 8007c62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007c64:	68ba      	ldr	r2, [r7, #8]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d209      	bcs.n	8007c80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c6c:	4b13      	ldr	r3, [pc, #76]	; (8007cbc <prvAddCurrentTaskToDelayedList+0xc0>)
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	4b0f      	ldr	r3, [pc, #60]	; (8007cb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3304      	adds	r3, #4
 8007c76:	4619      	mov	r1, r3
 8007c78:	4610      	mov	r0, r2
 8007c7a:	f7ff fa76 	bl	800716a <vListInsert>
}
 8007c7e:	e010      	b.n	8007ca2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c80:	4b0f      	ldr	r3, [pc, #60]	; (8007cc0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	4b0a      	ldr	r3, [pc, #40]	; (8007cb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	3304      	adds	r3, #4
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	4610      	mov	r0, r2
 8007c8e:	f7ff fa6c 	bl	800716a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c92:	4b0c      	ldr	r3, [pc, #48]	; (8007cc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d202      	bcs.n	8007ca2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007c9c:	4a09      	ldr	r2, [pc, #36]	; (8007cc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	6013      	str	r3, [r2, #0]
}
 8007ca2:	bf00      	nop
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	200005d0 	.word	0x200005d0
 8007cb0:	200004cc 	.word	0x200004cc
 8007cb4:	200005d4 	.word	0x200005d4
 8007cb8:	200005b8 	.word	0x200005b8
 8007cbc:	20000588 	.word	0x20000588
 8007cc0:	20000584 	.word	0x20000584
 8007cc4:	200005ec 	.word	0x200005ec

08007cc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	3b04      	subs	r3, #4
 8007cd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ce0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	3b04      	subs	r3, #4
 8007ce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	f023 0201 	bic.w	r2, r3, #1
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	3b04      	subs	r3, #4
 8007cf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007cf8:	4a0c      	ldr	r2, [pc, #48]	; (8007d2c <pxPortInitialiseStack+0x64>)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	3b14      	subs	r3, #20
 8007d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	3b04      	subs	r3, #4
 8007d0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f06f 0202 	mvn.w	r2, #2
 8007d16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	3b20      	subs	r3, #32
 8007d1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3714      	adds	r7, #20
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr
 8007d2c:	08007d31 	.word	0x08007d31

08007d30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007d36:	2300      	movs	r3, #0
 8007d38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d3a:	4b12      	ldr	r3, [pc, #72]	; (8007d84 <prvTaskExitError+0x54>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d42:	d00a      	beq.n	8007d5a <prvTaskExitError+0x2a>
	__asm volatile
 8007d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	60fb      	str	r3, [r7, #12]
}
 8007d56:	bf00      	nop
 8007d58:	e7fe      	b.n	8007d58 <prvTaskExitError+0x28>
	__asm volatile
 8007d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5e:	f383 8811 	msr	BASEPRI, r3
 8007d62:	f3bf 8f6f 	isb	sy
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	60bb      	str	r3, [r7, #8]
}
 8007d6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d6e:	bf00      	nop
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d0fc      	beq.n	8007d70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d76:	bf00      	nop
 8007d78:	bf00      	nop
 8007d7a:	3714      	adds	r7, #20
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr
 8007d84:	2000011c 	.word	0x2000011c
	...

08007d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007d90:	4b07      	ldr	r3, [pc, #28]	; (8007db0 <pxCurrentTCBConst2>)
 8007d92:	6819      	ldr	r1, [r3, #0]
 8007d94:	6808      	ldr	r0, [r1, #0]
 8007d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d9a:	f380 8809 	msr	PSP, r0
 8007d9e:	f3bf 8f6f 	isb	sy
 8007da2:	f04f 0000 	mov.w	r0, #0
 8007da6:	f380 8811 	msr	BASEPRI, r0
 8007daa:	4770      	bx	lr
 8007dac:	f3af 8000 	nop.w

08007db0 <pxCurrentTCBConst2>:
 8007db0:	200004cc 	.word	0x200004cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007db4:	bf00      	nop
 8007db6:	bf00      	nop

08007db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007db8:	4808      	ldr	r0, [pc, #32]	; (8007ddc <prvPortStartFirstTask+0x24>)
 8007dba:	6800      	ldr	r0, [r0, #0]
 8007dbc:	6800      	ldr	r0, [r0, #0]
 8007dbe:	f380 8808 	msr	MSP, r0
 8007dc2:	f04f 0000 	mov.w	r0, #0
 8007dc6:	f380 8814 	msr	CONTROL, r0
 8007dca:	b662      	cpsie	i
 8007dcc:	b661      	cpsie	f
 8007dce:	f3bf 8f4f 	dsb	sy
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	df00      	svc	0
 8007dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007dda:	bf00      	nop
 8007ddc:	e000ed08 	.word	0xe000ed08

08007de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b086      	sub	sp, #24
 8007de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007de6:	4b46      	ldr	r3, [pc, #280]	; (8007f00 <xPortStartScheduler+0x120>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a46      	ldr	r2, [pc, #280]	; (8007f04 <xPortStartScheduler+0x124>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d10a      	bne.n	8007e06 <xPortStartScheduler+0x26>
	__asm volatile
 8007df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	613b      	str	r3, [r7, #16]
}
 8007e02:	bf00      	nop
 8007e04:	e7fe      	b.n	8007e04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007e06:	4b3e      	ldr	r3, [pc, #248]	; (8007f00 <xPortStartScheduler+0x120>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a3f      	ldr	r2, [pc, #252]	; (8007f08 <xPortStartScheduler+0x128>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d10a      	bne.n	8007e26 <xPortStartScheduler+0x46>
	__asm volatile
 8007e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e14:	f383 8811 	msr	BASEPRI, r3
 8007e18:	f3bf 8f6f 	isb	sy
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	60fb      	str	r3, [r7, #12]
}
 8007e22:	bf00      	nop
 8007e24:	e7fe      	b.n	8007e24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e26:	4b39      	ldr	r3, [pc, #228]	; (8007f0c <xPortStartScheduler+0x12c>)
 8007e28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	22ff      	movs	r2, #255	; 0xff
 8007e36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e40:	78fb      	ldrb	r3, [r7, #3]
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e48:	b2da      	uxtb	r2, r3
 8007e4a:	4b31      	ldr	r3, [pc, #196]	; (8007f10 <xPortStartScheduler+0x130>)
 8007e4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e4e:	4b31      	ldr	r3, [pc, #196]	; (8007f14 <xPortStartScheduler+0x134>)
 8007e50:	2207      	movs	r2, #7
 8007e52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e54:	e009      	b.n	8007e6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007e56:	4b2f      	ldr	r3, [pc, #188]	; (8007f14 <xPortStartScheduler+0x134>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	4a2d      	ldr	r2, [pc, #180]	; (8007f14 <xPortStartScheduler+0x134>)
 8007e5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e60:	78fb      	ldrb	r3, [r7, #3]
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	005b      	lsls	r3, r3, #1
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e6a:	78fb      	ldrb	r3, [r7, #3]
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e72:	2b80      	cmp	r3, #128	; 0x80
 8007e74:	d0ef      	beq.n	8007e56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e76:	4b27      	ldr	r3, [pc, #156]	; (8007f14 <xPortStartScheduler+0x134>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f1c3 0307 	rsb	r3, r3, #7
 8007e7e:	2b04      	cmp	r3, #4
 8007e80:	d00a      	beq.n	8007e98 <xPortStartScheduler+0xb8>
	__asm volatile
 8007e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e86:	f383 8811 	msr	BASEPRI, r3
 8007e8a:	f3bf 8f6f 	isb	sy
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	60bb      	str	r3, [r7, #8]
}
 8007e94:	bf00      	nop
 8007e96:	e7fe      	b.n	8007e96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e98:	4b1e      	ldr	r3, [pc, #120]	; (8007f14 <xPortStartScheduler+0x134>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	021b      	lsls	r3, r3, #8
 8007e9e:	4a1d      	ldr	r2, [pc, #116]	; (8007f14 <xPortStartScheduler+0x134>)
 8007ea0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ea2:	4b1c      	ldr	r3, [pc, #112]	; (8007f14 <xPortStartScheduler+0x134>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007eaa:	4a1a      	ldr	r2, [pc, #104]	; (8007f14 <xPortStartScheduler+0x134>)
 8007eac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	b2da      	uxtb	r2, r3
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007eb6:	4b18      	ldr	r3, [pc, #96]	; (8007f18 <xPortStartScheduler+0x138>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a17      	ldr	r2, [pc, #92]	; (8007f18 <xPortStartScheduler+0x138>)
 8007ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ec0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ec2:	4b15      	ldr	r3, [pc, #84]	; (8007f18 <xPortStartScheduler+0x138>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a14      	ldr	r2, [pc, #80]	; (8007f18 <xPortStartScheduler+0x138>)
 8007ec8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007ecc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ece:	f000 f8dd 	bl	800808c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ed2:	4b12      	ldr	r3, [pc, #72]	; (8007f1c <xPortStartScheduler+0x13c>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ed8:	f000 f8fc 	bl	80080d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007edc:	4b10      	ldr	r3, [pc, #64]	; (8007f20 <xPortStartScheduler+0x140>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a0f      	ldr	r2, [pc, #60]	; (8007f20 <xPortStartScheduler+0x140>)
 8007ee2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007ee6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ee8:	f7ff ff66 	bl	8007db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007eec:	f7ff fd4a 	bl	8007984 <vTaskSwitchContext>
	prvTaskExitError();
 8007ef0:	f7ff ff1e 	bl	8007d30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3718      	adds	r7, #24
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	e000ed00 	.word	0xe000ed00
 8007f04:	410fc271 	.word	0x410fc271
 8007f08:	410fc270 	.word	0x410fc270
 8007f0c:	e000e400 	.word	0xe000e400
 8007f10:	200005f8 	.word	0x200005f8
 8007f14:	200005fc 	.word	0x200005fc
 8007f18:	e000ed20 	.word	0xe000ed20
 8007f1c:	2000011c 	.word	0x2000011c
 8007f20:	e000ef34 	.word	0xe000ef34

08007f24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
	__asm volatile
 8007f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2e:	f383 8811 	msr	BASEPRI, r3
 8007f32:	f3bf 8f6f 	isb	sy
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	607b      	str	r3, [r7, #4]
}
 8007f3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f3e:	4b0f      	ldr	r3, [pc, #60]	; (8007f7c <vPortEnterCritical+0x58>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	3301      	adds	r3, #1
 8007f44:	4a0d      	ldr	r2, [pc, #52]	; (8007f7c <vPortEnterCritical+0x58>)
 8007f46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f48:	4b0c      	ldr	r3, [pc, #48]	; (8007f7c <vPortEnterCritical+0x58>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d10f      	bne.n	8007f70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f50:	4b0b      	ldr	r3, [pc, #44]	; (8007f80 <vPortEnterCritical+0x5c>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00a      	beq.n	8007f70 <vPortEnterCritical+0x4c>
	__asm volatile
 8007f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5e:	f383 8811 	msr	BASEPRI, r3
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	603b      	str	r3, [r7, #0]
}
 8007f6c:	bf00      	nop
 8007f6e:	e7fe      	b.n	8007f6e <vPortEnterCritical+0x4a>
	}
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr
 8007f7c:	2000011c 	.word	0x2000011c
 8007f80:	e000ed04 	.word	0xe000ed04

08007f84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f8a:	4b12      	ldr	r3, [pc, #72]	; (8007fd4 <vPortExitCritical+0x50>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d10a      	bne.n	8007fa8 <vPortExitCritical+0x24>
	__asm volatile
 8007f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f96:	f383 8811 	msr	BASEPRI, r3
 8007f9a:	f3bf 8f6f 	isb	sy
 8007f9e:	f3bf 8f4f 	dsb	sy
 8007fa2:	607b      	str	r3, [r7, #4]
}
 8007fa4:	bf00      	nop
 8007fa6:	e7fe      	b.n	8007fa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007fa8:	4b0a      	ldr	r3, [pc, #40]	; (8007fd4 <vPortExitCritical+0x50>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	3b01      	subs	r3, #1
 8007fae:	4a09      	ldr	r2, [pc, #36]	; (8007fd4 <vPortExitCritical+0x50>)
 8007fb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007fb2:	4b08      	ldr	r3, [pc, #32]	; (8007fd4 <vPortExitCritical+0x50>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d105      	bne.n	8007fc6 <vPortExitCritical+0x42>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007fc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007fc6:	bf00      	nop
 8007fc8:	370c      	adds	r7, #12
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	2000011c 	.word	0x2000011c
	...

08007fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007fe0:	f3ef 8009 	mrs	r0, PSP
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	4b15      	ldr	r3, [pc, #84]	; (8008040 <pxCurrentTCBConst>)
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	f01e 0f10 	tst.w	lr, #16
 8007ff0:	bf08      	it	eq
 8007ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ffa:	6010      	str	r0, [r2, #0]
 8007ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008000:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008004:	f380 8811 	msr	BASEPRI, r0
 8008008:	f3bf 8f4f 	dsb	sy
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	f7ff fcb8 	bl	8007984 <vTaskSwitchContext>
 8008014:	f04f 0000 	mov.w	r0, #0
 8008018:	f380 8811 	msr	BASEPRI, r0
 800801c:	bc09      	pop	{r0, r3}
 800801e:	6819      	ldr	r1, [r3, #0]
 8008020:	6808      	ldr	r0, [r1, #0]
 8008022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008026:	f01e 0f10 	tst.w	lr, #16
 800802a:	bf08      	it	eq
 800802c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008030:	f380 8809 	msr	PSP, r0
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	f3af 8000 	nop.w

08008040 <pxCurrentTCBConst>:
 8008040:	200004cc 	.word	0x200004cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008044:	bf00      	nop
 8008046:	bf00      	nop

08008048 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
	__asm volatile
 800804e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	607b      	str	r3, [r7, #4]
}
 8008060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008062:	f7ff fbd7 	bl	8007814 <xTaskIncrementTick>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d003      	beq.n	8008074 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800806c:	4b06      	ldr	r3, [pc, #24]	; (8008088 <SysTick_Handler+0x40>)
 800806e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008072:	601a      	str	r2, [r3, #0]
 8008074:	2300      	movs	r3, #0
 8008076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	f383 8811 	msr	BASEPRI, r3
}
 800807e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008080:	bf00      	nop
 8008082:	3708      	adds	r7, #8
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	e000ed04 	.word	0xe000ed04

0800808c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800808c:	b480      	push	{r7}
 800808e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008090:	4b0b      	ldr	r3, [pc, #44]	; (80080c0 <vPortSetupTimerInterrupt+0x34>)
 8008092:	2200      	movs	r2, #0
 8008094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008096:	4b0b      	ldr	r3, [pc, #44]	; (80080c4 <vPortSetupTimerInterrupt+0x38>)
 8008098:	2200      	movs	r2, #0
 800809a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800809c:	4b0a      	ldr	r3, [pc, #40]	; (80080c8 <vPortSetupTimerInterrupt+0x3c>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a0a      	ldr	r2, [pc, #40]	; (80080cc <vPortSetupTimerInterrupt+0x40>)
 80080a2:	fba2 2303 	umull	r2, r3, r2, r3
 80080a6:	099b      	lsrs	r3, r3, #6
 80080a8:	4a09      	ldr	r2, [pc, #36]	; (80080d0 <vPortSetupTimerInterrupt+0x44>)
 80080aa:	3b01      	subs	r3, #1
 80080ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80080ae:	4b04      	ldr	r3, [pc, #16]	; (80080c0 <vPortSetupTimerInterrupt+0x34>)
 80080b0:	2207      	movs	r2, #7
 80080b2:	601a      	str	r2, [r3, #0]
}
 80080b4:	bf00      	nop
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	e000e010 	.word	0xe000e010
 80080c4:	e000e018 	.word	0xe000e018
 80080c8:	20000000 	.word	0x20000000
 80080cc:	10624dd3 	.word	0x10624dd3
 80080d0:	e000e014 	.word	0xe000e014

080080d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80080d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80080e4 <vPortEnableVFP+0x10>
 80080d8:	6801      	ldr	r1, [r0, #0]
 80080da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80080de:	6001      	str	r1, [r0, #0]
 80080e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80080e2:	bf00      	nop
 80080e4:	e000ed88 	.word	0xe000ed88

080080e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b08a      	sub	sp, #40	; 0x28
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80080f0:	2300      	movs	r3, #0
 80080f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80080f4:	f7ff fae4 	bl	80076c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80080f8:	4b5b      	ldr	r3, [pc, #364]	; (8008268 <pvPortMalloc+0x180>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d101      	bne.n	8008104 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008100:	f000 f920 	bl	8008344 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008104:	4b59      	ldr	r3, [pc, #356]	; (800826c <pvPortMalloc+0x184>)
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4013      	ands	r3, r2
 800810c:	2b00      	cmp	r3, #0
 800810e:	f040 8093 	bne.w	8008238 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d01d      	beq.n	8008154 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008118:	2208      	movs	r2, #8
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4413      	add	r3, r2
 800811e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f003 0307 	and.w	r3, r3, #7
 8008126:	2b00      	cmp	r3, #0
 8008128:	d014      	beq.n	8008154 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f023 0307 	bic.w	r3, r3, #7
 8008130:	3308      	adds	r3, #8
 8008132:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f003 0307 	and.w	r3, r3, #7
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00a      	beq.n	8008154 <pvPortMalloc+0x6c>
	__asm volatile
 800813e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008142:	f383 8811 	msr	BASEPRI, r3
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	617b      	str	r3, [r7, #20]
}
 8008150:	bf00      	nop
 8008152:	e7fe      	b.n	8008152 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d06e      	beq.n	8008238 <pvPortMalloc+0x150>
 800815a:	4b45      	ldr	r3, [pc, #276]	; (8008270 <pvPortMalloc+0x188>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	429a      	cmp	r2, r3
 8008162:	d869      	bhi.n	8008238 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008164:	4b43      	ldr	r3, [pc, #268]	; (8008274 <pvPortMalloc+0x18c>)
 8008166:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008168:	4b42      	ldr	r3, [pc, #264]	; (8008274 <pvPortMalloc+0x18c>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800816e:	e004      	b.n	800817a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008172:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800817a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	429a      	cmp	r2, r3
 8008182:	d903      	bls.n	800818c <pvPortMalloc+0xa4>
 8008184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1f1      	bne.n	8008170 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800818c:	4b36      	ldr	r3, [pc, #216]	; (8008268 <pvPortMalloc+0x180>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008192:	429a      	cmp	r2, r3
 8008194:	d050      	beq.n	8008238 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008196:	6a3b      	ldr	r3, [r7, #32]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2208      	movs	r2, #8
 800819c:	4413      	add	r3, r2
 800819e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80081a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	6a3b      	ldr	r3, [r7, #32]
 80081a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80081a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081aa:	685a      	ldr	r2, [r3, #4]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	1ad2      	subs	r2, r2, r3
 80081b0:	2308      	movs	r3, #8
 80081b2:	005b      	lsls	r3, r3, #1
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d91f      	bls.n	80081f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80081b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4413      	add	r3, r2
 80081be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	f003 0307 	and.w	r3, r3, #7
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00a      	beq.n	80081e0 <pvPortMalloc+0xf8>
	__asm volatile
 80081ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ce:	f383 8811 	msr	BASEPRI, r3
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	613b      	str	r3, [r7, #16]
}
 80081dc:	bf00      	nop
 80081de:	e7fe      	b.n	80081de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80081e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e2:	685a      	ldr	r2, [r3, #4]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	1ad2      	subs	r2, r2, r3
 80081e8:	69bb      	ldr	r3, [r7, #24]
 80081ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80081ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80081f2:	69b8      	ldr	r0, [r7, #24]
 80081f4:	f000 f908 	bl	8008408 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80081f8:	4b1d      	ldr	r3, [pc, #116]	; (8008270 <pvPortMalloc+0x188>)
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	4a1b      	ldr	r2, [pc, #108]	; (8008270 <pvPortMalloc+0x188>)
 8008204:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008206:	4b1a      	ldr	r3, [pc, #104]	; (8008270 <pvPortMalloc+0x188>)
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	4b1b      	ldr	r3, [pc, #108]	; (8008278 <pvPortMalloc+0x190>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	429a      	cmp	r2, r3
 8008210:	d203      	bcs.n	800821a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008212:	4b17      	ldr	r3, [pc, #92]	; (8008270 <pvPortMalloc+0x188>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a18      	ldr	r2, [pc, #96]	; (8008278 <pvPortMalloc+0x190>)
 8008218:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821c:	685a      	ldr	r2, [r3, #4]
 800821e:	4b13      	ldr	r3, [pc, #76]	; (800826c <pvPortMalloc+0x184>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	431a      	orrs	r2, r3
 8008224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008226:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822a:	2200      	movs	r2, #0
 800822c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800822e:	4b13      	ldr	r3, [pc, #76]	; (800827c <pvPortMalloc+0x194>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	3301      	adds	r3, #1
 8008234:	4a11      	ldr	r2, [pc, #68]	; (800827c <pvPortMalloc+0x194>)
 8008236:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008238:	f7ff fa50 	bl	80076dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	f003 0307 	and.w	r3, r3, #7
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00a      	beq.n	800825c <pvPortMalloc+0x174>
	__asm volatile
 8008246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824a:	f383 8811 	msr	BASEPRI, r3
 800824e:	f3bf 8f6f 	isb	sy
 8008252:	f3bf 8f4f 	dsb	sy
 8008256:	60fb      	str	r3, [r7, #12]
}
 8008258:	bf00      	nop
 800825a:	e7fe      	b.n	800825a <pvPortMalloc+0x172>
	return pvReturn;
 800825c:	69fb      	ldr	r3, [r7, #28]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3728      	adds	r7, #40	; 0x28
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	20004208 	.word	0x20004208
 800826c:	2000421c 	.word	0x2000421c
 8008270:	2000420c 	.word	0x2000420c
 8008274:	20004200 	.word	0x20004200
 8008278:	20004210 	.word	0x20004210
 800827c:	20004214 	.word	0x20004214

08008280 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b086      	sub	sp, #24
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d04d      	beq.n	800832e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008292:	2308      	movs	r3, #8
 8008294:	425b      	negs	r3, r3
 8008296:	697a      	ldr	r2, [r7, #20]
 8008298:	4413      	add	r3, r2
 800829a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	685a      	ldr	r2, [r3, #4]
 80082a4:	4b24      	ldr	r3, [pc, #144]	; (8008338 <vPortFree+0xb8>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4013      	ands	r3, r2
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d10a      	bne.n	80082c4 <vPortFree+0x44>
	__asm volatile
 80082ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b2:	f383 8811 	msr	BASEPRI, r3
 80082b6:	f3bf 8f6f 	isb	sy
 80082ba:	f3bf 8f4f 	dsb	sy
 80082be:	60fb      	str	r3, [r7, #12]
}
 80082c0:	bf00      	nop
 80082c2:	e7fe      	b.n	80082c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00a      	beq.n	80082e2 <vPortFree+0x62>
	__asm volatile
 80082cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d0:	f383 8811 	msr	BASEPRI, r3
 80082d4:	f3bf 8f6f 	isb	sy
 80082d8:	f3bf 8f4f 	dsb	sy
 80082dc:	60bb      	str	r3, [r7, #8]
}
 80082de:	bf00      	nop
 80082e0:	e7fe      	b.n	80082e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	685a      	ldr	r2, [r3, #4]
 80082e6:	4b14      	ldr	r3, [pc, #80]	; (8008338 <vPortFree+0xb8>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4013      	ands	r3, r2
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d01e      	beq.n	800832e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d11a      	bne.n	800832e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	685a      	ldr	r2, [r3, #4]
 80082fc:	4b0e      	ldr	r3, [pc, #56]	; (8008338 <vPortFree+0xb8>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	43db      	mvns	r3, r3
 8008302:	401a      	ands	r2, r3
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008308:	f7ff f9da 	bl	80076c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	685a      	ldr	r2, [r3, #4]
 8008310:	4b0a      	ldr	r3, [pc, #40]	; (800833c <vPortFree+0xbc>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4413      	add	r3, r2
 8008316:	4a09      	ldr	r2, [pc, #36]	; (800833c <vPortFree+0xbc>)
 8008318:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800831a:	6938      	ldr	r0, [r7, #16]
 800831c:	f000 f874 	bl	8008408 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008320:	4b07      	ldr	r3, [pc, #28]	; (8008340 <vPortFree+0xc0>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	3301      	adds	r3, #1
 8008326:	4a06      	ldr	r2, [pc, #24]	; (8008340 <vPortFree+0xc0>)
 8008328:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800832a:	f7ff f9d7 	bl	80076dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800832e:	bf00      	nop
 8008330:	3718      	adds	r7, #24
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	2000421c 	.word	0x2000421c
 800833c:	2000420c 	.word	0x2000420c
 8008340:	20004218 	.word	0x20004218

08008344 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800834a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800834e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008350:	4b27      	ldr	r3, [pc, #156]	; (80083f0 <prvHeapInit+0xac>)
 8008352:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f003 0307 	and.w	r3, r3, #7
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00c      	beq.n	8008378 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	3307      	adds	r3, #7
 8008362:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f023 0307 	bic.w	r3, r3, #7
 800836a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800836c:	68ba      	ldr	r2, [r7, #8]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	4a1f      	ldr	r2, [pc, #124]	; (80083f0 <prvHeapInit+0xac>)
 8008374:	4413      	add	r3, r2
 8008376:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800837c:	4a1d      	ldr	r2, [pc, #116]	; (80083f4 <prvHeapInit+0xb0>)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008382:	4b1c      	ldr	r3, [pc, #112]	; (80083f4 <prvHeapInit+0xb0>)
 8008384:	2200      	movs	r2, #0
 8008386:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	68ba      	ldr	r2, [r7, #8]
 800838c:	4413      	add	r3, r2
 800838e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008390:	2208      	movs	r2, #8
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	1a9b      	subs	r3, r3, r2
 8008396:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f023 0307 	bic.w	r3, r3, #7
 800839e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	4a15      	ldr	r2, [pc, #84]	; (80083f8 <prvHeapInit+0xb4>)
 80083a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80083a6:	4b14      	ldr	r3, [pc, #80]	; (80083f8 <prvHeapInit+0xb4>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2200      	movs	r2, #0
 80083ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80083ae:	4b12      	ldr	r3, [pc, #72]	; (80083f8 <prvHeapInit+0xb4>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2200      	movs	r2, #0
 80083b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	1ad2      	subs	r2, r2, r3
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80083c4:	4b0c      	ldr	r3, [pc, #48]	; (80083f8 <prvHeapInit+0xb4>)
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	4a0a      	ldr	r2, [pc, #40]	; (80083fc <prvHeapInit+0xb8>)
 80083d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	4a09      	ldr	r2, [pc, #36]	; (8008400 <prvHeapInit+0xbc>)
 80083da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80083dc:	4b09      	ldr	r3, [pc, #36]	; (8008404 <prvHeapInit+0xc0>)
 80083de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80083e2:	601a      	str	r2, [r3, #0]
}
 80083e4:	bf00      	nop
 80083e6:	3714      	adds	r7, #20
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr
 80083f0:	20000600 	.word	0x20000600
 80083f4:	20004200 	.word	0x20004200
 80083f8:	20004208 	.word	0x20004208
 80083fc:	20004210 	.word	0x20004210
 8008400:	2000420c 	.word	0x2000420c
 8008404:	2000421c 	.word	0x2000421c

08008408 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008410:	4b28      	ldr	r3, [pc, #160]	; (80084b4 <prvInsertBlockIntoFreeList+0xac>)
 8008412:	60fb      	str	r3, [r7, #12]
 8008414:	e002      	b.n	800841c <prvInsertBlockIntoFreeList+0x14>
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	60fb      	str	r3, [r7, #12]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	429a      	cmp	r2, r3
 8008424:	d8f7      	bhi.n	8008416 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	68ba      	ldr	r2, [r7, #8]
 8008430:	4413      	add	r3, r2
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	429a      	cmp	r2, r3
 8008436:	d108      	bne.n	800844a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	685a      	ldr	r2, [r3, #4]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	441a      	add	r2, r3
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	68ba      	ldr	r2, [r7, #8]
 8008454:	441a      	add	r2, r3
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	429a      	cmp	r2, r3
 800845c:	d118      	bne.n	8008490 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	4b15      	ldr	r3, [pc, #84]	; (80084b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	429a      	cmp	r2, r3
 8008468:	d00d      	beq.n	8008486 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	685a      	ldr	r2, [r3, #4]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	441a      	add	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	601a      	str	r2, [r3, #0]
 8008484:	e008      	b.n	8008498 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008486:	4b0c      	ldr	r3, [pc, #48]	; (80084b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	601a      	str	r2, [r3, #0]
 800848e:	e003      	b.n	8008498 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	429a      	cmp	r2, r3
 800849e:	d002      	beq.n	80084a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084a6:	bf00      	nop
 80084a8:	3714      	adds	r7, #20
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	20004200 	.word	0x20004200
 80084b8:	20004208 	.word	0x20004208

080084bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80084c0:	2200      	movs	r2, #0
 80084c2:	4912      	ldr	r1, [pc, #72]	; (800850c <MX_USB_DEVICE_Init+0x50>)
 80084c4:	4812      	ldr	r0, [pc, #72]	; (8008510 <MX_USB_DEVICE_Init+0x54>)
 80084c6:	f7fd fbed 	bl	8005ca4 <USBD_Init>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d001      	beq.n	80084d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80084d0:	f7f8 f99d 	bl	800080e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80084d4:	490f      	ldr	r1, [pc, #60]	; (8008514 <MX_USB_DEVICE_Init+0x58>)
 80084d6:	480e      	ldr	r0, [pc, #56]	; (8008510 <MX_USB_DEVICE_Init+0x54>)
 80084d8:	f7fd fc14 	bl	8005d04 <USBD_RegisterClass>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d001      	beq.n	80084e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80084e2:	f7f8 f994 	bl	800080e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80084e6:	490c      	ldr	r1, [pc, #48]	; (8008518 <MX_USB_DEVICE_Init+0x5c>)
 80084e8:	4809      	ldr	r0, [pc, #36]	; (8008510 <MX_USB_DEVICE_Init+0x54>)
 80084ea:	f7fd fb35 	bl	8005b58 <USBD_CDC_RegisterInterface>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d001      	beq.n	80084f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80084f4:	f7f8 f98b 	bl	800080e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80084f8:	4805      	ldr	r0, [pc, #20]	; (8008510 <MX_USB_DEVICE_Init+0x54>)
 80084fa:	f7fd fc2a 	bl	8005d52 <USBD_Start>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d001      	beq.n	8008508 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008504:	f7f8 f983 	bl	800080e <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008508:	bf00      	nop
 800850a:	bd80      	pop	{r7, pc}
 800850c:	20000134 	.word	0x20000134
 8008510:	200044d8 	.word	0x200044d8
 8008514:	20000018 	.word	0x20000018
 8008518:	20000120 	.word	0x20000120

0800851c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008520:	2200      	movs	r2, #0
 8008522:	4905      	ldr	r1, [pc, #20]	; (8008538 <CDC_Init_FS+0x1c>)
 8008524:	4805      	ldr	r0, [pc, #20]	; (800853c <CDC_Init_FS+0x20>)
 8008526:	f7fd fb2c 	bl	8005b82 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800852a:	4905      	ldr	r1, [pc, #20]	; (8008540 <CDC_Init_FS+0x24>)
 800852c:	4803      	ldr	r0, [pc, #12]	; (800853c <CDC_Init_FS+0x20>)
 800852e:	f7fd fb46 	bl	8005bbe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008532:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008534:	4618      	mov	r0, r3
 8008536:	bd80      	pop	{r7, pc}
 8008538:	20004fa8 	.word	0x20004fa8
 800853c:	200044d8 	.word	0x200044d8
 8008540:	200047a8 	.word	0x200047a8

08008544 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008544:	b480      	push	{r7}
 8008546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008548:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800854a:	4618      	mov	r0, r3
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	4603      	mov	r3, r0
 800855c:	6039      	str	r1, [r7, #0]
 800855e:	71fb      	strb	r3, [r7, #7]
 8008560:	4613      	mov	r3, r2
 8008562:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008564:	79fb      	ldrb	r3, [r7, #7]
 8008566:	2b23      	cmp	r3, #35	; 0x23
 8008568:	d84a      	bhi.n	8008600 <CDC_Control_FS+0xac>
 800856a:	a201      	add	r2, pc, #4	; (adr r2, 8008570 <CDC_Control_FS+0x1c>)
 800856c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008570:	08008601 	.word	0x08008601
 8008574:	08008601 	.word	0x08008601
 8008578:	08008601 	.word	0x08008601
 800857c:	08008601 	.word	0x08008601
 8008580:	08008601 	.word	0x08008601
 8008584:	08008601 	.word	0x08008601
 8008588:	08008601 	.word	0x08008601
 800858c:	08008601 	.word	0x08008601
 8008590:	08008601 	.word	0x08008601
 8008594:	08008601 	.word	0x08008601
 8008598:	08008601 	.word	0x08008601
 800859c:	08008601 	.word	0x08008601
 80085a0:	08008601 	.word	0x08008601
 80085a4:	08008601 	.word	0x08008601
 80085a8:	08008601 	.word	0x08008601
 80085ac:	08008601 	.word	0x08008601
 80085b0:	08008601 	.word	0x08008601
 80085b4:	08008601 	.word	0x08008601
 80085b8:	08008601 	.word	0x08008601
 80085bc:	08008601 	.word	0x08008601
 80085c0:	08008601 	.word	0x08008601
 80085c4:	08008601 	.word	0x08008601
 80085c8:	08008601 	.word	0x08008601
 80085cc:	08008601 	.word	0x08008601
 80085d0:	08008601 	.word	0x08008601
 80085d4:	08008601 	.word	0x08008601
 80085d8:	08008601 	.word	0x08008601
 80085dc:	08008601 	.word	0x08008601
 80085e0:	08008601 	.word	0x08008601
 80085e4:	08008601 	.word	0x08008601
 80085e8:	08008601 	.word	0x08008601
 80085ec:	08008601 	.word	0x08008601
 80085f0:	08008601 	.word	0x08008601
 80085f4:	08008601 	.word	0x08008601
 80085f8:	08008601 	.word	0x08008601
 80085fc:	08008601 	.word	0x08008601
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008600:	bf00      	nop
  }

  return (USBD_OK);
 8008602:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008604:	4618      	mov	r0, r3
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800861a:	6879      	ldr	r1, [r7, #4]
 800861c:	4805      	ldr	r0, [pc, #20]	; (8008634 <CDC_Receive_FS+0x24>)
 800861e:	f7fd face 	bl	8005bbe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008622:	4804      	ldr	r0, [pc, #16]	; (8008634 <CDC_Receive_FS+0x24>)
 8008624:	f7fd fb14 	bl	8005c50 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008628:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800862a:	4618      	mov	r0, r3
 800862c:	3708      	adds	r7, #8
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	200044d8 	.word	0x200044d8

08008638 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	460b      	mov	r3, r1
 8008642:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008644:	2300      	movs	r3, #0
 8008646:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008648:	4b0d      	ldr	r3, [pc, #52]	; (8008680 <CDC_Transmit_FS+0x48>)
 800864a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800864e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008656:	2b00      	cmp	r3, #0
 8008658:	d001      	beq.n	800865e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800865a:	2301      	movs	r3, #1
 800865c:	e00b      	b.n	8008676 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800865e:	887b      	ldrh	r3, [r7, #2]
 8008660:	461a      	mov	r2, r3
 8008662:	6879      	ldr	r1, [r7, #4]
 8008664:	4806      	ldr	r0, [pc, #24]	; (8008680 <CDC_Transmit_FS+0x48>)
 8008666:	f7fd fa8c 	bl	8005b82 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800866a:	4805      	ldr	r0, [pc, #20]	; (8008680 <CDC_Transmit_FS+0x48>)
 800866c:	f7fd fac0 	bl	8005bf0 <USBD_CDC_TransmitPacket>
 8008670:	4603      	mov	r3, r0
 8008672:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008674:	7bfb      	ldrb	r3, [r7, #15]
}
 8008676:	4618      	mov	r0, r3
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	200044d8 	.word	0x200044d8

08008684 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008684:	b480      	push	{r7}
 8008686:	b087      	sub	sp, #28
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	4613      	mov	r3, r2
 8008690:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008692:	2300      	movs	r3, #0
 8008694:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008696:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800869a:	4618      	mov	r0, r3
 800869c:	371c      	adds	r7, #28
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr
	...

080086a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	4603      	mov	r3, r0
 80086b0:	6039      	str	r1, [r7, #0]
 80086b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	2212      	movs	r2, #18
 80086b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80086ba:	4b03      	ldr	r3, [pc, #12]	; (80086c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80086bc:	4618      	mov	r0, r3
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr
 80086c8:	20000154 	.word	0x20000154

080086cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	4603      	mov	r3, r0
 80086d4:	6039      	str	r1, [r7, #0]
 80086d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	2204      	movs	r2, #4
 80086dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80086de:	4b03      	ldr	r3, [pc, #12]	; (80086ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr
 80086ec:	20000174 	.word	0x20000174

080086f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	4603      	mov	r3, r0
 80086f8:	6039      	str	r1, [r7, #0]
 80086fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80086fc:	79fb      	ldrb	r3, [r7, #7]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d105      	bne.n	800870e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008702:	683a      	ldr	r2, [r7, #0]
 8008704:	4907      	ldr	r1, [pc, #28]	; (8008724 <USBD_FS_ProductStrDescriptor+0x34>)
 8008706:	4808      	ldr	r0, [pc, #32]	; (8008728 <USBD_FS_ProductStrDescriptor+0x38>)
 8008708:	f7fe fb7f 	bl	8006e0a <USBD_GetString>
 800870c:	e004      	b.n	8008718 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800870e:	683a      	ldr	r2, [r7, #0]
 8008710:	4904      	ldr	r1, [pc, #16]	; (8008724 <USBD_FS_ProductStrDescriptor+0x34>)
 8008712:	4805      	ldr	r0, [pc, #20]	; (8008728 <USBD_FS_ProductStrDescriptor+0x38>)
 8008714:	f7fe fb79 	bl	8006e0a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008718:	4b02      	ldr	r3, [pc, #8]	; (8008724 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800871a:	4618      	mov	r0, r3
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	200057a8 	.word	0x200057a8
 8008728:	08009228 	.word	0x08009228

0800872c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	4603      	mov	r3, r0
 8008734:	6039      	str	r1, [r7, #0]
 8008736:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008738:	683a      	ldr	r2, [r7, #0]
 800873a:	4904      	ldr	r1, [pc, #16]	; (800874c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800873c:	4804      	ldr	r0, [pc, #16]	; (8008750 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800873e:	f7fe fb64 	bl	8006e0a <USBD_GetString>
  return USBD_StrDesc;
 8008742:	4b02      	ldr	r3, [pc, #8]	; (800874c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008744:	4618      	mov	r0, r3
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	200057a8 	.word	0x200057a8
 8008750:	08009240 	.word	0x08009240

08008754 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	4603      	mov	r3, r0
 800875c:	6039      	str	r1, [r7, #0]
 800875e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	221a      	movs	r2, #26
 8008764:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008766:	f000 f855 	bl	8008814 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800876a:	4b02      	ldr	r3, [pc, #8]	; (8008774 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800876c:	4618      	mov	r0, r3
 800876e:	3708      	adds	r7, #8
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}
 8008774:	20000178 	.word	0x20000178

08008778 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	4603      	mov	r3, r0
 8008780:	6039      	str	r1, [r7, #0]
 8008782:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008784:	79fb      	ldrb	r3, [r7, #7]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d105      	bne.n	8008796 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800878a:	683a      	ldr	r2, [r7, #0]
 800878c:	4907      	ldr	r1, [pc, #28]	; (80087ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800878e:	4808      	ldr	r0, [pc, #32]	; (80087b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008790:	f7fe fb3b 	bl	8006e0a <USBD_GetString>
 8008794:	e004      	b.n	80087a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008796:	683a      	ldr	r2, [r7, #0]
 8008798:	4904      	ldr	r1, [pc, #16]	; (80087ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800879a:	4805      	ldr	r0, [pc, #20]	; (80087b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800879c:	f7fe fb35 	bl	8006e0a <USBD_GetString>
  }
  return USBD_StrDesc;
 80087a0:	4b02      	ldr	r3, [pc, #8]	; (80087ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	200057a8 	.word	0x200057a8
 80087b0:	08009254 	.word	0x08009254

080087b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	4603      	mov	r3, r0
 80087bc:	6039      	str	r1, [r7, #0]
 80087be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087c0:	79fb      	ldrb	r3, [r7, #7]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d105      	bne.n	80087d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80087c6:	683a      	ldr	r2, [r7, #0]
 80087c8:	4907      	ldr	r1, [pc, #28]	; (80087e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80087ca:	4808      	ldr	r0, [pc, #32]	; (80087ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80087cc:	f7fe fb1d 	bl	8006e0a <USBD_GetString>
 80087d0:	e004      	b.n	80087dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80087d2:	683a      	ldr	r2, [r7, #0]
 80087d4:	4904      	ldr	r1, [pc, #16]	; (80087e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80087d6:	4805      	ldr	r0, [pc, #20]	; (80087ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80087d8:	f7fe fb17 	bl	8006e0a <USBD_GetString>
  }
  return USBD_StrDesc;
 80087dc:	4b02      	ldr	r3, [pc, #8]	; (80087e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3708      	adds	r7, #8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	200057a8 	.word	0x200057a8
 80087ec:	08009260 	.word	0x08009260

080087f0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	4603      	mov	r3, r0
 80087f8:	6039      	str	r1, [r7, #0]
 80087fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	220c      	movs	r2, #12
 8008800:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008802:	4b03      	ldr	r3, [pc, #12]	; (8008810 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008804:	4618      	mov	r0, r3
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr
 8008810:	20000168 	.word	0x20000168

08008814 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800881a:	4b0f      	ldr	r3, [pc, #60]	; (8008858 <Get_SerialNum+0x44>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008820:	4b0e      	ldr	r3, [pc, #56]	; (800885c <Get_SerialNum+0x48>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008826:	4b0e      	ldr	r3, [pc, #56]	; (8008860 <Get_SerialNum+0x4c>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800882c:	68fa      	ldr	r2, [r7, #12]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4413      	add	r3, r2
 8008832:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d009      	beq.n	800884e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800883a:	2208      	movs	r2, #8
 800883c:	4909      	ldr	r1, [pc, #36]	; (8008864 <Get_SerialNum+0x50>)
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f000 f814 	bl	800886c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008844:	2204      	movs	r2, #4
 8008846:	4908      	ldr	r1, [pc, #32]	; (8008868 <Get_SerialNum+0x54>)
 8008848:	68b8      	ldr	r0, [r7, #8]
 800884a:	f000 f80f 	bl	800886c <IntToUnicode>
  }
}
 800884e:	bf00      	nop
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	1fff7a10 	.word	0x1fff7a10
 800885c:	1fff7a14 	.word	0x1fff7a14
 8008860:	1fff7a18 	.word	0x1fff7a18
 8008864:	2000017a 	.word	0x2000017a
 8008868:	2000018a 	.word	0x2000018a

0800886c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800886c:	b480      	push	{r7}
 800886e:	b087      	sub	sp, #28
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	4613      	mov	r3, r2
 8008878:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800887a:	2300      	movs	r3, #0
 800887c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800887e:	2300      	movs	r3, #0
 8008880:	75fb      	strb	r3, [r7, #23]
 8008882:	e027      	b.n	80088d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	0f1b      	lsrs	r3, r3, #28
 8008888:	2b09      	cmp	r3, #9
 800888a:	d80b      	bhi.n	80088a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	0f1b      	lsrs	r3, r3, #28
 8008890:	b2da      	uxtb	r2, r3
 8008892:	7dfb      	ldrb	r3, [r7, #23]
 8008894:	005b      	lsls	r3, r3, #1
 8008896:	4619      	mov	r1, r3
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	440b      	add	r3, r1
 800889c:	3230      	adds	r2, #48	; 0x30
 800889e:	b2d2      	uxtb	r2, r2
 80088a0:	701a      	strb	r2, [r3, #0]
 80088a2:	e00a      	b.n	80088ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	0f1b      	lsrs	r3, r3, #28
 80088a8:	b2da      	uxtb	r2, r3
 80088aa:	7dfb      	ldrb	r3, [r7, #23]
 80088ac:	005b      	lsls	r3, r3, #1
 80088ae:	4619      	mov	r1, r3
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	440b      	add	r3, r1
 80088b4:	3237      	adds	r2, #55	; 0x37
 80088b6:	b2d2      	uxtb	r2, r2
 80088b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	011b      	lsls	r3, r3, #4
 80088be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80088c0:	7dfb      	ldrb	r3, [r7, #23]
 80088c2:	005b      	lsls	r3, r3, #1
 80088c4:	3301      	adds	r3, #1
 80088c6:	68ba      	ldr	r2, [r7, #8]
 80088c8:	4413      	add	r3, r2
 80088ca:	2200      	movs	r2, #0
 80088cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80088ce:	7dfb      	ldrb	r3, [r7, #23]
 80088d0:	3301      	adds	r3, #1
 80088d2:	75fb      	strb	r3, [r7, #23]
 80088d4:	7dfa      	ldrb	r2, [r7, #23]
 80088d6:	79fb      	ldrb	r3, [r7, #7]
 80088d8:	429a      	cmp	r2, r3
 80088da:	d3d3      	bcc.n	8008884 <IntToUnicode+0x18>
  }
}
 80088dc:	bf00      	nop
 80088de:	bf00      	nop
 80088e0:	371c      	adds	r7, #28
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr
	...

080088ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b0a0      	sub	sp, #128	; 0x80
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80088f8:	2200      	movs	r2, #0
 80088fa:	601a      	str	r2, [r3, #0]
 80088fc:	605a      	str	r2, [r3, #4]
 80088fe:	609a      	str	r2, [r3, #8]
 8008900:	60da      	str	r2, [r3, #12]
 8008902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008904:	f107 0310 	add.w	r3, r7, #16
 8008908:	225c      	movs	r2, #92	; 0x5c
 800890a:	2100      	movs	r1, #0
 800890c:	4618      	mov	r0, r3
 800890e:	f000 fb99 	bl	8009044 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800891a:	d156      	bne.n	80089ca <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800891c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008920:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8008922:	2300      	movs	r3, #0
 8008924:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008926:	f107 0310 	add.w	r3, r7, #16
 800892a:	4618      	mov	r0, r3
 800892c:	f7f9 fee2 	bl	80026f4 <HAL_RCCEx_PeriphCLKConfig>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d001      	beq.n	800893a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8008936:	f7f7 ff6a 	bl	800080e <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800893a:	2300      	movs	r3, #0
 800893c:	60fb      	str	r3, [r7, #12]
 800893e:	4b25      	ldr	r3, [pc, #148]	; (80089d4 <HAL_PCD_MspInit+0xe8>)
 8008940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008942:	4a24      	ldr	r2, [pc, #144]	; (80089d4 <HAL_PCD_MspInit+0xe8>)
 8008944:	f043 0301 	orr.w	r3, r3, #1
 8008948:	6313      	str	r3, [r2, #48]	; 0x30
 800894a:	4b22      	ldr	r3, [pc, #136]	; (80089d4 <HAL_PCD_MspInit+0xe8>)
 800894c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800894e:	f003 0301 	and.w	r3, r3, #1
 8008952:	60fb      	str	r3, [r7, #12]
 8008954:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8008956:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800895a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800895c:	2302      	movs	r3, #2
 800895e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008960:	2300      	movs	r3, #0
 8008962:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008964:	2303      	movs	r3, #3
 8008966:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008968:	230a      	movs	r3, #10
 800896a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800896c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008970:	4619      	mov	r1, r3
 8008972:	4819      	ldr	r0, [pc, #100]	; (80089d8 <HAL_PCD_MspInit+0xec>)
 8008974:	f7f8 f9f6 	bl	8000d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8008978:	f44f 7300 	mov.w	r3, #512	; 0x200
 800897c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800897e:	2300      	movs	r3, #0
 8008980:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008982:	2300      	movs	r3, #0
 8008984:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8008986:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800898a:	4619      	mov	r1, r3
 800898c:	4812      	ldr	r0, [pc, #72]	; (80089d8 <HAL_PCD_MspInit+0xec>)
 800898e:	f7f8 f9e9 	bl	8000d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008992:	4b10      	ldr	r3, [pc, #64]	; (80089d4 <HAL_PCD_MspInit+0xe8>)
 8008994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008996:	4a0f      	ldr	r2, [pc, #60]	; (80089d4 <HAL_PCD_MspInit+0xe8>)
 8008998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800899c:	6353      	str	r3, [r2, #52]	; 0x34
 800899e:	2300      	movs	r3, #0
 80089a0:	60bb      	str	r3, [r7, #8]
 80089a2:	4b0c      	ldr	r3, [pc, #48]	; (80089d4 <HAL_PCD_MspInit+0xe8>)
 80089a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a6:	4a0b      	ldr	r2, [pc, #44]	; (80089d4 <HAL_PCD_MspInit+0xe8>)
 80089a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089ac:	6453      	str	r3, [r2, #68]	; 0x44
 80089ae:	4b09      	ldr	r3, [pc, #36]	; (80089d4 <HAL_PCD_MspInit+0xe8>)
 80089b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089b6:	60bb      	str	r3, [r7, #8]
 80089b8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80089ba:	2200      	movs	r2, #0
 80089bc:	2105      	movs	r1, #5
 80089be:	2043      	movs	r0, #67	; 0x43
 80089c0:	f7f8 f9a6 	bl	8000d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80089c4:	2043      	movs	r0, #67	; 0x43
 80089c6:	f7f8 f9bf 	bl	8000d48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80089ca:	bf00      	nop
 80089cc:	3780      	adds	r7, #128	; 0x80
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	40023800 	.word	0x40023800
 80089d8:	40020000 	.word	0x40020000

080089dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80089f0:	4619      	mov	r1, r3
 80089f2:	4610      	mov	r0, r2
 80089f4:	f7fd f9f8 	bl	8005de8 <USBD_LL_SetupStage>
}
 80089f8:	bf00      	nop
 80089fa:	3708      	adds	r7, #8
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	460b      	mov	r3, r1
 8008a0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008a12:	78fa      	ldrb	r2, [r7, #3]
 8008a14:	6879      	ldr	r1, [r7, #4]
 8008a16:	4613      	mov	r3, r2
 8008a18:	00db      	lsls	r3, r3, #3
 8008a1a:	1a9b      	subs	r3, r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	440b      	add	r3, r1
 8008a20:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	78fb      	ldrb	r3, [r7, #3]
 8008a28:	4619      	mov	r1, r3
 8008a2a:	f7fd fa32 	bl	8005e92 <USBD_LL_DataOutStage>
}
 8008a2e:	bf00      	nop
 8008a30:	3708      	adds	r7, #8
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b082      	sub	sp, #8
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
 8008a3e:	460b      	mov	r3, r1
 8008a40:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008a48:	78fa      	ldrb	r2, [r7, #3]
 8008a4a:	6879      	ldr	r1, [r7, #4]
 8008a4c:	4613      	mov	r3, r2
 8008a4e:	00db      	lsls	r3, r3, #3
 8008a50:	1a9b      	subs	r3, r3, r2
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	440b      	add	r3, r1
 8008a56:	3348      	adds	r3, #72	; 0x48
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	78fb      	ldrb	r3, [r7, #3]
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	f7fd fa7b 	bl	8005f58 <USBD_LL_DataInStage>
}
 8008a62:	bf00      	nop
 8008a64:	3708      	adds	r7, #8
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}

08008a6a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a6a:	b580      	push	{r7, lr}
 8008a6c:	b082      	sub	sp, #8
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f7fd fb8f 	bl	800619c <USBD_LL_SOF>
}
 8008a7e:	bf00      	nop
 8008a80:	3708      	adds	r7, #8
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b084      	sub	sp, #16
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d102      	bne.n	8008aa0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	73fb      	strb	r3, [r7, #15]
 8008a9e:	e008      	b.n	8008ab2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	d102      	bne.n	8008aae <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	73fb      	strb	r3, [r7, #15]
 8008aac:	e001      	b.n	8008ab2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008aae:	f7f7 feae 	bl	800080e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ab8:	7bfa      	ldrb	r2, [r7, #15]
 8008aba:	4611      	mov	r1, r2
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7fd fb2f 	bl	8006120 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f7fd fadb 	bl	8006084 <USBD_LL_Reset>
}
 8008ace:	bf00      	nop
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
	...

08008ad8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7fd fb2a 	bl	8006140 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	6812      	ldr	r2, [r2, #0]
 8008afa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008afe:	f043 0301 	orr.w	r3, r3, #1
 8008b02:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6a1b      	ldr	r3, [r3, #32]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d005      	beq.n	8008b18 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b0c:	4b04      	ldr	r3, [pc, #16]	; (8008b20 <HAL_PCD_SuspendCallback+0x48>)
 8008b0e:	691b      	ldr	r3, [r3, #16]
 8008b10:	4a03      	ldr	r2, [pc, #12]	; (8008b20 <HAL_PCD_SuspendCallback+0x48>)
 8008b12:	f043 0306 	orr.w	r3, r3, #6
 8008b16:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008b18:	bf00      	nop
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	e000ed00 	.word	0xe000ed00

08008b24 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7fd fb1a 	bl	800616c <USBD_LL_Resume>
}
 8008b38:	bf00      	nop
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	460b      	mov	r3, r1
 8008b4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b52:	78fa      	ldrb	r2, [r7, #3]
 8008b54:	4611      	mov	r1, r2
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7fd fb68 	bl	800622c <USBD_LL_IsoOUTIncomplete>
}
 8008b5c:	bf00      	nop
 8008b5e:	3708      	adds	r7, #8
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b76:	78fa      	ldrb	r2, [r7, #3]
 8008b78:	4611      	mov	r1, r2
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7fd fb30 	bl	80061e0 <USBD_LL_IsoINIncomplete>
}
 8008b80:	bf00      	nop
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7fd fb6e 	bl	8006278 <USBD_LL_DevConnected>
}
 8008b9c:	bf00      	nop
 8008b9e:	3708      	adds	r7, #8
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7fd fb6b 	bl	800628e <USBD_LL_DevDisconnected>
}
 8008bb8:	bf00      	nop
 8008bba:	3708      	adds	r7, #8
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d13c      	bne.n	8008c4a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008bd0:	4a20      	ldr	r2, [pc, #128]	; (8008c54 <USBD_LL_Init+0x94>)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a1e      	ldr	r2, [pc, #120]	; (8008c54 <USBD_LL_Init+0x94>)
 8008bdc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008be0:	4b1c      	ldr	r3, [pc, #112]	; (8008c54 <USBD_LL_Init+0x94>)
 8008be2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008be6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008be8:	4b1a      	ldr	r3, [pc, #104]	; (8008c54 <USBD_LL_Init+0x94>)
 8008bea:	2206      	movs	r2, #6
 8008bec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008bee:	4b19      	ldr	r3, [pc, #100]	; (8008c54 <USBD_LL_Init+0x94>)
 8008bf0:	2202      	movs	r2, #2
 8008bf2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008bf4:	4b17      	ldr	r3, [pc, #92]	; (8008c54 <USBD_LL_Init+0x94>)
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008bfa:	4b16      	ldr	r3, [pc, #88]	; (8008c54 <USBD_LL_Init+0x94>)
 8008bfc:	2202      	movs	r2, #2
 8008bfe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008c00:	4b14      	ldr	r3, [pc, #80]	; (8008c54 <USBD_LL_Init+0x94>)
 8008c02:	2200      	movs	r2, #0
 8008c04:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008c06:	4b13      	ldr	r3, [pc, #76]	; (8008c54 <USBD_LL_Init+0x94>)
 8008c08:	2200      	movs	r2, #0
 8008c0a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008c0c:	4b11      	ldr	r3, [pc, #68]	; (8008c54 <USBD_LL_Init+0x94>)
 8008c0e:	2200      	movs	r2, #0
 8008c10:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008c12:	4b10      	ldr	r3, [pc, #64]	; (8008c54 <USBD_LL_Init+0x94>)
 8008c14:	2200      	movs	r2, #0
 8008c16:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008c18:	4b0e      	ldr	r3, [pc, #56]	; (8008c54 <USBD_LL_Init+0x94>)
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008c1e:	480d      	ldr	r0, [pc, #52]	; (8008c54 <USBD_LL_Init+0x94>)
 8008c20:	f7f8 fa4d 	bl	80010be <HAL_PCD_Init>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d001      	beq.n	8008c2e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008c2a:	f7f7 fdf0 	bl	800080e <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008c2e:	2180      	movs	r1, #128	; 0x80
 8008c30:	4808      	ldr	r0, [pc, #32]	; (8008c54 <USBD_LL_Init+0x94>)
 8008c32:	f7f9 fbde 	bl	80023f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008c36:	2240      	movs	r2, #64	; 0x40
 8008c38:	2100      	movs	r1, #0
 8008c3a:	4806      	ldr	r0, [pc, #24]	; (8008c54 <USBD_LL_Init+0x94>)
 8008c3c:	f7f9 fb92 	bl	8002364 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008c40:	2280      	movs	r2, #128	; 0x80
 8008c42:	2101      	movs	r1, #1
 8008c44:	4803      	ldr	r0, [pc, #12]	; (8008c54 <USBD_LL_Init+0x94>)
 8008c46:	f7f9 fb8d 	bl	8002364 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3708      	adds	r7, #8
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	200059a8 	.word	0x200059a8

08008c58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c60:	2300      	movs	r3, #0
 8008c62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c64:	2300      	movs	r3, #0
 8008c66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7f8 fb49 	bl	8001306 <HAL_PCD_Start>
 8008c74:	4603      	mov	r3, r0
 8008c76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c78:	7bfb      	ldrb	r3, [r7, #15]
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f000 f990 	bl	8008fa0 <USBD_Get_USB_Status>
 8008c80:	4603      	mov	r3, r0
 8008c82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c84:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b084      	sub	sp, #16
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
 8008c96:	4608      	mov	r0, r1
 8008c98:	4611      	mov	r1, r2
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	70fb      	strb	r3, [r7, #3]
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	70bb      	strb	r3, [r7, #2]
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cac:	2300      	movs	r3, #0
 8008cae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008cb6:	78bb      	ldrb	r3, [r7, #2]
 8008cb8:	883a      	ldrh	r2, [r7, #0]
 8008cba:	78f9      	ldrb	r1, [r7, #3]
 8008cbc:	f7f8 ff5a 	bl	8001b74 <HAL_PCD_EP_Open>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cc4:	7bfb      	ldrb	r3, [r7, #15]
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f000 f96a 	bl	8008fa0 <USBD_Get_USB_Status>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b084      	sub	sp, #16
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cea:	2300      	movs	r3, #0
 8008cec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008cf4:	78fa      	ldrb	r2, [r7, #3]
 8008cf6:	4611      	mov	r1, r2
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7f8 ffa3 	bl	8001c44 <HAL_PCD_EP_Close>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d02:	7bfb      	ldrb	r3, [r7, #15]
 8008d04:	4618      	mov	r0, r3
 8008d06:	f000 f94b 	bl	8008fa0 <USBD_Get_USB_Status>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	460b      	mov	r3, r1
 8008d22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d24:	2300      	movs	r3, #0
 8008d26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d32:	78fa      	ldrb	r2, [r7, #3]
 8008d34:	4611      	mov	r1, r2
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7f9 f87b 	bl	8001e32 <HAL_PCD_EP_SetStall>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d40:	7bfb      	ldrb	r3, [r7, #15]
 8008d42:	4618      	mov	r0, r3
 8008d44:	f000 f92c 	bl	8008fa0 <USBD_Get_USB_Status>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b084      	sub	sp, #16
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
 8008d5e:	460b      	mov	r3, r1
 8008d60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d62:	2300      	movs	r3, #0
 8008d64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d66:	2300      	movs	r3, #0
 8008d68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d70:	78fa      	ldrb	r2, [r7, #3]
 8008d72:	4611      	mov	r1, r2
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7f9 f8c0 	bl	8001efa <HAL_PCD_EP_ClrStall>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d7e:	7bfb      	ldrb	r3, [r7, #15]
 8008d80:	4618      	mov	r0, r3
 8008d82:	f000 f90d 	bl	8008fa0 <USBD_Get_USB_Status>
 8008d86:	4603      	mov	r3, r0
 8008d88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3710      	adds	r7, #16
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008da6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008da8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	da0b      	bge.n	8008dc8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008db0:	78fb      	ldrb	r3, [r7, #3]
 8008db2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008db6:	68f9      	ldr	r1, [r7, #12]
 8008db8:	4613      	mov	r3, r2
 8008dba:	00db      	lsls	r3, r3, #3
 8008dbc:	1a9b      	subs	r3, r3, r2
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	440b      	add	r3, r1
 8008dc2:	333e      	adds	r3, #62	; 0x3e
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	e00b      	b.n	8008de0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008dc8:	78fb      	ldrb	r3, [r7, #3]
 8008dca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dce:	68f9      	ldr	r1, [r7, #12]
 8008dd0:	4613      	mov	r3, r2
 8008dd2:	00db      	lsls	r3, r3, #3
 8008dd4:	1a9b      	subs	r3, r3, r2
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	440b      	add	r3, r1
 8008dda:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008dde:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3714      	adds	r7, #20
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	460b      	mov	r3, r1
 8008df6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e06:	78fa      	ldrb	r2, [r7, #3]
 8008e08:	4611      	mov	r1, r2
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7f8 fe8d 	bl	8001b2a <HAL_PCD_SetAddress>
 8008e10:	4603      	mov	r3, r0
 8008e12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e14:	7bfb      	ldrb	r3, [r7, #15]
 8008e16:	4618      	mov	r0, r3
 8008e18:	f000 f8c2 	bl	8008fa0 <USBD_Get_USB_Status>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e20:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3710      	adds	r7, #16
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b086      	sub	sp, #24
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	60f8      	str	r0, [r7, #12]
 8008e32:	607a      	str	r2, [r7, #4]
 8008e34:	603b      	str	r3, [r7, #0]
 8008e36:	460b      	mov	r3, r1
 8008e38:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008e48:	7af9      	ldrb	r1, [r7, #11]
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	f7f8 ffa6 	bl	8001d9e <HAL_PCD_EP_Transmit>
 8008e52:	4603      	mov	r3, r0
 8008e54:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e56:	7dfb      	ldrb	r3, [r7, #23]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f000 f8a1 	bl	8008fa0 <USBD_Get_USB_Status>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e62:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3718      	adds	r7, #24
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b086      	sub	sp, #24
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	607a      	str	r2, [r7, #4]
 8008e76:	603b      	str	r3, [r7, #0]
 8008e78:	460b      	mov	r3, r1
 8008e7a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e80:	2300      	movs	r3, #0
 8008e82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008e8a:	7af9      	ldrb	r1, [r7, #11]
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	f7f8 ff22 	bl	8001cd8 <HAL_PCD_EP_Receive>
 8008e94:	4603      	mov	r3, r0
 8008e96:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e98:	7dfb      	ldrb	r3, [r7, #23]
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f000 f880 	bl	8008fa0 <USBD_Get_USB_Status>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ea4:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3718      	adds	r7, #24
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b082      	sub	sp, #8
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ec0:	78fa      	ldrb	r2, [r7, #3]
 8008ec2:	4611      	mov	r1, r2
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f7f8 ff52 	bl	8001d6e <HAL_PCD_EP_GetRxCount>
 8008eca:	4603      	mov	r3, r0
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3708      	adds	r7, #8
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	460b      	mov	r3, r1
 8008ede:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008ee0:	78fb      	ldrb	r3, [r7, #3]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d002      	beq.n	8008eec <HAL_PCDEx_LPM_Callback+0x18>
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d01f      	beq.n	8008f2a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008eea:	e03b      	b.n	8008f64 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6a1b      	ldr	r3, [r3, #32]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d007      	beq.n	8008f04 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8008ef4:	f7f7 fc10 	bl	8000718 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ef8:	4b1c      	ldr	r3, [pc, #112]	; (8008f6c <HAL_PCDEx_LPM_Callback+0x98>)
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	4a1b      	ldr	r2, [pc, #108]	; (8008f6c <HAL_PCDEx_LPM_Callback+0x98>)
 8008efe:	f023 0306 	bic.w	r3, r3, #6
 8008f02:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	6812      	ldr	r2, [r2, #0]
 8008f12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f16:	f023 0301 	bic.w	r3, r3, #1
 8008f1a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7fd f922 	bl	800616c <USBD_LL_Resume>
    break;
 8008f28:	e01c      	b.n	8008f64 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	6812      	ldr	r2, [r2, #0]
 8008f38:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f3c:	f043 0301 	orr.w	r3, r3, #1
 8008f40:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f7fd f8f9 	bl	8006140 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6a1b      	ldr	r3, [r3, #32]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d005      	beq.n	8008f62 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f56:	4b05      	ldr	r3, [pc, #20]	; (8008f6c <HAL_PCDEx_LPM_Callback+0x98>)
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	4a04      	ldr	r2, [pc, #16]	; (8008f6c <HAL_PCDEx_LPM_Callback+0x98>)
 8008f5c:	f043 0306 	orr.w	r3, r3, #6
 8008f60:	6113      	str	r3, [r2, #16]
    break;
 8008f62:	bf00      	nop
}
 8008f64:	bf00      	nop
 8008f66:	3708      	adds	r7, #8
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}
 8008f6c:	e000ed00 	.word	0xe000ed00

08008f70 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008f78:	4b03      	ldr	r3, [pc, #12]	; (8008f88 <USBD_static_malloc+0x18>)
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	370c      	adds	r7, #12
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop
 8008f88:	20004220 	.word	0x20004220

08008f8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]

}
 8008f94:	bf00      	nop
 8008f96:	370c      	adds	r7, #12
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008faa:	2300      	movs	r3, #0
 8008fac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008fae:	79fb      	ldrb	r3, [r7, #7]
 8008fb0:	2b03      	cmp	r3, #3
 8008fb2:	d817      	bhi.n	8008fe4 <USBD_Get_USB_Status+0x44>
 8008fb4:	a201      	add	r2, pc, #4	; (adr r2, 8008fbc <USBD_Get_USB_Status+0x1c>)
 8008fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fba:	bf00      	nop
 8008fbc:	08008fcd 	.word	0x08008fcd
 8008fc0:	08008fd3 	.word	0x08008fd3
 8008fc4:	08008fd9 	.word	0x08008fd9
 8008fc8:	08008fdf 	.word	0x08008fdf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	73fb      	strb	r3, [r7, #15]
    break;
 8008fd0:	e00b      	b.n	8008fea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008fd2:	2303      	movs	r3, #3
 8008fd4:	73fb      	strb	r3, [r7, #15]
    break;
 8008fd6:	e008      	b.n	8008fea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	73fb      	strb	r3, [r7, #15]
    break;
 8008fdc:	e005      	b.n	8008fea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008fde:	2303      	movs	r3, #3
 8008fe0:	73fb      	strb	r3, [r7, #15]
    break;
 8008fe2:	e002      	b.n	8008fea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	73fb      	strb	r3, [r7, #15]
    break;
 8008fe8:	bf00      	nop
  }
  return usb_status;
 8008fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3714      	adds	r7, #20
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <__libc_init_array>:
 8008ff8:	b570      	push	{r4, r5, r6, lr}
 8008ffa:	4d0d      	ldr	r5, [pc, #52]	; (8009030 <__libc_init_array+0x38>)
 8008ffc:	4c0d      	ldr	r4, [pc, #52]	; (8009034 <__libc_init_array+0x3c>)
 8008ffe:	1b64      	subs	r4, r4, r5
 8009000:	10a4      	asrs	r4, r4, #2
 8009002:	2600      	movs	r6, #0
 8009004:	42a6      	cmp	r6, r4
 8009006:	d109      	bne.n	800901c <__libc_init_array+0x24>
 8009008:	4d0b      	ldr	r5, [pc, #44]	; (8009038 <__libc_init_array+0x40>)
 800900a:	4c0c      	ldr	r4, [pc, #48]	; (800903c <__libc_init_array+0x44>)
 800900c:	f000 f8e8 	bl	80091e0 <_init>
 8009010:	1b64      	subs	r4, r4, r5
 8009012:	10a4      	asrs	r4, r4, #2
 8009014:	2600      	movs	r6, #0
 8009016:	42a6      	cmp	r6, r4
 8009018:	d105      	bne.n	8009026 <__libc_init_array+0x2e>
 800901a:	bd70      	pop	{r4, r5, r6, pc}
 800901c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009020:	4798      	blx	r3
 8009022:	3601      	adds	r6, #1
 8009024:	e7ee      	b.n	8009004 <__libc_init_array+0xc>
 8009026:	f855 3b04 	ldr.w	r3, [r5], #4
 800902a:	4798      	blx	r3
 800902c:	3601      	adds	r6, #1
 800902e:	e7f2      	b.n	8009016 <__libc_init_array+0x1e>
 8009030:	080092f0 	.word	0x080092f0
 8009034:	080092f0 	.word	0x080092f0
 8009038:	080092f0 	.word	0x080092f0
 800903c:	080092f4 	.word	0x080092f4

08009040 <__retarget_lock_acquire_recursive>:
 8009040:	4770      	bx	lr

08009042 <__retarget_lock_release_recursive>:
 8009042:	4770      	bx	lr

08009044 <memset>:
 8009044:	4402      	add	r2, r0
 8009046:	4603      	mov	r3, r0
 8009048:	4293      	cmp	r3, r2
 800904a:	d100      	bne.n	800904e <memset+0xa>
 800904c:	4770      	bx	lr
 800904e:	f803 1b01 	strb.w	r1, [r3], #1
 8009052:	e7f9      	b.n	8009048 <memset+0x4>

08009054 <cleanup_glue>:
 8009054:	b538      	push	{r3, r4, r5, lr}
 8009056:	460c      	mov	r4, r1
 8009058:	6809      	ldr	r1, [r1, #0]
 800905a:	4605      	mov	r5, r0
 800905c:	b109      	cbz	r1, 8009062 <cleanup_glue+0xe>
 800905e:	f7ff fff9 	bl	8009054 <cleanup_glue>
 8009062:	4621      	mov	r1, r4
 8009064:	4628      	mov	r0, r5
 8009066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800906a:	f000 b869 	b.w	8009140 <_free_r>
	...

08009070 <_reclaim_reent>:
 8009070:	4b2c      	ldr	r3, [pc, #176]	; (8009124 <_reclaim_reent+0xb4>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4283      	cmp	r3, r0
 8009076:	b570      	push	{r4, r5, r6, lr}
 8009078:	4604      	mov	r4, r0
 800907a:	d051      	beq.n	8009120 <_reclaim_reent+0xb0>
 800907c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800907e:	b143      	cbz	r3, 8009092 <_reclaim_reent+0x22>
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d14a      	bne.n	800911c <_reclaim_reent+0xac>
 8009086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009088:	6819      	ldr	r1, [r3, #0]
 800908a:	b111      	cbz	r1, 8009092 <_reclaim_reent+0x22>
 800908c:	4620      	mov	r0, r4
 800908e:	f000 f857 	bl	8009140 <_free_r>
 8009092:	6961      	ldr	r1, [r4, #20]
 8009094:	b111      	cbz	r1, 800909c <_reclaim_reent+0x2c>
 8009096:	4620      	mov	r0, r4
 8009098:	f000 f852 	bl	8009140 <_free_r>
 800909c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800909e:	b111      	cbz	r1, 80090a6 <_reclaim_reent+0x36>
 80090a0:	4620      	mov	r0, r4
 80090a2:	f000 f84d 	bl	8009140 <_free_r>
 80090a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80090a8:	b111      	cbz	r1, 80090b0 <_reclaim_reent+0x40>
 80090aa:	4620      	mov	r0, r4
 80090ac:	f000 f848 	bl	8009140 <_free_r>
 80090b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80090b2:	b111      	cbz	r1, 80090ba <_reclaim_reent+0x4a>
 80090b4:	4620      	mov	r0, r4
 80090b6:	f000 f843 	bl	8009140 <_free_r>
 80090ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80090bc:	b111      	cbz	r1, 80090c4 <_reclaim_reent+0x54>
 80090be:	4620      	mov	r0, r4
 80090c0:	f000 f83e 	bl	8009140 <_free_r>
 80090c4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80090c6:	b111      	cbz	r1, 80090ce <_reclaim_reent+0x5e>
 80090c8:	4620      	mov	r0, r4
 80090ca:	f000 f839 	bl	8009140 <_free_r>
 80090ce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80090d0:	b111      	cbz	r1, 80090d8 <_reclaim_reent+0x68>
 80090d2:	4620      	mov	r0, r4
 80090d4:	f000 f834 	bl	8009140 <_free_r>
 80090d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090da:	b111      	cbz	r1, 80090e2 <_reclaim_reent+0x72>
 80090dc:	4620      	mov	r0, r4
 80090de:	f000 f82f 	bl	8009140 <_free_r>
 80090e2:	69a3      	ldr	r3, [r4, #24]
 80090e4:	b1e3      	cbz	r3, 8009120 <_reclaim_reent+0xb0>
 80090e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80090e8:	4620      	mov	r0, r4
 80090ea:	4798      	blx	r3
 80090ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80090ee:	b1b9      	cbz	r1, 8009120 <_reclaim_reent+0xb0>
 80090f0:	4620      	mov	r0, r4
 80090f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80090f6:	f7ff bfad 	b.w	8009054 <cleanup_glue>
 80090fa:	5949      	ldr	r1, [r1, r5]
 80090fc:	b941      	cbnz	r1, 8009110 <_reclaim_reent+0xa0>
 80090fe:	3504      	adds	r5, #4
 8009100:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009102:	2d80      	cmp	r5, #128	; 0x80
 8009104:	68d9      	ldr	r1, [r3, #12]
 8009106:	d1f8      	bne.n	80090fa <_reclaim_reent+0x8a>
 8009108:	4620      	mov	r0, r4
 800910a:	f000 f819 	bl	8009140 <_free_r>
 800910e:	e7ba      	b.n	8009086 <_reclaim_reent+0x16>
 8009110:	680e      	ldr	r6, [r1, #0]
 8009112:	4620      	mov	r0, r4
 8009114:	f000 f814 	bl	8009140 <_free_r>
 8009118:	4631      	mov	r1, r6
 800911a:	e7ef      	b.n	80090fc <_reclaim_reent+0x8c>
 800911c:	2500      	movs	r5, #0
 800911e:	e7ef      	b.n	8009100 <_reclaim_reent+0x90>
 8009120:	bd70      	pop	{r4, r5, r6, pc}
 8009122:	bf00      	nop
 8009124:	20000194 	.word	0x20000194

08009128 <__malloc_lock>:
 8009128:	4801      	ldr	r0, [pc, #4]	; (8009130 <__malloc_lock+0x8>)
 800912a:	f7ff bf89 	b.w	8009040 <__retarget_lock_acquire_recursive>
 800912e:	bf00      	nop
 8009130:	20005db4 	.word	0x20005db4

08009134 <__malloc_unlock>:
 8009134:	4801      	ldr	r0, [pc, #4]	; (800913c <__malloc_unlock+0x8>)
 8009136:	f7ff bf84 	b.w	8009042 <__retarget_lock_release_recursive>
 800913a:	bf00      	nop
 800913c:	20005db4 	.word	0x20005db4

08009140 <_free_r>:
 8009140:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009142:	2900      	cmp	r1, #0
 8009144:	d048      	beq.n	80091d8 <_free_r+0x98>
 8009146:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800914a:	9001      	str	r0, [sp, #4]
 800914c:	2b00      	cmp	r3, #0
 800914e:	f1a1 0404 	sub.w	r4, r1, #4
 8009152:	bfb8      	it	lt
 8009154:	18e4      	addlt	r4, r4, r3
 8009156:	f7ff ffe7 	bl	8009128 <__malloc_lock>
 800915a:	4a20      	ldr	r2, [pc, #128]	; (80091dc <_free_r+0x9c>)
 800915c:	9801      	ldr	r0, [sp, #4]
 800915e:	6813      	ldr	r3, [r2, #0]
 8009160:	4615      	mov	r5, r2
 8009162:	b933      	cbnz	r3, 8009172 <_free_r+0x32>
 8009164:	6063      	str	r3, [r4, #4]
 8009166:	6014      	str	r4, [r2, #0]
 8009168:	b003      	add	sp, #12
 800916a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800916e:	f7ff bfe1 	b.w	8009134 <__malloc_unlock>
 8009172:	42a3      	cmp	r3, r4
 8009174:	d90b      	bls.n	800918e <_free_r+0x4e>
 8009176:	6821      	ldr	r1, [r4, #0]
 8009178:	1862      	adds	r2, r4, r1
 800917a:	4293      	cmp	r3, r2
 800917c:	bf04      	itt	eq
 800917e:	681a      	ldreq	r2, [r3, #0]
 8009180:	685b      	ldreq	r3, [r3, #4]
 8009182:	6063      	str	r3, [r4, #4]
 8009184:	bf04      	itt	eq
 8009186:	1852      	addeq	r2, r2, r1
 8009188:	6022      	streq	r2, [r4, #0]
 800918a:	602c      	str	r4, [r5, #0]
 800918c:	e7ec      	b.n	8009168 <_free_r+0x28>
 800918e:	461a      	mov	r2, r3
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	b10b      	cbz	r3, 8009198 <_free_r+0x58>
 8009194:	42a3      	cmp	r3, r4
 8009196:	d9fa      	bls.n	800918e <_free_r+0x4e>
 8009198:	6811      	ldr	r1, [r2, #0]
 800919a:	1855      	adds	r5, r2, r1
 800919c:	42a5      	cmp	r5, r4
 800919e:	d10b      	bne.n	80091b8 <_free_r+0x78>
 80091a0:	6824      	ldr	r4, [r4, #0]
 80091a2:	4421      	add	r1, r4
 80091a4:	1854      	adds	r4, r2, r1
 80091a6:	42a3      	cmp	r3, r4
 80091a8:	6011      	str	r1, [r2, #0]
 80091aa:	d1dd      	bne.n	8009168 <_free_r+0x28>
 80091ac:	681c      	ldr	r4, [r3, #0]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	6053      	str	r3, [r2, #4]
 80091b2:	4421      	add	r1, r4
 80091b4:	6011      	str	r1, [r2, #0]
 80091b6:	e7d7      	b.n	8009168 <_free_r+0x28>
 80091b8:	d902      	bls.n	80091c0 <_free_r+0x80>
 80091ba:	230c      	movs	r3, #12
 80091bc:	6003      	str	r3, [r0, #0]
 80091be:	e7d3      	b.n	8009168 <_free_r+0x28>
 80091c0:	6825      	ldr	r5, [r4, #0]
 80091c2:	1961      	adds	r1, r4, r5
 80091c4:	428b      	cmp	r3, r1
 80091c6:	bf04      	itt	eq
 80091c8:	6819      	ldreq	r1, [r3, #0]
 80091ca:	685b      	ldreq	r3, [r3, #4]
 80091cc:	6063      	str	r3, [r4, #4]
 80091ce:	bf04      	itt	eq
 80091d0:	1949      	addeq	r1, r1, r5
 80091d2:	6021      	streq	r1, [r4, #0]
 80091d4:	6054      	str	r4, [r2, #4]
 80091d6:	e7c7      	b.n	8009168 <_free_r+0x28>
 80091d8:	b003      	add	sp, #12
 80091da:	bd30      	pop	{r4, r5, pc}
 80091dc:	20004440 	.word	0x20004440

080091e0 <_init>:
 80091e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091e2:	bf00      	nop
 80091e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091e6:	bc08      	pop	{r3}
 80091e8:	469e      	mov	lr, r3
 80091ea:	4770      	bx	lr

080091ec <_fini>:
 80091ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ee:	bf00      	nop
 80091f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091f2:	bc08      	pop	{r3}
 80091f4:	469e      	mov	lr, r3
 80091f6:	4770      	bx	lr
