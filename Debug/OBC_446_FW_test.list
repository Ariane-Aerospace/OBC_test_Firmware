
OBC_446_FW_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c5c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08009e2c  08009e2c  00019e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f44  08009f44  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  08009f44  08009f44  00019f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f4c  08009f4c  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f4c  08009f4c  00019f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f50  08009f50  00019f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08009f54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005bcc  200001f8  0800a14c  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005dc4  0800a14c  00025dc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027593  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050c3  00000000  00000000  000477bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001948  00000000  00000000  0004c880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001760  00000000  00000000  0004e1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027876  00000000  00000000  0004f928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f99c  00000000  00000000  0007719e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddce4  00000000  00000000  00096b3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017481e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bb0  00000000  00000000  00174874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009e14 	.word	0x08009e14

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	08009e14 	.word	0x08009e14

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4a07      	ldr	r2, [pc, #28]	; (8000534 <vApplicationGetIdleTaskMemory+0x2c>)
 8000518:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <vApplicationGetIdleTaskMemory+0x30>)
 800051e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20000214 	.word	0x20000214
 8000538:	200002c8 	.word	0x200002c8

0800053c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800053c:	b5b0      	push	{r4, r5, r7, lr}
 800053e:	b08e      	sub	sp, #56	; 0x38
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8000542:	4b14      	ldr	r3, [pc, #80]	; (8000594 <MX_FREERTOS_Init+0x58>)
 8000544:	f107 041c 	add.w	r4, r7, #28
 8000548:	461d      	mov	r5, r3
 800054a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800054e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000552:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000556:	f107 031c 	add.w	r3, r7, #28
 800055a:	2100      	movs	r1, #0
 800055c:	4618      	mov	r0, r3
 800055e:	f006 fdd3 	bl	8007108 <osThreadCreate>
 8000562:	4603      	mov	r3, r0
 8000564:	4a0c      	ldr	r2, [pc, #48]	; (8000598 <MX_FREERTOS_Init+0x5c>)
 8000566:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskHandler */
  osThreadDef(taskHandler, TaskHandler, osPriorityIdle, 0, 128);
 8000568:	4b0c      	ldr	r3, [pc, #48]	; (800059c <MX_FREERTOS_Init+0x60>)
 800056a:	463c      	mov	r4, r7
 800056c:	461d      	mov	r5, r3
 800056e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000572:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000576:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskHandlerHandle = osThreadCreate(osThread(taskHandler), NULL);
 800057a:	463b      	mov	r3, r7
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f006 fdc2 	bl	8007108 <osThreadCreate>
 8000584:	4603      	mov	r3, r0
 8000586:	4a06      	ldr	r2, [pc, #24]	; (80005a0 <MX_FREERTOS_Init+0x64>)
 8000588:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800058a:	bf00      	nop
 800058c:	3738      	adds	r7, #56	; 0x38
 800058e:	46bd      	mov	sp, r7
 8000590:	bdb0      	pop	{r4, r5, r7, pc}
 8000592:	bf00      	nop
 8000594:	08009e44 	.word	0x08009e44
 8000598:	20004444 	.word	0x20004444
 800059c:	08009e60 	.word	0x08009e60
 80005a0:	20004448 	.word	0x20004448

080005a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80005ac:	f008 fd66 	bl	800907c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  uint8_t received=0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  	    CDC_Transmit_FS(&received,1);
 80005b4:	f107 030f 	add.w	r3, r7, #15
 80005b8:	2101      	movs	r1, #1
 80005ba:	4618      	mov	r0, r3
 80005bc:	f008 fe30 	bl	8009220 <CDC_Transmit_FS>
	  	    blinkLD1();
 80005c0:	f000 f81a 	bl	80005f8 <blinkLD1>
	 		if (getDataFromQueue(&received) != 0){
 80005c4:	f107 030f 	add.w	r3, r7, #15
 80005c8:	4618      	mov	r0, r3
 80005ca:	f008 fe61 	bl	8009290 <getDataFromQueue>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d002      	beq.n	80005da <StartDefaultTask+0x36>
	 			blinkLD2();//err
 80005d4:	f000 f822 	bl	800061c <blinkLD2>
 80005d8:	e004      	b.n	80005e4 <StartDefaultTask+0x40>
	 		}
	 		else if(received==BLINK_LD3)
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d101      	bne.n	80005e4 <StartDefaultTask+0x40>
	 		{
	 			blinkLD3();
 80005e0:	f000 f82e 	bl	8000640 <blinkLD3>
	 		}

	 	  	//надо ли тут задержку
	 	  	osDelay(500);
 80005e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005e8:	f006 fdda 	bl	80071a0 <osDelay>
	  	    CDC_Transmit_FS(&received,1);
 80005ec:	e7e2      	b.n	80005b4 <StartDefaultTask+0x10>

080005ee <TaskHandler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskHandler */
void TaskHandler(void const * argument)
{
 80005ee:	b480      	push	{r7}
 80005f0:	b083      	sub	sp, #12
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskHandler */
  //int received=0;
  /* Infinite loop */
  for(;;)
 80005f6:	e7fe      	b.n	80005f6 <TaskHandler+0x8>

080005f8 <blinkLD1>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void blinkLD1()
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80005fc:	2101      	movs	r1, #1
 80005fe:	4806      	ldr	r0, [pc, #24]	; (8000618 <blinkLD1+0x20>)
 8000600:	f000 fdc3 	bl	800118a <HAL_GPIO_TogglePin>
	osDelay(500);
 8000604:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000608:	f006 fdca 	bl	80071a0 <osDelay>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800060c:	2101      	movs	r1, #1
 800060e:	4802      	ldr	r0, [pc, #8]	; (8000618 <blinkLD1+0x20>)
 8000610:	f000 fdbb 	bl	800118a <HAL_GPIO_TogglePin>
}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40020400 	.word	0x40020400

0800061c <blinkLD2>:
void blinkLD2()
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000620:	2180      	movs	r1, #128	; 0x80
 8000622:	4806      	ldr	r0, [pc, #24]	; (800063c <blinkLD2+0x20>)
 8000624:	f000 fdb1 	bl	800118a <HAL_GPIO_TogglePin>
	osDelay(500);
 8000628:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800062c:	f006 fdb8 	bl	80071a0 <osDelay>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000630:	2180      	movs	r1, #128	; 0x80
 8000632:	4802      	ldr	r0, [pc, #8]	; (800063c <blinkLD2+0x20>)
 8000634:	f000 fda9 	bl	800118a <HAL_GPIO_TogglePin>
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40020400 	.word	0x40020400

08000640 <blinkLD3>:
void blinkLD3()
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000644:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000648:	4806      	ldr	r0, [pc, #24]	; (8000664 <blinkLD3+0x24>)
 800064a:	f000 fd9e 	bl	800118a <HAL_GPIO_TogglePin>
	osDelay(500);
 800064e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000652:	f006 fda5 	bl	80071a0 <osDelay>
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000656:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800065a:	4802      	ldr	r0, [pc, #8]	; (8000664 <blinkLD3+0x24>)
 800065c:	f000 fd95 	bl	800118a <HAL_GPIO_TogglePin>
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40020400 	.word	0x40020400

08000668 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08c      	sub	sp, #48	; 0x30
 800066c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	61bb      	str	r3, [r7, #24]
 8000682:	4b4c      	ldr	r3, [pc, #304]	; (80007b4 <MX_GPIO_Init+0x14c>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a4b      	ldr	r2, [pc, #300]	; (80007b4 <MX_GPIO_Init+0x14c>)
 8000688:	f043 0304 	orr.w	r3, r3, #4
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b49      	ldr	r3, [pc, #292]	; (80007b4 <MX_GPIO_Init+0x14c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0304 	and.w	r3, r3, #4
 8000696:	61bb      	str	r3, [r7, #24]
 8000698:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
 800069e:	4b45      	ldr	r3, [pc, #276]	; (80007b4 <MX_GPIO_Init+0x14c>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a44      	ldr	r2, [pc, #272]	; (80007b4 <MX_GPIO_Init+0x14c>)
 80006a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b42      	ldr	r3, [pc, #264]	; (80007b4 <MX_GPIO_Init+0x14c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]
 80006ba:	4b3e      	ldr	r3, [pc, #248]	; (80007b4 <MX_GPIO_Init+0x14c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a3d      	ldr	r2, [pc, #244]	; (80007b4 <MX_GPIO_Init+0x14c>)
 80006c0:	f043 0302 	orr.w	r3, r3, #2
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b3b      	ldr	r3, [pc, #236]	; (80007b4 <MX_GPIO_Init+0x14c>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0302 	and.w	r3, r3, #2
 80006ce:	613b      	str	r3, [r7, #16]
 80006d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	4b37      	ldr	r3, [pc, #220]	; (80007b4 <MX_GPIO_Init+0x14c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a36      	ldr	r2, [pc, #216]	; (80007b4 <MX_GPIO_Init+0x14c>)
 80006dc:	f043 0308 	orr.w	r3, r3, #8
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b34      	ldr	r3, [pc, #208]	; (80007b4 <MX_GPIO_Init+0x14c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	4b30      	ldr	r3, [pc, #192]	; (80007b4 <MX_GPIO_Init+0x14c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a2f      	ldr	r2, [pc, #188]	; (80007b4 <MX_GPIO_Init+0x14c>)
 80006f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b2d      	ldr	r3, [pc, #180]	; (80007b4 <MX_GPIO_Init+0x14c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b29      	ldr	r3, [pc, #164]	; (80007b4 <MX_GPIO_Init+0x14c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a28      	ldr	r2, [pc, #160]	; (80007b4 <MX_GPIO_Init+0x14c>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b26      	ldr	r3, [pc, #152]	; (80007b4 <MX_GPIO_Init+0x14c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	f244 0181 	movw	r1, #16513	; 0x4081
 800072c:	4822      	ldr	r0, [pc, #136]	; (80007b8 <MX_GPIO_Init+0x150>)
 800072e:	f000 fd13 	bl	8001158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	2140      	movs	r1, #64	; 0x40
 8000736:	4821      	ldr	r0, [pc, #132]	; (80007bc <MX_GPIO_Init+0x154>)
 8000738:	f000 fd0e 	bl	8001158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800073c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000742:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800074c:	f107 031c 	add.w	r3, r7, #28
 8000750:	4619      	mov	r1, r3
 8000752:	481b      	ldr	r0, [pc, #108]	; (80007c0 <MX_GPIO_Init+0x158>)
 8000754:	f000 fb6c 	bl	8000e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000758:	f244 0381 	movw	r3, #16513	; 0x4081
 800075c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075e:	2301      	movs	r3, #1
 8000760:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2300      	movs	r3, #0
 8000768:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	4619      	mov	r1, r3
 8000770:	4811      	ldr	r0, [pc, #68]	; (80007b8 <MX_GPIO_Init+0x150>)
 8000772:	f000 fb5d 	bl	8000e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000776:	2340      	movs	r3, #64	; 0x40
 8000778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	2301      	movs	r3, #1
 800077c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2300      	movs	r3, #0
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	4619      	mov	r1, r3
 800078c:	480b      	ldr	r0, [pc, #44]	; (80007bc <MX_GPIO_Init+0x154>)
 800078e:	f000 fb4f 	bl	8000e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000792:	2380      	movs	r3, #128	; 0x80
 8000794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000796:	2300      	movs	r3, #0
 8000798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	4619      	mov	r1, r3
 80007a4:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_GPIO_Init+0x154>)
 80007a6:	f000 fb43 	bl	8000e30 <HAL_GPIO_Init>

}
 80007aa:	bf00      	nop
 80007ac:	3730      	adds	r7, #48	; 0x30
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40020400 	.word	0x40020400
 80007bc:	40021800 	.word	0x40021800
 80007c0:	40020800 	.word	0x40020800

080007c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c8:	f000 f9ea 	bl	8000ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007cc:	f000 f80a 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d0:	f7ff ff4a 	bl	8000668 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007d4:	f000 f948 	bl	8000a68 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80007d8:	f7ff feb0 	bl	800053c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80007dc:	f006 fc8d 	bl	80070fa <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <main+0x1c>
	...

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b094      	sub	sp, #80	; 0x50
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	2234      	movs	r2, #52	; 0x34
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f009 fa40 	bl	8009c78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	f107 0308 	add.w	r3, r7, #8
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000808:	2300      	movs	r3, #0
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	4b29      	ldr	r3, [pc, #164]	; (80008b4 <SystemClock_Config+0xd0>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000810:	4a28      	ldr	r2, [pc, #160]	; (80008b4 <SystemClock_Config+0xd0>)
 8000812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000816:	6413      	str	r3, [r2, #64]	; 0x40
 8000818:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <SystemClock_Config+0xd0>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000824:	2300      	movs	r3, #0
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <SystemClock_Config+0xd4>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000830:	4a21      	ldr	r2, [pc, #132]	; (80008b8 <SystemClock_Config+0xd4>)
 8000832:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000836:	6013      	str	r3, [r2, #0]
 8000838:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <SystemClock_Config+0xd4>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000844:	2301      	movs	r3, #1
 8000846:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000848:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800084c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084e:	2302      	movs	r3, #2
 8000850:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000852:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000856:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000858:	2304      	movs	r3, #4
 800085a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 800085c:	2348      	movs	r3, #72	; 0x48
 800085e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000860:	2302      	movs	r3, #2
 8000862:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000864:	2303      	movs	r3, #3
 8000866:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000868:	2302      	movs	r3, #2
 800086a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4618      	mov	r0, r3
 8000872:	f002 fc9b 	bl	80031ac <HAL_RCC_OscConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800087c:	f000 f82d 	bl	80008da <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000880:	230f      	movs	r3, #15
 8000882:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000884:	2302      	movs	r3, #2
 8000886:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800088c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000890:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000896:	f107 0308 	add.w	r3, r7, #8
 800089a:	2102      	movs	r1, #2
 800089c:	4618      	mov	r0, r3
 800089e:	f001 fe5d 	bl	800255c <HAL_RCC_ClockConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80008a8:	f000 f817 	bl	80008da <Error_Handler>
  }
}
 80008ac:	bf00      	nop
 80008ae:	3750      	adds	r7, #80	; 0x50
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40007000 	.word	0x40007000

080008bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008cc:	d101      	bne.n	80008d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ce:	f000 f989 	bl	8000be4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008de:	b672      	cpsid	i
}
 80008e0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <Error_Handler+0x8>

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <HAL_MspInit+0x54>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	4a11      	ldr	r2, [pc, #68]	; (8000938 <HAL_MspInit+0x54>)
 80008f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f8:	6453      	str	r3, [r2, #68]	; 0x44
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <HAL_MspInit+0x54>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <HAL_MspInit+0x54>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <HAL_MspInit+0x54>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000914:	6413      	str	r3, [r2, #64]	; 0x40
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <HAL_MspInit+0x54>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	210f      	movs	r1, #15
 8000926:	f06f 0001 	mvn.w	r0, #1
 800092a:	f000 fa57 	bl	8000ddc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800

0800093c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08c      	sub	sp, #48	; 0x30
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800094c:	2200      	movs	r2, #0
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	201c      	movs	r0, #28
 8000952:	f000 fa43 	bl	8000ddc <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000956:	201c      	movs	r0, #28
 8000958:	f000 fa5c 	bl	8000e14 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <HAL_InitTick+0xa8>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	4a1f      	ldr	r2, [pc, #124]	; (80009e4 <HAL_InitTick+0xa8>)
 8000966:	f043 0301 	orr.w	r3, r3, #1
 800096a:	6413      	str	r3, [r2, #64]	; 0x40
 800096c:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <HAL_InitTick+0xa8>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	f003 0301 	and.w	r3, r3, #1
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000978:	f107 0210 	add.w	r2, r7, #16
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4611      	mov	r1, r2
 8000982:	4618      	mov	r0, r3
 8000984:	f001 ff04 	bl	8002790 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000988:	f001 feda 	bl	8002740 <HAL_RCC_GetPCLK1Freq>
 800098c:	4603      	mov	r3, r0
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000994:	4a14      	ldr	r2, [pc, #80]	; (80009e8 <HAL_InitTick+0xac>)
 8000996:	fba2 2303 	umull	r2, r3, r2, r3
 800099a:	0c9b      	lsrs	r3, r3, #18
 800099c:	3b01      	subs	r3, #1
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <HAL_InitTick+0xb0>)
 80009a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80009a8:	4b10      	ldr	r3, [pc, #64]	; (80009ec <HAL_InitTick+0xb0>)
 80009aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009ae:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80009b0:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <HAL_InitTick+0xb0>)
 80009b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b4:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80009b6:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <HAL_InitTick+0xb0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009bc:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <HAL_InitTick+0xb0>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80009c2:	480a      	ldr	r0, [pc, #40]	; (80009ec <HAL_InitTick+0xb0>)
 80009c4:	f002 fe90 	bl	80036e8 <HAL_TIM_Base_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d104      	bne.n	80009d8 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80009ce:	4807      	ldr	r0, [pc, #28]	; (80009ec <HAL_InitTick+0xb0>)
 80009d0:	f002 fee4 	bl	800379c <HAL_TIM_Base_Start_IT>
 80009d4:	4603      	mov	r3, r0
 80009d6:	e000      	b.n	80009da <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 80009d8:	2301      	movs	r3, #1
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3730      	adds	r7, #48	; 0x30
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800
 80009e8:	431bde83 	.word	0x431bde83
 80009ec:	2000444c 	.word	0x2000444c

080009f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <NMI_Handler+0x4>

080009f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <HardFault_Handler+0x4>

080009fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <MemManage_Handler+0x4>

08000a02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <BusFault_Handler+0x4>

08000a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <UsageFault_Handler+0x4>

08000a0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a20:	4802      	ldr	r0, [pc, #8]	; (8000a2c <TIM2_IRQHandler+0x10>)
 8000a22:	f002 ff2b 	bl	800387c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	2000444c 	.word	0x2000444c

08000a30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a34:	4802      	ldr	r0, [pc, #8]	; (8000a40 <OTG_FS_IRQHandler+0x10>)
 8000a36:	f000 fd19 	bl	800146c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200059b0 	.word	0x200059b0

08000a44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <SystemInit+0x20>)
 8000a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a4e:	4a05      	ldr	r2, [pc, #20]	; (8000a64 <SystemInit+0x20>)
 8000a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_USART3_UART_Init+0x4c>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <MX_USART3_UART_Init+0x50>)
 8000a70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <MX_USART3_UART_Init+0x4c>)
 8000a74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_USART3_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_USART3_UART_Init+0x4c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <MX_USART3_UART_Init+0x4c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_USART3_UART_Init+0x4c>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <MX_USART3_UART_Init+0x4c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_USART3_UART_Init+0x4c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_USART3_UART_Init+0x4c>)
 8000aa0:	f003 f8d0 	bl	8003c44 <HAL_UART_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000aaa:	f7ff ff16 	bl	80008da <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20004494 	.word	0x20004494
 8000ab8:	40004800 	.word	0x40004800

08000abc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a19      	ldr	r2, [pc, #100]	; (8000b40 <HAL_UART_MspInit+0x84>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d12c      	bne.n	8000b38 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a17      	ldr	r2, [pc, #92]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a10      	ldr	r2, [pc, #64]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000b04:	f043 0308 	orr.w	r3, r3, #8
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0308 	and.w	r3, r3, #8
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b24:	2303      	movs	r3, #3
 8000b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b28:	2307      	movs	r3, #7
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4619      	mov	r1, r3
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <HAL_UART_MspInit+0x8c>)
 8000b34:	f000 f97c 	bl	8000e30 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	; 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40004800 	.word	0x40004800
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020c00 	.word	0x40020c00

08000b4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b50:	480d      	ldr	r0, [pc, #52]	; (8000b88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b52:	490e      	ldr	r1, [pc, #56]	; (8000b8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b54:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b58:	e002      	b.n	8000b60 <LoopCopyDataInit>

08000b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5e:	3304      	adds	r3, #4

08000b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b64:	d3f9      	bcc.n	8000b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b66:	4a0b      	ldr	r2, [pc, #44]	; (8000b94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b68:	4c0b      	ldr	r4, [pc, #44]	; (8000b98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b6c:	e001      	b.n	8000b72 <LoopFillZerobss>

08000b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b70:	3204      	adds	r2, #4

08000b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b74:	d3fb      	bcc.n	8000b6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b76:	f7ff ff65 	bl	8000a44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b7a:	f009 f849 	bl	8009c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b7e:	f7ff fe21 	bl	80007c4 <main>
  bx  lr    
 8000b82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b8c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8000b90:	08009f54 	.word	0x08009f54
  ldr r2, =_sbss
 8000b94:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8000b98:	20005dc4 	.word	0x20005dc4

08000b9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b9c:	e7fe      	b.n	8000b9c <ADC_IRQHandler>
	...

08000ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <HAL_Init+0x40>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0d      	ldr	r2, [pc, #52]	; (8000be0 <HAL_Init+0x40>)
 8000baa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <HAL_Init+0x40>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <HAL_Init+0x40>)
 8000bb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <HAL_Init+0x40>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <HAL_Init+0x40>)
 8000bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc8:	2003      	movs	r0, #3
 8000bca:	f000 f8fc 	bl	8000dc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bce:	200f      	movs	r0, #15
 8000bd0:	f7ff feb4 	bl	800093c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd4:	f7ff fe86 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40023c00 	.word	0x40023c00

08000be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_IncTick+0x20>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_IncTick+0x24>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <HAL_IncTick+0x24>)
 8000bf6:	6013      	str	r3, [r2, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20000008 	.word	0x20000008
 8000c08:	200044d8 	.word	0x200044d8

08000c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <HAL_GetTick+0x14>)
 8000c12:	681b      	ldr	r3, [r3, #0]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	200044d8 	.word	0x200044d8

08000c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c2c:	f7ff ffee 	bl	8000c0c <HAL_GetTick>
 8000c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c3c:	d005      	beq.n	8000c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <HAL_Delay+0x44>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	461a      	mov	r2, r3
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4413      	add	r3, r2
 8000c48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c4a:	bf00      	nop
 8000c4c:	f7ff ffde 	bl	8000c0c <HAL_GetTick>
 8000c50:	4602      	mov	r2, r0
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d8f7      	bhi.n	8000c4c <HAL_Delay+0x28>
  {
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000008 	.word	0x20000008

08000c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	db0b      	blt.n	8000cfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	f003 021f 	and.w	r2, r3, #31
 8000ce8:	4907      	ldr	r1, [pc, #28]	; (8000d08 <__NVIC_EnableIRQ+0x38>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	095b      	lsrs	r3, r3, #5
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000e100 	.word	0xe000e100

08000d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	6039      	str	r1, [r7, #0]
 8000d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	db0a      	blt.n	8000d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	490c      	ldr	r1, [pc, #48]	; (8000d58 <__NVIC_SetPriority+0x4c>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	0112      	lsls	r2, r2, #4
 8000d2c:	b2d2      	uxtb	r2, r2
 8000d2e:	440b      	add	r3, r1
 8000d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d34:	e00a      	b.n	8000d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4908      	ldr	r1, [pc, #32]	; (8000d5c <__NVIC_SetPriority+0x50>)
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	f003 030f 	and.w	r3, r3, #15
 8000d42:	3b04      	subs	r3, #4
 8000d44:	0112      	lsls	r2, r2, #4
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	440b      	add	r3, r1
 8000d4a:	761a      	strb	r2, [r3, #24]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000e100 	.word	0xe000e100
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b089      	sub	sp, #36	; 0x24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	f1c3 0307 	rsb	r3, r3, #7
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	bf28      	it	cs
 8000d7e:	2304      	movcs	r3, #4
 8000d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3304      	adds	r3, #4
 8000d86:	2b06      	cmp	r3, #6
 8000d88:	d902      	bls.n	8000d90 <NVIC_EncodePriority+0x30>
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3b03      	subs	r3, #3
 8000d8e:	e000      	b.n	8000d92 <NVIC_EncodePriority+0x32>
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	f04f 32ff 	mov.w	r2, #4294967295
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	401a      	ands	r2, r3
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
 8000db2:	43d9      	mvns	r1, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	4313      	orrs	r3, r2
         );
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3724      	adds	r7, #36	; 0x24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff ff4c 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
 8000de8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dee:	f7ff ff61 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000df2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	68b9      	ldr	r1, [r7, #8]
 8000df8:	6978      	ldr	r0, [r7, #20]
 8000dfa:	f7ff ffb1 	bl	8000d60 <NVIC_EncodePriority>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e04:	4611      	mov	r1, r2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ff80 	bl	8000d0c <__NVIC_SetPriority>
}
 8000e0c:	bf00      	nop
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff ff54 	bl	8000cd0 <__NVIC_EnableIRQ>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
 8000e4a:	e165      	b.n	8001118 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	697a      	ldr	r2, [r7, #20]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	f040 8154 	bne.w	8001112 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d005      	beq.n	8000e82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d130      	bne.n	8000ee4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4013      	ands	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	68da      	ldr	r2, [r3, #12]
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb8:	2201      	movs	r2, #1
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	091b      	lsrs	r3, r3, #4
 8000ece:	f003 0201 	and.w	r2, r3, #1
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	2b03      	cmp	r3, #3
 8000eee:	d017      	beq.n	8000f20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2203      	movs	r2, #3
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d123      	bne.n	8000f74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	08da      	lsrs	r2, r3, #3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3208      	adds	r2, #8
 8000f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	f003 0307 	and.w	r3, r3, #7
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	220f      	movs	r2, #15
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	691a      	ldr	r2, [r3, #16]
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	08da      	lsrs	r2, r3, #3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3208      	adds	r2, #8
 8000f6e:	69b9      	ldr	r1, [r7, #24]
 8000f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	2203      	movs	r2, #3
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0203 	and.w	r2, r3, #3
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f000 80ae 	beq.w	8001112 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b5d      	ldr	r3, [pc, #372]	; (8001130 <HAL_GPIO_Init+0x300>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	4a5c      	ldr	r2, [pc, #368]	; (8001130 <HAL_GPIO_Init+0x300>)
 8000fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc6:	4b5a      	ldr	r3, [pc, #360]	; (8001130 <HAL_GPIO_Init+0x300>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fd2:	4a58      	ldr	r2, [pc, #352]	; (8001134 <HAL_GPIO_Init+0x304>)
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	089b      	lsrs	r3, r3, #2
 8000fd8:	3302      	adds	r3, #2
 8000fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	220f      	movs	r2, #15
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a4f      	ldr	r2, [pc, #316]	; (8001138 <HAL_GPIO_Init+0x308>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d025      	beq.n	800104a <HAL_GPIO_Init+0x21a>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4e      	ldr	r2, [pc, #312]	; (800113c <HAL_GPIO_Init+0x30c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d01f      	beq.n	8001046 <HAL_GPIO_Init+0x216>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4d      	ldr	r2, [pc, #308]	; (8001140 <HAL_GPIO_Init+0x310>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d019      	beq.n	8001042 <HAL_GPIO_Init+0x212>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4c      	ldr	r2, [pc, #304]	; (8001144 <HAL_GPIO_Init+0x314>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d013      	beq.n	800103e <HAL_GPIO_Init+0x20e>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4b      	ldr	r2, [pc, #300]	; (8001148 <HAL_GPIO_Init+0x318>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d00d      	beq.n	800103a <HAL_GPIO_Init+0x20a>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4a      	ldr	r2, [pc, #296]	; (800114c <HAL_GPIO_Init+0x31c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d007      	beq.n	8001036 <HAL_GPIO_Init+0x206>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a49      	ldr	r2, [pc, #292]	; (8001150 <HAL_GPIO_Init+0x320>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d101      	bne.n	8001032 <HAL_GPIO_Init+0x202>
 800102e:	2306      	movs	r3, #6
 8001030:	e00c      	b.n	800104c <HAL_GPIO_Init+0x21c>
 8001032:	2307      	movs	r3, #7
 8001034:	e00a      	b.n	800104c <HAL_GPIO_Init+0x21c>
 8001036:	2305      	movs	r3, #5
 8001038:	e008      	b.n	800104c <HAL_GPIO_Init+0x21c>
 800103a:	2304      	movs	r3, #4
 800103c:	e006      	b.n	800104c <HAL_GPIO_Init+0x21c>
 800103e:	2303      	movs	r3, #3
 8001040:	e004      	b.n	800104c <HAL_GPIO_Init+0x21c>
 8001042:	2302      	movs	r3, #2
 8001044:	e002      	b.n	800104c <HAL_GPIO_Init+0x21c>
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <HAL_GPIO_Init+0x21c>
 800104a:	2300      	movs	r3, #0
 800104c:	69fa      	ldr	r2, [r7, #28]
 800104e:	f002 0203 	and.w	r2, r2, #3
 8001052:	0092      	lsls	r2, r2, #2
 8001054:	4093      	lsls	r3, r2
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800105c:	4935      	ldr	r1, [pc, #212]	; (8001134 <HAL_GPIO_Init+0x304>)
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	3302      	adds	r3, #2
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800106a:	4b3a      	ldr	r3, [pc, #232]	; (8001154 <HAL_GPIO_Init+0x324>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800108e:	4a31      	ldr	r2, [pc, #196]	; (8001154 <HAL_GPIO_Init+0x324>)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001094:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <HAL_GPIO_Init+0x324>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010b8:	4a26      	ldr	r2, [pc, #152]	; (8001154 <HAL_GPIO_Init+0x324>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010be:	4b25      	ldr	r3, [pc, #148]	; (8001154 <HAL_GPIO_Init+0x324>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010e2:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <HAL_GPIO_Init+0x324>)
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <HAL_GPIO_Init+0x324>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800110c:	4a11      	ldr	r2, [pc, #68]	; (8001154 <HAL_GPIO_Init+0x324>)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3301      	adds	r3, #1
 8001116:	61fb      	str	r3, [r7, #28]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	2b0f      	cmp	r3, #15
 800111c:	f67f ae96 	bls.w	8000e4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800
 8001134:	40013800 	.word	0x40013800
 8001138:	40020000 	.word	0x40020000
 800113c:	40020400 	.word	0x40020400
 8001140:	40020800 	.word	0x40020800
 8001144:	40020c00 	.word	0x40020c00
 8001148:	40021000 	.word	0x40021000
 800114c:	40021400 	.word	0x40021400
 8001150:	40021800 	.word	0x40021800
 8001154:	40013c00 	.word	0x40013c00

08001158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	807b      	strh	r3, [r7, #2]
 8001164:	4613      	mov	r3, r2
 8001166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001168:	787b      	ldrb	r3, [r7, #1]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800116e:	887a      	ldrh	r2, [r7, #2]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001174:	e003      	b.n	800117e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001176:	887b      	ldrh	r3, [r7, #2]
 8001178:	041a      	lsls	r2, r3, #16
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	619a      	str	r2, [r3, #24]
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800118a:	b480      	push	{r7}
 800118c:	b085      	sub	sp, #20
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	460b      	mov	r3, r1
 8001194:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800119c:	887a      	ldrh	r2, [r7, #2]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4013      	ands	r3, r2
 80011a2:	041a      	lsls	r2, r3, #16
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	43d9      	mvns	r1, r3
 80011a8:	887b      	ldrh	r3, [r7, #2]
 80011aa:	400b      	ands	r3, r1
 80011ac:	431a      	orrs	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	619a      	str	r2, [r3, #24]
}
 80011b2:	bf00      	nop
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c0:	b08f      	sub	sp, #60	; 0x3c
 80011c2:	af0a      	add	r7, sp, #40	; 0x28
 80011c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d101      	bne.n	80011d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e116      	b.n	80013fe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d106      	bne.n	80011f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f008 f98a 	bl	8009504 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2203      	movs	r2, #3
 80011f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001200:	2b00      	cmp	r3, #0
 8001202:	d102      	bne.n	800120a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f003 f843 	bl	800429a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	603b      	str	r3, [r7, #0]
 800121a:	687e      	ldr	r6, [r7, #4]
 800121c:	466d      	mov	r5, sp
 800121e:	f106 0410 	add.w	r4, r6, #16
 8001222:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001224:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800122a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800122e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001232:	1d33      	adds	r3, r6, #4
 8001234:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001236:	6838      	ldr	r0, [r7, #0]
 8001238:	f002 ff1a 	bl	8004070 <USB_CoreInit>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d005      	beq.n	800124e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2202      	movs	r2, #2
 8001246:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e0d7      	b.n	80013fe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2100      	movs	r1, #0
 8001254:	4618      	mov	r0, r3
 8001256:	f003 f831 	bl	80042bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800125a:	2300      	movs	r3, #0
 800125c:	73fb      	strb	r3, [r7, #15]
 800125e:	e04a      	b.n	80012f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001260:	7bfa      	ldrb	r2, [r7, #15]
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	4613      	mov	r3, r2
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	1a9b      	subs	r3, r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	440b      	add	r3, r1
 800126e:	333d      	adds	r3, #61	; 0x3d
 8001270:	2201      	movs	r2, #1
 8001272:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001274:	7bfa      	ldrb	r2, [r7, #15]
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	4613      	mov	r3, r2
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	1a9b      	subs	r3, r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	440b      	add	r3, r1
 8001282:	333c      	adds	r3, #60	; 0x3c
 8001284:	7bfa      	ldrb	r2, [r7, #15]
 8001286:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001288:	7bfa      	ldrb	r2, [r7, #15]
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	b298      	uxth	r0, r3
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	4613      	mov	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	1a9b      	subs	r3, r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	440b      	add	r3, r1
 800129a:	3342      	adds	r3, #66	; 0x42
 800129c:	4602      	mov	r2, r0
 800129e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012a0:	7bfa      	ldrb	r2, [r7, #15]
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	4613      	mov	r3, r2
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	1a9b      	subs	r3, r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	333f      	adds	r3, #63	; 0x3f
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012b4:	7bfa      	ldrb	r2, [r7, #15]
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	1a9b      	subs	r3, r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	3344      	adds	r3, #68	; 0x44
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012c8:	7bfa      	ldrb	r2, [r7, #15]
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	4613      	mov	r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	1a9b      	subs	r3, r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	440b      	add	r3, r1
 80012d6:	3348      	adds	r3, #72	; 0x48
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012dc:	7bfa      	ldrb	r2, [r7, #15]
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	4613      	mov	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	1a9b      	subs	r3, r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	440b      	add	r3, r1
 80012ea:	3350      	adds	r3, #80	; 0x50
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	3301      	adds	r3, #1
 80012f4:	73fb      	strb	r3, [r7, #15]
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d3af      	bcc.n	8001260 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001300:	2300      	movs	r3, #0
 8001302:	73fb      	strb	r3, [r7, #15]
 8001304:	e044      	b.n	8001390 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001306:	7bfa      	ldrb	r2, [r7, #15]
 8001308:	6879      	ldr	r1, [r7, #4]
 800130a:	4613      	mov	r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	1a9b      	subs	r3, r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	440b      	add	r3, r1
 8001314:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800131c:	7bfa      	ldrb	r2, [r7, #15]
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	4613      	mov	r3, r2
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	1a9b      	subs	r3, r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800132e:	7bfa      	ldrb	r2, [r7, #15]
 8001330:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001332:	7bfa      	ldrb	r2, [r7, #15]
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	4613      	mov	r3, r2
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	1a9b      	subs	r3, r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	440b      	add	r3, r1
 8001340:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001348:	7bfa      	ldrb	r2, [r7, #15]
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	4613      	mov	r3, r2
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	1a9b      	subs	r3, r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	440b      	add	r3, r1
 8001356:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800135e:	7bfa      	ldrb	r2, [r7, #15]
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	4613      	mov	r3, r2
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	1a9b      	subs	r3, r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	440b      	add	r3, r1
 800136c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001374:	7bfa      	ldrb	r2, [r7, #15]
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	1a9b      	subs	r3, r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	440b      	add	r3, r1
 8001382:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	3301      	adds	r3, #1
 800138e:	73fb      	strb	r3, [r7, #15]
 8001390:	7bfa      	ldrb	r2, [r7, #15]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	429a      	cmp	r2, r3
 8001398:	d3b5      	bcc.n	8001306 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	687e      	ldr	r6, [r7, #4]
 80013a2:	466d      	mov	r5, sp
 80013a4:	f106 0410 	add.w	r4, r6, #16
 80013a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80013b8:	1d33      	adds	r3, r6, #4
 80013ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013bc:	6838      	ldr	r0, [r7, #0]
 80013be:	f002 ffc9 	bl	8004354 <USB_DevInit>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d005      	beq.n	80013d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2202      	movs	r2, #2
 80013cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e014      	b.n	80013fe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d102      	bne.n	80013f2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f001 f891 	bl	8002514 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f004 f838 	bl	800546c <USB_DevDisconnect>

  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001406 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b084      	sub	sp, #16
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800141a:	2b01      	cmp	r3, #1
 800141c:	d101      	bne.n	8001422 <HAL_PCD_Start+0x1c>
 800141e:	2302      	movs	r3, #2
 8001420:	e020      	b.n	8001464 <HAL_PCD_Start+0x5e>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142e:	2b01      	cmp	r3, #1
 8001430:	d109      	bne.n	8001446 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001436:	2b01      	cmp	r3, #1
 8001438:	d005      	beq.n	8001446 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800143e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f002 ff14 	bl	8004278 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f003 ffe8 	bl	800542a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800146c:	b590      	push	{r4, r7, lr}
 800146e:	b08d      	sub	sp, #52	; 0x34
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800147a:	6a3b      	ldr	r3, [r7, #32]
 800147c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f004 f8a6 	bl	80055d4 <USB_GetMode>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	f040 83ca 	bne.w	8001c24 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f004 f80a 	bl	80054ae <USB_ReadInterrupts>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	f000 83c0 	beq.w	8001c22 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f004 f801 	bl	80054ae <USB_ReadInterrupts>
 80014ac:	4603      	mov	r3, r0
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d107      	bne.n	80014c6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	695a      	ldr	r2, [r3, #20]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f002 0202 	and.w	r2, r2, #2
 80014c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f003 ffef 	bl	80054ae <USB_ReadInterrupts>
 80014d0:	4603      	mov	r3, r0
 80014d2:	f003 0310 	and.w	r3, r3, #16
 80014d6:	2b10      	cmp	r3, #16
 80014d8:	d161      	bne.n	800159e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	699a      	ldr	r2, [r3, #24]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 0210 	bic.w	r2, r2, #16
 80014e8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80014ea:	6a3b      	ldr	r3, [r7, #32]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	f003 020f 	and.w	r2, r3, #15
 80014f6:	4613      	mov	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	1a9b      	subs	r3, r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	3304      	adds	r3, #4
 8001508:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	0c5b      	lsrs	r3, r3, #17
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	2b02      	cmp	r3, #2
 8001514:	d124      	bne.n	8001560 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800151c:	4013      	ands	r3, r2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d035      	beq.n	800158e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	091b      	lsrs	r3, r3, #4
 800152a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800152c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001530:	b29b      	uxth	r3, r3
 8001532:	461a      	mov	r2, r3
 8001534:	6a38      	ldr	r0, [r7, #32]
 8001536:	f003 fe26 	bl	8005186 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	68da      	ldr	r2, [r3, #12]
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	091b      	lsrs	r3, r3, #4
 8001542:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001546:	441a      	add	r2, r3
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	699a      	ldr	r2, [r3, #24]
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	091b      	lsrs	r3, r3, #4
 8001554:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001558:	441a      	add	r2, r3
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	619a      	str	r2, [r3, #24]
 800155e:	e016      	b.n	800158e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	0c5b      	lsrs	r3, r3, #17
 8001564:	f003 030f 	and.w	r3, r3, #15
 8001568:	2b06      	cmp	r3, #6
 800156a:	d110      	bne.n	800158e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001572:	2208      	movs	r2, #8
 8001574:	4619      	mov	r1, r3
 8001576:	6a38      	ldr	r0, [r7, #32]
 8001578:	f003 fe05 	bl	8005186 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	699a      	ldr	r2, [r3, #24]
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	091b      	lsrs	r3, r3, #4
 8001584:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001588:	441a      	add	r2, r3
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	699a      	ldr	r2, [r3, #24]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f042 0210 	orr.w	r2, r2, #16
 800159c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f003 ff83 	bl	80054ae <USB_ReadInterrupts>
 80015a8:	4603      	mov	r3, r0
 80015aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80015b2:	d16e      	bne.n	8001692 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f003 ff89 	bl	80054d4 <USB_ReadDevAllOutEpInterrupt>
 80015c2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80015c4:	e062      	b.n	800168c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80015c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d057      	beq.n	8001680 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	4611      	mov	r1, r2
 80015da:	4618      	mov	r0, r3
 80015dc:	f003 ffae 	bl	800553c <USB_ReadDevOutEPInterrupt>
 80015e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d00c      	beq.n	8001606 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	015a      	lsls	r2, r3, #5
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	4413      	add	r3, r2
 80015f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015f8:	461a      	mov	r2, r3
 80015fa:	2301      	movs	r3, #1
 80015fc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80015fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f000 fddd 	bl	80021c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00c      	beq.n	800162a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	015a      	lsls	r2, r3, #5
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	4413      	add	r3, r2
 8001618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800161c:	461a      	mov	r2, r3
 800161e:	2308      	movs	r3, #8
 8001620:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001622:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 fed7 	bl	80023d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	f003 0310 	and.w	r3, r3, #16
 8001630:	2b00      	cmp	r3, #0
 8001632:	d008      	beq.n	8001646 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	015a      	lsls	r2, r3, #5
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	4413      	add	r3, r2
 800163c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001640:	461a      	mov	r2, r3
 8001642:	2310      	movs	r3, #16
 8001644:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	f003 0320 	and.w	r3, r3, #32
 800164c:	2b00      	cmp	r3, #0
 800164e:	d008      	beq.n	8001662 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	015a      	lsls	r2, r3, #5
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	4413      	add	r3, r2
 8001658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800165c:	461a      	mov	r2, r3
 800165e:	2320      	movs	r3, #32
 8001660:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d009      	beq.n	8001680 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	015a      	lsls	r2, r3, #5
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	4413      	add	r3, r2
 8001674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001678:	461a      	mov	r2, r3
 800167a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800167e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	3301      	adds	r3, #1
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001688:	085b      	lsrs	r3, r3, #1
 800168a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800168c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800168e:	2b00      	cmp	r3, #0
 8001690:	d199      	bne.n	80015c6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f003 ff09 	bl	80054ae <USB_ReadInterrupts>
 800169c:	4603      	mov	r3, r0
 800169e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80016a6:	f040 80c0 	bne.w	800182a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f003 ff2a 	bl	8005508 <USB_ReadDevAllInEpInterrupt>
 80016b4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80016ba:	e0b2      	b.n	8001822 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80016bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 80a7 	beq.w	8001816 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	4611      	mov	r1, r2
 80016d2:	4618      	mov	r0, r3
 80016d4:	f003 ff50 	bl	8005578 <USB_ReadDevInEPInterrupt>
 80016d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d057      	beq.n	8001794 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	2201      	movs	r2, #1
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69f9      	ldr	r1, [r7, #28]
 8001700:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001704:	4013      	ands	r3, r2
 8001706:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	015a      	lsls	r2, r3, #5
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	4413      	add	r3, r2
 8001710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001714:	461a      	mov	r2, r3
 8001716:	2301      	movs	r3, #1
 8001718:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d132      	bne.n	8001788 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001726:	4613      	mov	r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	1a9b      	subs	r3, r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	440b      	add	r3, r1
 8001730:	3348      	adds	r3, #72	; 0x48
 8001732:	6819      	ldr	r1, [r3, #0]
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001738:	4613      	mov	r3, r2
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	1a9b      	subs	r3, r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4403      	add	r3, r0
 8001742:	3344      	adds	r3, #68	; 0x44
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4419      	add	r1, r3
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800174c:	4613      	mov	r3, r2
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	1a9b      	subs	r3, r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4403      	add	r3, r0
 8001756:	3348      	adds	r3, #72	; 0x48
 8001758:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	2b00      	cmp	r3, #0
 800175e:	d113      	bne.n	8001788 <HAL_PCD_IRQHandler+0x31c>
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001764:	4613      	mov	r3, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	1a9b      	subs	r3, r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	440b      	add	r3, r1
 800176e:	3350      	adds	r3, #80	; 0x50
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d108      	bne.n	8001788 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6818      	ldr	r0, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001780:	461a      	mov	r2, r3
 8001782:	2101      	movs	r1, #1
 8001784:	f003 ff58 	bl	8005638 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	b2db      	uxtb	r3, r3
 800178c:	4619      	mov	r1, r3
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f007 ff5d 	bl	800964e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b00      	cmp	r3, #0
 800179c:	d008      	beq.n	80017b0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	015a      	lsls	r2, r3, #5
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	4413      	add	r3, r2
 80017a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017aa:	461a      	mov	r2, r3
 80017ac:	2308      	movs	r3, #8
 80017ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	f003 0310 	and.w	r3, r3, #16
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d008      	beq.n	80017cc <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	015a      	lsls	r2, r3, #5
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	4413      	add	r3, r2
 80017c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017c6:	461a      	mov	r2, r3
 80017c8:	2310      	movs	r3, #16
 80017ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d008      	beq.n	80017e8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	015a      	lsls	r2, r3, #5
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	4413      	add	r3, r2
 80017de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017e2:	461a      	mov	r2, r3
 80017e4:	2340      	movs	r3, #64	; 0x40
 80017e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d008      	beq.n	8001804 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	015a      	lsls	r2, r3, #5
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	4413      	add	r3, r2
 80017fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017fe:	461a      	mov	r2, r3
 8001800:	2302      	movs	r3, #2
 8001802:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800180e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 fc48 	bl	80020a6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	3301      	adds	r3, #1
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800181c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800181e:	085b      	lsrs	r3, r3, #1
 8001820:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001824:	2b00      	cmp	r3, #0
 8001826:	f47f af49 	bne.w	80016bc <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f003 fe3d 	bl	80054ae <USB_ReadInterrupts>
 8001834:	4603      	mov	r3, r0
 8001836:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800183a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800183e:	d122      	bne.n	8001886 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	69fa      	ldr	r2, [r7, #28]
 800184a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800184e:	f023 0301 	bic.w	r3, r3, #1
 8001852:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800185a:	2b01      	cmp	r3, #1
 800185c:	d108      	bne.n	8001870 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001866:	2100      	movs	r1, #0
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f008 f93f 	bl	8009aec <HAL_PCDEx_LPM_Callback>
 800186e:	e002      	b.n	8001876 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f007 ff63 	bl	800973c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	695a      	ldr	r2, [r3, #20]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001884:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f003 fe0f 	bl	80054ae <USB_ReadInterrupts>
 8001890:	4603      	mov	r3, r0
 8001892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001896:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800189a:	d112      	bne.n	80018c2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d102      	bne.n	80018b2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f007 ff1f 	bl	80096f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	695a      	ldr	r2, [r3, #20]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80018c0:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f003 fdf1 	bl	80054ae <USB_ReadInterrupts>
 80018cc:	4603      	mov	r3, r0
 80018ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80018d6:	d121      	bne.n	800191c <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	695a      	ldr	r2, [r3, #20]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80018e6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d111      	bne.n	8001916 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2201      	movs	r2, #1
 80018f6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001900:	089b      	lsrs	r3, r3, #2
 8001902:	f003 020f 	and.w	r2, r3, #15
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800190c:	2101      	movs	r1, #1
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f008 f8ec 	bl	8009aec <HAL_PCDEx_LPM_Callback>
 8001914:	e002      	b.n	800191c <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f007 feea 	bl	80096f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f003 fdc4 	bl	80054ae <USB_ReadInterrupts>
 8001926:	4603      	mov	r3, r0
 8001928:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800192c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001930:	f040 80c7 	bne.w	8001ac2 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	69fa      	ldr	r2, [r7, #28]
 800193e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001942:	f023 0301 	bic.w	r3, r3, #1
 8001946:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2110      	movs	r1, #16
 800194e:	4618      	mov	r0, r3
 8001950:	f002 fe5e 	bl	8004610 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001954:	2300      	movs	r3, #0
 8001956:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001958:	e056      	b.n	8001a08 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800195a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800195c:	015a      	lsls	r2, r3, #5
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	4413      	add	r3, r2
 8001962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001966:	461a      	mov	r2, r3
 8001968:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800196c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800196e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001970:	015a      	lsls	r2, r3, #5
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	4413      	add	r3, r2
 8001976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800197e:	0151      	lsls	r1, r2, #5
 8001980:	69fa      	ldr	r2, [r7, #28]
 8001982:	440a      	add	r2, r1
 8001984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001988:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800198c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800198e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001990:	015a      	lsls	r2, r3, #5
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	4413      	add	r3, r2
 8001996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800199e:	0151      	lsls	r1, r2, #5
 80019a0:	69fa      	ldr	r2, [r7, #28]
 80019a2:	440a      	add	r2, r1
 80019a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80019a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80019ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80019ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b0:	015a      	lsls	r2, r3, #5
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	4413      	add	r3, r2
 80019b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019ba:	461a      	mov	r2, r3
 80019bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80019c0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80019c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c4:	015a      	lsls	r2, r3, #5
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	4413      	add	r3, r2
 80019ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019d2:	0151      	lsls	r1, r2, #5
 80019d4:	69fa      	ldr	r2, [r7, #28]
 80019d6:	440a      	add	r2, r1
 80019d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80019dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80019e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e4:	015a      	lsls	r2, r3, #5
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	4413      	add	r3, r2
 80019ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019f2:	0151      	lsls	r1, r2, #5
 80019f4:	69fa      	ldr	r2, [r7, #28]
 80019f6:	440a      	add	r2, r1
 80019f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80019fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a00:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a04:	3301      	adds	r3, #1
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d3a3      	bcc.n	800195a <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	69fa      	ldr	r2, [r7, #28]
 8001a1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a20:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001a24:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d016      	beq.n	8001a5c <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a38:	69fa      	ldr	r2, [r7, #28]
 8001a3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a3e:	f043 030b 	orr.w	r3, r3, #11
 8001a42:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	69fa      	ldr	r2, [r7, #28]
 8001a50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a54:	f043 030b 	orr.w	r3, r3, #11
 8001a58:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5a:	e015      	b.n	8001a88 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	69fa      	ldr	r2, [r7, #28]
 8001a66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a6e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001a72:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	69fa      	ldr	r2, [r7, #28]
 8001a7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a82:	f043 030b 	orr.w	r3, r3, #11
 8001a86:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	69fa      	ldr	r2, [r7, #28]
 8001a92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a96:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001a9a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6818      	ldr	r0, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001aac:	461a      	mov	r2, r3
 8001aae:	f003 fdc3 	bl	8005638 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	695a      	ldr	r2, [r3, #20]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001ac0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f003 fcf1 	bl	80054ae <USB_ReadInterrupts>
 8001acc:	4603      	mov	r3, r0
 8001ace:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ad6:	d124      	bne.n	8001b22 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f003 fd87 	bl	80055f0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f002 fdef 	bl	80046ca <USB_GetDevSpeed>
 8001aec:	4603      	mov	r3, r0
 8001aee:	461a      	mov	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681c      	ldr	r4, [r3, #0]
 8001af8:	f000 fe16 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 8001afc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	461a      	mov	r2, r3
 8001b06:	4620      	mov	r0, r4
 8001b08:	f002 fb14 	bl	8004134 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f007 fdc6 	bl	800969e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	695a      	ldr	r2, [r3, #20]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001b20:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f003 fcc1 	bl	80054ae <USB_ReadInterrupts>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d10a      	bne.n	8001b4c <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f007 fda3 	bl	8009682 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	695a      	ldr	r2, [r3, #20]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f002 0208 	and.w	r2, r2, #8
 8001b4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f003 fcac 	bl	80054ae <USB_ReadInterrupts>
 8001b56:	4603      	mov	r3, r0
 8001b58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b60:	d10f      	bne.n	8001b82 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f007 fe05 	bl	800977c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	695a      	ldr	r2, [r3, #20]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001b80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f003 fc91 	bl	80054ae <USB_ReadInterrupts>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b96:	d10f      	bne.n	8001bb8 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f007 fdd8 	bl	8009758 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	695a      	ldr	r2, [r3, #20]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001bb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f003 fc76 	bl	80054ae <USB_ReadInterrupts>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bcc:	d10a      	bne.n	8001be4 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f007 fde6 	bl	80097a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	695a      	ldr	r2, [r3, #20]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001be2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f003 fc60 	bl	80054ae <USB_ReadInterrupts>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d115      	bne.n	8001c24 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f007 fdd6 	bl	80097bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6859      	ldr	r1, [r3, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	e000      	b.n	8001c24 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8001c22:	bf00      	nop
    }
  }
}
 8001c24:	3734      	adds	r7, #52	; 0x34
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd90      	pop	{r4, r7, pc}

08001c2a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	460b      	mov	r3, r1
 8001c34:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d101      	bne.n	8001c44 <HAL_PCD_SetAddress+0x1a>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e013      	b.n	8001c6c <HAL_PCD_SetAddress+0x42>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	78fa      	ldrb	r2, [r7, #3]
 8001c50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	78fa      	ldrb	r2, [r7, #3]
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f003 fbbe 	bl	80053de <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	4608      	mov	r0, r1
 8001c7e:	4611      	mov	r1, r2
 8001c80:	461a      	mov	r2, r3
 8001c82:	4603      	mov	r3, r0
 8001c84:	70fb      	strb	r3, [r7, #3]
 8001c86:	460b      	mov	r3, r1
 8001c88:	803b      	strh	r3, [r7, #0]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	da0f      	bge.n	8001cba <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	f003 020f 	and.w	r2, r3, #15
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	1a9b      	subs	r3, r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	3338      	adds	r3, #56	; 0x38
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	4413      	add	r3, r2
 8001cae:	3304      	adds	r3, #4
 8001cb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	705a      	strb	r2, [r3, #1]
 8001cb8:	e00f      	b.n	8001cda <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cba:	78fb      	ldrb	r3, [r7, #3]
 8001cbc:	f003 020f 	and.w	r2, r3, #15
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	1a9b      	subs	r3, r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	4413      	add	r3, r2
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001cda:	78fb      	ldrb	r3, [r7, #3]
 8001cdc:	f003 030f 	and.w	r3, r3, #15
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ce6:	883a      	ldrh	r2, [r7, #0]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	78ba      	ldrb	r2, [r7, #2]
 8001cf0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	785b      	ldrb	r3, [r3, #1]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d004      	beq.n	8001d04 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d04:	78bb      	ldrb	r3, [r7, #2]
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d102      	bne.n	8001d10 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d101      	bne.n	8001d1e <HAL_PCD_EP_Open+0xaa>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e00e      	b.n	8001d3c <HAL_PCD_EP_Open+0xc8>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68f9      	ldr	r1, [r7, #12]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f002 fcf1 	bl	8004714 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001d3a:	7afb      	ldrb	r3, [r7, #11]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	da0f      	bge.n	8001d78 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d58:	78fb      	ldrb	r3, [r7, #3]
 8001d5a:	f003 020f 	and.w	r2, r3, #15
 8001d5e:	4613      	mov	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	1a9b      	subs	r3, r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	3338      	adds	r3, #56	; 0x38
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2201      	movs	r2, #1
 8001d74:	705a      	strb	r2, [r3, #1]
 8001d76:	e00f      	b.n	8001d98 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	f003 020f 	and.w	r2, r3, #15
 8001d7e:	4613      	mov	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	1a9b      	subs	r3, r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3304      	adds	r3, #4
 8001d90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d98:	78fb      	ldrb	r3, [r7, #3]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d101      	bne.n	8001db2 <HAL_PCD_EP_Close+0x6e>
 8001dae:	2302      	movs	r3, #2
 8001db0:	e00e      	b.n	8001dd0 <HAL_PCD_EP_Close+0x8c>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68f9      	ldr	r1, [r7, #12]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f002 fd2f 	bl	8004824 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	607a      	str	r2, [r7, #4]
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	460b      	mov	r3, r1
 8001de6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001de8:	7afb      	ldrb	r3, [r7, #11]
 8001dea:	f003 020f 	and.w	r2, r3, #15
 8001dee:	4613      	mov	r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	1a9b      	subs	r3, r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3304      	adds	r3, #4
 8001e00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	2200      	movs	r2, #0
 8001e12:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	2200      	movs	r2, #0
 8001e18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e1a:	7afb      	ldrb	r3, [r7, #11]
 8001e1c:	f003 030f 	and.w	r3, r3, #15
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d102      	bne.n	8001e34 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e34:	7afb      	ldrb	r3, [r7, #11]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d109      	bne.n	8001e52 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6818      	ldr	r0, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	461a      	mov	r2, r3
 8001e4a:	6979      	ldr	r1, [r7, #20]
 8001e4c:	f003 f80a 	bl	8004e64 <USB_EP0StartXfer>
 8001e50:	e008      	b.n	8001e64 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6818      	ldr	r0, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	6979      	ldr	r1, [r7, #20]
 8001e60:	f002 fdbc 	bl	80049dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	460b      	mov	r3, r1
 8001e78:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e7a:	78fb      	ldrb	r3, [r7, #3]
 8001e7c:	f003 020f 	and.w	r2, r3, #15
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	4613      	mov	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	1a9b      	subs	r3, r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001e90:	681b      	ldr	r3, [r3, #0]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b086      	sub	sp, #24
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	607a      	str	r2, [r7, #4]
 8001ea8:	603b      	str	r3, [r7, #0]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eae:	7afb      	ldrb	r3, [r7, #11]
 8001eb0:	f003 020f 	and.w	r2, r3, #15
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	1a9b      	subs	r3, r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	3338      	adds	r3, #56	; 0x38
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	2201      	movs	r2, #1
 8001edc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ede:	7afb      	ldrb	r3, [r7, #11]
 8001ee0:	f003 030f 	and.w	r3, r3, #15
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d102      	bne.n	8001ef8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ef8:	7afb      	ldrb	r3, [r7, #11]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d109      	bne.n	8001f16 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6818      	ldr	r0, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	6979      	ldr	r1, [r7, #20]
 8001f10:	f002 ffa8 	bl	8004e64 <USB_EP0StartXfer>
 8001f14:	e008      	b.n	8001f28 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6818      	ldr	r0, [r3, #0]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	461a      	mov	r2, r3
 8001f22:	6979      	ldr	r1, [r7, #20]
 8001f24:	f002 fd5a 	bl	80049dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f3e:	78fb      	ldrb	r3, [r7, #3]
 8001f40:	f003 020f 	and.w	r2, r3, #15
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d901      	bls.n	8001f50 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e050      	b.n	8001ff2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	da0f      	bge.n	8001f78 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	f003 020f 	and.w	r2, r3, #15
 8001f5e:	4613      	mov	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	1a9b      	subs	r3, r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	3338      	adds	r3, #56	; 0x38
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2201      	movs	r2, #1
 8001f74:	705a      	strb	r2, [r3, #1]
 8001f76:	e00d      	b.n	8001f94 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f78:	78fa      	ldrb	r2, [r7, #3]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	1a9b      	subs	r3, r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	3304      	adds	r3, #4
 8001f8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2201      	movs	r2, #1
 8001f98:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
 8001f9c:	f003 030f 	and.w	r3, r3, #15
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <HAL_PCD_EP_SetStall+0x82>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e01e      	b.n	8001ff2 <HAL_PCD_EP_SetStall+0xc0>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68f9      	ldr	r1, [r7, #12]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f003 f937 	bl	8005236 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10a      	bne.n	8001fe8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6818      	ldr	r0, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	b2d9      	uxtb	r1, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	f003 fb28 	bl	8005638 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b084      	sub	sp, #16
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	460b      	mov	r3, r1
 8002004:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002006:	78fb      	ldrb	r3, [r7, #3]
 8002008:	f003 020f 	and.w	r2, r3, #15
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	429a      	cmp	r2, r3
 8002012:	d901      	bls.n	8002018 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e042      	b.n	800209e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002018:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800201c:	2b00      	cmp	r3, #0
 800201e:	da0f      	bge.n	8002040 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002020:	78fb      	ldrb	r3, [r7, #3]
 8002022:	f003 020f 	and.w	r2, r3, #15
 8002026:	4613      	mov	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	1a9b      	subs	r3, r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	3338      	adds	r3, #56	; 0x38
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	4413      	add	r3, r2
 8002034:	3304      	adds	r3, #4
 8002036:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2201      	movs	r2, #1
 800203c:	705a      	strb	r2, [r3, #1]
 800203e:	e00f      	b.n	8002060 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002040:	78fb      	ldrb	r3, [r7, #3]
 8002042:	f003 020f 	and.w	r2, r3, #15
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	1a9b      	subs	r3, r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	3304      	adds	r3, #4
 8002058:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002066:	78fb      	ldrb	r3, [r7, #3]
 8002068:	f003 030f 	and.w	r3, r3, #15
 800206c:	b2da      	uxtb	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <HAL_PCD_EP_ClrStall+0x86>
 800207c:	2302      	movs	r3, #2
 800207e:	e00e      	b.n	800209e <HAL_PCD_EP_ClrStall+0xa4>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68f9      	ldr	r1, [r7, #12]
 800208e:	4618      	mov	r0, r3
 8002090:	f003 f93f 	bl	8005312 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b08a      	sub	sp, #40	; 0x28
 80020aa:	af02      	add	r7, sp, #8
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	4613      	mov	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	1a9b      	subs	r3, r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	3338      	adds	r3, #56	; 0x38
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	3304      	adds	r3, #4
 80020cc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	699a      	ldr	r2, [r3, #24]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d901      	bls.n	80020de <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e06c      	b.n	80021b8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	695a      	ldr	r2, [r3, #20]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	69fa      	ldr	r2, [r7, #28]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d902      	bls.n	80020fa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3303      	adds	r3, #3
 80020fe:	089b      	lsrs	r3, r3, #2
 8002100:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002102:	e02b      	b.n	800215c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	695a      	ldr	r2, [r3, #20]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	69fa      	ldr	r2, [r7, #28]
 8002116:	429a      	cmp	r2, r3
 8002118:	d902      	bls.n	8002120 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	3303      	adds	r3, #3
 8002124:	089b      	lsrs	r3, r3, #2
 8002126:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	68d9      	ldr	r1, [r3, #12]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	b2da      	uxtb	r2, r3
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002138:	b2db      	uxtb	r3, r3
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	4603      	mov	r3, r0
 800213e:	6978      	ldr	r0, [r7, #20]
 8002140:	f002 ffe3 	bl	800510a <USB_WritePacket>

    ep->xfer_buff  += len;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	441a      	add	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	699a      	ldr	r2, [r3, #24]
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	441a      	add	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	015a      	lsls	r2, r3, #5
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4413      	add	r3, r2
 8002164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	b29b      	uxth	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	429a      	cmp	r2, r3
 8002170:	d809      	bhi.n	8002186 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	699a      	ldr	r2, [r3, #24]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800217a:	429a      	cmp	r2, r3
 800217c:	d203      	bcs.n	8002186 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1be      	bne.n	8002104 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	695a      	ldr	r2, [r3, #20]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	429a      	cmp	r2, r3
 8002190:	d811      	bhi.n	80021b6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	f003 030f 	and.w	r3, r3, #15
 8002198:	2201      	movs	r2, #1
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	43db      	mvns	r3, r3
 80021ac:	6939      	ldr	r1, [r7, #16]
 80021ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021b2:	4013      	ands	r3, r2
 80021b4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3720      	adds	r7, #32
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	333c      	adds	r3, #60	; 0x3c
 80021d8:	3304      	adds	r3, #4
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	015a      	lsls	r2, r3, #5
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	f040 80a0 	bne.w	8002338 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d015      	beq.n	800222e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4a72      	ldr	r2, [pc, #456]	; (80023d0 <PCD_EP_OutXfrComplete_int+0x210>)
 8002206:	4293      	cmp	r3, r2
 8002208:	f240 80dd 	bls.w	80023c6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 80d7 	beq.w	80023c6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	015a      	lsls	r2, r3, #5
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4413      	add	r3, r2
 8002220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002224:	461a      	mov	r2, r3
 8002226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800222a:	6093      	str	r3, [r2, #8]
 800222c:	e0cb      	b.n	80023c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	f003 0320 	and.w	r3, r3, #32
 8002234:	2b00      	cmp	r3, #0
 8002236:	d009      	beq.n	800224c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	015a      	lsls	r2, r3, #5
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4413      	add	r3, r2
 8002240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002244:	461a      	mov	r2, r3
 8002246:	2320      	movs	r3, #32
 8002248:	6093      	str	r3, [r2, #8]
 800224a:	e0bc      	b.n	80023c6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002252:	2b00      	cmp	r3, #0
 8002254:	f040 80b7 	bne.w	80023c6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4a5d      	ldr	r2, [pc, #372]	; (80023d0 <PCD_EP_OutXfrComplete_int+0x210>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d90f      	bls.n	8002280 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4413      	add	r3, r2
 8002272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002276:	461a      	mov	r2, r3
 8002278:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800227c:	6093      	str	r3, [r2, #8]
 800227e:	e0a2      	b.n	80023c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	4613      	mov	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	1a9b      	subs	r3, r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002292:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	0159      	lsls	r1, r3, #5
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	440b      	add	r3, r1
 800229c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80022a6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	4613      	mov	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	1a9b      	subs	r3, r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4403      	add	r3, r0
 80022b6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80022ba:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	4613      	mov	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	1a9b      	subs	r3, r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022ce:	6819      	ldr	r1, [r3, #0]
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	4613      	mov	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	1a9b      	subs	r3, r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4403      	add	r3, r0
 80022de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4419      	add	r1, r3
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	4613      	mov	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	1a9b      	subs	r3, r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4403      	add	r3, r0
 80022f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022f8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d114      	bne.n	800232a <PCD_EP_OutXfrComplete_int+0x16a>
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	4613      	mov	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	1a9b      	subs	r3, r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d108      	bne.n	800232a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002322:	461a      	mov	r2, r3
 8002324:	2101      	movs	r1, #1
 8002326:	f003 f987 	bl	8005638 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	4619      	mov	r1, r3
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f007 f971 	bl	8009618 <HAL_PCD_DataOutStageCallback>
 8002336:	e046      	b.n	80023c6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4a26      	ldr	r2, [pc, #152]	; (80023d4 <PCD_EP_OutXfrComplete_int+0x214>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d124      	bne.n	800238a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00a      	beq.n	8002360 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	015a      	lsls	r2, r3, #5
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4413      	add	r3, r2
 8002352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002356:	461a      	mov	r2, r3
 8002358:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800235c:	6093      	str	r3, [r2, #8]
 800235e:	e032      	b.n	80023c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	f003 0320 	and.w	r3, r3, #32
 8002366:	2b00      	cmp	r3, #0
 8002368:	d008      	beq.n	800237c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	015a      	lsls	r2, r3, #5
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4413      	add	r3, r2
 8002372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002376:	461a      	mov	r2, r3
 8002378:	2320      	movs	r3, #32
 800237a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	b2db      	uxtb	r3, r3
 8002380:	4619      	mov	r1, r3
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f007 f948 	bl	8009618 <HAL_PCD_DataOutStageCallback>
 8002388:	e01d      	b.n	80023c6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d114      	bne.n	80023ba <PCD_EP_OutXfrComplete_int+0x1fa>
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	4613      	mov	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	1a9b      	subs	r3, r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d108      	bne.n	80023ba <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6818      	ldr	r0, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023b2:	461a      	mov	r2, r3
 80023b4:	2100      	movs	r1, #0
 80023b6:	f003 f93f 	bl	8005638 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	4619      	mov	r1, r3
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f007 f929 	bl	8009618 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	4f54300a 	.word	0x4f54300a
 80023d4:	4f54310a 	.word	0x4f54310a

080023d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	333c      	adds	r3, #60	; 0x3c
 80023f0:	3304      	adds	r3, #4
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	015a      	lsls	r2, r3, #5
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4413      	add	r3, r2
 80023fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4a15      	ldr	r2, [pc, #84]	; (8002460 <PCD_EP_OutSetupPacket_int+0x88>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d90e      	bls.n	800242c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002414:	2b00      	cmp	r3, #0
 8002416:	d009      	beq.n	800242c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	015a      	lsls	r2, r3, #5
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4413      	add	r3, r2
 8002420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002424:	461a      	mov	r2, r3
 8002426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800242a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f007 f8e1 	bl	80095f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	4a0a      	ldr	r2, [pc, #40]	; (8002460 <PCD_EP_OutSetupPacket_int+0x88>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d90c      	bls.n	8002454 <PCD_EP_OutSetupPacket_int+0x7c>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d108      	bne.n	8002454 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800244c:	461a      	mov	r2, r3
 800244e:	2101      	movs	r1, #1
 8002450:	f003 f8f2 	bl	8005638 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	4f54300a 	.word	0x4f54300a

08002464 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	70fb      	strb	r3, [r7, #3]
 8002470:	4613      	mov	r3, r2
 8002472:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800247c:	78fb      	ldrb	r3, [r7, #3]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d107      	bne.n	8002492 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002482:	883b      	ldrh	r3, [r7, #0]
 8002484:	0419      	lsls	r1, r3, #16
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	430a      	orrs	r2, r1
 800248e:	629a      	str	r2, [r3, #40]	; 0x28
 8002490:	e028      	b.n	80024e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002498:	0c1b      	lsrs	r3, r3, #16
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	4413      	add	r3, r2
 800249e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024a0:	2300      	movs	r3, #0
 80024a2:	73fb      	strb	r3, [r7, #15]
 80024a4:	e00d      	b.n	80024c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
 80024ac:	3340      	adds	r3, #64	; 0x40
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	0c1b      	lsrs	r3, r3, #16
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	4413      	add	r3, r2
 80024ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	3301      	adds	r3, #1
 80024c0:	73fb      	strb	r3, [r7, #15]
 80024c2:	7bfa      	ldrb	r2, [r7, #15]
 80024c4:	78fb      	ldrb	r3, [r7, #3]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d3ec      	bcc.n	80024a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80024cc:	883b      	ldrh	r3, [r7, #0]
 80024ce:	0418      	lsls	r0, r3, #16
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6819      	ldr	r1, [r3, #0]
 80024d4:	78fb      	ldrb	r3, [r7, #3]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	4302      	orrs	r2, r0
 80024dc:	3340      	adds	r3, #64	; 0x40
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3714      	adds	r7, #20
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	460b      	mov	r3, r1
 80024fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	887a      	ldrh	r2, [r7, #2]
 8002504:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002546:	f043 0303 	orr.w	r3, r3, #3
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0cc      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002570:	4b68      	ldr	r3, [pc, #416]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d90c      	bls.n	8002598 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257e:	4b65      	ldr	r3, [pc, #404]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002586:	4b63      	ldr	r3, [pc, #396]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d001      	beq.n	8002598 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e0b8      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d020      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025b0:	4b59      	ldr	r3, [pc, #356]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	4a58      	ldr	r2, [pc, #352]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025c8:	4b53      	ldr	r3, [pc, #332]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	4a52      	ldr	r2, [pc, #328]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d4:	4b50      	ldr	r3, [pc, #320]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	494d      	ldr	r1, [pc, #308]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d044      	beq.n	800267c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d107      	bne.n	800260a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fa:	4b47      	ldr	r3, [pc, #284]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d119      	bne.n	800263a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e07f      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d003      	beq.n	800261a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002616:	2b03      	cmp	r3, #3
 8002618:	d107      	bne.n	800262a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261a:	4b3f      	ldr	r3, [pc, #252]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d109      	bne.n	800263a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e06f      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262a:	4b3b      	ldr	r3, [pc, #236]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e067      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800263a:	4b37      	ldr	r3, [pc, #220]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f023 0203 	bic.w	r2, r3, #3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	4934      	ldr	r1, [pc, #208]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 8002648:	4313      	orrs	r3, r2
 800264a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800264c:	f7fe fade 	bl	8000c0c <HAL_GetTick>
 8002650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002652:	e00a      	b.n	800266a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002654:	f7fe fada 	bl	8000c0c <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002662:	4293      	cmp	r3, r2
 8002664:	d901      	bls.n	800266a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e04f      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266a:	4b2b      	ldr	r3, [pc, #172]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 020c 	and.w	r2, r3, #12
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	429a      	cmp	r2, r3
 800267a:	d1eb      	bne.n	8002654 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800267c:	4b25      	ldr	r3, [pc, #148]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 030f 	and.w	r3, r3, #15
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d20c      	bcs.n	80026a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	4b22      	ldr	r3, [pc, #136]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002692:	4b20      	ldr	r3, [pc, #128]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d001      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e032      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026b0:	4b19      	ldr	r3, [pc, #100]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	4916      	ldr	r1, [pc, #88]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d009      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ce:	4b12      	ldr	r3, [pc, #72]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	490e      	ldr	r1, [pc, #56]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026e2:	f000 fbb1 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 80026e6:	4602      	mov	r2, r0
 80026e8:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	091b      	lsrs	r3, r3, #4
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	490a      	ldr	r1, [pc, #40]	; (800271c <HAL_RCC_ClockConfig+0x1c0>)
 80026f4:	5ccb      	ldrb	r3, [r1, r3]
 80026f6:	fa22 f303 	lsr.w	r3, r2, r3
 80026fa:	4a09      	ldr	r2, [pc, #36]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80026fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026fe:	4b09      	ldr	r3, [pc, #36]	; (8002724 <HAL_RCC_ClockConfig+0x1c8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7fe f91a 	bl	800093c <HAL_InitTick>

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40023c00 	.word	0x40023c00
 8002718:	40023800 	.word	0x40023800
 800271c:	08009ecc 	.word	0x08009ecc
 8002720:	20000000 	.word	0x20000000
 8002724:	20000004 	.word	0x20000004

08002728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800272c:	4b03      	ldr	r3, [pc, #12]	; (800273c <HAL_RCC_GetHCLKFreq+0x14>)
 800272e:	681b      	ldr	r3, [r3, #0]
}
 8002730:	4618      	mov	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	20000000 	.word	0x20000000

08002740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002744:	f7ff fff0 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 8002748:	4602      	mov	r2, r0
 800274a:	4b05      	ldr	r3, [pc, #20]	; (8002760 <HAL_RCC_GetPCLK1Freq+0x20>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	0a9b      	lsrs	r3, r3, #10
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	4903      	ldr	r1, [pc, #12]	; (8002764 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002756:	5ccb      	ldrb	r3, [r1, r3]
 8002758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800275c:	4618      	mov	r0, r3
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40023800 	.word	0x40023800
 8002764:	08009edc 	.word	0x08009edc

08002768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800276c:	f7ff ffdc 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 8002770:	4602      	mov	r2, r0
 8002772:	4b05      	ldr	r3, [pc, #20]	; (8002788 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	0b5b      	lsrs	r3, r3, #13
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	4903      	ldr	r1, [pc, #12]	; (800278c <HAL_RCC_GetPCLK2Freq+0x24>)
 800277e:	5ccb      	ldrb	r3, [r1, r3]
 8002780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002784:	4618      	mov	r0, r3
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40023800 	.word	0x40023800
 800278c:	08009edc 	.word	0x08009edc

08002790 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	220f      	movs	r2, #15
 800279e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027a0:	4b12      	ldr	r3, [pc, #72]	; (80027ec <HAL_RCC_GetClockConfig+0x5c>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 0203 	and.w	r2, r3, #3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027ac:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <HAL_RCC_GetClockConfig+0x5c>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027b8:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <HAL_RCC_GetClockConfig+0x5c>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80027c4:	4b09      	ldr	r3, [pc, #36]	; (80027ec <HAL_RCC_GetClockConfig+0x5c>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	08db      	lsrs	r3, r3, #3
 80027ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027d2:	4b07      	ldr	r3, [pc, #28]	; (80027f0 <HAL_RCC_GetClockConfig+0x60>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 020f 	and.w	r2, r3, #15
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	601a      	str	r2, [r3, #0]
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	40023800 	.word	0x40023800
 80027f0:	40023c00 	.word	0x40023c00

080027f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08c      	sub	sp, #48	; 0x30
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	d010      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800282c:	4b6f      	ldr	r3, [pc, #444]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800282e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002832:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283a:	496c      	ldr	r1, [pc, #432]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800283c:	4313      	orrs	r3, r2
 800283e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800284a:	2301      	movs	r3, #1
 800284c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d010      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800285a:	4b64      	ldr	r3, [pc, #400]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800285c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002860:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002868:	4960      	ldr	r1, [pc, #384]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002878:	2301      	movs	r3, #1
 800287a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d017      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002888:	4b58      	ldr	r3, [pc, #352]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800288a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800288e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	4955      	ldr	r1, [pc, #340]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028a6:	d101      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80028a8:	2301      	movs	r3, #1
 80028aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80028b4:	2301      	movs	r3, #1
 80028b6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d017      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028c4:	4b49      	ldr	r3, [pc, #292]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d2:	4946      	ldr	r1, [pc, #280]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028e2:	d101      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80028e4:	2301      	movs	r3, #1
 80028e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80028f0:	2301      	movs	r3, #1
 80028f2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0320 	and.w	r3, r3, #32
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 808a 	beq.w	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	4b39      	ldr	r3, [pc, #228]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	4a38      	ldr	r2, [pc, #224]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800290c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002910:	6413      	str	r3, [r2, #64]	; 0x40
 8002912:	4b36      	ldr	r3, [pc, #216]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291a:	60bb      	str	r3, [r7, #8]
 800291c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800291e:	4b34      	ldr	r3, [pc, #208]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a33      	ldr	r2, [pc, #204]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002928:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800292a:	f7fe f96f 	bl	8000c0c <HAL_GetTick>
 800292e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002930:	e008      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002932:	f7fe f96b 	bl	8000c0c <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e278      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002944:	4b2a      	ldr	r3, [pc, #168]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0f0      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002950:	4b26      	ldr	r3, [pc, #152]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002954:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002958:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d02f      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002968:	6a3a      	ldr	r2, [r7, #32]
 800296a:	429a      	cmp	r2, r3
 800296c:	d028      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800296e:	4b1f      	ldr	r3, [pc, #124]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002976:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002978:	4b1e      	ldr	r3, [pc, #120]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800297a:	2201      	movs	r2, #1
 800297c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800297e:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002984:	4a19      	ldr	r2, [pc, #100]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002986:	6a3b      	ldr	r3, [r7, #32]
 8002988:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800298a:	4b18      	ldr	r3, [pc, #96]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800298c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b01      	cmp	r3, #1
 8002994:	d114      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002996:	f7fe f939 	bl	8000c0c <HAL_GetTick>
 800299a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299c:	e00a      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800299e:	f7fe f935 	bl	8000c0c <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e240      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b4:	4b0d      	ldr	r3, [pc, #52]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0ee      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029cc:	d114      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80029ce:	4b07      	ldr	r3, [pc, #28]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80029de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e2:	4902      	ldr	r1, [pc, #8]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	608b      	str	r3, [r1, #8]
 80029e8:	e00c      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80029ea:	bf00      	nop
 80029ec:	40023800 	.word	0x40023800
 80029f0:	40007000 	.word	0x40007000
 80029f4:	42470e40 	.word	0x42470e40
 80029f8:	4b4a      	ldr	r3, [pc, #296]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	4a49      	ldr	r2, [pc, #292]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029fe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a02:	6093      	str	r3, [r2, #8]
 8002a04:	4b47      	ldr	r3, [pc, #284]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a10:	4944      	ldr	r1, [pc, #272]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0310 	and.w	r3, r3, #16
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d004      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002a28:	4b3f      	ldr	r3, [pc, #252]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002a2a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00a      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002a38:	4b3a      	ldr	r3, [pc, #232]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a46:	4937      	ldr	r1, [pc, #220]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00a      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a5a:	4b32      	ldr	r3, [pc, #200]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a60:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a68:	492e      	ldr	r1, [pc, #184]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d011      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a7c:	4b29      	ldr	r3, [pc, #164]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a82:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8a:	4926      	ldr	r1, [pc, #152]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a9a:	d101      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00a      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002aac:	4b1d      	ldr	r3, [pc, #116]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aba:	491a      	ldr	r1, [pc, #104]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d011      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002ace:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ad4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002adc:	4911      	ldr	r1, [pc, #68]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aec:	d101      	bne.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002aee:	2301      	movs	r3, #1
 8002af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d005      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b00:	f040 80ff 	bne.w	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b04:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b0a:	f7fe f87f 	bl	8000c0c <HAL_GetTick>
 8002b0e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b10:	e00e      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b12:	f7fe f87b 	bl	8000c0c <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d907      	bls.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e188      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002b24:	40023800 	.word	0x40023800
 8002b28:	424711e0 	.word	0x424711e0
 8002b2c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b30:	4b7e      	ldr	r3, [pc, #504]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1ea      	bne.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d003      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d009      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d028      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d124      	bne.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002b64:	4b71      	ldr	r3, [pc, #452]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b6a:	0c1b      	lsrs	r3, r3, #16
 8002b6c:	f003 0303 	and.w	r3, r3, #3
 8002b70:	3301      	adds	r3, #1
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b76:	4b6d      	ldr	r3, [pc, #436]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b7c:	0e1b      	lsrs	r3, r3, #24
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	019b      	lsls	r3, r3, #6
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	085b      	lsrs	r3, r3, #1
 8002b94:	3b01      	subs	r3, #1
 8002b96:	041b      	lsls	r3, r3, #16
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	061b      	lsls	r3, r3, #24
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	071b      	lsls	r3, r3, #28
 8002ba6:	4961      	ldr	r1, [pc, #388]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d004      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bc2:	d00a      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d035      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bd8:	d130      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002bda:	4b54      	ldr	r3, [pc, #336]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002be0:	0c1b      	lsrs	r3, r3, #16
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	3301      	adds	r3, #1
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bec:	4b4f      	ldr	r3, [pc, #316]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bf2:	0f1b      	lsrs	r3, r3, #28
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	019b      	lsls	r3, r3, #6
 8002c04:	431a      	orrs	r2, r3
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	085b      	lsrs	r3, r3, #1
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	041b      	lsls	r3, r3, #16
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	061b      	lsls	r3, r3, #24
 8002c16:	431a      	orrs	r2, r3
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	071b      	lsls	r3, r3, #28
 8002c1c:	4943      	ldr	r1, [pc, #268]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c24:	4b41      	ldr	r3, [pc, #260]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c2a:	f023 021f 	bic.w	r2, r3, #31
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c32:	3b01      	subs	r3, #1
 8002c34:	493d      	ldr	r1, [pc, #244]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d029      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c50:	d124      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002c52:	4b36      	ldr	r3, [pc, #216]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c58:	0c1b      	lsrs	r3, r3, #16
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	3301      	adds	r3, #1
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c64:	4b31      	ldr	r3, [pc, #196]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c6a:	0f1b      	lsrs	r3, r3, #28
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	019b      	lsls	r3, r3, #6
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	085b      	lsrs	r3, r3, #1
 8002c84:	3b01      	subs	r3, #1
 8002c86:	041b      	lsls	r3, r3, #16
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	061b      	lsls	r3, r3, #24
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	071b      	lsls	r3, r3, #28
 8002c94:	4925      	ldr	r1, [pc, #148]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d016      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	019b      	lsls	r3, r3, #6
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	085b      	lsrs	r3, r3, #1
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	041b      	lsls	r3, r3, #16
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	061b      	lsls	r3, r3, #24
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	071b      	lsls	r3, r3, #28
 8002cce:	4917      	ldr	r1, [pc, #92]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002cd6:	4b16      	ldr	r3, [pc, #88]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002cdc:	f7fd ff96 	bl	8000c0c <HAL_GetTick>
 8002ce0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ce4:	f7fd ff92 	bl	8000c0c <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e09f      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cf6:	4b0d      	ldr	r3, [pc, #52]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	f040 8095 	bne.w	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d0a:	4b0a      	ldr	r3, [pc, #40]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d10:	f7fd ff7c 	bl	8000c0c <HAL_GetTick>
 8002d14:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d16:	e00f      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002d18:	f7fd ff78 	bl	8000c0c <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d908      	bls.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e085      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002d2a:	bf00      	nop
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	42470068 	.word	0x42470068
 8002d34:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d38:	4b41      	ldr	r3, [pc, #260]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d44:	d0e8      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0304 	and.w	r3, r3, #4
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d009      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d02b      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d127      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002d6e:	4b34      	ldr	r3, [pc, #208]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d74:	0c1b      	lsrs	r3, r3, #16
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	699a      	ldr	r2, [r3, #24]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	019b      	lsls	r3, r3, #6
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	085b      	lsrs	r3, r3, #1
 8002d90:	3b01      	subs	r3, #1
 8002d92:	041b      	lsls	r3, r3, #16
 8002d94:	431a      	orrs	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	061b      	lsls	r3, r3, #24
 8002d9c:	4928      	ldr	r1, [pc, #160]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002da4:	4b26      	ldr	r3, [pc, #152]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002da6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002daa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db2:	3b01      	subs	r3, #1
 8002db4:	021b      	lsls	r3, r3, #8
 8002db6:	4922      	ldr	r1, [pc, #136]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d01d      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dd2:	d118      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002dd4:	4b1a      	ldr	r3, [pc, #104]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dda:	0e1b      	lsrs	r3, r3, #24
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699a      	ldr	r2, [r3, #24]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	019b      	lsls	r3, r3, #6
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	085b      	lsrs	r3, r3, #1
 8002df4:	3b01      	subs	r3, #1
 8002df6:	041b      	lsls	r3, r3, #16
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	061b      	lsls	r3, r3, #24
 8002dfe:	4910      	ldr	r1, [pc, #64]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e06:	4b0f      	ldr	r3, [pc, #60]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e0c:	f7fd fefe 	bl	8000c0c <HAL_GetTick>
 8002e10:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002e14:	f7fd fefa 	bl	8000c0c <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e007      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e26:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e32:	d1ef      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3730      	adds	r7, #48	; 0x30
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40023800 	.word	0x40023800
 8002e44:	42470070 	.word	0x42470070

08002e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e4c:	b088      	sub	sp, #32
 8002e4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e64:	4bce      	ldr	r3, [pc, #824]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 030c 	and.w	r3, r3, #12
 8002e6c:	2b0c      	cmp	r3, #12
 8002e6e:	f200 818d 	bhi.w	800318c <HAL_RCC_GetSysClockFreq+0x344>
 8002e72:	a201      	add	r2, pc, #4	; (adr r2, 8002e78 <HAL_RCC_GetSysClockFreq+0x30>)
 8002e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e78:	08002ead 	.word	0x08002ead
 8002e7c:	0800318d 	.word	0x0800318d
 8002e80:	0800318d 	.word	0x0800318d
 8002e84:	0800318d 	.word	0x0800318d
 8002e88:	08002eb3 	.word	0x08002eb3
 8002e8c:	0800318d 	.word	0x0800318d
 8002e90:	0800318d 	.word	0x0800318d
 8002e94:	0800318d 	.word	0x0800318d
 8002e98:	08002eb9 	.word	0x08002eb9
 8002e9c:	0800318d 	.word	0x0800318d
 8002ea0:	0800318d 	.word	0x0800318d
 8002ea4:	0800318d 	.word	0x0800318d
 8002ea8:	0800302d 	.word	0x0800302d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002eac:	4bbd      	ldr	r3, [pc, #756]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002eae:	61bb      	str	r3, [r7, #24]
       break;
 8002eb0:	e16f      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eb2:	4bbd      	ldr	r3, [pc, #756]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x360>)
 8002eb4:	61bb      	str	r3, [r7, #24]
      break;
 8002eb6:	e16c      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eb8:	4bb9      	ldr	r3, [pc, #740]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ec0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ec2:	4bb7      	ldr	r3, [pc, #732]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d053      	beq.n	8002f76 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ece:	4bb4      	ldr	r3, [pc, #720]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	099b      	lsrs	r3, r3, #6
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	f04f 0300 	mov.w	r3, #0
 8002eda:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ede:	f04f 0100 	mov.w	r1, #0
 8002ee2:	ea02 0400 	and.w	r4, r2, r0
 8002ee6:	603c      	str	r4, [r7, #0]
 8002ee8:	400b      	ands	r3, r1
 8002eea:	607b      	str	r3, [r7, #4]
 8002eec:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	4629      	mov	r1, r5
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	014b      	lsls	r3, r1, #5
 8002efe:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f02:	0142      	lsls	r2, r0, #5
 8002f04:	4610      	mov	r0, r2
 8002f06:	4619      	mov	r1, r3
 8002f08:	4623      	mov	r3, r4
 8002f0a:	1ac0      	subs	r0, r0, r3
 8002f0c:	462b      	mov	r3, r5
 8002f0e:	eb61 0103 	sbc.w	r1, r1, r3
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	018b      	lsls	r3, r1, #6
 8002f1c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f20:	0182      	lsls	r2, r0, #6
 8002f22:	1a12      	subs	r2, r2, r0
 8002f24:	eb63 0301 	sbc.w	r3, r3, r1
 8002f28:	f04f 0000 	mov.w	r0, #0
 8002f2c:	f04f 0100 	mov.w	r1, #0
 8002f30:	00d9      	lsls	r1, r3, #3
 8002f32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f36:	00d0      	lsls	r0, r2, #3
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4621      	mov	r1, r4
 8002f3e:	1852      	adds	r2, r2, r1
 8002f40:	4629      	mov	r1, r5
 8002f42:	eb43 0101 	adc.w	r1, r3, r1
 8002f46:	460b      	mov	r3, r1
 8002f48:	f04f 0000 	mov.w	r0, #0
 8002f4c:	f04f 0100 	mov.w	r1, #0
 8002f50:	0259      	lsls	r1, r3, #9
 8002f52:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002f56:	0250      	lsls	r0, r2, #9
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	4619      	mov	r1, r3
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	461a      	mov	r2, r3
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	f7fd f952 	bl	8000210 <__aeabi_uldivmod>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4613      	mov	r3, r2
 8002f72:	61fb      	str	r3, [r7, #28]
 8002f74:	e04c      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f76:	4b8a      	ldr	r3, [pc, #552]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	099b      	lsrs	r3, r3, #6
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f86:	f04f 0100 	mov.w	r1, #0
 8002f8a:	ea02 0a00 	and.w	sl, r2, r0
 8002f8e:	ea03 0b01 	and.w	fp, r3, r1
 8002f92:	4650      	mov	r0, sl
 8002f94:	4659      	mov	r1, fp
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	014b      	lsls	r3, r1, #5
 8002fa0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fa4:	0142      	lsls	r2, r0, #5
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	4619      	mov	r1, r3
 8002faa:	ebb0 000a 	subs.w	r0, r0, sl
 8002fae:	eb61 010b 	sbc.w	r1, r1, fp
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	f04f 0300 	mov.w	r3, #0
 8002fba:	018b      	lsls	r3, r1, #6
 8002fbc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002fc0:	0182      	lsls	r2, r0, #6
 8002fc2:	1a12      	subs	r2, r2, r0
 8002fc4:	eb63 0301 	sbc.w	r3, r3, r1
 8002fc8:	f04f 0000 	mov.w	r0, #0
 8002fcc:	f04f 0100 	mov.w	r1, #0
 8002fd0:	00d9      	lsls	r1, r3, #3
 8002fd2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fd6:	00d0      	lsls	r0, r2, #3
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	eb12 020a 	adds.w	r2, r2, sl
 8002fe0:	eb43 030b 	adc.w	r3, r3, fp
 8002fe4:	f04f 0000 	mov.w	r0, #0
 8002fe8:	f04f 0100 	mov.w	r1, #0
 8002fec:	0299      	lsls	r1, r3, #10
 8002fee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002ff2:	0290      	lsls	r0, r2, #10
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	461a      	mov	r2, r3
 8003000:	f04f 0300 	mov.w	r3, #0
 8003004:	f7fd f904 	bl	8000210 <__aeabi_uldivmod>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	4613      	mov	r3, r2
 800300e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003010:	4b63      	ldr	r3, [pc, #396]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	0c1b      	lsrs	r3, r3, #16
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	3301      	adds	r3, #1
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003020:	69fa      	ldr	r2, [r7, #28]
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	fbb2 f3f3 	udiv	r3, r2, r3
 8003028:	61bb      	str	r3, [r7, #24]
      break;
 800302a:	e0b2      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800302c:	4b5c      	ldr	r3, [pc, #368]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x358>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003034:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003036:	4b5a      	ldr	r3, [pc, #360]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d04d      	beq.n	80030de <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003042:	4b57      	ldr	r3, [pc, #348]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	099b      	lsrs	r3, r3, #6
 8003048:	461a      	mov	r2, r3
 800304a:	f04f 0300 	mov.w	r3, #0
 800304e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003052:	f04f 0100 	mov.w	r1, #0
 8003056:	ea02 0800 	and.w	r8, r2, r0
 800305a:	ea03 0901 	and.w	r9, r3, r1
 800305e:	4640      	mov	r0, r8
 8003060:	4649      	mov	r1, r9
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	014b      	lsls	r3, r1, #5
 800306c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003070:	0142      	lsls	r2, r0, #5
 8003072:	4610      	mov	r0, r2
 8003074:	4619      	mov	r1, r3
 8003076:	ebb0 0008 	subs.w	r0, r0, r8
 800307a:	eb61 0109 	sbc.w	r1, r1, r9
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	018b      	lsls	r3, r1, #6
 8003088:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800308c:	0182      	lsls	r2, r0, #6
 800308e:	1a12      	subs	r2, r2, r0
 8003090:	eb63 0301 	sbc.w	r3, r3, r1
 8003094:	f04f 0000 	mov.w	r0, #0
 8003098:	f04f 0100 	mov.w	r1, #0
 800309c:	00d9      	lsls	r1, r3, #3
 800309e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030a2:	00d0      	lsls	r0, r2, #3
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	eb12 0208 	adds.w	r2, r2, r8
 80030ac:	eb43 0309 	adc.w	r3, r3, r9
 80030b0:	f04f 0000 	mov.w	r0, #0
 80030b4:	f04f 0100 	mov.w	r1, #0
 80030b8:	0259      	lsls	r1, r3, #9
 80030ba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80030be:	0250      	lsls	r0, r2, #9
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4610      	mov	r0, r2
 80030c6:	4619      	mov	r1, r3
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	461a      	mov	r2, r3
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	f7fd f89e 	bl	8000210 <__aeabi_uldivmod>
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	4613      	mov	r3, r2
 80030da:	61fb      	str	r3, [r7, #28]
 80030dc:	e04a      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030de:	4b30      	ldr	r3, [pc, #192]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	099b      	lsrs	r3, r3, #6
 80030e4:	461a      	mov	r2, r3
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80030ee:	f04f 0100 	mov.w	r1, #0
 80030f2:	ea02 0400 	and.w	r4, r2, r0
 80030f6:	ea03 0501 	and.w	r5, r3, r1
 80030fa:	4620      	mov	r0, r4
 80030fc:	4629      	mov	r1, r5
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	f04f 0300 	mov.w	r3, #0
 8003106:	014b      	lsls	r3, r1, #5
 8003108:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800310c:	0142      	lsls	r2, r0, #5
 800310e:	4610      	mov	r0, r2
 8003110:	4619      	mov	r1, r3
 8003112:	1b00      	subs	r0, r0, r4
 8003114:	eb61 0105 	sbc.w	r1, r1, r5
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	f04f 0300 	mov.w	r3, #0
 8003120:	018b      	lsls	r3, r1, #6
 8003122:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003126:	0182      	lsls	r2, r0, #6
 8003128:	1a12      	subs	r2, r2, r0
 800312a:	eb63 0301 	sbc.w	r3, r3, r1
 800312e:	f04f 0000 	mov.w	r0, #0
 8003132:	f04f 0100 	mov.w	r1, #0
 8003136:	00d9      	lsls	r1, r3, #3
 8003138:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800313c:	00d0      	lsls	r0, r2, #3
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	1912      	adds	r2, r2, r4
 8003144:	eb45 0303 	adc.w	r3, r5, r3
 8003148:	f04f 0000 	mov.w	r0, #0
 800314c:	f04f 0100 	mov.w	r1, #0
 8003150:	0299      	lsls	r1, r3, #10
 8003152:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003156:	0290      	lsls	r0, r2, #10
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	4610      	mov	r0, r2
 800315e:	4619      	mov	r1, r3
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	461a      	mov	r2, r3
 8003164:	f04f 0300 	mov.w	r3, #0
 8003168:	f7fd f852 	bl	8000210 <__aeabi_uldivmod>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4613      	mov	r3, r2
 8003172:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003174:	4b0a      	ldr	r3, [pc, #40]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	0f1b      	lsrs	r3, r3, #28
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003180:	69fa      	ldr	r2, [r7, #28]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	fbb2 f3f3 	udiv	r3, r2, r3
 8003188:	61bb      	str	r3, [r7, #24]
      break;
 800318a:	e002      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800318c:	4b05      	ldr	r3, [pc, #20]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 800318e:	61bb      	str	r3, [r7, #24]
      break;
 8003190:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003192:	69bb      	ldr	r3, [r7, #24]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3720      	adds	r7, #32
 8003198:	46bd      	mov	sp, r7
 800319a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800319e:	bf00      	nop
 80031a0:	40023800 	.word	0x40023800
 80031a4:	00f42400 	.word	0x00f42400
 80031a8:	007a1200 	.word	0x007a1200

080031ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e28d      	b.n	80036da <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 8083 	beq.w	80032d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031cc:	4b94      	ldr	r3, [pc, #592]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 030c 	and.w	r3, r3, #12
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d019      	beq.n	800320c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031d8:	4b91      	ldr	r3, [pc, #580]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d106      	bne.n	80031f2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031e4:	4b8e      	ldr	r3, [pc, #568]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031f0:	d00c      	beq.n	800320c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031f2:	4b8b      	ldr	r3, [pc, #556]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031fa:	2b0c      	cmp	r3, #12
 80031fc:	d112      	bne.n	8003224 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031fe:	4b88      	ldr	r3, [pc, #544]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003206:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800320a:	d10b      	bne.n	8003224 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800320c:	4b84      	ldr	r3, [pc, #528]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d05b      	beq.n	80032d0 <HAL_RCC_OscConfig+0x124>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d157      	bne.n	80032d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e25a      	b.n	80036da <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800322c:	d106      	bne.n	800323c <HAL_RCC_OscConfig+0x90>
 800322e:	4b7c      	ldr	r3, [pc, #496]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a7b      	ldr	r2, [pc, #492]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 8003234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	e01d      	b.n	8003278 <HAL_RCC_OscConfig+0xcc>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003244:	d10c      	bne.n	8003260 <HAL_RCC_OscConfig+0xb4>
 8003246:	4b76      	ldr	r3, [pc, #472]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a75      	ldr	r2, [pc, #468]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 800324c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	4b73      	ldr	r3, [pc, #460]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a72      	ldr	r2, [pc, #456]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 8003258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	e00b      	b.n	8003278 <HAL_RCC_OscConfig+0xcc>
 8003260:	4b6f      	ldr	r3, [pc, #444]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a6e      	ldr	r2, [pc, #440]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 8003266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	4b6c      	ldr	r3, [pc, #432]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a6b      	ldr	r2, [pc, #428]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 8003272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003276:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d013      	beq.n	80032a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003280:	f7fd fcc4 	bl	8000c0c <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003288:	f7fd fcc0 	bl	8000c0c <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b64      	cmp	r3, #100	; 0x64
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e21f      	b.n	80036da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329a:	4b61      	ldr	r3, [pc, #388]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f0      	beq.n	8003288 <HAL_RCC_OscConfig+0xdc>
 80032a6:	e014      	b.n	80032d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a8:	f7fd fcb0 	bl	8000c0c <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032b0:	f7fd fcac 	bl	8000c0c <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b64      	cmp	r3, #100	; 0x64
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e20b      	b.n	80036da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c2:	4b57      	ldr	r3, [pc, #348]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0x104>
 80032ce:	e000      	b.n	80032d2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d06f      	beq.n	80033be <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032de:	4b50      	ldr	r3, [pc, #320]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d017      	beq.n	800331a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032ea:	4b4d      	ldr	r3, [pc, #308]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032f2:	2b08      	cmp	r3, #8
 80032f4:	d105      	bne.n	8003302 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032f6:	4b4a      	ldr	r3, [pc, #296]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00b      	beq.n	800331a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003302:	4b47      	ldr	r3, [pc, #284]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800330a:	2b0c      	cmp	r3, #12
 800330c:	d11c      	bne.n	8003348 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800330e:	4b44      	ldr	r3, [pc, #272]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d116      	bne.n	8003348 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331a:	4b41      	ldr	r3, [pc, #260]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d005      	beq.n	8003332 <HAL_RCC_OscConfig+0x186>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d001      	beq.n	8003332 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e1d3      	b.n	80036da <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003332:	4b3b      	ldr	r3, [pc, #236]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	4937      	ldr	r1, [pc, #220]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 8003342:	4313      	orrs	r3, r2
 8003344:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003346:	e03a      	b.n	80033be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d020      	beq.n	8003392 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003350:	4b34      	ldr	r3, [pc, #208]	; (8003424 <HAL_RCC_OscConfig+0x278>)
 8003352:	2201      	movs	r2, #1
 8003354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003356:	f7fd fc59 	bl	8000c0c <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800335e:	f7fd fc55 	bl	8000c0c <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e1b4      	b.n	80036da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003370:	4b2b      	ldr	r3, [pc, #172]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0f0      	beq.n	800335e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337c:	4b28      	ldr	r3, [pc, #160]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	4925      	ldr	r1, [pc, #148]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 800338c:	4313      	orrs	r3, r2
 800338e:	600b      	str	r3, [r1, #0]
 8003390:	e015      	b.n	80033be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003392:	4b24      	ldr	r3, [pc, #144]	; (8003424 <HAL_RCC_OscConfig+0x278>)
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003398:	f7fd fc38 	bl	8000c0c <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033a0:	f7fd fc34 	bl	8000c0c <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e193      	b.n	80036da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033b2:	4b1b      	ldr	r3, [pc, #108]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f0      	bne.n	80033a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d036      	beq.n	8003438 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d016      	beq.n	8003400 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033d2:	4b15      	ldr	r3, [pc, #84]	; (8003428 <HAL_RCC_OscConfig+0x27c>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d8:	f7fd fc18 	bl	8000c0c <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033e0:	f7fd fc14 	bl	8000c0c <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e173      	b.n	80036da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033f2:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 80033f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0x234>
 80033fe:	e01b      	b.n	8003438 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003400:	4b09      	ldr	r3, [pc, #36]	; (8003428 <HAL_RCC_OscConfig+0x27c>)
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003406:	f7fd fc01 	bl	8000c0c <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800340c:	e00e      	b.n	800342c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800340e:	f7fd fbfd 	bl	8000c0c <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d907      	bls.n	800342c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e15c      	b.n	80036da <HAL_RCC_OscConfig+0x52e>
 8003420:	40023800 	.word	0x40023800
 8003424:	42470000 	.word	0x42470000
 8003428:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800342c:	4b8a      	ldr	r3, [pc, #552]	; (8003658 <HAL_RCC_OscConfig+0x4ac>)
 800342e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1ea      	bne.n	800340e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 8097 	beq.w	8003574 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003446:	2300      	movs	r3, #0
 8003448:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800344a:	4b83      	ldr	r3, [pc, #524]	; (8003658 <HAL_RCC_OscConfig+0x4ac>)
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10f      	bne.n	8003476 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003456:	2300      	movs	r3, #0
 8003458:	60bb      	str	r3, [r7, #8]
 800345a:	4b7f      	ldr	r3, [pc, #508]	; (8003658 <HAL_RCC_OscConfig+0x4ac>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	4a7e      	ldr	r2, [pc, #504]	; (8003658 <HAL_RCC_OscConfig+0x4ac>)
 8003460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003464:	6413      	str	r3, [r2, #64]	; 0x40
 8003466:	4b7c      	ldr	r3, [pc, #496]	; (8003658 <HAL_RCC_OscConfig+0x4ac>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346e:	60bb      	str	r3, [r7, #8]
 8003470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003472:	2301      	movs	r3, #1
 8003474:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003476:	4b79      	ldr	r3, [pc, #484]	; (800365c <HAL_RCC_OscConfig+0x4b0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347e:	2b00      	cmp	r3, #0
 8003480:	d118      	bne.n	80034b4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003482:	4b76      	ldr	r3, [pc, #472]	; (800365c <HAL_RCC_OscConfig+0x4b0>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a75      	ldr	r2, [pc, #468]	; (800365c <HAL_RCC_OscConfig+0x4b0>)
 8003488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800348c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800348e:	f7fd fbbd 	bl	8000c0c <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003496:	f7fd fbb9 	bl	8000c0c <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e118      	b.n	80036da <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a8:	4b6c      	ldr	r3, [pc, #432]	; (800365c <HAL_RCC_OscConfig+0x4b0>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d106      	bne.n	80034ca <HAL_RCC_OscConfig+0x31e>
 80034bc:	4b66      	ldr	r3, [pc, #408]	; (8003658 <HAL_RCC_OscConfig+0x4ac>)
 80034be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c0:	4a65      	ldr	r2, [pc, #404]	; (8003658 <HAL_RCC_OscConfig+0x4ac>)
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	6713      	str	r3, [r2, #112]	; 0x70
 80034c8:	e01c      	b.n	8003504 <HAL_RCC_OscConfig+0x358>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	2b05      	cmp	r3, #5
 80034d0:	d10c      	bne.n	80034ec <HAL_RCC_OscConfig+0x340>
 80034d2:	4b61      	ldr	r3, [pc, #388]	; (8003658 <HAL_RCC_OscConfig+0x4ac>)
 80034d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d6:	4a60      	ldr	r2, [pc, #384]	; (8003658 <HAL_RCC_OscConfig+0x4ac>)
 80034d8:	f043 0304 	orr.w	r3, r3, #4
 80034dc:	6713      	str	r3, [r2, #112]	; 0x70
 80034de:	4b5e      	ldr	r3, [pc, #376]	; (8003658 <HAL_RCC_OscConfig+0x4ac>)
 80034e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e2:	4a5d      	ldr	r2, [pc, #372]	; (8003658 <HAL_RCC_OscConfig+0x4ac>)
 80034e4:	f043 0301 	orr.w	r3, r3, #1
 80034e8:	6713      	str	r3, [r2, #112]	; 0x70
 80034ea:	e00b      	b.n	8003504 <HAL_RCC_OscConfig+0x358>
 80034ec:	4b5a      	ldr	r3, [pc, #360]	; (8003658 <HAL_RCC_OscConfig+0x4ac>)
 80034ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f0:	4a59      	ldr	r2, [pc, #356]	; (8003658 <HAL_RCC_OscConfig+0x4ac>)
 80034f2:	f023 0301 	bic.w	r3, r3, #1
 80034f6:	6713      	str	r3, [r2, #112]	; 0x70
 80034f8:	4b57      	ldr	r3, [pc, #348]	; (8003658 <HAL_RCC_OscConfig+0x4ac>)
 80034fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fc:	4a56      	ldr	r2, [pc, #344]	; (8003658 <HAL_RCC_OscConfig+0x4ac>)
 80034fe:	f023 0304 	bic.w	r3, r3, #4
 8003502:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d015      	beq.n	8003538 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350c:	f7fd fb7e 	bl	8000c0c <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003512:	e00a      	b.n	800352a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003514:	f7fd fb7a 	bl	8000c0c <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003522:	4293      	cmp	r3, r2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e0d7      	b.n	80036da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800352a:	4b4b      	ldr	r3, [pc, #300]	; (8003658 <HAL_RCC_OscConfig+0x4ac>)
 800352c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0ee      	beq.n	8003514 <HAL_RCC_OscConfig+0x368>
 8003536:	e014      	b.n	8003562 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003538:	f7fd fb68 	bl	8000c0c <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800353e:	e00a      	b.n	8003556 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003540:	f7fd fb64 	bl	8000c0c <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	f241 3288 	movw	r2, #5000	; 0x1388
 800354e:	4293      	cmp	r3, r2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e0c1      	b.n	80036da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003556:	4b40      	ldr	r3, [pc, #256]	; (8003658 <HAL_RCC_OscConfig+0x4ac>)
 8003558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1ee      	bne.n	8003540 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003562:	7dfb      	ldrb	r3, [r7, #23]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d105      	bne.n	8003574 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003568:	4b3b      	ldr	r3, [pc, #236]	; (8003658 <HAL_RCC_OscConfig+0x4ac>)
 800356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356c:	4a3a      	ldr	r2, [pc, #232]	; (8003658 <HAL_RCC_OscConfig+0x4ac>)
 800356e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003572:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 80ad 	beq.w	80036d8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800357e:	4b36      	ldr	r3, [pc, #216]	; (8003658 <HAL_RCC_OscConfig+0x4ac>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	2b08      	cmp	r3, #8
 8003588:	d060      	beq.n	800364c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d145      	bne.n	800361e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003592:	4b33      	ldr	r3, [pc, #204]	; (8003660 <HAL_RCC_OscConfig+0x4b4>)
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003598:	f7fd fb38 	bl	8000c0c <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a0:	f7fd fb34 	bl	8000c0c <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e093      	b.n	80036da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035b2:	4b29      	ldr	r3, [pc, #164]	; (8003658 <HAL_RCC_OscConfig+0x4ac>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69da      	ldr	r2, [r3, #28]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	019b      	lsls	r3, r3, #6
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d4:	085b      	lsrs	r3, r3, #1
 80035d6:	3b01      	subs	r3, #1
 80035d8:	041b      	lsls	r3, r3, #16
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e0:	061b      	lsls	r3, r3, #24
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e8:	071b      	lsls	r3, r3, #28
 80035ea:	491b      	ldr	r1, [pc, #108]	; (8003658 <HAL_RCC_OscConfig+0x4ac>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035f0:	4b1b      	ldr	r3, [pc, #108]	; (8003660 <HAL_RCC_OscConfig+0x4b4>)
 80035f2:	2201      	movs	r2, #1
 80035f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f6:	f7fd fb09 	bl	8000c0c <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035fe:	f7fd fb05 	bl	8000c0c <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e064      	b.n	80036da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003610:	4b11      	ldr	r3, [pc, #68]	; (8003658 <HAL_RCC_OscConfig+0x4ac>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0f0      	beq.n	80035fe <HAL_RCC_OscConfig+0x452>
 800361c:	e05c      	b.n	80036d8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800361e:	4b10      	ldr	r3, [pc, #64]	; (8003660 <HAL_RCC_OscConfig+0x4b4>)
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003624:	f7fd faf2 	bl	8000c0c <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800362c:	f7fd faee 	bl	8000c0c <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e04d      	b.n	80036da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800363e:	4b06      	ldr	r3, [pc, #24]	; (8003658 <HAL_RCC_OscConfig+0x4ac>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f0      	bne.n	800362c <HAL_RCC_OscConfig+0x480>
 800364a:	e045      	b.n	80036d8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d107      	bne.n	8003664 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e040      	b.n	80036da <HAL_RCC_OscConfig+0x52e>
 8003658:	40023800 	.word	0x40023800
 800365c:	40007000 	.word	0x40007000
 8003660:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003664:	4b1f      	ldr	r3, [pc, #124]	; (80036e4 <HAL_RCC_OscConfig+0x538>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d030      	beq.n	80036d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800367c:	429a      	cmp	r2, r3
 800367e:	d129      	bne.n	80036d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800368a:	429a      	cmp	r2, r3
 800368c:	d122      	bne.n	80036d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003694:	4013      	ands	r3, r2
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800369a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800369c:	4293      	cmp	r3, r2
 800369e:	d119      	bne.n	80036d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036aa:	085b      	lsrs	r3, r3, #1
 80036ac:	3b01      	subs	r3, #1
 80036ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d10f      	bne.n	80036d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d107      	bne.n	80036d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d001      	beq.n	80036d8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e000      	b.n	80036da <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3718      	adds	r7, #24
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40023800 	.word	0x40023800

080036e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e041      	b.n	800377e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d106      	bne.n	8003714 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f839 	bl	8003786 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3304      	adds	r3, #4
 8003724:	4619      	mov	r1, r3
 8003726:	4610      	mov	r0, r2
 8003728:	f000 f9d8 	bl	8003adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
	...

0800379c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d001      	beq.n	80037b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e04e      	b.n	8003852 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0201 	orr.w	r2, r2, #1
 80037ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a23      	ldr	r2, [pc, #140]	; (8003860 <HAL_TIM_Base_Start_IT+0xc4>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d022      	beq.n	800381c <HAL_TIM_Base_Start_IT+0x80>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037de:	d01d      	beq.n	800381c <HAL_TIM_Base_Start_IT+0x80>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a1f      	ldr	r2, [pc, #124]	; (8003864 <HAL_TIM_Base_Start_IT+0xc8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d018      	beq.n	800381c <HAL_TIM_Base_Start_IT+0x80>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a1e      	ldr	r2, [pc, #120]	; (8003868 <HAL_TIM_Base_Start_IT+0xcc>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d013      	beq.n	800381c <HAL_TIM_Base_Start_IT+0x80>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a1c      	ldr	r2, [pc, #112]	; (800386c <HAL_TIM_Base_Start_IT+0xd0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00e      	beq.n	800381c <HAL_TIM_Base_Start_IT+0x80>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a1b      	ldr	r2, [pc, #108]	; (8003870 <HAL_TIM_Base_Start_IT+0xd4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d009      	beq.n	800381c <HAL_TIM_Base_Start_IT+0x80>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a19      	ldr	r2, [pc, #100]	; (8003874 <HAL_TIM_Base_Start_IT+0xd8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d004      	beq.n	800381c <HAL_TIM_Base_Start_IT+0x80>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a18      	ldr	r2, [pc, #96]	; (8003878 <HAL_TIM_Base_Start_IT+0xdc>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d111      	bne.n	8003840 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2b06      	cmp	r3, #6
 800382c:	d010      	beq.n	8003850 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f042 0201 	orr.w	r2, r2, #1
 800383c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800383e:	e007      	b.n	8003850 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0201 	orr.w	r2, r2, #1
 800384e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	40010000 	.word	0x40010000
 8003864:	40000400 	.word	0x40000400
 8003868:	40000800 	.word	0x40000800
 800386c:	40000c00 	.word	0x40000c00
 8003870:	40010400 	.word	0x40010400
 8003874:	40014000 	.word	0x40014000
 8003878:	40001800 	.word	0x40001800

0800387c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b02      	cmp	r3, #2
 8003890:	d122      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b02      	cmp	r3, #2
 800389e:	d11b      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0202 	mvn.w	r2, #2
 80038a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f8ee 	bl	8003aa0 <HAL_TIM_IC_CaptureCallback>
 80038c4:	e005      	b.n	80038d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f8e0 	bl	8003a8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f8f1 	bl	8003ab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d122      	bne.n	800392c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b04      	cmp	r3, #4
 80038f2:	d11b      	bne.n	800392c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0204 	mvn.w	r2, #4
 80038fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2202      	movs	r2, #2
 8003902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f8c4 	bl	8003aa0 <HAL_TIM_IC_CaptureCallback>
 8003918:	e005      	b.n	8003926 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f8b6 	bl	8003a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f8c7 	bl	8003ab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	2b08      	cmp	r3, #8
 8003938:	d122      	bne.n	8003980 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	2b08      	cmp	r3, #8
 8003946:	d11b      	bne.n	8003980 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f06f 0208 	mvn.w	r2, #8
 8003950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2204      	movs	r2, #4
 8003956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f89a 	bl	8003aa0 <HAL_TIM_IC_CaptureCallback>
 800396c:	e005      	b.n	800397a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f88c 	bl	8003a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f89d 	bl	8003ab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	f003 0310 	and.w	r3, r3, #16
 800398a:	2b10      	cmp	r3, #16
 800398c:	d122      	bne.n	80039d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f003 0310 	and.w	r3, r3, #16
 8003998:	2b10      	cmp	r3, #16
 800399a:	d11b      	bne.n	80039d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f06f 0210 	mvn.w	r2, #16
 80039a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2208      	movs	r2, #8
 80039aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f870 	bl	8003aa0 <HAL_TIM_IC_CaptureCallback>
 80039c0:	e005      	b.n	80039ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f862 	bl	8003a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f873 	bl	8003ab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d10e      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d107      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f06f 0201 	mvn.w	r2, #1
 80039f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7fc ff5e 	bl	80008bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0a:	2b80      	cmp	r3, #128	; 0x80
 8003a0c:	d10e      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a18:	2b80      	cmp	r3, #128	; 0x80
 8003a1a:	d107      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f902 	bl	8003c30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a36:	2b40      	cmp	r3, #64	; 0x40
 8003a38:	d10e      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a44:	2b40      	cmp	r3, #64	; 0x40
 8003a46:	d107      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f838 	bl	8003ac8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	2b20      	cmp	r3, #32
 8003a64:	d10e      	bne.n	8003a84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f003 0320 	and.w	r3, r3, #32
 8003a70:	2b20      	cmp	r3, #32
 8003a72:	d107      	bne.n	8003a84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f06f 0220 	mvn.w	r2, #32
 8003a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f8cc 	bl	8003c1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a84:	bf00      	nop
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a40      	ldr	r2, [pc, #256]	; (8003bf0 <TIM_Base_SetConfig+0x114>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d013      	beq.n	8003b1c <TIM_Base_SetConfig+0x40>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afa:	d00f      	beq.n	8003b1c <TIM_Base_SetConfig+0x40>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a3d      	ldr	r2, [pc, #244]	; (8003bf4 <TIM_Base_SetConfig+0x118>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d00b      	beq.n	8003b1c <TIM_Base_SetConfig+0x40>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a3c      	ldr	r2, [pc, #240]	; (8003bf8 <TIM_Base_SetConfig+0x11c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d007      	beq.n	8003b1c <TIM_Base_SetConfig+0x40>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a3b      	ldr	r2, [pc, #236]	; (8003bfc <TIM_Base_SetConfig+0x120>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d003      	beq.n	8003b1c <TIM_Base_SetConfig+0x40>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a3a      	ldr	r2, [pc, #232]	; (8003c00 <TIM_Base_SetConfig+0x124>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d108      	bne.n	8003b2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a2f      	ldr	r2, [pc, #188]	; (8003bf0 <TIM_Base_SetConfig+0x114>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d02b      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b3c:	d027      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a2c      	ldr	r2, [pc, #176]	; (8003bf4 <TIM_Base_SetConfig+0x118>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d023      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a2b      	ldr	r2, [pc, #172]	; (8003bf8 <TIM_Base_SetConfig+0x11c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d01f      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a2a      	ldr	r2, [pc, #168]	; (8003bfc <TIM_Base_SetConfig+0x120>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d01b      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a29      	ldr	r2, [pc, #164]	; (8003c00 <TIM_Base_SetConfig+0x124>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d017      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a28      	ldr	r2, [pc, #160]	; (8003c04 <TIM_Base_SetConfig+0x128>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d013      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a27      	ldr	r2, [pc, #156]	; (8003c08 <TIM_Base_SetConfig+0x12c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00f      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a26      	ldr	r2, [pc, #152]	; (8003c0c <TIM_Base_SetConfig+0x130>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d00b      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a25      	ldr	r2, [pc, #148]	; (8003c10 <TIM_Base_SetConfig+0x134>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d007      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a24      	ldr	r2, [pc, #144]	; (8003c14 <TIM_Base_SetConfig+0x138>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d003      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a23      	ldr	r2, [pc, #140]	; (8003c18 <TIM_Base_SetConfig+0x13c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d108      	bne.n	8003ba0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a0a      	ldr	r2, [pc, #40]	; (8003bf0 <TIM_Base_SetConfig+0x114>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d003      	beq.n	8003bd4 <TIM_Base_SetConfig+0xf8>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a0c      	ldr	r2, [pc, #48]	; (8003c00 <TIM_Base_SetConfig+0x124>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d103      	bne.n	8003bdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	691a      	ldr	r2, [r3, #16]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	615a      	str	r2, [r3, #20]
}
 8003be2:	bf00      	nop
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	40010000 	.word	0x40010000
 8003bf4:	40000400 	.word	0x40000400
 8003bf8:	40000800 	.word	0x40000800
 8003bfc:	40000c00 	.word	0x40000c00
 8003c00:	40010400 	.word	0x40010400
 8003c04:	40014000 	.word	0x40014000
 8003c08:	40014400 	.word	0x40014400
 8003c0c:	40014800 	.word	0x40014800
 8003c10:	40001800 	.word	0x40001800
 8003c14:	40001c00 	.word	0x40001c00
 8003c18:	40002000 	.word	0x40002000

08003c1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e03f      	b.n	8003cd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d106      	bne.n	8003c70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7fc ff26 	bl	8000abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2224      	movs	r2, #36	; 0x24
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f829 	bl	8003ce0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695a      	ldr	r2, [r3, #20]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68da      	ldr	r2, [r3, #12]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
	...

08003ce0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ce4:	b09f      	sub	sp, #124	; 0x7c
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf6:	68d9      	ldr	r1, [r3, #12]
 8003cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	ea40 0301 	orr.w	r3, r0, r1
 8003d00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d04:	689a      	ldr	r2, [r3, #8]
 8003d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	431a      	orrs	r2, r3
 8003d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d24:	f021 010c 	bic.w	r1, r1, #12
 8003d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d2e:	430b      	orrs	r3, r1
 8003d30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d3e:	6999      	ldr	r1, [r3, #24]
 8003d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	ea40 0301 	orr.w	r3, r0, r1
 8003d48:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	4bc5      	ldr	r3, [pc, #788]	; (8004064 <UART_SetConfig+0x384>)
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d004      	beq.n	8003d5e <UART_SetConfig+0x7e>
 8003d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	4bc3      	ldr	r3, [pc, #780]	; (8004068 <UART_SetConfig+0x388>)
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d103      	bne.n	8003d66 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d5e:	f7fe fd03 	bl	8002768 <HAL_RCC_GetPCLK2Freq>
 8003d62:	6778      	str	r0, [r7, #116]	; 0x74
 8003d64:	e002      	b.n	8003d6c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d66:	f7fe fceb 	bl	8002740 <HAL_RCC_GetPCLK1Freq>
 8003d6a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d74:	f040 80b6 	bne.w	8003ee4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d7a:	461c      	mov	r4, r3
 8003d7c:	f04f 0500 	mov.w	r5, #0
 8003d80:	4622      	mov	r2, r4
 8003d82:	462b      	mov	r3, r5
 8003d84:	1891      	adds	r1, r2, r2
 8003d86:	6439      	str	r1, [r7, #64]	; 0x40
 8003d88:	415b      	adcs	r3, r3
 8003d8a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d8c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d90:	1912      	adds	r2, r2, r4
 8003d92:	eb45 0303 	adc.w	r3, r5, r3
 8003d96:	f04f 0000 	mov.w	r0, #0
 8003d9a:	f04f 0100 	mov.w	r1, #0
 8003d9e:	00d9      	lsls	r1, r3, #3
 8003da0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003da4:	00d0      	lsls	r0, r2, #3
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	1911      	adds	r1, r2, r4
 8003dac:	6639      	str	r1, [r7, #96]	; 0x60
 8003dae:	416b      	adcs	r3, r5
 8003db0:	667b      	str	r3, [r7, #100]	; 0x64
 8003db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	461a      	mov	r2, r3
 8003db8:	f04f 0300 	mov.w	r3, #0
 8003dbc:	1891      	adds	r1, r2, r2
 8003dbe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003dc0:	415b      	adcs	r3, r3
 8003dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003dc8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003dcc:	f7fc fa20 	bl	8000210 <__aeabi_uldivmod>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4ba5      	ldr	r3, [pc, #660]	; (800406c <UART_SetConfig+0x38c>)
 8003dd6:	fba3 2302 	umull	r2, r3, r3, r2
 8003dda:	095b      	lsrs	r3, r3, #5
 8003ddc:	011e      	lsls	r6, r3, #4
 8003dde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003de0:	461c      	mov	r4, r3
 8003de2:	f04f 0500 	mov.w	r5, #0
 8003de6:	4622      	mov	r2, r4
 8003de8:	462b      	mov	r3, r5
 8003dea:	1891      	adds	r1, r2, r2
 8003dec:	6339      	str	r1, [r7, #48]	; 0x30
 8003dee:	415b      	adcs	r3, r3
 8003df0:	637b      	str	r3, [r7, #52]	; 0x34
 8003df2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003df6:	1912      	adds	r2, r2, r4
 8003df8:	eb45 0303 	adc.w	r3, r5, r3
 8003dfc:	f04f 0000 	mov.w	r0, #0
 8003e00:	f04f 0100 	mov.w	r1, #0
 8003e04:	00d9      	lsls	r1, r3, #3
 8003e06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e0a:	00d0      	lsls	r0, r2, #3
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	1911      	adds	r1, r2, r4
 8003e12:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e14:	416b      	adcs	r3, r5
 8003e16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	f04f 0300 	mov.w	r3, #0
 8003e22:	1891      	adds	r1, r2, r2
 8003e24:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e26:	415b      	adcs	r3, r3
 8003e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e2e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003e32:	f7fc f9ed 	bl	8000210 <__aeabi_uldivmod>
 8003e36:	4602      	mov	r2, r0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	4b8c      	ldr	r3, [pc, #560]	; (800406c <UART_SetConfig+0x38c>)
 8003e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e40:	095b      	lsrs	r3, r3, #5
 8003e42:	2164      	movs	r1, #100	; 0x64
 8003e44:	fb01 f303 	mul.w	r3, r1, r3
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	3332      	adds	r3, #50	; 0x32
 8003e4e:	4a87      	ldr	r2, [pc, #540]	; (800406c <UART_SetConfig+0x38c>)
 8003e50:	fba2 2303 	umull	r2, r3, r2, r3
 8003e54:	095b      	lsrs	r3, r3, #5
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e5c:	441e      	add	r6, r3
 8003e5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e60:	4618      	mov	r0, r3
 8003e62:	f04f 0100 	mov.w	r1, #0
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	1894      	adds	r4, r2, r2
 8003e6c:	623c      	str	r4, [r7, #32]
 8003e6e:	415b      	adcs	r3, r3
 8003e70:	627b      	str	r3, [r7, #36]	; 0x24
 8003e72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e76:	1812      	adds	r2, r2, r0
 8003e78:	eb41 0303 	adc.w	r3, r1, r3
 8003e7c:	f04f 0400 	mov.w	r4, #0
 8003e80:	f04f 0500 	mov.w	r5, #0
 8003e84:	00dd      	lsls	r5, r3, #3
 8003e86:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e8a:	00d4      	lsls	r4, r2, #3
 8003e8c:	4622      	mov	r2, r4
 8003e8e:	462b      	mov	r3, r5
 8003e90:	1814      	adds	r4, r2, r0
 8003e92:	653c      	str	r4, [r7, #80]	; 0x50
 8003e94:	414b      	adcs	r3, r1
 8003e96:	657b      	str	r3, [r7, #84]	; 0x54
 8003e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	f04f 0300 	mov.w	r3, #0
 8003ea2:	1891      	adds	r1, r2, r2
 8003ea4:	61b9      	str	r1, [r7, #24]
 8003ea6:	415b      	adcs	r3, r3
 8003ea8:	61fb      	str	r3, [r7, #28]
 8003eaa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003eae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003eb2:	f7fc f9ad 	bl	8000210 <__aeabi_uldivmod>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4b6c      	ldr	r3, [pc, #432]	; (800406c <UART_SetConfig+0x38c>)
 8003ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ec0:	095b      	lsrs	r3, r3, #5
 8003ec2:	2164      	movs	r1, #100	; 0x64
 8003ec4:	fb01 f303 	mul.w	r3, r1, r3
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	3332      	adds	r3, #50	; 0x32
 8003ece:	4a67      	ldr	r2, [pc, #412]	; (800406c <UART_SetConfig+0x38c>)
 8003ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed4:	095b      	lsrs	r3, r3, #5
 8003ed6:	f003 0207 	and.w	r2, r3, #7
 8003eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4432      	add	r2, r6
 8003ee0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ee2:	e0b9      	b.n	8004058 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ee4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ee6:	461c      	mov	r4, r3
 8003ee8:	f04f 0500 	mov.w	r5, #0
 8003eec:	4622      	mov	r2, r4
 8003eee:	462b      	mov	r3, r5
 8003ef0:	1891      	adds	r1, r2, r2
 8003ef2:	6139      	str	r1, [r7, #16]
 8003ef4:	415b      	adcs	r3, r3
 8003ef6:	617b      	str	r3, [r7, #20]
 8003ef8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003efc:	1912      	adds	r2, r2, r4
 8003efe:	eb45 0303 	adc.w	r3, r5, r3
 8003f02:	f04f 0000 	mov.w	r0, #0
 8003f06:	f04f 0100 	mov.w	r1, #0
 8003f0a:	00d9      	lsls	r1, r3, #3
 8003f0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f10:	00d0      	lsls	r0, r2, #3
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	eb12 0804 	adds.w	r8, r2, r4
 8003f1a:	eb43 0905 	adc.w	r9, r3, r5
 8003f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f04f 0100 	mov.w	r1, #0
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	f04f 0300 	mov.w	r3, #0
 8003f30:	008b      	lsls	r3, r1, #2
 8003f32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f36:	0082      	lsls	r2, r0, #2
 8003f38:	4640      	mov	r0, r8
 8003f3a:	4649      	mov	r1, r9
 8003f3c:	f7fc f968 	bl	8000210 <__aeabi_uldivmod>
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	4b49      	ldr	r3, [pc, #292]	; (800406c <UART_SetConfig+0x38c>)
 8003f46:	fba3 2302 	umull	r2, r3, r3, r2
 8003f4a:	095b      	lsrs	r3, r3, #5
 8003f4c:	011e      	lsls	r6, r3, #4
 8003f4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f50:	4618      	mov	r0, r3
 8003f52:	f04f 0100 	mov.w	r1, #0
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	1894      	adds	r4, r2, r2
 8003f5c:	60bc      	str	r4, [r7, #8]
 8003f5e:	415b      	adcs	r3, r3
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f66:	1812      	adds	r2, r2, r0
 8003f68:	eb41 0303 	adc.w	r3, r1, r3
 8003f6c:	f04f 0400 	mov.w	r4, #0
 8003f70:	f04f 0500 	mov.w	r5, #0
 8003f74:	00dd      	lsls	r5, r3, #3
 8003f76:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f7a:	00d4      	lsls	r4, r2, #3
 8003f7c:	4622      	mov	r2, r4
 8003f7e:	462b      	mov	r3, r5
 8003f80:	1814      	adds	r4, r2, r0
 8003f82:	64bc      	str	r4, [r7, #72]	; 0x48
 8003f84:	414b      	adcs	r3, r1
 8003f86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f04f 0100 	mov.w	r1, #0
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	f04f 0300 	mov.w	r3, #0
 8003f9a:	008b      	lsls	r3, r1, #2
 8003f9c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003fa0:	0082      	lsls	r2, r0, #2
 8003fa2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003fa6:	f7fc f933 	bl	8000210 <__aeabi_uldivmod>
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	4b2f      	ldr	r3, [pc, #188]	; (800406c <UART_SetConfig+0x38c>)
 8003fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fb4:	095b      	lsrs	r3, r3, #5
 8003fb6:	2164      	movs	r1, #100	; 0x64
 8003fb8:	fb01 f303 	mul.w	r3, r1, r3
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	011b      	lsls	r3, r3, #4
 8003fc0:	3332      	adds	r3, #50	; 0x32
 8003fc2:	4a2a      	ldr	r2, [pc, #168]	; (800406c <UART_SetConfig+0x38c>)
 8003fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc8:	095b      	lsrs	r3, r3, #5
 8003fca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fce:	441e      	add	r6, r3
 8003fd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f04f 0100 	mov.w	r1, #0
 8003fd8:	4602      	mov	r2, r0
 8003fda:	460b      	mov	r3, r1
 8003fdc:	1894      	adds	r4, r2, r2
 8003fde:	603c      	str	r4, [r7, #0]
 8003fe0:	415b      	adcs	r3, r3
 8003fe2:	607b      	str	r3, [r7, #4]
 8003fe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fe8:	1812      	adds	r2, r2, r0
 8003fea:	eb41 0303 	adc.w	r3, r1, r3
 8003fee:	f04f 0400 	mov.w	r4, #0
 8003ff2:	f04f 0500 	mov.w	r5, #0
 8003ff6:	00dd      	lsls	r5, r3, #3
 8003ff8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ffc:	00d4      	lsls	r4, r2, #3
 8003ffe:	4622      	mov	r2, r4
 8004000:	462b      	mov	r3, r5
 8004002:	eb12 0a00 	adds.w	sl, r2, r0
 8004006:	eb43 0b01 	adc.w	fp, r3, r1
 800400a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	4618      	mov	r0, r3
 8004010:	f04f 0100 	mov.w	r1, #0
 8004014:	f04f 0200 	mov.w	r2, #0
 8004018:	f04f 0300 	mov.w	r3, #0
 800401c:	008b      	lsls	r3, r1, #2
 800401e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004022:	0082      	lsls	r2, r0, #2
 8004024:	4650      	mov	r0, sl
 8004026:	4659      	mov	r1, fp
 8004028:	f7fc f8f2 	bl	8000210 <__aeabi_uldivmod>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	4b0e      	ldr	r3, [pc, #56]	; (800406c <UART_SetConfig+0x38c>)
 8004032:	fba3 1302 	umull	r1, r3, r3, r2
 8004036:	095b      	lsrs	r3, r3, #5
 8004038:	2164      	movs	r1, #100	; 0x64
 800403a:	fb01 f303 	mul.w	r3, r1, r3
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	011b      	lsls	r3, r3, #4
 8004042:	3332      	adds	r3, #50	; 0x32
 8004044:	4a09      	ldr	r2, [pc, #36]	; (800406c <UART_SetConfig+0x38c>)
 8004046:	fba2 2303 	umull	r2, r3, r2, r3
 800404a:	095b      	lsrs	r3, r3, #5
 800404c:	f003 020f 	and.w	r2, r3, #15
 8004050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4432      	add	r2, r6
 8004056:	609a      	str	r2, [r3, #8]
}
 8004058:	bf00      	nop
 800405a:	377c      	adds	r7, #124	; 0x7c
 800405c:	46bd      	mov	sp, r7
 800405e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004062:	bf00      	nop
 8004064:	40011000 	.word	0x40011000
 8004068:	40011400 	.word	0x40011400
 800406c:	51eb851f 	.word	0x51eb851f

08004070 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004070:	b084      	sub	sp, #16
 8004072:	b580      	push	{r7, lr}
 8004074:	b084      	sub	sp, #16
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
 800407a:	f107 001c 	add.w	r0, r7, #28
 800407e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004084:	2b01      	cmp	r3, #1
 8004086:	d122      	bne.n	80040ce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800409c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80040b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d105      	bne.n	80040c2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f001 fb16 	bl	80056f4 <USB_CoreReset>
 80040c8:	4603      	mov	r3, r0
 80040ca:	73fb      	strb	r3, [r7, #15]
 80040cc:	e01a      	b.n	8004104 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f001 fb0a 	bl	80056f4 <USB_CoreReset>
 80040e0:	4603      	mov	r3, r0
 80040e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80040e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d106      	bne.n	80040f8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	639a      	str	r2, [r3, #56]	; 0x38
 80040f6:	e005      	b.n	8004104 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004106:	2b01      	cmp	r3, #1
 8004108:	d10b      	bne.n	8004122 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f043 0206 	orr.w	r2, r3, #6
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f043 0220 	orr.w	r2, r3, #32
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004122:	7bfb      	ldrb	r3, [r7, #15]
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800412e:	b004      	add	sp, #16
 8004130:	4770      	bx	lr
	...

08004134 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	4613      	mov	r3, r2
 8004140:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004142:	79fb      	ldrb	r3, [r7, #7]
 8004144:	2b02      	cmp	r3, #2
 8004146:	d165      	bne.n	8004214 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4a41      	ldr	r2, [pc, #260]	; (8004250 <USB_SetTurnaroundTime+0x11c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d906      	bls.n	800415e <USB_SetTurnaroundTime+0x2a>
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	4a40      	ldr	r2, [pc, #256]	; (8004254 <USB_SetTurnaroundTime+0x120>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d202      	bcs.n	800415e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004158:	230f      	movs	r3, #15
 800415a:	617b      	str	r3, [r7, #20]
 800415c:	e062      	b.n	8004224 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	4a3c      	ldr	r2, [pc, #240]	; (8004254 <USB_SetTurnaroundTime+0x120>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d306      	bcc.n	8004174 <USB_SetTurnaroundTime+0x40>
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	4a3b      	ldr	r2, [pc, #236]	; (8004258 <USB_SetTurnaroundTime+0x124>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d202      	bcs.n	8004174 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800416e:	230e      	movs	r3, #14
 8004170:	617b      	str	r3, [r7, #20]
 8004172:	e057      	b.n	8004224 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	4a38      	ldr	r2, [pc, #224]	; (8004258 <USB_SetTurnaroundTime+0x124>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d306      	bcc.n	800418a <USB_SetTurnaroundTime+0x56>
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	4a37      	ldr	r2, [pc, #220]	; (800425c <USB_SetTurnaroundTime+0x128>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d202      	bcs.n	800418a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004184:	230d      	movs	r3, #13
 8004186:	617b      	str	r3, [r7, #20]
 8004188:	e04c      	b.n	8004224 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	4a33      	ldr	r2, [pc, #204]	; (800425c <USB_SetTurnaroundTime+0x128>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d306      	bcc.n	80041a0 <USB_SetTurnaroundTime+0x6c>
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	4a32      	ldr	r2, [pc, #200]	; (8004260 <USB_SetTurnaroundTime+0x12c>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d802      	bhi.n	80041a0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800419a:	230c      	movs	r3, #12
 800419c:	617b      	str	r3, [r7, #20]
 800419e:	e041      	b.n	8004224 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4a2f      	ldr	r2, [pc, #188]	; (8004260 <USB_SetTurnaroundTime+0x12c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d906      	bls.n	80041b6 <USB_SetTurnaroundTime+0x82>
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	4a2e      	ldr	r2, [pc, #184]	; (8004264 <USB_SetTurnaroundTime+0x130>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d802      	bhi.n	80041b6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80041b0:	230b      	movs	r3, #11
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	e036      	b.n	8004224 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	4a2a      	ldr	r2, [pc, #168]	; (8004264 <USB_SetTurnaroundTime+0x130>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d906      	bls.n	80041cc <USB_SetTurnaroundTime+0x98>
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	4a29      	ldr	r2, [pc, #164]	; (8004268 <USB_SetTurnaroundTime+0x134>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d802      	bhi.n	80041cc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80041c6:	230a      	movs	r3, #10
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	e02b      	b.n	8004224 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	4a26      	ldr	r2, [pc, #152]	; (8004268 <USB_SetTurnaroundTime+0x134>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d906      	bls.n	80041e2 <USB_SetTurnaroundTime+0xae>
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4a25      	ldr	r2, [pc, #148]	; (800426c <USB_SetTurnaroundTime+0x138>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d202      	bcs.n	80041e2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80041dc:	2309      	movs	r3, #9
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	e020      	b.n	8004224 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	4a21      	ldr	r2, [pc, #132]	; (800426c <USB_SetTurnaroundTime+0x138>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d306      	bcc.n	80041f8 <USB_SetTurnaroundTime+0xc4>
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	4a20      	ldr	r2, [pc, #128]	; (8004270 <USB_SetTurnaroundTime+0x13c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d802      	bhi.n	80041f8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80041f2:	2308      	movs	r3, #8
 80041f4:	617b      	str	r3, [r7, #20]
 80041f6:	e015      	b.n	8004224 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	4a1d      	ldr	r2, [pc, #116]	; (8004270 <USB_SetTurnaroundTime+0x13c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d906      	bls.n	800420e <USB_SetTurnaroundTime+0xda>
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	4a1c      	ldr	r2, [pc, #112]	; (8004274 <USB_SetTurnaroundTime+0x140>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d202      	bcs.n	800420e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004208:	2307      	movs	r3, #7
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	e00a      	b.n	8004224 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800420e:	2306      	movs	r3, #6
 8004210:	617b      	str	r3, [r7, #20]
 8004212:	e007      	b.n	8004224 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004214:	79fb      	ldrb	r3, [r7, #7]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d102      	bne.n	8004220 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800421a:	2309      	movs	r3, #9
 800421c:	617b      	str	r3, [r7, #20]
 800421e:	e001      	b.n	8004224 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004220:	2309      	movs	r3, #9
 8004222:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	029b      	lsls	r3, r3, #10
 8004238:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800423c:	431a      	orrs	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	371c      	adds	r7, #28
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	00d8acbf 	.word	0x00d8acbf
 8004254:	00e4e1c0 	.word	0x00e4e1c0
 8004258:	00f42400 	.word	0x00f42400
 800425c:	01067380 	.word	0x01067380
 8004260:	011a499f 	.word	0x011a499f
 8004264:	01312cff 	.word	0x01312cff
 8004268:	014ca43f 	.word	0x014ca43f
 800426c:	016e3600 	.word	0x016e3600
 8004270:	01a6ab1f 	.word	0x01a6ab1f
 8004274:	01e84800 	.word	0x01e84800

08004278 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f043 0201 	orr.w	r2, r3, #1
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800429a:	b480      	push	{r7}
 800429c:	b083      	sub	sp, #12
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f023 0201 	bic.w	r2, r3, #1
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	460b      	mov	r3, r1
 80042c6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80042d8:	78fb      	ldrb	r3, [r7, #3]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d115      	bne.n	800430a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80042ea:	2001      	movs	r0, #1
 80042ec:	f7fc fc9a 	bl	8000c24 <HAL_Delay>
      ms++;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	3301      	adds	r3, #1
 80042f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f001 f96c 	bl	80055d4 <USB_GetMode>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d01e      	beq.n	8004340 <USB_SetCurrentMode+0x84>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2b31      	cmp	r3, #49	; 0x31
 8004306:	d9f0      	bls.n	80042ea <USB_SetCurrentMode+0x2e>
 8004308:	e01a      	b.n	8004340 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800430a:	78fb      	ldrb	r3, [r7, #3]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d115      	bne.n	800433c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800431c:	2001      	movs	r0, #1
 800431e:	f7fc fc81 	bl	8000c24 <HAL_Delay>
      ms++;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	3301      	adds	r3, #1
 8004326:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f001 f953 	bl	80055d4 <USB_GetMode>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d005      	beq.n	8004340 <USB_SetCurrentMode+0x84>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2b31      	cmp	r3, #49	; 0x31
 8004338:	d9f0      	bls.n	800431c <USB_SetCurrentMode+0x60>
 800433a:	e001      	b.n	8004340 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e005      	b.n	800434c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b32      	cmp	r3, #50	; 0x32
 8004344:	d101      	bne.n	800434a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e000      	b.n	800434c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004354:	b084      	sub	sp, #16
 8004356:	b580      	push	{r7, lr}
 8004358:	b086      	sub	sp, #24
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
 800435e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004362:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004366:	2300      	movs	r3, #0
 8004368:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800436e:	2300      	movs	r3, #0
 8004370:	613b      	str	r3, [r7, #16]
 8004372:	e009      	b.n	8004388 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	3340      	adds	r3, #64	; 0x40
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	2200      	movs	r2, #0
 8004380:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	3301      	adds	r3, #1
 8004386:	613b      	str	r3, [r7, #16]
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	2b0e      	cmp	r3, #14
 800438c:	d9f2      	bls.n	8004374 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800438e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004390:	2b00      	cmp	r3, #0
 8004392:	d11c      	bne.n	80043ce <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043a2:	f043 0302 	orr.w	r3, r3, #2
 80043a6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	e005      	b.n	80043da <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043e0:	461a      	mov	r2, r3
 80043e2:	2300      	movs	r3, #0
 80043e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ec:	4619      	mov	r1, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f4:	461a      	mov	r2, r3
 80043f6:	680b      	ldr	r3, [r1, #0]
 80043f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d10c      	bne.n	800441a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004402:	2b00      	cmp	r3, #0
 8004404:	d104      	bne.n	8004410 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004406:	2100      	movs	r1, #0
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f945 	bl	8004698 <USB_SetDevSpeed>
 800440e:	e008      	b.n	8004422 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004410:	2101      	movs	r1, #1
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f940 	bl	8004698 <USB_SetDevSpeed>
 8004418:	e003      	b.n	8004422 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800441a:	2103      	movs	r1, #3
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f93b 	bl	8004698 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004422:	2110      	movs	r1, #16
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f8f3 	bl	8004610 <USB_FlushTxFifo>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f90f 	bl	8004658 <USB_FlushRxFifo>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444a:	461a      	mov	r2, r3
 800444c:	2300      	movs	r3, #0
 800444e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004456:	461a      	mov	r2, r3
 8004458:	2300      	movs	r3, #0
 800445a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004462:	461a      	mov	r2, r3
 8004464:	2300      	movs	r3, #0
 8004466:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004468:	2300      	movs	r3, #0
 800446a:	613b      	str	r3, [r7, #16]
 800446c:	e043      	b.n	80044f6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	015a      	lsls	r2, r3, #5
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4413      	add	r3, r2
 8004476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004480:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004484:	d118      	bne.n	80044b8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10a      	bne.n	80044a2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4413      	add	r3, r2
 8004494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004498:	461a      	mov	r2, r3
 800449a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	e013      	b.n	80044ca <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	015a      	lsls	r2, r3, #5
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ae:	461a      	mov	r2, r3
 80044b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	e008      	b.n	80044ca <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	015a      	lsls	r2, r3, #5
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4413      	add	r3, r2
 80044c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c4:	461a      	mov	r2, r3
 80044c6:	2300      	movs	r3, #0
 80044c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	015a      	lsls	r2, r3, #5
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	4413      	add	r3, r2
 80044d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d6:	461a      	mov	r2, r3
 80044d8:	2300      	movs	r3, #0
 80044da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	015a      	lsls	r2, r3, #5
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4413      	add	r3, r2
 80044e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044e8:	461a      	mov	r2, r3
 80044ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	3301      	adds	r3, #1
 80044f4:	613b      	str	r3, [r7, #16]
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d3b7      	bcc.n	800446e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044fe:	2300      	movs	r3, #0
 8004500:	613b      	str	r3, [r7, #16]
 8004502:	e043      	b.n	800458c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4413      	add	r3, r2
 800450c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004516:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800451a:	d118      	bne.n	800454e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10a      	bne.n	8004538 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4413      	add	r3, r2
 800452a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800452e:	461a      	mov	r2, r3
 8004530:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	e013      	b.n	8004560 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004544:	461a      	mov	r2, r3
 8004546:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	e008      	b.n	8004560 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4413      	add	r3, r2
 8004556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455a:	461a      	mov	r2, r3
 800455c:	2300      	movs	r3, #0
 800455e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4413      	add	r3, r2
 8004568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800456c:	461a      	mov	r2, r3
 800456e:	2300      	movs	r3, #0
 8004570:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4413      	add	r3, r2
 800457a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800457e:	461a      	mov	r2, r3
 8004580:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004584:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	3301      	adds	r3, #1
 800458a:	613b      	str	r3, [r7, #16]
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	429a      	cmp	r2, r3
 8004592:	d3b7      	bcc.n	8004504 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80045b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80045b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d105      	bne.n	80045c8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	f043 0210 	orr.w	r2, r3, #16
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	699a      	ldr	r2, [r3, #24]
 80045cc:	4b0f      	ldr	r3, [pc, #60]	; (800460c <USB_DevInit+0x2b8>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80045d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d005      	beq.n	80045e6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	f043 0208 	orr.w	r2, r3, #8
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80045e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d107      	bne.n	80045fc <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045f4:	f043 0304 	orr.w	r3, r3, #4
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80045fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004608:	b004      	add	sp, #16
 800460a:	4770      	bx	lr
 800460c:	803c3800 	.word	0x803c3800

08004610 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	019b      	lsls	r3, r3, #6
 8004622:	f043 0220 	orr.w	r2, r3, #32
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	3301      	adds	r3, #1
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	4a08      	ldr	r2, [pc, #32]	; (8004654 <USB_FlushTxFifo+0x44>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d901      	bls.n	800463a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e006      	b.n	8004648 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 0320 	and.w	r3, r3, #32
 8004642:	2b20      	cmp	r3, #32
 8004644:	d0f1      	beq.n	800462a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	00030d40 	.word	0x00030d40

08004658 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004660:	2300      	movs	r3, #0
 8004662:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2210      	movs	r2, #16
 8004668:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	3301      	adds	r3, #1
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	4a08      	ldr	r2, [pc, #32]	; (8004694 <USB_FlushRxFifo+0x3c>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d901      	bls.n	800467a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e006      	b.n	8004688 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f003 0310 	and.w	r3, r3, #16
 8004682:	2b10      	cmp	r3, #16
 8004684:	d0f1      	beq.n	800466a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	00030d40 	.word	0x00030d40

08004698 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	460b      	mov	r3, r1
 80046a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	78fb      	ldrb	r3, [r7, #3]
 80046b2:	68f9      	ldr	r1, [r7, #12]
 80046b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046b8:	4313      	orrs	r3, r2
 80046ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b087      	sub	sp, #28
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 0306 	and.w	r3, r3, #6
 80046e2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d102      	bne.n	80046f0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80046ea:	2300      	movs	r3, #0
 80046ec:	75fb      	strb	r3, [r7, #23]
 80046ee:	e00a      	b.n	8004706 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d002      	beq.n	80046fc <USB_GetDevSpeed+0x32>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2b06      	cmp	r3, #6
 80046fa:	d102      	bne.n	8004702 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80046fc:	2302      	movs	r3, #2
 80046fe:	75fb      	strb	r3, [r7, #23]
 8004700:	e001      	b.n	8004706 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004702:	230f      	movs	r3, #15
 8004704:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004706:	7dfb      	ldrb	r3, [r7, #23]
}
 8004708:	4618      	mov	r0, r3
 800470a:	371c      	adds	r7, #28
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	785b      	ldrb	r3, [r3, #1]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d13a      	bne.n	80047a6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004736:	69da      	ldr	r2, [r3, #28]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	f003 030f 	and.w	r3, r3, #15
 8004740:	2101      	movs	r1, #1
 8004742:	fa01 f303 	lsl.w	r3, r1, r3
 8004746:	b29b      	uxth	r3, r3
 8004748:	68f9      	ldr	r1, [r7, #12]
 800474a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800474e:	4313      	orrs	r3, r2
 8004750:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	4413      	add	r3, r2
 800475a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d155      	bne.n	8004814 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	78db      	ldrb	r3, [r3, #3]
 8004782:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004784:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	059b      	lsls	r3, r3, #22
 800478a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800478c:	4313      	orrs	r3, r2
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	0151      	lsls	r1, r2, #5
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	440a      	add	r2, r1
 8004796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800479a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800479e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047a2:	6013      	str	r3, [r2, #0]
 80047a4:	e036      	b.n	8004814 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ac:	69da      	ldr	r2, [r3, #28]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	f003 030f 	and.w	r3, r3, #15
 80047b6:	2101      	movs	r1, #1
 80047b8:	fa01 f303 	lsl.w	r3, r1, r3
 80047bc:	041b      	lsls	r3, r3, #16
 80047be:	68f9      	ldr	r1, [r7, #12]
 80047c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047c4:	4313      	orrs	r3, r2
 80047c6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d11a      	bne.n	8004814 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	78db      	ldrb	r3, [r3, #3]
 80047f8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80047fa:	430b      	orrs	r3, r1
 80047fc:	4313      	orrs	r3, r2
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	0151      	lsls	r1, r2, #5
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	440a      	add	r2, r1
 8004806:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800480a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800480e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004812:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
	...

08004824 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	785b      	ldrb	r3, [r3, #1]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d161      	bne.n	8004904 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004852:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004856:	d11f      	bne.n	8004898 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4413      	add	r3, r2
 8004860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	0151      	lsls	r1, r2, #5
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	440a      	add	r2, r1
 800486e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004872:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004876:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4413      	add	r3, r2
 8004880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	0151      	lsls	r1, r2, #5
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	440a      	add	r2, r1
 800488e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004892:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004896:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800489e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	f003 030f 	and.w	r3, r3, #15
 80048a8:	2101      	movs	r1, #1
 80048aa:	fa01 f303 	lsl.w	r3, r1, r3
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	43db      	mvns	r3, r3
 80048b2:	68f9      	ldr	r1, [r7, #12]
 80048b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048b8:	4013      	ands	r3, r2
 80048ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048c2:	69da      	ldr	r2, [r3, #28]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	f003 030f 	and.w	r3, r3, #15
 80048cc:	2101      	movs	r1, #1
 80048ce:	fa01 f303 	lsl.w	r3, r1, r3
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	43db      	mvns	r3, r3
 80048d6:	68f9      	ldr	r1, [r7, #12]
 80048d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048dc:	4013      	ands	r3, r2
 80048de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	0159      	lsls	r1, r3, #5
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	440b      	add	r3, r1
 80048f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048fa:	4619      	mov	r1, r3
 80048fc:	4b35      	ldr	r3, [pc, #212]	; (80049d4 <USB_DeactivateEndpoint+0x1b0>)
 80048fe:	4013      	ands	r3, r2
 8004900:	600b      	str	r3, [r1, #0]
 8004902:	e060      	b.n	80049c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4413      	add	r3, r2
 800490c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004916:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800491a:	d11f      	bne.n	800495c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	0151      	lsls	r1, r2, #5
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	440a      	add	r2, r1
 8004932:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004936:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800493a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	0151      	lsls	r1, r2, #5
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	440a      	add	r2, r1
 8004952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004956:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800495a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004962:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	f003 030f 	and.w	r3, r3, #15
 800496c:	2101      	movs	r1, #1
 800496e:	fa01 f303 	lsl.w	r3, r1, r3
 8004972:	041b      	lsls	r3, r3, #16
 8004974:	43db      	mvns	r3, r3
 8004976:	68f9      	ldr	r1, [r7, #12]
 8004978:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800497c:	4013      	ands	r3, r2
 800497e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004986:	69da      	ldr	r2, [r3, #28]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	f003 030f 	and.w	r3, r3, #15
 8004990:	2101      	movs	r1, #1
 8004992:	fa01 f303 	lsl.w	r3, r1, r3
 8004996:	041b      	lsls	r3, r3, #16
 8004998:	43db      	mvns	r3, r3
 800499a:	68f9      	ldr	r1, [r7, #12]
 800499c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049a0:	4013      	ands	r3, r2
 80049a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	015a      	lsls	r2, r3, #5
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4413      	add	r3, r2
 80049ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	0159      	lsls	r1, r3, #5
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	440b      	add	r3, r1
 80049ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049be:	4619      	mov	r1, r3
 80049c0:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <USB_DeactivateEndpoint+0x1b4>)
 80049c2:	4013      	ands	r3, r2
 80049c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	ec337800 	.word	0xec337800
 80049d8:	eff37800 	.word	0xeff37800

080049dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08a      	sub	sp, #40	; 0x28
 80049e0:	af02      	add	r7, sp, #8
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	4613      	mov	r3, r2
 80049e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	785b      	ldrb	r3, [r3, #1]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	f040 815c 	bne.w	8004cb6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d132      	bne.n	8004a6c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	015a      	lsls	r2, r3, #5
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	0151      	lsls	r1, r2, #5
 8004a18:	69fa      	ldr	r2, [r7, #28]
 8004a1a:	440a      	add	r2, r1
 8004a1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	0151      	lsls	r1, r2, #5
 8004a3c:	69fa      	ldr	r2, [r7, #28]
 8004a3e:	440a      	add	r2, r1
 8004a40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	015a      	lsls	r2, r3, #5
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	0151      	lsls	r1, r2, #5
 8004a5c:	69fa      	ldr	r2, [r7, #28]
 8004a5e:	440a      	add	r2, r1
 8004a60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a64:	0cdb      	lsrs	r3, r3, #19
 8004a66:	04db      	lsls	r3, r3, #19
 8004a68:	6113      	str	r3, [r2, #16]
 8004a6a:	e074      	b.n	8004b56 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	0151      	lsls	r1, r2, #5
 8004a7e:	69fa      	ldr	r2, [r7, #28]
 8004a80:	440a      	add	r2, r1
 8004a82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a86:	0cdb      	lsrs	r3, r3, #19
 8004a88:	04db      	lsls	r3, r3, #19
 8004a8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	0151      	lsls	r1, r2, #5
 8004a9e:	69fa      	ldr	r2, [r7, #28]
 8004aa0:	440a      	add	r2, r1
 8004aa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aa6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004aaa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004aae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004abc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	6959      	ldr	r1, [r3, #20]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	440b      	add	r3, r1
 8004ac8:	1e59      	subs	r1, r3, #1
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ad2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004ad4:	4b9d      	ldr	r3, [pc, #628]	; (8004d4c <USB_EPStartXfer+0x370>)
 8004ad6:	400b      	ands	r3, r1
 8004ad8:	69b9      	ldr	r1, [r7, #24]
 8004ada:	0148      	lsls	r0, r1, #5
 8004adc:	69f9      	ldr	r1, [r7, #28]
 8004ade:	4401      	add	r1, r0
 8004ae0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af4:	691a      	ldr	r2, [r3, #16]
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004afe:	69b9      	ldr	r1, [r7, #24]
 8004b00:	0148      	lsls	r0, r1, #5
 8004b02:	69f9      	ldr	r1, [r7, #28]
 8004b04:	4401      	add	r1, r0
 8004b06:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	78db      	ldrb	r3, [r3, #3]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d11f      	bne.n	8004b56 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	0151      	lsls	r1, r2, #5
 8004b28:	69fa      	ldr	r2, [r7, #28]
 8004b2a:	440a      	add	r2, r1
 8004b2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b30:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004b34:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	0151      	lsls	r1, r2, #5
 8004b48:	69fa      	ldr	r2, [r7, #28]
 8004b4a:	440a      	add	r2, r1
 8004b4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b54:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004b56:	79fb      	ldrb	r3, [r7, #7]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d14b      	bne.n	8004bf4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d009      	beq.n	8004b78 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	015a      	lsls	r2, r3, #5
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b70:	461a      	mov	r2, r3
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	78db      	ldrb	r3, [r3, #3]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d128      	bne.n	8004bd2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d110      	bne.n	8004bb2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	0151      	lsls	r1, r2, #5
 8004ba2:	69fa      	ldr	r2, [r7, #28]
 8004ba4:	440a      	add	r2, r1
 8004ba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004baa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bae:	6013      	str	r3, [r2, #0]
 8004bb0:	e00f      	b.n	8004bd2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	0151      	lsls	r1, r2, #5
 8004bc4:	69fa      	ldr	r2, [r7, #28]
 8004bc6:	440a      	add	r2, r1
 8004bc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	015a      	lsls	r2, r3, #5
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	0151      	lsls	r1, r2, #5
 8004be4:	69fa      	ldr	r2, [r7, #28]
 8004be6:	440a      	add	r2, r1
 8004be8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bf0:	6013      	str	r3, [r2, #0]
 8004bf2:	e12f      	b.n	8004e54 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	0151      	lsls	r1, r2, #5
 8004c06:	69fa      	ldr	r2, [r7, #28]
 8004c08:	440a      	add	r2, r1
 8004c0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c12:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	78db      	ldrb	r3, [r3, #3]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d015      	beq.n	8004c48 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 8117 	beq.w	8004e54 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	f003 030f 	and.w	r3, r3, #15
 8004c36:	2101      	movs	r1, #1
 8004c38:	fa01 f303 	lsl.w	r3, r1, r3
 8004c3c:	69f9      	ldr	r1, [r7, #28]
 8004c3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c42:	4313      	orrs	r3, r2
 8004c44:	634b      	str	r3, [r1, #52]	; 0x34
 8004c46:	e105      	b.n	8004e54 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d110      	bne.n	8004c7a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	0151      	lsls	r1, r2, #5
 8004c6a:	69fa      	ldr	r2, [r7, #28]
 8004c6c:	440a      	add	r2, r1
 8004c6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c76:	6013      	str	r3, [r2, #0]
 8004c78:	e00f      	b.n	8004c9a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	0151      	lsls	r1, r2, #5
 8004c8c:	69fa      	ldr	r2, [r7, #28]
 8004c8e:	440a      	add	r2, r1
 8004c90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c98:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	68d9      	ldr	r1, [r3, #12]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	781a      	ldrb	r2, [r3, #0]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	b298      	uxth	r0, r3
 8004ca8:	79fb      	ldrb	r3, [r7, #7]
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	4603      	mov	r3, r0
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f000 fa2b 	bl	800510a <USB_WritePacket>
 8004cb4:	e0ce      	b.n	8004e54 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	015a      	lsls	r2, r3, #5
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	0151      	lsls	r1, r2, #5
 8004cc8:	69fa      	ldr	r2, [r7, #28]
 8004cca:	440a      	add	r2, r1
 8004ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cd0:	0cdb      	lsrs	r3, r3, #19
 8004cd2:	04db      	lsls	r3, r3, #19
 8004cd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	0151      	lsls	r1, r2, #5
 8004ce8:	69fa      	ldr	r2, [r7, #28]
 8004cea:	440a      	add	r2, r1
 8004cec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cf0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cf4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cf8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d126      	bne.n	8004d50 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d0e:	691a      	ldr	r2, [r3, #16]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d18:	69b9      	ldr	r1, [r7, #24]
 8004d1a:	0148      	lsls	r0, r1, #5
 8004d1c:	69f9      	ldr	r1, [r7, #28]
 8004d1e:	4401      	add	r1, r0
 8004d20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d24:	4313      	orrs	r3, r2
 8004d26:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	0151      	lsls	r1, r2, #5
 8004d3a:	69fa      	ldr	r2, [r7, #28]
 8004d3c:	440a      	add	r2, r1
 8004d3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d46:	6113      	str	r3, [r2, #16]
 8004d48:	e036      	b.n	8004db8 <USB_EPStartXfer+0x3dc>
 8004d4a:	bf00      	nop
 8004d4c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	695a      	ldr	r2, [r3, #20]
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	4413      	add	r3, r2
 8004d5a:	1e5a      	subs	r2, r3, #1
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d64:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d72:	691a      	ldr	r2, [r3, #16]
 8004d74:	8afb      	ldrh	r3, [r7, #22]
 8004d76:	04d9      	lsls	r1, r3, #19
 8004d78:	4b39      	ldr	r3, [pc, #228]	; (8004e60 <USB_EPStartXfer+0x484>)
 8004d7a:	400b      	ands	r3, r1
 8004d7c:	69b9      	ldr	r1, [r7, #24]
 8004d7e:	0148      	lsls	r0, r1, #5
 8004d80:	69f9      	ldr	r1, [r7, #28]
 8004d82:	4401      	add	r1, r0
 8004d84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d98:	691a      	ldr	r2, [r3, #16]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	8af9      	ldrh	r1, [r7, #22]
 8004da0:	fb01 f303 	mul.w	r3, r1, r3
 8004da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004da8:	69b9      	ldr	r1, [r7, #24]
 8004daa:	0148      	lsls	r0, r1, #5
 8004dac:	69f9      	ldr	r1, [r7, #28]
 8004dae:	4401      	add	r1, r0
 8004db0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004db4:	4313      	orrs	r3, r2
 8004db6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004db8:	79fb      	ldrb	r3, [r7, #7]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d10d      	bne.n	8004dda <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d009      	beq.n	8004dda <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	68d9      	ldr	r1, [r3, #12]
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd6:	460a      	mov	r2, r1
 8004dd8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	78db      	ldrb	r3, [r3, #3]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d128      	bne.n	8004e34 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d110      	bne.n	8004e14 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	015a      	lsls	r2, r3, #5
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	0151      	lsls	r1, r2, #5
 8004e04:	69fa      	ldr	r2, [r7, #28]
 8004e06:	440a      	add	r2, r1
 8004e08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e10:	6013      	str	r3, [r2, #0]
 8004e12:	e00f      	b.n	8004e34 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	0151      	lsls	r1, r2, #5
 8004e26:	69fa      	ldr	r2, [r7, #28]
 8004e28:	440a      	add	r2, r1
 8004e2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e32:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	015a      	lsls	r2, r3, #5
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	0151      	lsls	r1, r2, #5
 8004e46:	69fa      	ldr	r2, [r7, #28]
 8004e48:	440a      	add	r2, r1
 8004e4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3720      	adds	r7, #32
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	1ff80000 	.word	0x1ff80000

08004e64 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	785b      	ldrb	r3, [r3, #1]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	f040 80cd 	bne.w	8005020 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d132      	bne.n	8004ef4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	015a      	lsls	r2, r3, #5
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	4413      	add	r3, r2
 8004e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	0151      	lsls	r1, r2, #5
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	440a      	add	r2, r1
 8004ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ea8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004eac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004eb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	0151      	lsls	r1, r2, #5
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	440a      	add	r2, r1
 8004ec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ecc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ed0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	0151      	lsls	r1, r2, #5
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	440a      	add	r2, r1
 8004ee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eec:	0cdb      	lsrs	r3, r3, #19
 8004eee:	04db      	lsls	r3, r3, #19
 8004ef0:	6113      	str	r3, [r2, #16]
 8004ef2:	e04e      	b.n	8004f92 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	0151      	lsls	r1, r2, #5
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	440a      	add	r2, r1
 8004f0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f0e:	0cdb      	lsrs	r3, r3, #19
 8004f10:	04db      	lsls	r3, r3, #19
 8004f12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	0151      	lsls	r1, r2, #5
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	440a      	add	r2, r1
 8004f2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f2e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f32:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f36:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	695a      	ldr	r2, [r3, #20]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d903      	bls.n	8004f4c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	0151      	lsls	r1, r2, #5
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	440a      	add	r2, r1
 8004f62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f78:	691a      	ldr	r2, [r3, #16]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f82:	6939      	ldr	r1, [r7, #16]
 8004f84:	0148      	lsls	r0, r1, #5
 8004f86:	6979      	ldr	r1, [r7, #20]
 8004f88:	4401      	add	r1, r0
 8004f8a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f92:	79fb      	ldrb	r3, [r7, #7]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d11e      	bne.n	8004fd6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d009      	beq.n	8004fb4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fac:	461a      	mov	r2, r3
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	0151      	lsls	r1, r2, #5
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	440a      	add	r2, r1
 8004fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fd2:	6013      	str	r3, [r2, #0]
 8004fd4:	e092      	b.n	80050fc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	0151      	lsls	r1, r2, #5
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	440a      	add	r2, r1
 8004fec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ff0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ff4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d07e      	beq.n	80050fc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005004:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	f003 030f 	and.w	r3, r3, #15
 800500e:	2101      	movs	r1, #1
 8005010:	fa01 f303 	lsl.w	r3, r1, r3
 8005014:	6979      	ldr	r1, [r7, #20]
 8005016:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800501a:	4313      	orrs	r3, r2
 800501c:	634b      	str	r3, [r1, #52]	; 0x34
 800501e:	e06d      	b.n	80050fc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	4413      	add	r3, r2
 8005028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	0151      	lsls	r1, r2, #5
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	440a      	add	r2, r1
 8005036:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800503a:	0cdb      	lsrs	r3, r3, #19
 800503c:	04db      	lsls	r3, r3, #19
 800503e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	4413      	add	r3, r2
 8005048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	0151      	lsls	r1, r2, #5
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	440a      	add	r2, r1
 8005056:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800505a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800505e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005062:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d003      	beq.n	8005074 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	4413      	add	r3, r2
 800507c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	0151      	lsls	r1, r2, #5
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	440a      	add	r2, r1
 800508a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800508e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005092:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a0:	691a      	ldr	r2, [r3, #16]
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050aa:	6939      	ldr	r1, [r7, #16]
 80050ac:	0148      	lsls	r0, r1, #5
 80050ae:	6979      	ldr	r1, [r7, #20]
 80050b0:	4401      	add	r1, r0
 80050b2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050b6:	4313      	orrs	r3, r2
 80050b8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80050ba:	79fb      	ldrb	r3, [r7, #7]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d10d      	bne.n	80050dc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d009      	beq.n	80050dc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	68d9      	ldr	r1, [r3, #12]
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	015a      	lsls	r2, r3, #5
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	4413      	add	r3, r2
 80050d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d8:	460a      	mov	r2, r1
 80050da:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	0151      	lsls	r1, r2, #5
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	440a      	add	r2, r1
 80050f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	371c      	adds	r7, #28
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800510a:	b480      	push	{r7}
 800510c:	b089      	sub	sp, #36	; 0x24
 800510e:	af00      	add	r7, sp, #0
 8005110:	60f8      	str	r0, [r7, #12]
 8005112:	60b9      	str	r1, [r7, #8]
 8005114:	4611      	mov	r1, r2
 8005116:	461a      	mov	r2, r3
 8005118:	460b      	mov	r3, r1
 800511a:	71fb      	strb	r3, [r7, #7]
 800511c:	4613      	mov	r3, r2
 800511e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005128:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800512c:	2b00      	cmp	r3, #0
 800512e:	d123      	bne.n	8005178 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005130:	88bb      	ldrh	r3, [r7, #4]
 8005132:	3303      	adds	r3, #3
 8005134:	089b      	lsrs	r3, r3, #2
 8005136:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005138:	2300      	movs	r3, #0
 800513a:	61bb      	str	r3, [r7, #24]
 800513c:	e018      	b.n	8005170 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800513e:	79fb      	ldrb	r3, [r7, #7]
 8005140:	031a      	lsls	r2, r3, #12
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	4413      	add	r3, r2
 8005146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800514a:	461a      	mov	r2, r3
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	3301      	adds	r3, #1
 8005156:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	3301      	adds	r3, #1
 800515c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	3301      	adds	r3, #1
 8005162:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	3301      	adds	r3, #1
 8005168:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	3301      	adds	r3, #1
 800516e:	61bb      	str	r3, [r7, #24]
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	429a      	cmp	r2, r3
 8005176:	d3e2      	bcc.n	800513e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3724      	adds	r7, #36	; 0x24
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005186:	b480      	push	{r7}
 8005188:	b08b      	sub	sp, #44	; 0x2c
 800518a:	af00      	add	r7, sp, #0
 800518c:	60f8      	str	r0, [r7, #12]
 800518e:	60b9      	str	r1, [r7, #8]
 8005190:	4613      	mov	r3, r2
 8005192:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800519c:	88fb      	ldrh	r3, [r7, #6]
 800519e:	089b      	lsrs	r3, r3, #2
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80051a4:	88fb      	ldrh	r3, [r7, #6]
 80051a6:	f003 0303 	and.w	r3, r3, #3
 80051aa:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80051ac:	2300      	movs	r3, #0
 80051ae:	623b      	str	r3, [r7, #32]
 80051b0:	e014      	b.n	80051dc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	601a      	str	r2, [r3, #0]
    pDest++;
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	3301      	adds	r3, #1
 80051c2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	3301      	adds	r3, #1
 80051c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	3301      	adds	r3, #1
 80051ce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	3301      	adds	r3, #1
 80051d4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80051d6:	6a3b      	ldr	r3, [r7, #32]
 80051d8:	3301      	adds	r3, #1
 80051da:	623b      	str	r3, [r7, #32]
 80051dc:	6a3a      	ldr	r2, [r7, #32]
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d3e6      	bcc.n	80051b2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80051e4:	8bfb      	ldrh	r3, [r7, #30]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d01e      	beq.n	8005228 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80051ea:	2300      	movs	r3, #0
 80051ec:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051f4:	461a      	mov	r2, r3
 80051f6:	f107 0310 	add.w	r3, r7, #16
 80051fa:	6812      	ldr	r2, [r2, #0]
 80051fc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	b2db      	uxtb	r3, r3
 8005204:	00db      	lsls	r3, r3, #3
 8005206:	fa22 f303 	lsr.w	r3, r2, r3
 800520a:	b2da      	uxtb	r2, r3
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	701a      	strb	r2, [r3, #0]
      i++;
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	3301      	adds	r3, #1
 8005214:	623b      	str	r3, [r7, #32]
      pDest++;
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	3301      	adds	r3, #1
 800521a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800521c:	8bfb      	ldrh	r3, [r7, #30]
 800521e:	3b01      	subs	r3, #1
 8005220:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005222:	8bfb      	ldrh	r3, [r7, #30]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1ea      	bne.n	80051fe <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800522a:	4618      	mov	r0, r3
 800522c:	372c      	adds	r7, #44	; 0x2c
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005236:	b480      	push	{r7}
 8005238:	b085      	sub	sp, #20
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	785b      	ldrb	r3, [r3, #1]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d12c      	bne.n	80052ac <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4413      	add	r3, r2
 800525a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	db12      	blt.n	800528a <USB_EPSetStall+0x54>
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00f      	beq.n	800528a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	4413      	add	r3, r2
 8005272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	0151      	lsls	r1, r2, #5
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	440a      	add	r2, r1
 8005280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005284:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005288:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	4413      	add	r3, r2
 8005292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	0151      	lsls	r1, r2, #5
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	440a      	add	r2, r1
 80052a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052a8:	6013      	str	r3, [r2, #0]
 80052aa:	e02b      	b.n	8005304 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	db12      	blt.n	80052e4 <USB_EPSetStall+0xae>
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00f      	beq.n	80052e4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	0151      	lsls	r1, r2, #5
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	440a      	add	r2, r1
 80052da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052e2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	0151      	lsls	r1, r2, #5
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	440a      	add	r2, r1
 80052fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005302:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005312:	b480      	push	{r7}
 8005314:	b085      	sub	sp, #20
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
 800531a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	785b      	ldrb	r3, [r3, #1]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d128      	bne.n	8005380 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	015a      	lsls	r2, r3, #5
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	4413      	add	r3, r2
 8005336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	0151      	lsls	r1, r2, #5
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	440a      	add	r2, r1
 8005344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005348:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800534c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	78db      	ldrb	r3, [r3, #3]
 8005352:	2b03      	cmp	r3, #3
 8005354:	d003      	beq.n	800535e <USB_EPClearStall+0x4c>
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	78db      	ldrb	r3, [r3, #3]
 800535a:	2b02      	cmp	r3, #2
 800535c:	d138      	bne.n	80053d0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	015a      	lsls	r2, r3, #5
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	4413      	add	r3, r2
 8005366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	0151      	lsls	r1, r2, #5
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	440a      	add	r2, r1
 8005374:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	e027      	b.n	80053d0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	0151      	lsls	r1, r2, #5
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	440a      	add	r2, r1
 8005396:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800539a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800539e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	78db      	ldrb	r3, [r3, #3]
 80053a4:	2b03      	cmp	r3, #3
 80053a6:	d003      	beq.n	80053b0 <USB_EPClearStall+0x9e>
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	78db      	ldrb	r3, [r3, #3]
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d10f      	bne.n	80053d0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	0151      	lsls	r1, r2, #5
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	440a      	add	r2, r1
 80053c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ce:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80053de:	b480      	push	{r7}
 80053e0:	b085      	sub	sp, #20
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	460b      	mov	r3, r1
 80053e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005400:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	78fb      	ldrb	r3, [r7, #3]
 800540c:	011b      	lsls	r3, r3, #4
 800540e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005412:	68f9      	ldr	r1, [r7, #12]
 8005414:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005418:	4313      	orrs	r3, r2
 800541a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800542a:	b480      	push	{r7}
 800542c:	b085      	sub	sp, #20
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005444:	f023 0303 	bic.w	r3, r3, #3
 8005448:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005458:	f023 0302 	bic.w	r3, r3, #2
 800545c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005486:	f023 0303 	bic.w	r3, r3, #3
 800548a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800549a:	f043 0302 	orr.w	r3, r3, #2
 800549e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b085      	sub	sp, #20
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	4013      	ands	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80054c6:	68fb      	ldr	r3, [r7, #12]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	4013      	ands	r3, r2
 80054f6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	0c1b      	lsrs	r3, r3, #16
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3714      	adds	r7, #20
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	4013      	ands	r3, r2
 800552a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	b29b      	uxth	r3, r3
}
 8005530:	4618      	mov	r0, r3
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	460b      	mov	r3, r1
 8005546:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800554c:	78fb      	ldrb	r3, [r7, #3]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4413      	add	r3, r2
 8005554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	4013      	ands	r3, r2
 8005568:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800556a:	68bb      	ldr	r3, [r7, #8]
}
 800556c:	4618      	mov	r0, r3
 800556e:	3714      	adds	r7, #20
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	460b      	mov	r3, r1
 8005582:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800559a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800559c:	78fb      	ldrb	r3, [r7, #3]
 800559e:	f003 030f 	and.w	r3, r3, #15
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	fa22 f303 	lsr.w	r3, r2, r3
 80055a8:	01db      	lsls	r3, r3, #7
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80055b2:	78fb      	ldrb	r3, [r7, #3]
 80055b4:	015a      	lsls	r2, r3, #5
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	4413      	add	r3, r2
 80055ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	4013      	ands	r3, r2
 80055c4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80055c6:	68bb      	ldr	r3, [r7, #8]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	371c      	adds	r7, #28
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	f003 0301 	and.w	r3, r3, #1
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800560a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800560e:	f023 0307 	bic.w	r3, r3, #7
 8005612:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005626:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3714      	adds	r7, #20
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
	...

08005638 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	460b      	mov	r3, r1
 8005642:	607a      	str	r2, [r7, #4]
 8005644:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	333c      	adds	r3, #60	; 0x3c
 800564e:	3304      	adds	r3, #4
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	4a26      	ldr	r2, [pc, #152]	; (80056f0 <USB_EP0_OutStart+0xb8>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d90a      	bls.n	8005672 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005668:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800566c:	d101      	bne.n	8005672 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800566e:	2300      	movs	r3, #0
 8005670:	e037      	b.n	80056e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005678:	461a      	mov	r2, r3
 800567a:	2300      	movs	r3, #0
 800567c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800568c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005690:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056a0:	f043 0318 	orr.w	r3, r3, #24
 80056a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056b4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80056b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80056ba:	7afb      	ldrb	r3, [r7, #11]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d10f      	bne.n	80056e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c6:	461a      	mov	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056da:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80056de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	371c      	adds	r7, #28
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	4f54300a 	.word	0x4f54300a

080056f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	3301      	adds	r3, #1
 8005704:	60fb      	str	r3, [r7, #12]
 8005706:	4a13      	ldr	r2, [pc, #76]	; (8005754 <USB_CoreReset+0x60>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d901      	bls.n	8005710 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e01a      	b.n	8005746 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	2b00      	cmp	r3, #0
 8005716:	daf3      	bge.n	8005700 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	f043 0201 	orr.w	r2, r3, #1
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	3301      	adds	r3, #1
 800572c:	60fb      	str	r3, [r7, #12]
 800572e:	4a09      	ldr	r2, [pc, #36]	; (8005754 <USB_CoreReset+0x60>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d901      	bls.n	8005738 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e006      	b.n	8005746 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b01      	cmp	r3, #1
 8005742:	d0f1      	beq.n	8005728 <USB_CoreReset+0x34>

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	00030d40 	.word	0x00030d40

08005758 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	460b      	mov	r3, r1
 8005762:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005764:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005768:	f004 fa0e 	bl	8009b88 <USBD_static_malloc>
 800576c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d105      	bne.n	8005780 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800577c:	2302      	movs	r3, #2
 800577e:	e066      	b.n	800584e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	7c1b      	ldrb	r3, [r3, #16]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d119      	bne.n	80057c4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005790:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005794:	2202      	movs	r2, #2
 8005796:	2181      	movs	r1, #129	; 0x81
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f004 f884 	bl	80098a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80057a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057a8:	2202      	movs	r2, #2
 80057aa:	2101      	movs	r1, #1
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f004 f87a 	bl	80098a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2210      	movs	r2, #16
 80057be:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80057c2:	e016      	b.n	80057f2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80057c4:	2340      	movs	r3, #64	; 0x40
 80057c6:	2202      	movs	r2, #2
 80057c8:	2181      	movs	r1, #129	; 0x81
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f004 f86b 	bl	80098a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80057d6:	2340      	movs	r3, #64	; 0x40
 80057d8:	2202      	movs	r2, #2
 80057da:	2101      	movs	r1, #1
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f004 f862 	bl	80098a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2210      	movs	r2, #16
 80057ee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80057f2:	2308      	movs	r3, #8
 80057f4:	2203      	movs	r2, #3
 80057f6:	2182      	movs	r1, #130	; 0x82
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f004 f854 	bl	80098a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	7c1b      	ldrb	r3, [r3, #16]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d109      	bne.n	800583c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800582e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005832:	2101      	movs	r1, #1
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f004 f925 	bl	8009a84 <USBD_LL_PrepareReceive>
 800583a:	e007      	b.n	800584c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005842:	2340      	movs	r3, #64	; 0x40
 8005844:	2101      	movs	r1, #1
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f004 f91c 	bl	8009a84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b082      	sub	sp, #8
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
 800585e:	460b      	mov	r3, r1
 8005860:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005862:	2181      	movs	r1, #129	; 0x81
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f004 f844 	bl	80098f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005870:	2101      	movs	r1, #1
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f004 f83d 	bl	80098f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005880:	2182      	movs	r1, #130	; 0x82
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f004 f835 	bl	80098f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00e      	beq.n	80058c0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058b2:	4618      	mov	r0, r3
 80058b4:	f004 f976 	bl	8009ba4 <USBD_static_free>
    pdev->pClassData = NULL;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3708      	adds	r7, #8
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
	...

080058cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058dc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80058de:	2300      	movs	r3, #0
 80058e0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80058e2:	2300      	movs	r3, #0
 80058e4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80058e6:	2300      	movs	r3, #0
 80058e8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d101      	bne.n	80058f4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e0af      	b.n	8005a54 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d03f      	beq.n	8005980 <USBD_CDC_Setup+0xb4>
 8005900:	2b20      	cmp	r3, #32
 8005902:	f040 809f 	bne.w	8005a44 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	88db      	ldrh	r3, [r3, #6]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d02e      	beq.n	800596c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	b25b      	sxtb	r3, r3
 8005914:	2b00      	cmp	r3, #0
 8005916:	da16      	bge.n	8005946 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	683a      	ldr	r2, [r7, #0]
 8005922:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005924:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	88d2      	ldrh	r2, [r2, #6]
 800592a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	88db      	ldrh	r3, [r3, #6]
 8005930:	2b07      	cmp	r3, #7
 8005932:	bf28      	it	cs
 8005934:	2307      	movcs	r3, #7
 8005936:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	89fa      	ldrh	r2, [r7, #14]
 800593c:	4619      	mov	r1, r3
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f001 fb43 	bl	8006fca <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005944:	e085      	b.n	8005a52 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	785a      	ldrb	r2, [r3, #1]
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	88db      	ldrh	r3, [r3, #6]
 8005954:	b2da      	uxtb	r2, r3
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800595c:	6939      	ldr	r1, [r7, #16]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	88db      	ldrh	r3, [r3, #6]
 8005962:	461a      	mov	r2, r3
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f001 fb5c 	bl	8007022 <USBD_CtlPrepareRx>
      break;
 800596a:	e072      	b.n	8005a52 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	7850      	ldrb	r0, [r2, #1]
 8005978:	2200      	movs	r2, #0
 800597a:	6839      	ldr	r1, [r7, #0]
 800597c:	4798      	blx	r3
      break;
 800597e:	e068      	b.n	8005a52 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	785b      	ldrb	r3, [r3, #1]
 8005984:	2b0b      	cmp	r3, #11
 8005986:	d852      	bhi.n	8005a2e <USBD_CDC_Setup+0x162>
 8005988:	a201      	add	r2, pc, #4	; (adr r2, 8005990 <USBD_CDC_Setup+0xc4>)
 800598a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598e:	bf00      	nop
 8005990:	080059c1 	.word	0x080059c1
 8005994:	08005a3d 	.word	0x08005a3d
 8005998:	08005a2f 	.word	0x08005a2f
 800599c:	08005a2f 	.word	0x08005a2f
 80059a0:	08005a2f 	.word	0x08005a2f
 80059a4:	08005a2f 	.word	0x08005a2f
 80059a8:	08005a2f 	.word	0x08005a2f
 80059ac:	08005a2f 	.word	0x08005a2f
 80059b0:	08005a2f 	.word	0x08005a2f
 80059b4:	08005a2f 	.word	0x08005a2f
 80059b8:	080059eb 	.word	0x080059eb
 80059bc:	08005a15 	.word	0x08005a15
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b03      	cmp	r3, #3
 80059ca:	d107      	bne.n	80059dc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80059cc:	f107 030a 	add.w	r3, r7, #10
 80059d0:	2202      	movs	r2, #2
 80059d2:	4619      	mov	r1, r3
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f001 faf8 	bl	8006fca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80059da:	e032      	b.n	8005a42 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80059dc:	6839      	ldr	r1, [r7, #0]
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f001 fa82 	bl	8006ee8 <USBD_CtlError>
            ret = USBD_FAIL;
 80059e4:	2303      	movs	r3, #3
 80059e6:	75fb      	strb	r3, [r7, #23]
          break;
 80059e8:	e02b      	b.n	8005a42 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d107      	bne.n	8005a06 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80059f6:	f107 030d 	add.w	r3, r7, #13
 80059fa:	2201      	movs	r2, #1
 80059fc:	4619      	mov	r1, r3
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f001 fae3 	bl	8006fca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a04:	e01d      	b.n	8005a42 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005a06:	6839      	ldr	r1, [r7, #0]
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f001 fa6d 	bl	8006ee8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	75fb      	strb	r3, [r7, #23]
          break;
 8005a12:	e016      	b.n	8005a42 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d00f      	beq.n	8005a40 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005a20:	6839      	ldr	r1, [r7, #0]
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f001 fa60 	bl	8006ee8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005a2c:	e008      	b.n	8005a40 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005a2e:	6839      	ldr	r1, [r7, #0]
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f001 fa59 	bl	8006ee8 <USBD_CtlError>
          ret = USBD_FAIL;
 8005a36:	2303      	movs	r3, #3
 8005a38:	75fb      	strb	r3, [r7, #23]
          break;
 8005a3a:	e002      	b.n	8005a42 <USBD_CDC_Setup+0x176>
          break;
 8005a3c:	bf00      	nop
 8005a3e:	e008      	b.n	8005a52 <USBD_CDC_Setup+0x186>
          break;
 8005a40:	bf00      	nop
      }
      break;
 8005a42:	e006      	b.n	8005a52 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005a44:	6839      	ldr	r1, [r7, #0]
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f001 fa4e 	bl	8006ee8 <USBD_CtlError>
      ret = USBD_FAIL;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	75fb      	strb	r3, [r7, #23]
      break;
 8005a50:	bf00      	nop
  }

  return (uint8_t)ret;
 8005a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3718      	adds	r7, #24
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	460b      	mov	r3, r1
 8005a66:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005a6e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e04f      	b.n	8005b1e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a84:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005a86:	78fa      	ldrb	r2, [r7, #3]
 8005a88:	6879      	ldr	r1, [r7, #4]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	440b      	add	r3, r1
 8005a94:	3318      	adds	r3, #24
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d029      	beq.n	8005af0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005a9c:	78fa      	ldrb	r2, [r7, #3]
 8005a9e:	6879      	ldr	r1, [r7, #4]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	440b      	add	r3, r1
 8005aaa:	3318      	adds	r3, #24
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	78f9      	ldrb	r1, [r7, #3]
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	1a5b      	subs	r3, r3, r1
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4403      	add	r3, r0
 8005abc:	3344      	adds	r3, #68	; 0x44
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	fbb2 f1f3 	udiv	r1, r2, r3
 8005ac4:	fb03 f301 	mul.w	r3, r3, r1
 8005ac8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d110      	bne.n	8005af0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005ace:	78fa      	ldrb	r2, [r7, #3]
 8005ad0:	6879      	ldr	r1, [r7, #4]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4413      	add	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	440b      	add	r3, r1
 8005adc:	3318      	adds	r3, #24
 8005ade:	2200      	movs	r2, #0
 8005ae0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005ae2:	78f9      	ldrb	r1, [r7, #3]
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f003 ffaa 	bl	8009a42 <USBD_LL_Transmit>
 8005aee:	e015      	b.n	8005b1c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00b      	beq.n	8005b1c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005b18:	78fa      	ldrb	r2, [r7, #3]
 8005b1a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b084      	sub	sp, #16
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	460b      	mov	r3, r1
 8005b30:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b38:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e015      	b.n	8005b74 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005b48:	78fb      	ldrb	r3, [r7, #3]
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f003 ffba 	bl	8009ac6 <USBD_LL_GetRxDataSize>
 8005b52:	4602      	mov	r2, r0
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005b6e:	4611      	mov	r1, r2
 8005b70:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b8a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e01b      	b.n	8005bce <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d015      	beq.n	8005bcc <USBD_CDC_EP0_RxReady+0x50>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005ba6:	2bff      	cmp	r3, #255	; 0xff
 8005ba8:	d010      	beq.n	8005bcc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005bb8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005bc0:	b292      	uxth	r2, r2
 8005bc2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	22ff      	movs	r2, #255	; 0xff
 8005bc8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
	...

08005bd8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2243      	movs	r2, #67	; 0x43
 8005be4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005be6:	4b03      	ldr	r3, [pc, #12]	; (8005bf4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	20000094 	.word	0x20000094

08005bf8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2243      	movs	r2, #67	; 0x43
 8005c04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005c06:	4b03      	ldr	r3, [pc, #12]	; (8005c14 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	20000050 	.word	0x20000050

08005c18 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2243      	movs	r2, #67	; 0x43
 8005c24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005c26:	4b03      	ldr	r3, [pc, #12]	; (8005c34 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	200000d8 	.word	0x200000d8

08005c38 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	220a      	movs	r2, #10
 8005c44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005c46:	4b03      	ldr	r3, [pc, #12]	; (8005c54 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr
 8005c54:	2000000c 	.word	0x2000000c

08005c58 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d101      	bne.n	8005c6c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e004      	b.n	8005c76 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b087      	sub	sp, #28
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	60f8      	str	r0, [r7, #12]
 8005c8a:	60b9      	str	r1, [r7, #8]
 8005c8c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c94:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e008      	b.n	8005cb2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	371c      	adds	r7, #28
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b085      	sub	sp, #20
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cce:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e004      	b.n	8005ce4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cfe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005d00:	2301      	movs	r3, #1
 8005d02:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e01a      	b.n	8005d48 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d114      	bne.n	8005d46 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005d3a:	2181      	movs	r1, #129	; 0x81
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f003 fe80 	bl	8009a42 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005d42:	2300      	movs	r3, #0
 8005d44:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e016      	b.n	8005d9c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	7c1b      	ldrb	r3, [r3, #16]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d109      	bne.n	8005d8a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d80:	2101      	movs	r1, #1
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f003 fe7e 	bl	8009a84 <USBD_LL_PrepareReceive>
 8005d88:	e007      	b.n	8005d9a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d90:	2340      	movs	r3, #64	; 0x40
 8005d92:	2101      	movs	r1, #1
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f003 fe75 	bl	8009a84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	4613      	mov	r3, r2
 8005db0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e01f      	b.n	8005dfc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d003      	beq.n	8005de2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	79fa      	ldrb	r2, [r7, #7]
 8005dee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f003 fcf1 	bl	80097d8 <USBD_LL_Init>
 8005df6:	4603      	mov	r3, r0
 8005df8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3718      	adds	r7, #24
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e016      	b.n	8005e4a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	683a      	ldr	r2, [r7, #0]
 8005e20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00b      	beq.n	8005e48 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e38:	f107 020e 	add.w	r2, r7, #14
 8005e3c:	4610      	mov	r0, r2
 8005e3e:	4798      	blx	r3
 8005e40:	4602      	mov	r2, r0
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b082      	sub	sp, #8
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f003 fd08 	bl	8009870 <USBD_LL_Start>
 8005e60:	4603      	mov	r3, r0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b083      	sub	sp, #12
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d009      	beq.n	8005eae <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	78fa      	ldrb	r2, [r7, #3]
 8005ea4:	4611      	mov	r1, r2
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	4798      	blx	r3
 8005eaa:	4603      	mov	r3, r0
 8005eac:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d007      	beq.n	8005ede <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	78fa      	ldrb	r2, [r7, #3]
 8005ed8:	4611      	mov	r1, r2
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	4798      	blx	r3
  }

  return USBD_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ef8:	6839      	ldr	r1, [r7, #0]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 ffba 	bl	8006e74 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005f0e:	461a      	mov	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f1c:	f003 031f 	and.w	r3, r3, #31
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d01a      	beq.n	8005f5a <USBD_LL_SetupStage+0x72>
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d822      	bhi.n	8005f6e <USBD_LL_SetupStage+0x86>
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d002      	beq.n	8005f32 <USBD_LL_SetupStage+0x4a>
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d00a      	beq.n	8005f46 <USBD_LL_SetupStage+0x5e>
 8005f30:	e01d      	b.n	8005f6e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f38:	4619      	mov	r1, r3
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 fa62 	bl	8006404 <USBD_StdDevReq>
 8005f40:	4603      	mov	r3, r0
 8005f42:	73fb      	strb	r3, [r7, #15]
      break;
 8005f44:	e020      	b.n	8005f88 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 fac6 	bl	80064e0 <USBD_StdItfReq>
 8005f54:	4603      	mov	r3, r0
 8005f56:	73fb      	strb	r3, [r7, #15]
      break;
 8005f58:	e016      	b.n	8005f88 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f60:	4619      	mov	r1, r3
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fb05 	bl	8006572 <USBD_StdEPReq>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f6c:	e00c      	b.n	8005f88 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f74:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f003 fcd7 	bl	8009930 <USBD_LL_StallEP>
 8005f82:	4603      	mov	r3, r0
 8005f84:	73fb      	strb	r3, [r7, #15]
      break;
 8005f86:	bf00      	nop
  }

  return ret;
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b086      	sub	sp, #24
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	60f8      	str	r0, [r7, #12]
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	607a      	str	r2, [r7, #4]
 8005f9e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005fa0:	7afb      	ldrb	r3, [r7, #11]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d138      	bne.n	8006018 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005fac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005fb4:	2b03      	cmp	r3, #3
 8005fb6:	d14a      	bne.n	800604e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d913      	bls.n	8005fec <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	689a      	ldr	r2, [r3, #8]
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	1ad2      	subs	r2, r2, r3
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	68da      	ldr	r2, [r3, #12]
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	bf28      	it	cs
 8005fde:	4613      	movcs	r3, r2
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	6879      	ldr	r1, [r7, #4]
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f001 f839 	bl	800705c <USBD_CtlContinueRx>
 8005fea:	e030      	b.n	800604e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2b03      	cmp	r3, #3
 8005ff6:	d10b      	bne.n	8006010 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d005      	beq.n	8006010 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f001 f834 	bl	800707e <USBD_CtlSendStatus>
 8006016:	e01a      	b.n	800604e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b03      	cmp	r3, #3
 8006022:	d114      	bne.n	800604e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00e      	beq.n	800604e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	7afa      	ldrb	r2, [r7, #11]
 800603a:	4611      	mov	r1, r2
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	4798      	blx	r3
 8006040:	4603      	mov	r3, r0
 8006042:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006044:	7dfb      	ldrb	r3, [r7, #23]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800604a:	7dfb      	ldrb	r3, [r7, #23]
 800604c:	e000      	b.n	8006050 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3718      	adds	r7, #24
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	460b      	mov	r3, r1
 8006062:	607a      	str	r2, [r7, #4]
 8006064:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006066:	7afb      	ldrb	r3, [r7, #11]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d16b      	bne.n	8006144 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	3314      	adds	r3, #20
 8006070:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006078:	2b02      	cmp	r3, #2
 800607a:	d156      	bne.n	800612a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	429a      	cmp	r2, r3
 8006086:	d914      	bls.n	80060b2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	1ad2      	subs	r2, r2, r3
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	461a      	mov	r2, r3
 800609c:	6879      	ldr	r1, [r7, #4]
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f000 ffae 	bl	8007000 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060a4:	2300      	movs	r3, #0
 80060a6:	2200      	movs	r2, #0
 80060a8:	2100      	movs	r1, #0
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f003 fcea 	bl	8009a84 <USBD_LL_PrepareReceive>
 80060b0:	e03b      	b.n	800612a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	68da      	ldr	r2, [r3, #12]
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d11c      	bne.n	80060f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	685a      	ldr	r2, [r3, #4]
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d316      	bcc.n	80060f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d20f      	bcs.n	80060f8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80060d8:	2200      	movs	r2, #0
 80060da:	2100      	movs	r1, #0
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 ff8f 	bl	8007000 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060ea:	2300      	movs	r3, #0
 80060ec:	2200      	movs	r2, #0
 80060ee:	2100      	movs	r1, #0
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f003 fcc7 	bl	8009a84 <USBD_LL_PrepareReceive>
 80060f6:	e018      	b.n	800612a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b03      	cmp	r3, #3
 8006102:	d10b      	bne.n	800611c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d005      	beq.n	800611c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800611c:	2180      	movs	r1, #128	; 0x80
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f003 fc06 	bl	8009930 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f000 ffbd 	bl	80070a4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006130:	2b01      	cmp	r3, #1
 8006132:	d122      	bne.n	800617a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f7ff fe98 	bl	8005e6a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006142:	e01a      	b.n	800617a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b03      	cmp	r3, #3
 800614e:	d114      	bne.n	800617a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006156:	695b      	ldr	r3, [r3, #20]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00e      	beq.n	800617a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	7afa      	ldrb	r2, [r7, #11]
 8006166:	4611      	mov	r1, r2
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	4798      	blx	r3
 800616c:	4603      	mov	r3, r0
 800616e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006170:	7dfb      	ldrb	r3, [r7, #23]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006176:	7dfb      	ldrb	r3, [r7, #23]
 8006178:	e000      	b.n	800617c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3718      	adds	r7, #24
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d101      	bne.n	80061b8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e02f      	b.n	8006218 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00f      	beq.n	80061e2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d009      	beq.n	80061e2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	6852      	ldr	r2, [r2, #4]
 80061da:	b2d2      	uxtb	r2, r2
 80061dc:	4611      	mov	r1, r2
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061e2:	2340      	movs	r3, #64	; 0x40
 80061e4:	2200      	movs	r2, #0
 80061e6:	2100      	movs	r1, #0
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f003 fb5c 	bl	80098a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2240      	movs	r2, #64	; 0x40
 80061fa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061fe:	2340      	movs	r3, #64	; 0x40
 8006200:	2200      	movs	r2, #0
 8006202:	2180      	movs	r1, #128	; 0x80
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f003 fb4e 	bl	80098a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2240      	movs	r2, #64	; 0x40
 8006214:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	460b      	mov	r3, r1
 800622a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	78fa      	ldrb	r2, [r7, #3]
 8006230:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800624e:	b2da      	uxtb	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2204      	movs	r2, #4
 800625a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b04      	cmp	r3, #4
 800627e:	d106      	bne.n	800628e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006286:	b2da      	uxtb	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e012      	b.n	80062d8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b03      	cmp	r3, #3
 80062bc:	d10b      	bne.n	80062d6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062c4:	69db      	ldr	r3, [r3, #28]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d005      	beq.n	80062d6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	460b      	mov	r3, r1
 80062ea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e014      	b.n	8006324 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b03      	cmp	r3, #3
 8006304:	d10d      	bne.n	8006322 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d007      	beq.n	8006322 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	78fa      	ldrb	r2, [r7, #3]
 800631c:	4611      	mov	r1, r2
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3708      	adds	r7, #8
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	460b      	mov	r3, r1
 8006336:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006342:	2303      	movs	r3, #3
 8006344:	e014      	b.n	8006370 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b03      	cmp	r3, #3
 8006350:	d10d      	bne.n	800636e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635a:	2b00      	cmp	r3, #0
 800635c:	d007      	beq.n	800636e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006366:	78fa      	ldrb	r2, [r7, #3]
 8006368:	4611      	mov	r1, r2
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b082      	sub	sp, #8
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d009      	beq.n	80063bc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	6852      	ldr	r2, [r2, #4]
 80063b4:	b2d2      	uxtb	r2, r2
 80063b6:	4611      	mov	r1, r2
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	4798      	blx	r3
  }

  return USBD_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3708      	adds	r7, #8
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b087      	sub	sp, #28
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	3301      	adds	r3, #1
 80063dc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80063e4:	8a3b      	ldrh	r3, [r7, #16]
 80063e6:	021b      	lsls	r3, r3, #8
 80063e8:	b21a      	sxth	r2, r3
 80063ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	b21b      	sxth	r3, r3
 80063f2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80063f4:	89fb      	ldrh	r3, [r7, #14]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	371c      	adds	r7, #28
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
	...

08006404 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800640e:	2300      	movs	r3, #0
 8006410:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800641a:	2b40      	cmp	r3, #64	; 0x40
 800641c:	d005      	beq.n	800642a <USBD_StdDevReq+0x26>
 800641e:	2b40      	cmp	r3, #64	; 0x40
 8006420:	d853      	bhi.n	80064ca <USBD_StdDevReq+0xc6>
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00b      	beq.n	800643e <USBD_StdDevReq+0x3a>
 8006426:	2b20      	cmp	r3, #32
 8006428:	d14f      	bne.n	80064ca <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	6839      	ldr	r1, [r7, #0]
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	4798      	blx	r3
 8006438:	4603      	mov	r3, r0
 800643a:	73fb      	strb	r3, [r7, #15]
      break;
 800643c:	e04a      	b.n	80064d4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	785b      	ldrb	r3, [r3, #1]
 8006442:	2b09      	cmp	r3, #9
 8006444:	d83b      	bhi.n	80064be <USBD_StdDevReq+0xba>
 8006446:	a201      	add	r2, pc, #4	; (adr r2, 800644c <USBD_StdDevReq+0x48>)
 8006448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644c:	080064a1 	.word	0x080064a1
 8006450:	080064b5 	.word	0x080064b5
 8006454:	080064bf 	.word	0x080064bf
 8006458:	080064ab 	.word	0x080064ab
 800645c:	080064bf 	.word	0x080064bf
 8006460:	0800647f 	.word	0x0800647f
 8006464:	08006475 	.word	0x08006475
 8006468:	080064bf 	.word	0x080064bf
 800646c:	08006497 	.word	0x08006497
 8006470:	08006489 	.word	0x08006489
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006474:	6839      	ldr	r1, [r7, #0]
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f9de 	bl	8006838 <USBD_GetDescriptor>
          break;
 800647c:	e024      	b.n	80064c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800647e:	6839      	ldr	r1, [r7, #0]
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fb6d 	bl	8006b60 <USBD_SetAddress>
          break;
 8006486:	e01f      	b.n	80064c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006488:	6839      	ldr	r1, [r7, #0]
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fbac 	bl	8006be8 <USBD_SetConfig>
 8006490:	4603      	mov	r3, r0
 8006492:	73fb      	strb	r3, [r7, #15]
          break;
 8006494:	e018      	b.n	80064c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fc4b 	bl	8006d34 <USBD_GetConfig>
          break;
 800649e:	e013      	b.n	80064c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80064a0:	6839      	ldr	r1, [r7, #0]
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fc7c 	bl	8006da0 <USBD_GetStatus>
          break;
 80064a8:	e00e      	b.n	80064c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80064aa:	6839      	ldr	r1, [r7, #0]
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fcab 	bl	8006e08 <USBD_SetFeature>
          break;
 80064b2:	e009      	b.n	80064c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80064b4:	6839      	ldr	r1, [r7, #0]
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fcba 	bl	8006e30 <USBD_ClrFeature>
          break;
 80064bc:	e004      	b.n	80064c8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80064be:	6839      	ldr	r1, [r7, #0]
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 fd11 	bl	8006ee8 <USBD_CtlError>
          break;
 80064c6:	bf00      	nop
      }
      break;
 80064c8:	e004      	b.n	80064d4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80064ca:	6839      	ldr	r1, [r7, #0]
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 fd0b 	bl	8006ee8 <USBD_CtlError>
      break;
 80064d2:	bf00      	nop
  }

  return ret;
 80064d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop

080064e0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064ea:	2300      	movs	r3, #0
 80064ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064f6:	2b40      	cmp	r3, #64	; 0x40
 80064f8:	d005      	beq.n	8006506 <USBD_StdItfReq+0x26>
 80064fa:	2b40      	cmp	r3, #64	; 0x40
 80064fc:	d82f      	bhi.n	800655e <USBD_StdItfReq+0x7e>
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d001      	beq.n	8006506 <USBD_StdItfReq+0x26>
 8006502:	2b20      	cmp	r3, #32
 8006504:	d12b      	bne.n	800655e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800650c:	b2db      	uxtb	r3, r3
 800650e:	3b01      	subs	r3, #1
 8006510:	2b02      	cmp	r3, #2
 8006512:	d81d      	bhi.n	8006550 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	889b      	ldrh	r3, [r3, #4]
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b01      	cmp	r3, #1
 800651c:	d813      	bhi.n	8006546 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	6839      	ldr	r1, [r7, #0]
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	4798      	blx	r3
 800652c:	4603      	mov	r3, r0
 800652e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	88db      	ldrh	r3, [r3, #6]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d110      	bne.n	800655a <USBD_StdItfReq+0x7a>
 8006538:	7bfb      	ldrb	r3, [r7, #15]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10d      	bne.n	800655a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 fd9d 	bl	800707e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006544:	e009      	b.n	800655a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006546:	6839      	ldr	r1, [r7, #0]
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fccd 	bl	8006ee8 <USBD_CtlError>
          break;
 800654e:	e004      	b.n	800655a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006550:	6839      	ldr	r1, [r7, #0]
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fcc8 	bl	8006ee8 <USBD_CtlError>
          break;
 8006558:	e000      	b.n	800655c <USBD_StdItfReq+0x7c>
          break;
 800655a:	bf00      	nop
      }
      break;
 800655c:	e004      	b.n	8006568 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800655e:	6839      	ldr	r1, [r7, #0]
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 fcc1 	bl	8006ee8 <USBD_CtlError>
      break;
 8006566:	bf00      	nop
  }

  return ret;
 8006568:	7bfb      	ldrb	r3, [r7, #15]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b084      	sub	sp, #16
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800657c:	2300      	movs	r3, #0
 800657e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	889b      	ldrh	r3, [r3, #4]
 8006584:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800658e:	2b40      	cmp	r3, #64	; 0x40
 8006590:	d007      	beq.n	80065a2 <USBD_StdEPReq+0x30>
 8006592:	2b40      	cmp	r3, #64	; 0x40
 8006594:	f200 8145 	bhi.w	8006822 <USBD_StdEPReq+0x2b0>
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00c      	beq.n	80065b6 <USBD_StdEPReq+0x44>
 800659c:	2b20      	cmp	r3, #32
 800659e:	f040 8140 	bne.w	8006822 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	6839      	ldr	r1, [r7, #0]
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	4798      	blx	r3
 80065b0:	4603      	mov	r3, r0
 80065b2:	73fb      	strb	r3, [r7, #15]
      break;
 80065b4:	e13a      	b.n	800682c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	785b      	ldrb	r3, [r3, #1]
 80065ba:	2b03      	cmp	r3, #3
 80065bc:	d007      	beq.n	80065ce <USBD_StdEPReq+0x5c>
 80065be:	2b03      	cmp	r3, #3
 80065c0:	f300 8129 	bgt.w	8006816 <USBD_StdEPReq+0x2a4>
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d07f      	beq.n	80066c8 <USBD_StdEPReq+0x156>
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d03c      	beq.n	8006646 <USBD_StdEPReq+0xd4>
 80065cc:	e123      	b.n	8006816 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d002      	beq.n	80065e0 <USBD_StdEPReq+0x6e>
 80065da:	2b03      	cmp	r3, #3
 80065dc:	d016      	beq.n	800660c <USBD_StdEPReq+0x9a>
 80065de:	e02c      	b.n	800663a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065e0:	7bbb      	ldrb	r3, [r7, #14]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00d      	beq.n	8006602 <USBD_StdEPReq+0x90>
 80065e6:	7bbb      	ldrb	r3, [r7, #14]
 80065e8:	2b80      	cmp	r3, #128	; 0x80
 80065ea:	d00a      	beq.n	8006602 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80065ec:	7bbb      	ldrb	r3, [r7, #14]
 80065ee:	4619      	mov	r1, r3
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f003 f99d 	bl	8009930 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80065f6:	2180      	movs	r1, #128	; 0x80
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f003 f999 	bl	8009930 <USBD_LL_StallEP>
 80065fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006600:	e020      	b.n	8006644 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006602:	6839      	ldr	r1, [r7, #0]
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 fc6f 	bl	8006ee8 <USBD_CtlError>
              break;
 800660a:	e01b      	b.n	8006644 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	885b      	ldrh	r3, [r3, #2]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10e      	bne.n	8006632 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006614:	7bbb      	ldrb	r3, [r7, #14]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00b      	beq.n	8006632 <USBD_StdEPReq+0xc0>
 800661a:	7bbb      	ldrb	r3, [r7, #14]
 800661c:	2b80      	cmp	r3, #128	; 0x80
 800661e:	d008      	beq.n	8006632 <USBD_StdEPReq+0xc0>
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	88db      	ldrh	r3, [r3, #6]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d104      	bne.n	8006632 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006628:	7bbb      	ldrb	r3, [r7, #14]
 800662a:	4619      	mov	r1, r3
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f003 f97f 	bl	8009930 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fd23 	bl	800707e <USBD_CtlSendStatus>

              break;
 8006638:	e004      	b.n	8006644 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800663a:	6839      	ldr	r1, [r7, #0]
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 fc53 	bl	8006ee8 <USBD_CtlError>
              break;
 8006642:	bf00      	nop
          }
          break;
 8006644:	e0ec      	b.n	8006820 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b02      	cmp	r3, #2
 8006650:	d002      	beq.n	8006658 <USBD_StdEPReq+0xe6>
 8006652:	2b03      	cmp	r3, #3
 8006654:	d016      	beq.n	8006684 <USBD_StdEPReq+0x112>
 8006656:	e030      	b.n	80066ba <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006658:	7bbb      	ldrb	r3, [r7, #14]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00d      	beq.n	800667a <USBD_StdEPReq+0x108>
 800665e:	7bbb      	ldrb	r3, [r7, #14]
 8006660:	2b80      	cmp	r3, #128	; 0x80
 8006662:	d00a      	beq.n	800667a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006664:	7bbb      	ldrb	r3, [r7, #14]
 8006666:	4619      	mov	r1, r3
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f003 f961 	bl	8009930 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800666e:	2180      	movs	r1, #128	; 0x80
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f003 f95d 	bl	8009930 <USBD_LL_StallEP>
 8006676:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006678:	e025      	b.n	80066c6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800667a:	6839      	ldr	r1, [r7, #0]
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fc33 	bl	8006ee8 <USBD_CtlError>
              break;
 8006682:	e020      	b.n	80066c6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	885b      	ldrh	r3, [r3, #2]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d11b      	bne.n	80066c4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800668c:	7bbb      	ldrb	r3, [r7, #14]
 800668e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006692:	2b00      	cmp	r3, #0
 8006694:	d004      	beq.n	80066a0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006696:	7bbb      	ldrb	r3, [r7, #14]
 8006698:	4619      	mov	r1, r3
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f003 f967 	bl	800996e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fcec 	bl	800707e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	6839      	ldr	r1, [r7, #0]
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	4798      	blx	r3
 80066b4:	4603      	mov	r3, r0
 80066b6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80066b8:	e004      	b.n	80066c4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80066ba:	6839      	ldr	r1, [r7, #0]
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fc13 	bl	8006ee8 <USBD_CtlError>
              break;
 80066c2:	e000      	b.n	80066c6 <USBD_StdEPReq+0x154>
              break;
 80066c4:	bf00      	nop
          }
          break;
 80066c6:	e0ab      	b.n	8006820 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d002      	beq.n	80066da <USBD_StdEPReq+0x168>
 80066d4:	2b03      	cmp	r3, #3
 80066d6:	d032      	beq.n	800673e <USBD_StdEPReq+0x1cc>
 80066d8:	e097      	b.n	800680a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066da:	7bbb      	ldrb	r3, [r7, #14]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d007      	beq.n	80066f0 <USBD_StdEPReq+0x17e>
 80066e0:	7bbb      	ldrb	r3, [r7, #14]
 80066e2:	2b80      	cmp	r3, #128	; 0x80
 80066e4:	d004      	beq.n	80066f0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80066e6:	6839      	ldr	r1, [r7, #0]
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 fbfd 	bl	8006ee8 <USBD_CtlError>
                break;
 80066ee:	e091      	b.n	8006814 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	da0b      	bge.n	8006710 <USBD_StdEPReq+0x19e>
 80066f8:	7bbb      	ldrb	r3, [r7, #14]
 80066fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066fe:	4613      	mov	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	3310      	adds	r3, #16
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	4413      	add	r3, r2
 800670c:	3304      	adds	r3, #4
 800670e:	e00b      	b.n	8006728 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006710:	7bbb      	ldrb	r3, [r7, #14]
 8006712:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006716:	4613      	mov	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	4413      	add	r3, r2
 8006726:	3304      	adds	r3, #4
 8006728:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	2200      	movs	r2, #0
 800672e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	2202      	movs	r2, #2
 8006734:	4619      	mov	r1, r3
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fc47 	bl	8006fca <USBD_CtlSendData>
              break;
 800673c:	e06a      	b.n	8006814 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800673e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006742:	2b00      	cmp	r3, #0
 8006744:	da11      	bge.n	800676a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006746:	7bbb      	ldrb	r3, [r7, #14]
 8006748:	f003 020f 	and.w	r2, r3, #15
 800674c:	6879      	ldr	r1, [r7, #4]
 800674e:	4613      	mov	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	440b      	add	r3, r1
 8006758:	3324      	adds	r3, #36	; 0x24
 800675a:	881b      	ldrh	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d117      	bne.n	8006790 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006760:	6839      	ldr	r1, [r7, #0]
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fbc0 	bl	8006ee8 <USBD_CtlError>
                  break;
 8006768:	e054      	b.n	8006814 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800676a:	7bbb      	ldrb	r3, [r7, #14]
 800676c:	f003 020f 	and.w	r2, r3, #15
 8006770:	6879      	ldr	r1, [r7, #4]
 8006772:	4613      	mov	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	440b      	add	r3, r1
 800677c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006780:	881b      	ldrh	r3, [r3, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d104      	bne.n	8006790 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006786:	6839      	ldr	r1, [r7, #0]
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 fbad 	bl	8006ee8 <USBD_CtlError>
                  break;
 800678e:	e041      	b.n	8006814 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006790:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006794:	2b00      	cmp	r3, #0
 8006796:	da0b      	bge.n	80067b0 <USBD_StdEPReq+0x23e>
 8006798:	7bbb      	ldrb	r3, [r7, #14]
 800679a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800679e:	4613      	mov	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4413      	add	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	3310      	adds	r3, #16
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	4413      	add	r3, r2
 80067ac:	3304      	adds	r3, #4
 80067ae:	e00b      	b.n	80067c8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80067b0:	7bbb      	ldrb	r3, [r7, #14]
 80067b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067b6:	4613      	mov	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	4413      	add	r3, r2
 80067c6:	3304      	adds	r3, #4
 80067c8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80067ca:	7bbb      	ldrb	r3, [r7, #14]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d002      	beq.n	80067d6 <USBD_StdEPReq+0x264>
 80067d0:	7bbb      	ldrb	r3, [r7, #14]
 80067d2:	2b80      	cmp	r3, #128	; 0x80
 80067d4:	d103      	bne.n	80067de <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	2200      	movs	r2, #0
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	e00e      	b.n	80067fc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80067de:	7bbb      	ldrb	r3, [r7, #14]
 80067e0:	4619      	mov	r1, r3
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f003 f8e2 	bl	80099ac <USBD_LL_IsStallEP>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d003      	beq.n	80067f6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2201      	movs	r2, #1
 80067f2:	601a      	str	r2, [r3, #0]
 80067f4:	e002      	b.n	80067fc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	2200      	movs	r2, #0
 80067fa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	2202      	movs	r2, #2
 8006800:	4619      	mov	r1, r3
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fbe1 	bl	8006fca <USBD_CtlSendData>
              break;
 8006808:	e004      	b.n	8006814 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800680a:	6839      	ldr	r1, [r7, #0]
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 fb6b 	bl	8006ee8 <USBD_CtlError>
              break;
 8006812:	bf00      	nop
          }
          break;
 8006814:	e004      	b.n	8006820 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006816:	6839      	ldr	r1, [r7, #0]
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 fb65 	bl	8006ee8 <USBD_CtlError>
          break;
 800681e:	bf00      	nop
      }
      break;
 8006820:	e004      	b.n	800682c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006822:	6839      	ldr	r1, [r7, #0]
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fb5f 	bl	8006ee8 <USBD_CtlError>
      break;
 800682a:	bf00      	nop
  }

  return ret;
 800682c:	7bfb      	ldrb	r3, [r7, #15]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
	...

08006838 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006842:	2300      	movs	r3, #0
 8006844:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006846:	2300      	movs	r3, #0
 8006848:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	885b      	ldrh	r3, [r3, #2]
 8006852:	0a1b      	lsrs	r3, r3, #8
 8006854:	b29b      	uxth	r3, r3
 8006856:	3b01      	subs	r3, #1
 8006858:	2b0e      	cmp	r3, #14
 800685a:	f200 8152 	bhi.w	8006b02 <USBD_GetDescriptor+0x2ca>
 800685e:	a201      	add	r2, pc, #4	; (adr r2, 8006864 <USBD_GetDescriptor+0x2c>)
 8006860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006864:	080068d5 	.word	0x080068d5
 8006868:	080068ed 	.word	0x080068ed
 800686c:	0800692d 	.word	0x0800692d
 8006870:	08006b03 	.word	0x08006b03
 8006874:	08006b03 	.word	0x08006b03
 8006878:	08006aa3 	.word	0x08006aa3
 800687c:	08006acf 	.word	0x08006acf
 8006880:	08006b03 	.word	0x08006b03
 8006884:	08006b03 	.word	0x08006b03
 8006888:	08006b03 	.word	0x08006b03
 800688c:	08006b03 	.word	0x08006b03
 8006890:	08006b03 	.word	0x08006b03
 8006894:	08006b03 	.word	0x08006b03
 8006898:	08006b03 	.word	0x08006b03
 800689c:	080068a1 	.word	0x080068a1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068a6:	69db      	ldr	r3, [r3, #28]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00b      	beq.n	80068c4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068b2:	69db      	ldr	r3, [r3, #28]
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	7c12      	ldrb	r2, [r2, #16]
 80068b8:	f107 0108 	add.w	r1, r7, #8
 80068bc:	4610      	mov	r0, r2
 80068be:	4798      	blx	r3
 80068c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068c2:	e126      	b.n	8006b12 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80068c4:	6839      	ldr	r1, [r7, #0]
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 fb0e 	bl	8006ee8 <USBD_CtlError>
        err++;
 80068cc:	7afb      	ldrb	r3, [r7, #11]
 80068ce:	3301      	adds	r3, #1
 80068d0:	72fb      	strb	r3, [r7, #11]
      break;
 80068d2:	e11e      	b.n	8006b12 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	7c12      	ldrb	r2, [r2, #16]
 80068e0:	f107 0108 	add.w	r1, r7, #8
 80068e4:	4610      	mov	r0, r2
 80068e6:	4798      	blx	r3
 80068e8:	60f8      	str	r0, [r7, #12]
      break;
 80068ea:	e112      	b.n	8006b12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	7c1b      	ldrb	r3, [r3, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10d      	bne.n	8006910 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fc:	f107 0208 	add.w	r2, r7, #8
 8006900:	4610      	mov	r0, r2
 8006902:	4798      	blx	r3
 8006904:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	3301      	adds	r3, #1
 800690a:	2202      	movs	r2, #2
 800690c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800690e:	e100      	b.n	8006b12 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006918:	f107 0208 	add.w	r2, r7, #8
 800691c:	4610      	mov	r0, r2
 800691e:	4798      	blx	r3
 8006920:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	3301      	adds	r3, #1
 8006926:	2202      	movs	r2, #2
 8006928:	701a      	strb	r2, [r3, #0]
      break;
 800692a:	e0f2      	b.n	8006b12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	885b      	ldrh	r3, [r3, #2]
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b05      	cmp	r3, #5
 8006934:	f200 80ac 	bhi.w	8006a90 <USBD_GetDescriptor+0x258>
 8006938:	a201      	add	r2, pc, #4	; (adr r2, 8006940 <USBD_GetDescriptor+0x108>)
 800693a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693e:	bf00      	nop
 8006940:	08006959 	.word	0x08006959
 8006944:	0800698d 	.word	0x0800698d
 8006948:	080069c1 	.word	0x080069c1
 800694c:	080069f5 	.word	0x080069f5
 8006950:	08006a29 	.word	0x08006a29
 8006954:	08006a5d 	.word	0x08006a5d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00b      	beq.n	800697c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	7c12      	ldrb	r2, [r2, #16]
 8006970:	f107 0108 	add.w	r1, r7, #8
 8006974:	4610      	mov	r0, r2
 8006976:	4798      	blx	r3
 8006978:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800697a:	e091      	b.n	8006aa0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800697c:	6839      	ldr	r1, [r7, #0]
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 fab2 	bl	8006ee8 <USBD_CtlError>
            err++;
 8006984:	7afb      	ldrb	r3, [r7, #11]
 8006986:	3301      	adds	r3, #1
 8006988:	72fb      	strb	r3, [r7, #11]
          break;
 800698a:	e089      	b.n	8006aa0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00b      	beq.n	80069b0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	7c12      	ldrb	r2, [r2, #16]
 80069a4:	f107 0108 	add.w	r1, r7, #8
 80069a8:	4610      	mov	r0, r2
 80069aa:	4798      	blx	r3
 80069ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069ae:	e077      	b.n	8006aa0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80069b0:	6839      	ldr	r1, [r7, #0]
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fa98 	bl	8006ee8 <USBD_CtlError>
            err++;
 80069b8:	7afb      	ldrb	r3, [r7, #11]
 80069ba:	3301      	adds	r3, #1
 80069bc:	72fb      	strb	r3, [r7, #11]
          break;
 80069be:	e06f      	b.n	8006aa0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00b      	beq.n	80069e4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	7c12      	ldrb	r2, [r2, #16]
 80069d8:	f107 0108 	add.w	r1, r7, #8
 80069dc:	4610      	mov	r0, r2
 80069de:	4798      	blx	r3
 80069e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069e2:	e05d      	b.n	8006aa0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80069e4:	6839      	ldr	r1, [r7, #0]
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fa7e 	bl	8006ee8 <USBD_CtlError>
            err++;
 80069ec:	7afb      	ldrb	r3, [r7, #11]
 80069ee:	3301      	adds	r3, #1
 80069f0:	72fb      	strb	r3, [r7, #11]
          break;
 80069f2:	e055      	b.n	8006aa0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00b      	beq.n	8006a18 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	7c12      	ldrb	r2, [r2, #16]
 8006a0c:	f107 0108 	add.w	r1, r7, #8
 8006a10:	4610      	mov	r0, r2
 8006a12:	4798      	blx	r3
 8006a14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a16:	e043      	b.n	8006aa0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fa64 	bl	8006ee8 <USBD_CtlError>
            err++;
 8006a20:	7afb      	ldrb	r3, [r7, #11]
 8006a22:	3301      	adds	r3, #1
 8006a24:	72fb      	strb	r3, [r7, #11]
          break;
 8006a26:	e03b      	b.n	8006aa0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00b      	beq.n	8006a4c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	7c12      	ldrb	r2, [r2, #16]
 8006a40:	f107 0108 	add.w	r1, r7, #8
 8006a44:	4610      	mov	r0, r2
 8006a46:	4798      	blx	r3
 8006a48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a4a:	e029      	b.n	8006aa0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006a4c:	6839      	ldr	r1, [r7, #0]
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fa4a 	bl	8006ee8 <USBD_CtlError>
            err++;
 8006a54:	7afb      	ldrb	r3, [r7, #11]
 8006a56:	3301      	adds	r3, #1
 8006a58:	72fb      	strb	r3, [r7, #11]
          break;
 8006a5a:	e021      	b.n	8006aa0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00b      	beq.n	8006a80 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	7c12      	ldrb	r2, [r2, #16]
 8006a74:	f107 0108 	add.w	r1, r7, #8
 8006a78:	4610      	mov	r0, r2
 8006a7a:	4798      	blx	r3
 8006a7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a7e:	e00f      	b.n	8006aa0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006a80:	6839      	ldr	r1, [r7, #0]
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 fa30 	bl	8006ee8 <USBD_CtlError>
            err++;
 8006a88:	7afb      	ldrb	r3, [r7, #11]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a8e:	e007      	b.n	8006aa0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006a90:	6839      	ldr	r1, [r7, #0]
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fa28 	bl	8006ee8 <USBD_CtlError>
          err++;
 8006a98:	7afb      	ldrb	r3, [r7, #11]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006a9e:	bf00      	nop
      }
      break;
 8006aa0:	e037      	b.n	8006b12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	7c1b      	ldrb	r3, [r3, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d109      	bne.n	8006abe <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab2:	f107 0208 	add.w	r2, r7, #8
 8006ab6:	4610      	mov	r0, r2
 8006ab8:	4798      	blx	r3
 8006aba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006abc:	e029      	b.n	8006b12 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006abe:	6839      	ldr	r1, [r7, #0]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 fa11 	bl	8006ee8 <USBD_CtlError>
        err++;
 8006ac6:	7afb      	ldrb	r3, [r7, #11]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	72fb      	strb	r3, [r7, #11]
      break;
 8006acc:	e021      	b.n	8006b12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	7c1b      	ldrb	r3, [r3, #16]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10d      	bne.n	8006af2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ade:	f107 0208 	add.w	r2, r7, #8
 8006ae2:	4610      	mov	r0, r2
 8006ae4:	4798      	blx	r3
 8006ae6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	3301      	adds	r3, #1
 8006aec:	2207      	movs	r2, #7
 8006aee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006af0:	e00f      	b.n	8006b12 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006af2:	6839      	ldr	r1, [r7, #0]
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 f9f7 	bl	8006ee8 <USBD_CtlError>
        err++;
 8006afa:	7afb      	ldrb	r3, [r7, #11]
 8006afc:	3301      	adds	r3, #1
 8006afe:	72fb      	strb	r3, [r7, #11]
      break;
 8006b00:	e007      	b.n	8006b12 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006b02:	6839      	ldr	r1, [r7, #0]
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 f9ef 	bl	8006ee8 <USBD_CtlError>
      err++;
 8006b0a:	7afb      	ldrb	r3, [r7, #11]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	72fb      	strb	r3, [r7, #11]
      break;
 8006b10:	bf00      	nop
  }

  if (err != 0U)
 8006b12:	7afb      	ldrb	r3, [r7, #11]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d11e      	bne.n	8006b56 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	88db      	ldrh	r3, [r3, #6]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d016      	beq.n	8006b4e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006b20:	893b      	ldrh	r3, [r7, #8]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00e      	beq.n	8006b44 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	88da      	ldrh	r2, [r3, #6]
 8006b2a:	893b      	ldrh	r3, [r7, #8]
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	bf28      	it	cs
 8006b30:	4613      	movcs	r3, r2
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b36:	893b      	ldrh	r3, [r7, #8]
 8006b38:	461a      	mov	r2, r3
 8006b3a:	68f9      	ldr	r1, [r7, #12]
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fa44 	bl	8006fca <USBD_CtlSendData>
 8006b42:	e009      	b.n	8006b58 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006b44:	6839      	ldr	r1, [r7, #0]
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f9ce 	bl	8006ee8 <USBD_CtlError>
 8006b4c:	e004      	b.n	8006b58 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fa95 	bl	800707e <USBD_CtlSendStatus>
 8006b54:	e000      	b.n	8006b58 <USBD_GetDescriptor+0x320>
    return;
 8006b56:	bf00      	nop
  }
}
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop

08006b60 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	889b      	ldrh	r3, [r3, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d131      	bne.n	8006bd6 <USBD_SetAddress+0x76>
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	88db      	ldrh	r3, [r3, #6]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d12d      	bne.n	8006bd6 <USBD_SetAddress+0x76>
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	885b      	ldrh	r3, [r3, #2]
 8006b7e:	2b7f      	cmp	r3, #127	; 0x7f
 8006b80:	d829      	bhi.n	8006bd6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	885b      	ldrh	r3, [r3, #2]
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b03      	cmp	r3, #3
 8006b98:	d104      	bne.n	8006ba4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006b9a:	6839      	ldr	r1, [r7, #0]
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f9a3 	bl	8006ee8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ba2:	e01d      	b.n	8006be0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	7bfa      	ldrb	r2, [r7, #15]
 8006ba8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006bac:	7bfb      	ldrb	r3, [r7, #15]
 8006bae:	4619      	mov	r1, r3
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f002 ff27 	bl	8009a04 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 fa61 	bl	800707e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d004      	beq.n	8006bcc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bca:	e009      	b.n	8006be0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bd4:	e004      	b.n	8006be0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006bd6:	6839      	ldr	r1, [r7, #0]
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 f985 	bl	8006ee8 <USBD_CtlError>
  }
}
 8006bde:	bf00      	nop
 8006be0:	bf00      	nop
 8006be2:	3710      	adds	r7, #16
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	885b      	ldrh	r3, [r3, #2]
 8006bfa:	b2da      	uxtb	r2, r3
 8006bfc:	4b4c      	ldr	r3, [pc, #304]	; (8006d30 <USBD_SetConfig+0x148>)
 8006bfe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006c00:	4b4b      	ldr	r3, [pc, #300]	; (8006d30 <USBD_SetConfig+0x148>)
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d905      	bls.n	8006c14 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006c08:	6839      	ldr	r1, [r7, #0]
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f96c 	bl	8006ee8 <USBD_CtlError>
    return USBD_FAIL;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e088      	b.n	8006d26 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d002      	beq.n	8006c26 <USBD_SetConfig+0x3e>
 8006c20:	2b03      	cmp	r3, #3
 8006c22:	d025      	beq.n	8006c70 <USBD_SetConfig+0x88>
 8006c24:	e071      	b.n	8006d0a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006c26:	4b42      	ldr	r3, [pc, #264]	; (8006d30 <USBD_SetConfig+0x148>)
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d01c      	beq.n	8006c68 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006c2e:	4b40      	ldr	r3, [pc, #256]	; (8006d30 <USBD_SetConfig+0x148>)
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	461a      	mov	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c38:	4b3d      	ldr	r3, [pc, #244]	; (8006d30 <USBD_SetConfig+0x148>)
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f7ff f91e 	bl	8005e80 <USBD_SetClassConfig>
 8006c44:	4603      	mov	r3, r0
 8006c46:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d004      	beq.n	8006c58 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006c4e:	6839      	ldr	r1, [r7, #0]
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f949 	bl	8006ee8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006c56:	e065      	b.n	8006d24 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 fa10 	bl	800707e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2203      	movs	r2, #3
 8006c62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006c66:	e05d      	b.n	8006d24 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fa08 	bl	800707e <USBD_CtlSendStatus>
      break;
 8006c6e:	e059      	b.n	8006d24 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006c70:	4b2f      	ldr	r3, [pc, #188]	; (8006d30 <USBD_SetConfig+0x148>)
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d112      	bne.n	8006c9e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006c80:	4b2b      	ldr	r3, [pc, #172]	; (8006d30 <USBD_SetConfig+0x148>)
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	461a      	mov	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c8a:	4b29      	ldr	r3, [pc, #164]	; (8006d30 <USBD_SetConfig+0x148>)
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	4619      	mov	r1, r3
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f7ff f911 	bl	8005eb8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f9f1 	bl	800707e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006c9c:	e042      	b.n	8006d24 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006c9e:	4b24      	ldr	r3, [pc, #144]	; (8006d30 <USBD_SetConfig+0x148>)
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d02a      	beq.n	8006d02 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f7ff f8ff 	bl	8005eb8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006cba:	4b1d      	ldr	r3, [pc, #116]	; (8006d30 <USBD_SetConfig+0x148>)
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006cc4:	4b1a      	ldr	r3, [pc, #104]	; (8006d30 <USBD_SetConfig+0x148>)
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	4619      	mov	r1, r3
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7ff f8d8 	bl	8005e80 <USBD_SetClassConfig>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006cd4:	7bfb      	ldrb	r3, [r7, #15]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00f      	beq.n	8006cfa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006cda:	6839      	ldr	r1, [r7, #0]
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f903 	bl	8006ee8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	4619      	mov	r1, r3
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7ff f8e4 	bl	8005eb8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006cf8:	e014      	b.n	8006d24 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f9bf 	bl	800707e <USBD_CtlSendStatus>
      break;
 8006d00:	e010      	b.n	8006d24 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f9bb 	bl	800707e <USBD_CtlSendStatus>
      break;
 8006d08:	e00c      	b.n	8006d24 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006d0a:	6839      	ldr	r1, [r7, #0]
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f8eb 	bl	8006ee8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d12:	4b07      	ldr	r3, [pc, #28]	; (8006d30 <USBD_SetConfig+0x148>)
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	4619      	mov	r1, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f7ff f8cd 	bl	8005eb8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	73fb      	strb	r3, [r7, #15]
      break;
 8006d22:	bf00      	nop
  }

  return ret;
 8006d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	200004c8 	.word	0x200004c8

08006d34 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	88db      	ldrh	r3, [r3, #6]
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d004      	beq.n	8006d50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006d46:	6839      	ldr	r1, [r7, #0]
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f8cd 	bl	8006ee8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006d4e:	e023      	b.n	8006d98 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	dc02      	bgt.n	8006d62 <USBD_GetConfig+0x2e>
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	dc03      	bgt.n	8006d68 <USBD_GetConfig+0x34>
 8006d60:	e015      	b.n	8006d8e <USBD_GetConfig+0x5a>
 8006d62:	2b03      	cmp	r3, #3
 8006d64:	d00b      	beq.n	8006d7e <USBD_GetConfig+0x4a>
 8006d66:	e012      	b.n	8006d8e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	3308      	adds	r3, #8
 8006d72:	2201      	movs	r2, #1
 8006d74:	4619      	mov	r1, r3
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f927 	bl	8006fca <USBD_CtlSendData>
        break;
 8006d7c:	e00c      	b.n	8006d98 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	3304      	adds	r3, #4
 8006d82:	2201      	movs	r2, #1
 8006d84:	4619      	mov	r1, r3
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f91f 	bl	8006fca <USBD_CtlSendData>
        break;
 8006d8c:	e004      	b.n	8006d98 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f8a9 	bl	8006ee8 <USBD_CtlError>
        break;
 8006d96:	bf00      	nop
}
 8006d98:	bf00      	nop
 8006d9a:	3708      	adds	r7, #8
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	3b01      	subs	r3, #1
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d81e      	bhi.n	8006df6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	88db      	ldrh	r3, [r3, #6]
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d004      	beq.n	8006dca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006dc0:	6839      	ldr	r1, [r7, #0]
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f890 	bl	8006ee8 <USBD_CtlError>
        break;
 8006dc8:	e01a      	b.n	8006e00 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d005      	beq.n	8006de6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	f043 0202 	orr.w	r2, r3, #2
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	330c      	adds	r3, #12
 8006dea:	2202      	movs	r2, #2
 8006dec:	4619      	mov	r1, r3
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f8eb 	bl	8006fca <USBD_CtlSendData>
      break;
 8006df4:	e004      	b.n	8006e00 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006df6:	6839      	ldr	r1, [r7, #0]
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 f875 	bl	8006ee8 <USBD_CtlError>
      break;
 8006dfe:	bf00      	nop
  }
}
 8006e00:	bf00      	nop
 8006e02:	3708      	adds	r7, #8
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	885b      	ldrh	r3, [r3, #2]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d106      	bne.n	8006e28 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f92b 	bl	800707e <USBD_CtlSendStatus>
  }
}
 8006e28:	bf00      	nop
 8006e2a:	3708      	adds	r7, #8
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	3b01      	subs	r3, #1
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d80b      	bhi.n	8006e60 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	885b      	ldrh	r3, [r3, #2]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d10c      	bne.n	8006e6a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f910 	bl	800707e <USBD_CtlSendStatus>
      }
      break;
 8006e5e:	e004      	b.n	8006e6a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006e60:	6839      	ldr	r1, [r7, #0]
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f840 	bl	8006ee8 <USBD_CtlError>
      break;
 8006e68:	e000      	b.n	8006e6c <USBD_ClrFeature+0x3c>
      break;
 8006e6a:	bf00      	nop
  }
}
 8006e6c:	bf00      	nop
 8006e6e:	3708      	adds	r7, #8
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	781a      	ldrb	r2, [r3, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	781a      	ldrb	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f7ff fa91 	bl	80063c6 <SWAPBYTE>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f7ff fa84 	bl	80063c6 <SWAPBYTE>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f7ff fa77 	bl	80063c6 <SWAPBYTE>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	461a      	mov	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	80da      	strh	r2, [r3, #6]
}
 8006ee0:	bf00      	nop
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ef2:	2180      	movs	r1, #128	; 0x80
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f002 fd1b 	bl	8009930 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006efa:	2100      	movs	r1, #0
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f002 fd17 	bl	8009930 <USBD_LL_StallEP>
}
 8006f02:	bf00      	nop
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b086      	sub	sp, #24
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	60f8      	str	r0, [r7, #12]
 8006f12:	60b9      	str	r1, [r7, #8]
 8006f14:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006f16:	2300      	movs	r3, #0
 8006f18:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d036      	beq.n	8006f8e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006f24:	6938      	ldr	r0, [r7, #16]
 8006f26:	f000 f836 	bl	8006f96 <USBD_GetLen>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	005b      	lsls	r3, r3, #1
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006f38:	7dfb      	ldrb	r3, [r7, #23]
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	7812      	ldrb	r2, [r2, #0]
 8006f42:	701a      	strb	r2, [r3, #0]
  idx++;
 8006f44:	7dfb      	ldrb	r3, [r7, #23]
 8006f46:	3301      	adds	r3, #1
 8006f48:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006f4a:	7dfb      	ldrb	r3, [r7, #23]
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	4413      	add	r3, r2
 8006f50:	2203      	movs	r2, #3
 8006f52:	701a      	strb	r2, [r3, #0]
  idx++;
 8006f54:	7dfb      	ldrb	r3, [r7, #23]
 8006f56:	3301      	adds	r3, #1
 8006f58:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006f5a:	e013      	b.n	8006f84 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006f5c:	7dfb      	ldrb	r3, [r7, #23]
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	4413      	add	r3, r2
 8006f62:	693a      	ldr	r2, [r7, #16]
 8006f64:	7812      	ldrb	r2, [r2, #0]
 8006f66:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	613b      	str	r3, [r7, #16]
    idx++;
 8006f6e:	7dfb      	ldrb	r3, [r7, #23]
 8006f70:	3301      	adds	r3, #1
 8006f72:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006f74:	7dfb      	ldrb	r3, [r7, #23]
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	4413      	add	r3, r2
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	701a      	strb	r2, [r3, #0]
    idx++;
 8006f7e:	7dfb      	ldrb	r3, [r7, #23]
 8006f80:	3301      	adds	r3, #1
 8006f82:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1e7      	bne.n	8006f5c <USBD_GetString+0x52>
 8006f8c:	e000      	b.n	8006f90 <USBD_GetString+0x86>
    return;
 8006f8e:	bf00      	nop
  }
}
 8006f90:	3718      	adds	r7, #24
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f96:	b480      	push	{r7}
 8006f98:	b085      	sub	sp, #20
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006fa6:	e005      	b.n	8006fb4 <USBD_GetLen+0x1e>
  {
    len++;
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
 8006faa:	3301      	adds	r3, #1
 8006fac:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1f5      	bne.n	8006fa8 <USBD_GetLen+0x12>
  }

  return len;
 8006fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr

08006fca <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b084      	sub	sp, #16
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	60f8      	str	r0, [r7, #12]
 8006fd2:	60b9      	str	r1, [r7, #8]
 8006fd4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2202      	movs	r2, #2
 8006fda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	2100      	movs	r1, #0
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f002 fd26 	bl	8009a42 <USBD_LL_Transmit>

  return USBD_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	2100      	movs	r1, #0
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f002 fd15 	bl	8009a42 <USBD_LL_Transmit>

  return USBD_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b084      	sub	sp, #16
 8007026:	af00      	add	r7, sp, #0
 8007028:	60f8      	str	r0, [r7, #12]
 800702a:	60b9      	str	r1, [r7, #8]
 800702c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2203      	movs	r2, #3
 8007032:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	2100      	movs	r1, #0
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f002 fd19 	bl	8009a84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	2100      	movs	r1, #0
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f002 fd08 	bl	8009a84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b082      	sub	sp, #8
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2204      	movs	r2, #4
 800708a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800708e:	2300      	movs	r3, #0
 8007090:	2200      	movs	r2, #0
 8007092:	2100      	movs	r1, #0
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f002 fcd4 	bl	8009a42 <USBD_LL_Transmit>

  return USBD_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3708      	adds	r7, #8
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2205      	movs	r2, #5
 80070b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070b4:	2300      	movs	r3, #0
 80070b6:	2200      	movs	r2, #0
 80070b8:	2100      	movs	r1, #0
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f002 fce2 	bl	8009a84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3708      	adds	r7, #8
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b085      	sub	sp, #20
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	4603      	mov	r3, r0
 80070d2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80070d4:	2300      	movs	r3, #0
 80070d6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80070d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070dc:	2b84      	cmp	r3, #132	; 0x84
 80070de:	d005      	beq.n	80070ec <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80070e0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	4413      	add	r3, r2
 80070e8:	3303      	adds	r3, #3
 80070ea:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80070ec:	68fb      	ldr	r3, [r7, #12]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80070fe:	f000 fea5 	bl	8007e4c <vTaskStartScheduler>
  
  return osOK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	bd80      	pop	{r7, pc}

08007108 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800710a:	b089      	sub	sp, #36	; 0x24
 800710c:	af04      	add	r7, sp, #16
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d020      	beq.n	800715c <osThreadCreate+0x54>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d01c      	beq.n	800715c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685c      	ldr	r4, [r3, #4]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681d      	ldr	r5, [r3, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	691e      	ldr	r6, [r3, #16]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007134:	4618      	mov	r0, r3
 8007136:	f7ff ffc8 	bl	80070ca <makeFreeRtosPriority>
 800713a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	695b      	ldr	r3, [r3, #20]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007144:	9202      	str	r2, [sp, #8]
 8007146:	9301      	str	r3, [sp, #4]
 8007148:	9100      	str	r1, [sp, #0]
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	4632      	mov	r2, r6
 800714e:	4629      	mov	r1, r5
 8007150:	4620      	mov	r0, r4
 8007152:	f000 fc9d 	bl	8007a90 <xTaskCreateStatic>
 8007156:	4603      	mov	r3, r0
 8007158:	60fb      	str	r3, [r7, #12]
 800715a:	e01c      	b.n	8007196 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685c      	ldr	r4, [r3, #4]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007168:	b29e      	uxth	r6, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007170:	4618      	mov	r0, r3
 8007172:	f7ff ffaa 	bl	80070ca <makeFreeRtosPriority>
 8007176:	4602      	mov	r2, r0
 8007178:	f107 030c 	add.w	r3, r7, #12
 800717c:	9301      	str	r3, [sp, #4]
 800717e:	9200      	str	r2, [sp, #0]
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	4632      	mov	r2, r6
 8007184:	4629      	mov	r1, r5
 8007186:	4620      	mov	r0, r4
 8007188:	f000 fcdf 	bl	8007b4a <xTaskCreate>
 800718c:	4603      	mov	r3, r0
 800718e:	2b01      	cmp	r3, #1
 8007190:	d001      	beq.n	8007196 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007192:	2300      	movs	r3, #0
 8007194:	e000      	b.n	8007198 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007196:	68fb      	ldr	r3, [r7, #12]
}
 8007198:	4618      	mov	r0, r3
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080071a0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d001      	beq.n	80071b6 <osDelay+0x16>
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	e000      	b.n	80071b8 <osDelay+0x18>
 80071b6:	2301      	movs	r3, #1
 80071b8:	4618      	mov	r0, r3
 80071ba:	f000 fe13 	bl	8007de4 <vTaskDelay>
  
  return osOK;
 80071be:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f103 0208 	add.w	r2, r3, #8
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f04f 32ff 	mov.w	r2, #4294967295
 80071e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f103 0208 	add.w	r2, r3, #8
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f103 0208 	add.w	r2, r3, #8
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80071fc:	bf00      	nop
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007216:	bf00      	nop
 8007218:	370c      	adds	r7, #12
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr

08007222 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007222:	b480      	push	{r7}
 8007224:	b085      	sub	sp, #20
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	689a      	ldr	r2, [r3, #8]
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	683a      	ldr	r2, [r7, #0]
 8007246:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	683a      	ldr	r2, [r7, #0]
 800724c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	1c5a      	adds	r2, r3, #1
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	601a      	str	r2, [r3, #0]
}
 800725e:	bf00      	nop
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800726a:	b480      	push	{r7}
 800726c:	b085      	sub	sp, #20
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
 8007272:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007280:	d103      	bne.n	800728a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	60fb      	str	r3, [r7, #12]
 8007288:	e00c      	b.n	80072a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	3308      	adds	r3, #8
 800728e:	60fb      	str	r3, [r7, #12]
 8007290:	e002      	b.n	8007298 <vListInsert+0x2e>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	60fb      	str	r3, [r7, #12]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68ba      	ldr	r2, [r7, #8]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d2f6      	bcs.n	8007292 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	685a      	ldr	r2, [r3, #4]
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	683a      	ldr	r2, [r7, #0]
 80072b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	683a      	ldr	r2, [r7, #0]
 80072be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	1c5a      	adds	r2, r3, #1
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	601a      	str	r2, [r3, #0]
}
 80072d0:	bf00      	nop
 80072d2:	3714      	adds	r7, #20
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	6892      	ldr	r2, [r2, #8]
 80072f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	6852      	ldr	r2, [r2, #4]
 80072fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	429a      	cmp	r2, r3
 8007306:	d103      	bne.n	8007310 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	689a      	ldr	r2, [r3, #8]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	1e5a      	subs	r2, r3, #1
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3714      	adds	r7, #20
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10a      	bne.n	800735a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007348:	f383 8811 	msr	BASEPRI, r3
 800734c:	f3bf 8f6f 	isb	sy
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007356:	bf00      	nop
 8007358:	e7fe      	b.n	8007358 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800735a:	f001 fbc3 	bl	8008ae4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007366:	68f9      	ldr	r1, [r7, #12]
 8007368:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800736a:	fb01 f303 	mul.w	r3, r1, r3
 800736e:	441a      	add	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2200      	movs	r2, #0
 8007378:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800738a:	3b01      	subs	r3, #1
 800738c:	68f9      	ldr	r1, [r7, #12]
 800738e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007390:	fb01 f303 	mul.w	r3, r1, r3
 8007394:	441a      	add	r2, r3
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	22ff      	movs	r2, #255	; 0xff
 800739e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	22ff      	movs	r2, #255	; 0xff
 80073a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d114      	bne.n	80073da <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d01a      	beq.n	80073ee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	3310      	adds	r3, #16
 80073bc:	4618      	mov	r0, r3
 80073be:	f000 ff97 	bl	80082f0 <xTaskRemoveFromEventList>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d012      	beq.n	80073ee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80073c8:	4b0c      	ldr	r3, [pc, #48]	; (80073fc <xQueueGenericReset+0xcc>)
 80073ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073ce:	601a      	str	r2, [r3, #0]
 80073d0:	f3bf 8f4f 	dsb	sy
 80073d4:	f3bf 8f6f 	isb	sy
 80073d8:	e009      	b.n	80073ee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	3310      	adds	r3, #16
 80073de:	4618      	mov	r0, r3
 80073e0:	f7ff fef2 	bl	80071c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	3324      	adds	r3, #36	; 0x24
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7ff feed 	bl	80071c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80073ee:	f001 fba9 	bl	8008b44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80073f2:	2301      	movs	r3, #1
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	e000ed04 	.word	0xe000ed04

08007400 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007400:	b580      	push	{r7, lr}
 8007402:	b08a      	sub	sp, #40	; 0x28
 8007404:	af02      	add	r7, sp, #8
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	4613      	mov	r3, r2
 800740c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10a      	bne.n	800742a <xQueueGenericCreate+0x2a>
	__asm volatile
 8007414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007418:	f383 8811 	msr	BASEPRI, r3
 800741c:	f3bf 8f6f 	isb	sy
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	613b      	str	r3, [r7, #16]
}
 8007426:	bf00      	nop
 8007428:	e7fe      	b.n	8007428 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	fb02 f303 	mul.w	r3, r2, r3
 8007432:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	3348      	adds	r3, #72	; 0x48
 8007438:	4618      	mov	r0, r3
 800743a:	f001 fc35 	bl	8008ca8 <pvPortMalloc>
 800743e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d011      	beq.n	800746a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	3348      	adds	r3, #72	; 0x48
 800744e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007458:	79fa      	ldrb	r2, [r7, #7]
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	4613      	mov	r3, r2
 8007460:	697a      	ldr	r2, [r7, #20]
 8007462:	68b9      	ldr	r1, [r7, #8]
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f000 f805 	bl	8007474 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800746a:	69bb      	ldr	r3, [r7, #24]
	}
 800746c:	4618      	mov	r0, r3
 800746e:	3720      	adds	r7, #32
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
 8007480:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d103      	bne.n	8007490 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	69ba      	ldr	r2, [r7, #24]
 800748c:	601a      	str	r2, [r3, #0]
 800748e:	e002      	b.n	8007496 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80074a2:	2101      	movs	r1, #1
 80074a4:	69b8      	ldr	r0, [r7, #24]
 80074a6:	f7ff ff43 	bl	8007330 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80074aa:	bf00      	nop
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
	...

080074b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b08e      	sub	sp, #56	; 0x38
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
 80074c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80074c2:	2300      	movs	r3, #0
 80074c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80074ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10a      	bne.n	80074e6 <xQueueGenericSend+0x32>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80074e2:	bf00      	nop
 80074e4:	e7fe      	b.n	80074e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d103      	bne.n	80074f4 <xQueueGenericSend+0x40>
 80074ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <xQueueGenericSend+0x44>
 80074f4:	2301      	movs	r3, #1
 80074f6:	e000      	b.n	80074fa <xQueueGenericSend+0x46>
 80074f8:	2300      	movs	r3, #0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10a      	bne.n	8007514 <xQueueGenericSend+0x60>
	__asm volatile
 80074fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007510:	bf00      	nop
 8007512:	e7fe      	b.n	8007512 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	2b02      	cmp	r3, #2
 8007518:	d103      	bne.n	8007522 <xQueueGenericSend+0x6e>
 800751a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800751e:	2b01      	cmp	r3, #1
 8007520:	d101      	bne.n	8007526 <xQueueGenericSend+0x72>
 8007522:	2301      	movs	r3, #1
 8007524:	e000      	b.n	8007528 <xQueueGenericSend+0x74>
 8007526:	2300      	movs	r3, #0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10a      	bne.n	8007542 <xQueueGenericSend+0x8e>
	__asm volatile
 800752c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	623b      	str	r3, [r7, #32]
}
 800753e:	bf00      	nop
 8007540:	e7fe      	b.n	8007540 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007542:	f001 f895 	bl	8008670 <xTaskGetSchedulerState>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d102      	bne.n	8007552 <xQueueGenericSend+0x9e>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d101      	bne.n	8007556 <xQueueGenericSend+0xa2>
 8007552:	2301      	movs	r3, #1
 8007554:	e000      	b.n	8007558 <xQueueGenericSend+0xa4>
 8007556:	2300      	movs	r3, #0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10a      	bne.n	8007572 <xQueueGenericSend+0xbe>
	__asm volatile
 800755c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007560:	f383 8811 	msr	BASEPRI, r3
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	61fb      	str	r3, [r7, #28]
}
 800756e:	bf00      	nop
 8007570:	e7fe      	b.n	8007570 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007572:	f001 fab7 	bl	8008ae4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800757e:	429a      	cmp	r2, r3
 8007580:	d302      	bcc.n	8007588 <xQueueGenericSend+0xd4>
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b02      	cmp	r3, #2
 8007586:	d129      	bne.n	80075dc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007588:	683a      	ldr	r2, [r7, #0]
 800758a:	68b9      	ldr	r1, [r7, #8]
 800758c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800758e:	f000 f96f 	bl	8007870 <prvCopyDataToQueue>
 8007592:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	2b00      	cmp	r3, #0
 800759a:	d010      	beq.n	80075be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800759c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759e:	3324      	adds	r3, #36	; 0x24
 80075a0:	4618      	mov	r0, r3
 80075a2:	f000 fea5 	bl	80082f0 <xTaskRemoveFromEventList>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d013      	beq.n	80075d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80075ac:	4b3f      	ldr	r3, [pc, #252]	; (80076ac <xQueueGenericSend+0x1f8>)
 80075ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075b2:	601a      	str	r2, [r3, #0]
 80075b4:	f3bf 8f4f 	dsb	sy
 80075b8:	f3bf 8f6f 	isb	sy
 80075bc:	e00a      	b.n	80075d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80075be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d007      	beq.n	80075d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80075c4:	4b39      	ldr	r3, [pc, #228]	; (80076ac <xQueueGenericSend+0x1f8>)
 80075c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075ca:	601a      	str	r2, [r3, #0]
 80075cc:	f3bf 8f4f 	dsb	sy
 80075d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80075d4:	f001 fab6 	bl	8008b44 <vPortExitCritical>
				return pdPASS;
 80075d8:	2301      	movs	r3, #1
 80075da:	e063      	b.n	80076a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d103      	bne.n	80075ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80075e2:	f001 faaf 	bl	8008b44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80075e6:	2300      	movs	r3, #0
 80075e8:	e05c      	b.n	80076a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d106      	bne.n	80075fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075f0:	f107 0314 	add.w	r3, r7, #20
 80075f4:	4618      	mov	r0, r3
 80075f6:	f000 fedd 	bl	80083b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80075fa:	2301      	movs	r3, #1
 80075fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80075fe:	f001 faa1 	bl	8008b44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007602:	f000 fc8d 	bl	8007f20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007606:	f001 fa6d 	bl	8008ae4 <vPortEnterCritical>
 800760a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007610:	b25b      	sxtb	r3, r3
 8007612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007616:	d103      	bne.n	8007620 <xQueueGenericSend+0x16c>
 8007618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761a:	2200      	movs	r2, #0
 800761c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007622:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007626:	b25b      	sxtb	r3, r3
 8007628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762c:	d103      	bne.n	8007636 <xQueueGenericSend+0x182>
 800762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007630:	2200      	movs	r2, #0
 8007632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007636:	f001 fa85 	bl	8008b44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800763a:	1d3a      	adds	r2, r7, #4
 800763c:	f107 0314 	add.w	r3, r7, #20
 8007640:	4611      	mov	r1, r2
 8007642:	4618      	mov	r0, r3
 8007644:	f000 fecc 	bl	80083e0 <xTaskCheckForTimeOut>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d124      	bne.n	8007698 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800764e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007650:	f000 fa06 	bl	8007a60 <prvIsQueueFull>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d018      	beq.n	800768c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800765a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765c:	3310      	adds	r3, #16
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	4611      	mov	r1, r2
 8007662:	4618      	mov	r0, r3
 8007664:	f000 fe20 	bl	80082a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007668:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800766a:	f000 f991 	bl	8007990 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800766e:	f000 fc65 	bl	8007f3c <xTaskResumeAll>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	f47f af7c 	bne.w	8007572 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800767a:	4b0c      	ldr	r3, [pc, #48]	; (80076ac <xQueueGenericSend+0x1f8>)
 800767c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007680:	601a      	str	r2, [r3, #0]
 8007682:	f3bf 8f4f 	dsb	sy
 8007686:	f3bf 8f6f 	isb	sy
 800768a:	e772      	b.n	8007572 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800768c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800768e:	f000 f97f 	bl	8007990 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007692:	f000 fc53 	bl	8007f3c <xTaskResumeAll>
 8007696:	e76c      	b.n	8007572 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007698:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800769a:	f000 f979 	bl	8007990 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800769e:	f000 fc4d 	bl	8007f3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80076a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3738      	adds	r7, #56	; 0x38
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	e000ed04 	.word	0xe000ed04

080076b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b08c      	sub	sp, #48	; 0x30
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80076bc:	2300      	movs	r3, #0
 80076be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80076c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10a      	bne.n	80076e0 <xQueueReceive+0x30>
	__asm volatile
 80076ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ce:	f383 8811 	msr	BASEPRI, r3
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	623b      	str	r3, [r7, #32]
}
 80076dc:	bf00      	nop
 80076de:	e7fe      	b.n	80076de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d103      	bne.n	80076ee <xQueueReceive+0x3e>
 80076e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d101      	bne.n	80076f2 <xQueueReceive+0x42>
 80076ee:	2301      	movs	r3, #1
 80076f0:	e000      	b.n	80076f4 <xQueueReceive+0x44>
 80076f2:	2300      	movs	r3, #0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10a      	bne.n	800770e <xQueueReceive+0x5e>
	__asm volatile
 80076f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fc:	f383 8811 	msr	BASEPRI, r3
 8007700:	f3bf 8f6f 	isb	sy
 8007704:	f3bf 8f4f 	dsb	sy
 8007708:	61fb      	str	r3, [r7, #28]
}
 800770a:	bf00      	nop
 800770c:	e7fe      	b.n	800770c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800770e:	f000 ffaf 	bl	8008670 <xTaskGetSchedulerState>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d102      	bne.n	800771e <xQueueReceive+0x6e>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d101      	bne.n	8007722 <xQueueReceive+0x72>
 800771e:	2301      	movs	r3, #1
 8007720:	e000      	b.n	8007724 <xQueueReceive+0x74>
 8007722:	2300      	movs	r3, #0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d10a      	bne.n	800773e <xQueueReceive+0x8e>
	__asm volatile
 8007728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772c:	f383 8811 	msr	BASEPRI, r3
 8007730:	f3bf 8f6f 	isb	sy
 8007734:	f3bf 8f4f 	dsb	sy
 8007738:	61bb      	str	r3, [r7, #24]
}
 800773a:	bf00      	nop
 800773c:	e7fe      	b.n	800773c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800773e:	f001 f9d1 	bl	8008ae4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007746:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774a:	2b00      	cmp	r3, #0
 800774c:	d01f      	beq.n	800778e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800774e:	68b9      	ldr	r1, [r7, #8]
 8007750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007752:	f000 f8f7 	bl	8007944 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007758:	1e5a      	subs	r2, r3, #1
 800775a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800775e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00f      	beq.n	8007786 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007768:	3310      	adds	r3, #16
 800776a:	4618      	mov	r0, r3
 800776c:	f000 fdc0 	bl	80082f0 <xTaskRemoveFromEventList>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d007      	beq.n	8007786 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007776:	4b3d      	ldr	r3, [pc, #244]	; (800786c <xQueueReceive+0x1bc>)
 8007778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800777c:	601a      	str	r2, [r3, #0]
 800777e:	f3bf 8f4f 	dsb	sy
 8007782:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007786:	f001 f9dd 	bl	8008b44 <vPortExitCritical>
				return pdPASS;
 800778a:	2301      	movs	r3, #1
 800778c:	e069      	b.n	8007862 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d103      	bne.n	800779c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007794:	f001 f9d6 	bl	8008b44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007798:	2300      	movs	r3, #0
 800779a:	e062      	b.n	8007862 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800779c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d106      	bne.n	80077b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80077a2:	f107 0310 	add.w	r3, r7, #16
 80077a6:	4618      	mov	r0, r3
 80077a8:	f000 fe04 	bl	80083b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80077ac:	2301      	movs	r3, #1
 80077ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80077b0:	f001 f9c8 	bl	8008b44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077b4:	f000 fbb4 	bl	8007f20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077b8:	f001 f994 	bl	8008ae4 <vPortEnterCritical>
 80077bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077c2:	b25b      	sxtb	r3, r3
 80077c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c8:	d103      	bne.n	80077d2 <xQueueReceive+0x122>
 80077ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077d8:	b25b      	sxtb	r3, r3
 80077da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077de:	d103      	bne.n	80077e8 <xQueueReceive+0x138>
 80077e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077e8:	f001 f9ac 	bl	8008b44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077ec:	1d3a      	adds	r2, r7, #4
 80077ee:	f107 0310 	add.w	r3, r7, #16
 80077f2:	4611      	mov	r1, r2
 80077f4:	4618      	mov	r0, r3
 80077f6:	f000 fdf3 	bl	80083e0 <xTaskCheckForTimeOut>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d123      	bne.n	8007848 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007802:	f000 f917 	bl	8007a34 <prvIsQueueEmpty>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d017      	beq.n	800783c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800780c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780e:	3324      	adds	r3, #36	; 0x24
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	4611      	mov	r1, r2
 8007814:	4618      	mov	r0, r3
 8007816:	f000 fd47 	bl	80082a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800781a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800781c:	f000 f8b8 	bl	8007990 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007820:	f000 fb8c 	bl	8007f3c <xTaskResumeAll>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d189      	bne.n	800773e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800782a:	4b10      	ldr	r3, [pc, #64]	; (800786c <xQueueReceive+0x1bc>)
 800782c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007830:	601a      	str	r2, [r3, #0]
 8007832:	f3bf 8f4f 	dsb	sy
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	e780      	b.n	800773e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800783c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800783e:	f000 f8a7 	bl	8007990 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007842:	f000 fb7b 	bl	8007f3c <xTaskResumeAll>
 8007846:	e77a      	b.n	800773e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800784a:	f000 f8a1 	bl	8007990 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800784e:	f000 fb75 	bl	8007f3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007852:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007854:	f000 f8ee 	bl	8007a34 <prvIsQueueEmpty>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	f43f af6f 	beq.w	800773e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007860:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007862:	4618      	mov	r0, r3
 8007864:	3730      	adds	r7, #48	; 0x30
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	e000ed04 	.word	0xe000ed04

08007870 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800787c:	2300      	movs	r3, #0
 800787e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007884:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10d      	bne.n	80078aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d14d      	bne.n	8007932 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	4618      	mov	r0, r3
 800789c:	f000 ff06 	bl	80086ac <xTaskPriorityDisinherit>
 80078a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	609a      	str	r2, [r3, #8]
 80078a8:	e043      	b.n	8007932 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d119      	bne.n	80078e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6858      	ldr	r0, [r3, #4]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b8:	461a      	mov	r2, r3
 80078ba:	68b9      	ldr	r1, [r7, #8]
 80078bc:	f002 f9ce 	bl	8009c5c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	685a      	ldr	r2, [r3, #4]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c8:	441a      	add	r2, r3
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	685a      	ldr	r2, [r3, #4]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d32b      	bcc.n	8007932 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	605a      	str	r2, [r3, #4]
 80078e2:	e026      	b.n	8007932 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	68d8      	ldr	r0, [r3, #12]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ec:	461a      	mov	r2, r3
 80078ee:	68b9      	ldr	r1, [r7, #8]
 80078f0:	f002 f9b4 	bl	8009c5c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	68da      	ldr	r2, [r3, #12]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fc:	425b      	negs	r3, r3
 80078fe:	441a      	add	r2, r3
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	68da      	ldr	r2, [r3, #12]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	429a      	cmp	r2, r3
 800790e:	d207      	bcs.n	8007920 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	689a      	ldr	r2, [r3, #8]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007918:	425b      	negs	r3, r3
 800791a:	441a      	add	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b02      	cmp	r3, #2
 8007924:	d105      	bne.n	8007932 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d002      	beq.n	8007932 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	3b01      	subs	r3, #1
 8007930:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	1c5a      	adds	r2, r3, #1
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800793a:	697b      	ldr	r3, [r7, #20]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3718      	adds	r7, #24
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007952:	2b00      	cmp	r3, #0
 8007954:	d018      	beq.n	8007988 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	68da      	ldr	r2, [r3, #12]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795e:	441a      	add	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	68da      	ldr	r2, [r3, #12]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	429a      	cmp	r2, r3
 800796e:	d303      	bcc.n	8007978 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	68d9      	ldr	r1, [r3, #12]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007980:	461a      	mov	r2, r3
 8007982:	6838      	ldr	r0, [r7, #0]
 8007984:	f002 f96a 	bl	8009c5c <memcpy>
	}
}
 8007988:	bf00      	nop
 800798a:	3708      	adds	r7, #8
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007998:	f001 f8a4 	bl	8008ae4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079a4:	e011      	b.n	80079ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d012      	beq.n	80079d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	3324      	adds	r3, #36	; 0x24
 80079b2:	4618      	mov	r0, r3
 80079b4:	f000 fc9c 	bl	80082f0 <xTaskRemoveFromEventList>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d001      	beq.n	80079c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80079be:	f000 fd71 	bl	80084a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80079c2:	7bfb      	ldrb	r3, [r7, #15]
 80079c4:	3b01      	subs	r3, #1
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	dce9      	bgt.n	80079a6 <prvUnlockQueue+0x16>
 80079d2:	e000      	b.n	80079d6 <prvUnlockQueue+0x46>
					break;
 80079d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	22ff      	movs	r2, #255	; 0xff
 80079da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80079de:	f001 f8b1 	bl	8008b44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80079e2:	f001 f87f 	bl	8008ae4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079ee:	e011      	b.n	8007a14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d012      	beq.n	8007a1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	3310      	adds	r3, #16
 80079fc:	4618      	mov	r0, r3
 80079fe:	f000 fc77 	bl	80082f0 <xTaskRemoveFromEventList>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d001      	beq.n	8007a0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007a08:	f000 fd4c 	bl	80084a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007a0c:	7bbb      	ldrb	r3, [r7, #14]
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	dce9      	bgt.n	80079f0 <prvUnlockQueue+0x60>
 8007a1c:	e000      	b.n	8007a20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007a1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	22ff      	movs	r2, #255	; 0xff
 8007a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007a28:	f001 f88c 	bl	8008b44 <vPortExitCritical>
}
 8007a2c:	bf00      	nop
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a3c:	f001 f852 	bl	8008ae4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d102      	bne.n	8007a4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	60fb      	str	r3, [r7, #12]
 8007a4c:	e001      	b.n	8007a52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a52:	f001 f877 	bl	8008b44 <vPortExitCritical>

	return xReturn;
 8007a56:	68fb      	ldr	r3, [r7, #12]
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a68:	f001 f83c 	bl	8008ae4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d102      	bne.n	8007a7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	60fb      	str	r3, [r7, #12]
 8007a7c:	e001      	b.n	8007a82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a82:	f001 f85f 	bl	8008b44 <vPortExitCritical>

	return xReturn;
 8007a86:	68fb      	ldr	r3, [r7, #12]
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3710      	adds	r7, #16
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b08e      	sub	sp, #56	; 0x38
 8007a94:	af04      	add	r7, sp, #16
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	607a      	str	r2, [r7, #4]
 8007a9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d10a      	bne.n	8007aba <xTaskCreateStatic+0x2a>
	__asm volatile
 8007aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa8:	f383 8811 	msr	BASEPRI, r3
 8007aac:	f3bf 8f6f 	isb	sy
 8007ab0:	f3bf 8f4f 	dsb	sy
 8007ab4:	623b      	str	r3, [r7, #32]
}
 8007ab6:	bf00      	nop
 8007ab8:	e7fe      	b.n	8007ab8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d10a      	bne.n	8007ad6 <xTaskCreateStatic+0x46>
	__asm volatile
 8007ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac4:	f383 8811 	msr	BASEPRI, r3
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	61fb      	str	r3, [r7, #28]
}
 8007ad2:	bf00      	nop
 8007ad4:	e7fe      	b.n	8007ad4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007ad6:	23b4      	movs	r3, #180	; 0xb4
 8007ad8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	2bb4      	cmp	r3, #180	; 0xb4
 8007ade:	d00a      	beq.n	8007af6 <xTaskCreateStatic+0x66>
	__asm volatile
 8007ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae4:	f383 8811 	msr	BASEPRI, r3
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	61bb      	str	r3, [r7, #24]
}
 8007af2:	bf00      	nop
 8007af4:	e7fe      	b.n	8007af4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007af6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d01e      	beq.n	8007b3c <xTaskCreateStatic+0xac>
 8007afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d01b      	beq.n	8007b3c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b06:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b0c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b10:	2202      	movs	r2, #2
 8007b12:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007b16:	2300      	movs	r3, #0
 8007b18:	9303      	str	r3, [sp, #12]
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1c:	9302      	str	r3, [sp, #8]
 8007b1e:	f107 0314 	add.w	r3, r7, #20
 8007b22:	9301      	str	r3, [sp, #4]
 8007b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	68b9      	ldr	r1, [r7, #8]
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f000 f850 	bl	8007bd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b36:	f000 f8eb 	bl	8007d10 <prvAddNewTaskToReadyList>
 8007b3a:	e001      	b.n	8007b40 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007b40:	697b      	ldr	r3, [r7, #20]
	}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3728      	adds	r7, #40	; 0x28
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b08c      	sub	sp, #48	; 0x30
 8007b4e:	af04      	add	r7, sp, #16
 8007b50:	60f8      	str	r0, [r7, #12]
 8007b52:	60b9      	str	r1, [r7, #8]
 8007b54:	603b      	str	r3, [r7, #0]
 8007b56:	4613      	mov	r3, r2
 8007b58:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007b5a:	88fb      	ldrh	r3, [r7, #6]
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f001 f8a2 	bl	8008ca8 <pvPortMalloc>
 8007b64:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00e      	beq.n	8007b8a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007b6c:	20b4      	movs	r0, #180	; 0xb4
 8007b6e:	f001 f89b 	bl	8008ca8 <pvPortMalloc>
 8007b72:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d003      	beq.n	8007b82 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	697a      	ldr	r2, [r7, #20]
 8007b7e:	631a      	str	r2, [r3, #48]	; 0x30
 8007b80:	e005      	b.n	8007b8e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007b82:	6978      	ldr	r0, [r7, #20]
 8007b84:	f001 f95c 	bl	8008e40 <vPortFree>
 8007b88:	e001      	b.n	8007b8e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d017      	beq.n	8007bc4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007b9c:	88fa      	ldrh	r2, [r7, #6]
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	9303      	str	r3, [sp, #12]
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	9302      	str	r3, [sp, #8]
 8007ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba8:	9301      	str	r3, [sp, #4]
 8007baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	68b9      	ldr	r1, [r7, #8]
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f000 f80e 	bl	8007bd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bb8:	69f8      	ldr	r0, [r7, #28]
 8007bba:	f000 f8a9 	bl	8007d10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	61bb      	str	r3, [r7, #24]
 8007bc2:	e002      	b.n	8007bca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8007bc8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007bca:	69bb      	ldr	r3, [r7, #24]
	}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3720      	adds	r7, #32
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b088      	sub	sp, #32
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	607a      	str	r2, [r7, #4]
 8007be0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007bec:	3b01      	subs	r3, #1
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4413      	add	r3, r2
 8007bf2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	f023 0307 	bic.w	r3, r3, #7
 8007bfa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	f003 0307 	and.w	r3, r3, #7
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00a      	beq.n	8007c1c <prvInitialiseNewTask+0x48>
	__asm volatile
 8007c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0a:	f383 8811 	msr	BASEPRI, r3
 8007c0e:	f3bf 8f6f 	isb	sy
 8007c12:	f3bf 8f4f 	dsb	sy
 8007c16:	617b      	str	r3, [r7, #20]
}
 8007c18:	bf00      	nop
 8007c1a:	e7fe      	b.n	8007c1a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d01f      	beq.n	8007c62 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c22:	2300      	movs	r3, #0
 8007c24:	61fb      	str	r3, [r7, #28]
 8007c26:	e012      	b.n	8007c4e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	7819      	ldrb	r1, [r3, #0]
 8007c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	4413      	add	r3, r2
 8007c36:	3334      	adds	r3, #52	; 0x34
 8007c38:	460a      	mov	r2, r1
 8007c3a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	4413      	add	r3, r2
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d006      	beq.n	8007c56 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	61fb      	str	r3, [r7, #28]
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	2b0f      	cmp	r3, #15
 8007c52:	d9e9      	bls.n	8007c28 <prvInitialiseNewTask+0x54>
 8007c54:	e000      	b.n	8007c58 <prvInitialiseNewTask+0x84>
			{
				break;
 8007c56:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c60:	e003      	b.n	8007c6a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	2b06      	cmp	r3, #6
 8007c6e:	d901      	bls.n	8007c74 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007c70:	2306      	movs	r3, #6
 8007c72:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c78:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c7e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c82:	2200      	movs	r2, #0
 8007c84:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c88:	3304      	adds	r3, #4
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7ff fabc 	bl	8007208 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c92:	3318      	adds	r3, #24
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7ff fab7 	bl	8007208 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca2:	f1c3 0207 	rsb	r2, r3, #7
 8007ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc2:	334c      	adds	r3, #76	; 0x4c
 8007cc4:	2260      	movs	r2, #96	; 0x60
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f001 ffd5 	bl	8009c78 <memset>
 8007cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd0:	4a0c      	ldr	r2, [pc, #48]	; (8007d04 <prvInitialiseNewTask+0x130>)
 8007cd2:	651a      	str	r2, [r3, #80]	; 0x50
 8007cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd6:	4a0c      	ldr	r2, [pc, #48]	; (8007d08 <prvInitialiseNewTask+0x134>)
 8007cd8:	655a      	str	r2, [r3, #84]	; 0x54
 8007cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cdc:	4a0b      	ldr	r2, [pc, #44]	; (8007d0c <prvInitialiseNewTask+0x138>)
 8007cde:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ce0:	683a      	ldr	r2, [r7, #0]
 8007ce2:	68f9      	ldr	r1, [r7, #12]
 8007ce4:	69b8      	ldr	r0, [r7, #24]
 8007ce6:	f000 fdcd 	bl	8008884 <pxPortInitialiseStack>
 8007cea:	4602      	mov	r2, r0
 8007cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d002      	beq.n	8007cfc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cfa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cfc:	bf00      	nop
 8007cfe:	3720      	adds	r7, #32
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	08009f04 	.word	0x08009f04
 8007d08:	08009f24 	.word	0x08009f24
 8007d0c:	08009ee4 	.word	0x08009ee4

08007d10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007d18:	f000 fee4 	bl	8008ae4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d1c:	4b2a      	ldr	r3, [pc, #168]	; (8007dc8 <prvAddNewTaskToReadyList+0xb8>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	3301      	adds	r3, #1
 8007d22:	4a29      	ldr	r2, [pc, #164]	; (8007dc8 <prvAddNewTaskToReadyList+0xb8>)
 8007d24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007d26:	4b29      	ldr	r3, [pc, #164]	; (8007dcc <prvAddNewTaskToReadyList+0xbc>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d109      	bne.n	8007d42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d2e:	4a27      	ldr	r2, [pc, #156]	; (8007dcc <prvAddNewTaskToReadyList+0xbc>)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d34:	4b24      	ldr	r3, [pc, #144]	; (8007dc8 <prvAddNewTaskToReadyList+0xb8>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d110      	bne.n	8007d5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d3c:	f000 fbd6 	bl	80084ec <prvInitialiseTaskLists>
 8007d40:	e00d      	b.n	8007d5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d42:	4b23      	ldr	r3, [pc, #140]	; (8007dd0 <prvAddNewTaskToReadyList+0xc0>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d109      	bne.n	8007d5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d4a:	4b20      	ldr	r3, [pc, #128]	; (8007dcc <prvAddNewTaskToReadyList+0xbc>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d802      	bhi.n	8007d5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007d58:	4a1c      	ldr	r2, [pc, #112]	; (8007dcc <prvAddNewTaskToReadyList+0xbc>)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007d5e:	4b1d      	ldr	r3, [pc, #116]	; (8007dd4 <prvAddNewTaskToReadyList+0xc4>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	3301      	adds	r3, #1
 8007d64:	4a1b      	ldr	r2, [pc, #108]	; (8007dd4 <prvAddNewTaskToReadyList+0xc4>)
 8007d66:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	409a      	lsls	r2, r3
 8007d70:	4b19      	ldr	r3, [pc, #100]	; (8007dd8 <prvAddNewTaskToReadyList+0xc8>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	4a18      	ldr	r2, [pc, #96]	; (8007dd8 <prvAddNewTaskToReadyList+0xc8>)
 8007d78:	6013      	str	r3, [r2, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d7e:	4613      	mov	r3, r2
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4413      	add	r3, r2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	4a15      	ldr	r2, [pc, #84]	; (8007ddc <prvAddNewTaskToReadyList+0xcc>)
 8007d88:	441a      	add	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	3304      	adds	r3, #4
 8007d8e:	4619      	mov	r1, r3
 8007d90:	4610      	mov	r0, r2
 8007d92:	f7ff fa46 	bl	8007222 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007d96:	f000 fed5 	bl	8008b44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007d9a:	4b0d      	ldr	r3, [pc, #52]	; (8007dd0 <prvAddNewTaskToReadyList+0xc0>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00e      	beq.n	8007dc0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007da2:	4b0a      	ldr	r3, [pc, #40]	; (8007dcc <prvAddNewTaskToReadyList+0xbc>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d207      	bcs.n	8007dc0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007db0:	4b0b      	ldr	r3, [pc, #44]	; (8007de0 <prvAddNewTaskToReadyList+0xd0>)
 8007db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007db6:	601a      	str	r2, [r3, #0]
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007dc0:	bf00      	nop
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	200005cc 	.word	0x200005cc
 8007dcc:	200004cc 	.word	0x200004cc
 8007dd0:	200005d8 	.word	0x200005d8
 8007dd4:	200005e8 	.word	0x200005e8
 8007dd8:	200005d4 	.word	0x200005d4
 8007ddc:	200004d0 	.word	0x200004d0
 8007de0:	e000ed04 	.word	0xe000ed04

08007de4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007dec:	2300      	movs	r3, #0
 8007dee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d017      	beq.n	8007e26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007df6:	4b13      	ldr	r3, [pc, #76]	; (8007e44 <vTaskDelay+0x60>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00a      	beq.n	8007e14 <vTaskDelay+0x30>
	__asm volatile
 8007dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	60bb      	str	r3, [r7, #8]
}
 8007e10:	bf00      	nop
 8007e12:	e7fe      	b.n	8007e12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007e14:	f000 f884 	bl	8007f20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007e18:	2100      	movs	r1, #0
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 fccc 	bl	80087b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e20:	f000 f88c 	bl	8007f3c <xTaskResumeAll>
 8007e24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d107      	bne.n	8007e3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007e2c:	4b06      	ldr	r3, [pc, #24]	; (8007e48 <vTaskDelay+0x64>)
 8007e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e32:	601a      	str	r2, [r3, #0]
 8007e34:	f3bf 8f4f 	dsb	sy
 8007e38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e3c:	bf00      	nop
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	200005f4 	.word	0x200005f4
 8007e48:	e000ed04 	.word	0xe000ed04

08007e4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b08a      	sub	sp, #40	; 0x28
 8007e50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007e52:	2300      	movs	r3, #0
 8007e54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007e56:	2300      	movs	r3, #0
 8007e58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007e5a:	463a      	mov	r2, r7
 8007e5c:	1d39      	adds	r1, r7, #4
 8007e5e:	f107 0308 	add.w	r3, r7, #8
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7f8 fb50 	bl	8000508 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007e68:	6839      	ldr	r1, [r7, #0]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	9202      	str	r2, [sp, #8]
 8007e70:	9301      	str	r3, [sp, #4]
 8007e72:	2300      	movs	r3, #0
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	2300      	movs	r3, #0
 8007e78:	460a      	mov	r2, r1
 8007e7a:	4921      	ldr	r1, [pc, #132]	; (8007f00 <vTaskStartScheduler+0xb4>)
 8007e7c:	4821      	ldr	r0, [pc, #132]	; (8007f04 <vTaskStartScheduler+0xb8>)
 8007e7e:	f7ff fe07 	bl	8007a90 <xTaskCreateStatic>
 8007e82:	4603      	mov	r3, r0
 8007e84:	4a20      	ldr	r2, [pc, #128]	; (8007f08 <vTaskStartScheduler+0xbc>)
 8007e86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007e88:	4b1f      	ldr	r3, [pc, #124]	; (8007f08 <vTaskStartScheduler+0xbc>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d002      	beq.n	8007e96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007e90:	2301      	movs	r3, #1
 8007e92:	617b      	str	r3, [r7, #20]
 8007e94:	e001      	b.n	8007e9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007e96:	2300      	movs	r3, #0
 8007e98:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d11b      	bne.n	8007ed8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea4:	f383 8811 	msr	BASEPRI, r3
 8007ea8:	f3bf 8f6f 	isb	sy
 8007eac:	f3bf 8f4f 	dsb	sy
 8007eb0:	613b      	str	r3, [r7, #16]
}
 8007eb2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007eb4:	4b15      	ldr	r3, [pc, #84]	; (8007f0c <vTaskStartScheduler+0xc0>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	334c      	adds	r3, #76	; 0x4c
 8007eba:	4a15      	ldr	r2, [pc, #84]	; (8007f10 <vTaskStartScheduler+0xc4>)
 8007ebc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007ebe:	4b15      	ldr	r3, [pc, #84]	; (8007f14 <vTaskStartScheduler+0xc8>)
 8007ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ec6:	4b14      	ldr	r3, [pc, #80]	; (8007f18 <vTaskStartScheduler+0xcc>)
 8007ec8:	2201      	movs	r2, #1
 8007eca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007ecc:	4b13      	ldr	r3, [pc, #76]	; (8007f1c <vTaskStartScheduler+0xd0>)
 8007ece:	2200      	movs	r2, #0
 8007ed0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007ed2:	f000 fd65 	bl	80089a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007ed6:	e00e      	b.n	8007ef6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ede:	d10a      	bne.n	8007ef6 <vTaskStartScheduler+0xaa>
	__asm volatile
 8007ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	60fb      	str	r3, [r7, #12]
}
 8007ef2:	bf00      	nop
 8007ef4:	e7fe      	b.n	8007ef4 <vTaskStartScheduler+0xa8>
}
 8007ef6:	bf00      	nop
 8007ef8:	3718      	adds	r7, #24
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	08009e7c 	.word	0x08009e7c
 8007f04:	080084bd 	.word	0x080084bd
 8007f08:	200005f0 	.word	0x200005f0
 8007f0c:	200004cc 	.word	0x200004cc
 8007f10:	20000194 	.word	0x20000194
 8007f14:	200005ec 	.word	0x200005ec
 8007f18:	200005d8 	.word	0x200005d8
 8007f1c:	200005d0 	.word	0x200005d0

08007f20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007f20:	b480      	push	{r7}
 8007f22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007f24:	4b04      	ldr	r3, [pc, #16]	; (8007f38 <vTaskSuspendAll+0x18>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	4a03      	ldr	r2, [pc, #12]	; (8007f38 <vTaskSuspendAll+0x18>)
 8007f2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007f2e:	bf00      	nop
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr
 8007f38:	200005f4 	.word	0x200005f4

08007f3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007f42:	2300      	movs	r3, #0
 8007f44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007f46:	2300      	movs	r3, #0
 8007f48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007f4a:	4b41      	ldr	r3, [pc, #260]	; (8008050 <xTaskResumeAll+0x114>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d10a      	bne.n	8007f68 <xTaskResumeAll+0x2c>
	__asm volatile
 8007f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f56:	f383 8811 	msr	BASEPRI, r3
 8007f5a:	f3bf 8f6f 	isb	sy
 8007f5e:	f3bf 8f4f 	dsb	sy
 8007f62:	603b      	str	r3, [r7, #0]
}
 8007f64:	bf00      	nop
 8007f66:	e7fe      	b.n	8007f66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007f68:	f000 fdbc 	bl	8008ae4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007f6c:	4b38      	ldr	r3, [pc, #224]	; (8008050 <xTaskResumeAll+0x114>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	3b01      	subs	r3, #1
 8007f72:	4a37      	ldr	r2, [pc, #220]	; (8008050 <xTaskResumeAll+0x114>)
 8007f74:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f76:	4b36      	ldr	r3, [pc, #216]	; (8008050 <xTaskResumeAll+0x114>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d161      	bne.n	8008042 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007f7e:	4b35      	ldr	r3, [pc, #212]	; (8008054 <xTaskResumeAll+0x118>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d05d      	beq.n	8008042 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f86:	e02e      	b.n	8007fe6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f88:	4b33      	ldr	r3, [pc, #204]	; (8008058 <xTaskResumeAll+0x11c>)
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	3318      	adds	r3, #24
 8007f94:	4618      	mov	r0, r3
 8007f96:	f7ff f9a1 	bl	80072dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	3304      	adds	r3, #4
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7ff f99c 	bl	80072dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa8:	2201      	movs	r2, #1
 8007faa:	409a      	lsls	r2, r3
 8007fac:	4b2b      	ldr	r3, [pc, #172]	; (800805c <xTaskResumeAll+0x120>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	4a2a      	ldr	r2, [pc, #168]	; (800805c <xTaskResumeAll+0x120>)
 8007fb4:	6013      	str	r3, [r2, #0]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fba:	4613      	mov	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4413      	add	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4a27      	ldr	r2, [pc, #156]	; (8008060 <xTaskResumeAll+0x124>)
 8007fc4:	441a      	add	r2, r3
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	3304      	adds	r3, #4
 8007fca:	4619      	mov	r1, r3
 8007fcc:	4610      	mov	r0, r2
 8007fce:	f7ff f928 	bl	8007222 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fd6:	4b23      	ldr	r3, [pc, #140]	; (8008064 <xTaskResumeAll+0x128>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d302      	bcc.n	8007fe6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007fe0:	4b21      	ldr	r3, [pc, #132]	; (8008068 <xTaskResumeAll+0x12c>)
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007fe6:	4b1c      	ldr	r3, [pc, #112]	; (8008058 <xTaskResumeAll+0x11c>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d1cc      	bne.n	8007f88 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d001      	beq.n	8007ff8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007ff4:	f000 fb1c 	bl	8008630 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007ff8:	4b1c      	ldr	r3, [pc, #112]	; (800806c <xTaskResumeAll+0x130>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d010      	beq.n	8008026 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008004:	f000 f836 	bl	8008074 <xTaskIncrementTick>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d002      	beq.n	8008014 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800800e:	4b16      	ldr	r3, [pc, #88]	; (8008068 <xTaskResumeAll+0x12c>)
 8008010:	2201      	movs	r2, #1
 8008012:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	3b01      	subs	r3, #1
 8008018:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d1f1      	bne.n	8008004 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008020:	4b12      	ldr	r3, [pc, #72]	; (800806c <xTaskResumeAll+0x130>)
 8008022:	2200      	movs	r2, #0
 8008024:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008026:	4b10      	ldr	r3, [pc, #64]	; (8008068 <xTaskResumeAll+0x12c>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d009      	beq.n	8008042 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800802e:	2301      	movs	r3, #1
 8008030:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008032:	4b0f      	ldr	r3, [pc, #60]	; (8008070 <xTaskResumeAll+0x134>)
 8008034:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008038:	601a      	str	r2, [r3, #0]
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008042:	f000 fd7f 	bl	8008b44 <vPortExitCritical>

	return xAlreadyYielded;
 8008046:	68bb      	ldr	r3, [r7, #8]
}
 8008048:	4618      	mov	r0, r3
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	200005f4 	.word	0x200005f4
 8008054:	200005cc 	.word	0x200005cc
 8008058:	2000058c 	.word	0x2000058c
 800805c:	200005d4 	.word	0x200005d4
 8008060:	200004d0 	.word	0x200004d0
 8008064:	200004cc 	.word	0x200004cc
 8008068:	200005e0 	.word	0x200005e0
 800806c:	200005dc 	.word	0x200005dc
 8008070:	e000ed04 	.word	0xe000ed04

08008074 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800807a:	2300      	movs	r3, #0
 800807c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800807e:	4b4e      	ldr	r3, [pc, #312]	; (80081b8 <xTaskIncrementTick+0x144>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	f040 808e 	bne.w	80081a4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008088:	4b4c      	ldr	r3, [pc, #304]	; (80081bc <xTaskIncrementTick+0x148>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	3301      	adds	r3, #1
 800808e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008090:	4a4a      	ldr	r2, [pc, #296]	; (80081bc <xTaskIncrementTick+0x148>)
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d120      	bne.n	80080de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800809c:	4b48      	ldr	r3, [pc, #288]	; (80081c0 <xTaskIncrementTick+0x14c>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00a      	beq.n	80080bc <xTaskIncrementTick+0x48>
	__asm volatile
 80080a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080aa:	f383 8811 	msr	BASEPRI, r3
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	f3bf 8f4f 	dsb	sy
 80080b6:	603b      	str	r3, [r7, #0]
}
 80080b8:	bf00      	nop
 80080ba:	e7fe      	b.n	80080ba <xTaskIncrementTick+0x46>
 80080bc:	4b40      	ldr	r3, [pc, #256]	; (80081c0 <xTaskIncrementTick+0x14c>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	60fb      	str	r3, [r7, #12]
 80080c2:	4b40      	ldr	r3, [pc, #256]	; (80081c4 <xTaskIncrementTick+0x150>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a3e      	ldr	r2, [pc, #248]	; (80081c0 <xTaskIncrementTick+0x14c>)
 80080c8:	6013      	str	r3, [r2, #0]
 80080ca:	4a3e      	ldr	r2, [pc, #248]	; (80081c4 <xTaskIncrementTick+0x150>)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6013      	str	r3, [r2, #0]
 80080d0:	4b3d      	ldr	r3, [pc, #244]	; (80081c8 <xTaskIncrementTick+0x154>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	3301      	adds	r3, #1
 80080d6:	4a3c      	ldr	r2, [pc, #240]	; (80081c8 <xTaskIncrementTick+0x154>)
 80080d8:	6013      	str	r3, [r2, #0]
 80080da:	f000 faa9 	bl	8008630 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80080de:	4b3b      	ldr	r3, [pc, #236]	; (80081cc <xTaskIncrementTick+0x158>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	693a      	ldr	r2, [r7, #16]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d348      	bcc.n	800817a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080e8:	4b35      	ldr	r3, [pc, #212]	; (80081c0 <xTaskIncrementTick+0x14c>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d104      	bne.n	80080fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080f2:	4b36      	ldr	r3, [pc, #216]	; (80081cc <xTaskIncrementTick+0x158>)
 80080f4:	f04f 32ff 	mov.w	r2, #4294967295
 80080f8:	601a      	str	r2, [r3, #0]
					break;
 80080fa:	e03e      	b.n	800817a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080fc:	4b30      	ldr	r3, [pc, #192]	; (80081c0 <xTaskIncrementTick+0x14c>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800810c:	693a      	ldr	r2, [r7, #16]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	429a      	cmp	r2, r3
 8008112:	d203      	bcs.n	800811c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008114:	4a2d      	ldr	r2, [pc, #180]	; (80081cc <xTaskIncrementTick+0x158>)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800811a:	e02e      	b.n	800817a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	3304      	adds	r3, #4
 8008120:	4618      	mov	r0, r3
 8008122:	f7ff f8db 	bl	80072dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800812a:	2b00      	cmp	r3, #0
 800812c:	d004      	beq.n	8008138 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	3318      	adds	r3, #24
 8008132:	4618      	mov	r0, r3
 8008134:	f7ff f8d2 	bl	80072dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813c:	2201      	movs	r2, #1
 800813e:	409a      	lsls	r2, r3
 8008140:	4b23      	ldr	r3, [pc, #140]	; (80081d0 <xTaskIncrementTick+0x15c>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4313      	orrs	r3, r2
 8008146:	4a22      	ldr	r2, [pc, #136]	; (80081d0 <xTaskIncrementTick+0x15c>)
 8008148:	6013      	str	r3, [r2, #0]
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800814e:	4613      	mov	r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	4413      	add	r3, r2
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	4a1f      	ldr	r2, [pc, #124]	; (80081d4 <xTaskIncrementTick+0x160>)
 8008158:	441a      	add	r2, r3
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	3304      	adds	r3, #4
 800815e:	4619      	mov	r1, r3
 8008160:	4610      	mov	r0, r2
 8008162:	f7ff f85e 	bl	8007222 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800816a:	4b1b      	ldr	r3, [pc, #108]	; (80081d8 <xTaskIncrementTick+0x164>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008170:	429a      	cmp	r2, r3
 8008172:	d3b9      	bcc.n	80080e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008174:	2301      	movs	r3, #1
 8008176:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008178:	e7b6      	b.n	80080e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800817a:	4b17      	ldr	r3, [pc, #92]	; (80081d8 <xTaskIncrementTick+0x164>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008180:	4914      	ldr	r1, [pc, #80]	; (80081d4 <xTaskIncrementTick+0x160>)
 8008182:	4613      	mov	r3, r2
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	4413      	add	r3, r2
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	440b      	add	r3, r1
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2b01      	cmp	r3, #1
 8008190:	d901      	bls.n	8008196 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008192:	2301      	movs	r3, #1
 8008194:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008196:	4b11      	ldr	r3, [pc, #68]	; (80081dc <xTaskIncrementTick+0x168>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d007      	beq.n	80081ae <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800819e:	2301      	movs	r3, #1
 80081a0:	617b      	str	r3, [r7, #20]
 80081a2:	e004      	b.n	80081ae <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80081a4:	4b0e      	ldr	r3, [pc, #56]	; (80081e0 <xTaskIncrementTick+0x16c>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	3301      	adds	r3, #1
 80081aa:	4a0d      	ldr	r2, [pc, #52]	; (80081e0 <xTaskIncrementTick+0x16c>)
 80081ac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80081ae:	697b      	ldr	r3, [r7, #20]
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3718      	adds	r7, #24
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	200005f4 	.word	0x200005f4
 80081bc:	200005d0 	.word	0x200005d0
 80081c0:	20000584 	.word	0x20000584
 80081c4:	20000588 	.word	0x20000588
 80081c8:	200005e4 	.word	0x200005e4
 80081cc:	200005ec 	.word	0x200005ec
 80081d0:	200005d4 	.word	0x200005d4
 80081d4:	200004d0 	.word	0x200004d0
 80081d8:	200004cc 	.word	0x200004cc
 80081dc:	200005e0 	.word	0x200005e0
 80081e0:	200005dc 	.word	0x200005dc

080081e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80081e4:	b480      	push	{r7}
 80081e6:	b087      	sub	sp, #28
 80081e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80081ea:	4b29      	ldr	r3, [pc, #164]	; (8008290 <vTaskSwitchContext+0xac>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d003      	beq.n	80081fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80081f2:	4b28      	ldr	r3, [pc, #160]	; (8008294 <vTaskSwitchContext+0xb0>)
 80081f4:	2201      	movs	r2, #1
 80081f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80081f8:	e044      	b.n	8008284 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80081fa:	4b26      	ldr	r3, [pc, #152]	; (8008294 <vTaskSwitchContext+0xb0>)
 80081fc:	2200      	movs	r2, #0
 80081fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008200:	4b25      	ldr	r3, [pc, #148]	; (8008298 <vTaskSwitchContext+0xb4>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	fab3 f383 	clz	r3, r3
 800820c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800820e:	7afb      	ldrb	r3, [r7, #11]
 8008210:	f1c3 031f 	rsb	r3, r3, #31
 8008214:	617b      	str	r3, [r7, #20]
 8008216:	4921      	ldr	r1, [pc, #132]	; (800829c <vTaskSwitchContext+0xb8>)
 8008218:	697a      	ldr	r2, [r7, #20]
 800821a:	4613      	mov	r3, r2
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	4413      	add	r3, r2
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	440b      	add	r3, r1
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10a      	bne.n	8008240 <vTaskSwitchContext+0x5c>
	__asm volatile
 800822a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822e:	f383 8811 	msr	BASEPRI, r3
 8008232:	f3bf 8f6f 	isb	sy
 8008236:	f3bf 8f4f 	dsb	sy
 800823a:	607b      	str	r3, [r7, #4]
}
 800823c:	bf00      	nop
 800823e:	e7fe      	b.n	800823e <vTaskSwitchContext+0x5a>
 8008240:	697a      	ldr	r2, [r7, #20]
 8008242:	4613      	mov	r3, r2
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	4413      	add	r3, r2
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	4a14      	ldr	r2, [pc, #80]	; (800829c <vTaskSwitchContext+0xb8>)
 800824c:	4413      	add	r3, r2
 800824e:	613b      	str	r3, [r7, #16]
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	685a      	ldr	r2, [r3, #4]
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	605a      	str	r2, [r3, #4]
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	685a      	ldr	r2, [r3, #4]
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	3308      	adds	r3, #8
 8008262:	429a      	cmp	r2, r3
 8008264:	d104      	bne.n	8008270 <vTaskSwitchContext+0x8c>
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	685a      	ldr	r2, [r3, #4]
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	605a      	str	r2, [r3, #4]
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	4a0a      	ldr	r2, [pc, #40]	; (80082a0 <vTaskSwitchContext+0xbc>)
 8008278:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800827a:	4b09      	ldr	r3, [pc, #36]	; (80082a0 <vTaskSwitchContext+0xbc>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	334c      	adds	r3, #76	; 0x4c
 8008280:	4a08      	ldr	r2, [pc, #32]	; (80082a4 <vTaskSwitchContext+0xc0>)
 8008282:	6013      	str	r3, [r2, #0]
}
 8008284:	bf00      	nop
 8008286:	371c      	adds	r7, #28
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	200005f4 	.word	0x200005f4
 8008294:	200005e0 	.word	0x200005e0
 8008298:	200005d4 	.word	0x200005d4
 800829c:	200004d0 	.word	0x200004d0
 80082a0:	200004cc 	.word	0x200004cc
 80082a4:	20000194 	.word	0x20000194

080082a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10a      	bne.n	80082ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80082b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082bc:	f383 8811 	msr	BASEPRI, r3
 80082c0:	f3bf 8f6f 	isb	sy
 80082c4:	f3bf 8f4f 	dsb	sy
 80082c8:	60fb      	str	r3, [r7, #12]
}
 80082ca:	bf00      	nop
 80082cc:	e7fe      	b.n	80082cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80082ce:	4b07      	ldr	r3, [pc, #28]	; (80082ec <vTaskPlaceOnEventList+0x44>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	3318      	adds	r3, #24
 80082d4:	4619      	mov	r1, r3
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f7fe ffc7 	bl	800726a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80082dc:	2101      	movs	r1, #1
 80082de:	6838      	ldr	r0, [r7, #0]
 80082e0:	f000 fa6a 	bl	80087b8 <prvAddCurrentTaskToDelayedList>
}
 80082e4:	bf00      	nop
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	200004cc 	.word	0x200004cc

080082f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d10a      	bne.n	800831c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830a:	f383 8811 	msr	BASEPRI, r3
 800830e:	f3bf 8f6f 	isb	sy
 8008312:	f3bf 8f4f 	dsb	sy
 8008316:	60fb      	str	r3, [r7, #12]
}
 8008318:	bf00      	nop
 800831a:	e7fe      	b.n	800831a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	3318      	adds	r3, #24
 8008320:	4618      	mov	r0, r3
 8008322:	f7fe ffdb 	bl	80072dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008326:	4b1d      	ldr	r3, [pc, #116]	; (800839c <xTaskRemoveFromEventList+0xac>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d11c      	bne.n	8008368 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	3304      	adds	r3, #4
 8008332:	4618      	mov	r0, r3
 8008334:	f7fe ffd2 	bl	80072dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833c:	2201      	movs	r2, #1
 800833e:	409a      	lsls	r2, r3
 8008340:	4b17      	ldr	r3, [pc, #92]	; (80083a0 <xTaskRemoveFromEventList+0xb0>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4313      	orrs	r3, r2
 8008346:	4a16      	ldr	r2, [pc, #88]	; (80083a0 <xTaskRemoveFromEventList+0xb0>)
 8008348:	6013      	str	r3, [r2, #0]
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800834e:	4613      	mov	r3, r2
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	4413      	add	r3, r2
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	4a13      	ldr	r2, [pc, #76]	; (80083a4 <xTaskRemoveFromEventList+0xb4>)
 8008358:	441a      	add	r2, r3
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	3304      	adds	r3, #4
 800835e:	4619      	mov	r1, r3
 8008360:	4610      	mov	r0, r2
 8008362:	f7fe ff5e 	bl	8007222 <vListInsertEnd>
 8008366:	e005      	b.n	8008374 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	3318      	adds	r3, #24
 800836c:	4619      	mov	r1, r3
 800836e:	480e      	ldr	r0, [pc, #56]	; (80083a8 <xTaskRemoveFromEventList+0xb8>)
 8008370:	f7fe ff57 	bl	8007222 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008378:	4b0c      	ldr	r3, [pc, #48]	; (80083ac <xTaskRemoveFromEventList+0xbc>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800837e:	429a      	cmp	r2, r3
 8008380:	d905      	bls.n	800838e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008382:	2301      	movs	r3, #1
 8008384:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008386:	4b0a      	ldr	r3, [pc, #40]	; (80083b0 <xTaskRemoveFromEventList+0xc0>)
 8008388:	2201      	movs	r2, #1
 800838a:	601a      	str	r2, [r3, #0]
 800838c:	e001      	b.n	8008392 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800838e:	2300      	movs	r3, #0
 8008390:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008392:	697b      	ldr	r3, [r7, #20]
}
 8008394:	4618      	mov	r0, r3
 8008396:	3718      	adds	r7, #24
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}
 800839c:	200005f4 	.word	0x200005f4
 80083a0:	200005d4 	.word	0x200005d4
 80083a4:	200004d0 	.word	0x200004d0
 80083a8:	2000058c 	.word	0x2000058c
 80083ac:	200004cc 	.word	0x200004cc
 80083b0:	200005e0 	.word	0x200005e0

080083b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80083bc:	4b06      	ldr	r3, [pc, #24]	; (80083d8 <vTaskInternalSetTimeOutState+0x24>)
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80083c4:	4b05      	ldr	r3, [pc, #20]	; (80083dc <vTaskInternalSetTimeOutState+0x28>)
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	605a      	str	r2, [r3, #4]
}
 80083cc:	bf00      	nop
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr
 80083d8:	200005e4 	.word	0x200005e4
 80083dc:	200005d0 	.word	0x200005d0

080083e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b088      	sub	sp, #32
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d10a      	bne.n	8008406 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80083f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f4:	f383 8811 	msr	BASEPRI, r3
 80083f8:	f3bf 8f6f 	isb	sy
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	613b      	str	r3, [r7, #16]
}
 8008402:	bf00      	nop
 8008404:	e7fe      	b.n	8008404 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d10a      	bne.n	8008422 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800840c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008410:	f383 8811 	msr	BASEPRI, r3
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	60fb      	str	r3, [r7, #12]
}
 800841e:	bf00      	nop
 8008420:	e7fe      	b.n	8008420 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008422:	f000 fb5f 	bl	8008ae4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008426:	4b1d      	ldr	r3, [pc, #116]	; (800849c <xTaskCheckForTimeOut+0xbc>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	69ba      	ldr	r2, [r7, #24]
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800843e:	d102      	bne.n	8008446 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008440:	2300      	movs	r3, #0
 8008442:	61fb      	str	r3, [r7, #28]
 8008444:	e023      	b.n	800848e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	4b15      	ldr	r3, [pc, #84]	; (80084a0 <xTaskCheckForTimeOut+0xc0>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	429a      	cmp	r2, r3
 8008450:	d007      	beq.n	8008462 <xTaskCheckForTimeOut+0x82>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	69ba      	ldr	r2, [r7, #24]
 8008458:	429a      	cmp	r2, r3
 800845a:	d302      	bcc.n	8008462 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800845c:	2301      	movs	r3, #1
 800845e:	61fb      	str	r3, [r7, #28]
 8008460:	e015      	b.n	800848e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	429a      	cmp	r2, r3
 800846a:	d20b      	bcs.n	8008484 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	1ad2      	subs	r2, r2, r3
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f7ff ff9b 	bl	80083b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800847e:	2300      	movs	r3, #0
 8008480:	61fb      	str	r3, [r7, #28]
 8008482:	e004      	b.n	800848e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	2200      	movs	r2, #0
 8008488:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800848a:	2301      	movs	r3, #1
 800848c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800848e:	f000 fb59 	bl	8008b44 <vPortExitCritical>

	return xReturn;
 8008492:	69fb      	ldr	r3, [r7, #28]
}
 8008494:	4618      	mov	r0, r3
 8008496:	3720      	adds	r7, #32
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}
 800849c:	200005d0 	.word	0x200005d0
 80084a0:	200005e4 	.word	0x200005e4

080084a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80084a4:	b480      	push	{r7}
 80084a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80084a8:	4b03      	ldr	r3, [pc, #12]	; (80084b8 <vTaskMissedYield+0x14>)
 80084aa:	2201      	movs	r2, #1
 80084ac:	601a      	str	r2, [r3, #0]
}
 80084ae:	bf00      	nop
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr
 80084b8:	200005e0 	.word	0x200005e0

080084bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80084c4:	f000 f852 	bl	800856c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80084c8:	4b06      	ldr	r3, [pc, #24]	; (80084e4 <prvIdleTask+0x28>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d9f9      	bls.n	80084c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80084d0:	4b05      	ldr	r3, [pc, #20]	; (80084e8 <prvIdleTask+0x2c>)
 80084d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084d6:	601a      	str	r2, [r3, #0]
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80084e0:	e7f0      	b.n	80084c4 <prvIdleTask+0x8>
 80084e2:	bf00      	nop
 80084e4:	200004d0 	.word	0x200004d0
 80084e8:	e000ed04 	.word	0xe000ed04

080084ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80084f2:	2300      	movs	r3, #0
 80084f4:	607b      	str	r3, [r7, #4]
 80084f6:	e00c      	b.n	8008512 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	4613      	mov	r3, r2
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	4413      	add	r3, r2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	4a12      	ldr	r2, [pc, #72]	; (800854c <prvInitialiseTaskLists+0x60>)
 8008504:	4413      	add	r3, r2
 8008506:	4618      	mov	r0, r3
 8008508:	f7fe fe5e 	bl	80071c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	3301      	adds	r3, #1
 8008510:	607b      	str	r3, [r7, #4]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2b06      	cmp	r3, #6
 8008516:	d9ef      	bls.n	80084f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008518:	480d      	ldr	r0, [pc, #52]	; (8008550 <prvInitialiseTaskLists+0x64>)
 800851a:	f7fe fe55 	bl	80071c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800851e:	480d      	ldr	r0, [pc, #52]	; (8008554 <prvInitialiseTaskLists+0x68>)
 8008520:	f7fe fe52 	bl	80071c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008524:	480c      	ldr	r0, [pc, #48]	; (8008558 <prvInitialiseTaskLists+0x6c>)
 8008526:	f7fe fe4f 	bl	80071c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800852a:	480c      	ldr	r0, [pc, #48]	; (800855c <prvInitialiseTaskLists+0x70>)
 800852c:	f7fe fe4c 	bl	80071c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008530:	480b      	ldr	r0, [pc, #44]	; (8008560 <prvInitialiseTaskLists+0x74>)
 8008532:	f7fe fe49 	bl	80071c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008536:	4b0b      	ldr	r3, [pc, #44]	; (8008564 <prvInitialiseTaskLists+0x78>)
 8008538:	4a05      	ldr	r2, [pc, #20]	; (8008550 <prvInitialiseTaskLists+0x64>)
 800853a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800853c:	4b0a      	ldr	r3, [pc, #40]	; (8008568 <prvInitialiseTaskLists+0x7c>)
 800853e:	4a05      	ldr	r2, [pc, #20]	; (8008554 <prvInitialiseTaskLists+0x68>)
 8008540:	601a      	str	r2, [r3, #0]
}
 8008542:	bf00      	nop
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	200004d0 	.word	0x200004d0
 8008550:	2000055c 	.word	0x2000055c
 8008554:	20000570 	.word	0x20000570
 8008558:	2000058c 	.word	0x2000058c
 800855c:	200005a0 	.word	0x200005a0
 8008560:	200005b8 	.word	0x200005b8
 8008564:	20000584 	.word	0x20000584
 8008568:	20000588 	.word	0x20000588

0800856c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008572:	e019      	b.n	80085a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008574:	f000 fab6 	bl	8008ae4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008578:	4b10      	ldr	r3, [pc, #64]	; (80085bc <prvCheckTasksWaitingTermination+0x50>)
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	3304      	adds	r3, #4
 8008584:	4618      	mov	r0, r3
 8008586:	f7fe fea9 	bl	80072dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800858a:	4b0d      	ldr	r3, [pc, #52]	; (80085c0 <prvCheckTasksWaitingTermination+0x54>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	3b01      	subs	r3, #1
 8008590:	4a0b      	ldr	r2, [pc, #44]	; (80085c0 <prvCheckTasksWaitingTermination+0x54>)
 8008592:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008594:	4b0b      	ldr	r3, [pc, #44]	; (80085c4 <prvCheckTasksWaitingTermination+0x58>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	3b01      	subs	r3, #1
 800859a:	4a0a      	ldr	r2, [pc, #40]	; (80085c4 <prvCheckTasksWaitingTermination+0x58>)
 800859c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800859e:	f000 fad1 	bl	8008b44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f810 	bl	80085c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80085a8:	4b06      	ldr	r3, [pc, #24]	; (80085c4 <prvCheckTasksWaitingTermination+0x58>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d1e1      	bne.n	8008574 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80085b0:	bf00      	nop
 80085b2:	bf00      	nop
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	200005a0 	.word	0x200005a0
 80085c0:	200005cc 	.word	0x200005cc
 80085c4:	200005b4 	.word	0x200005b4

080085c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	334c      	adds	r3, #76	; 0x4c
 80085d4:	4618      	mov	r0, r3
 80085d6:	f001 fb65 	bl	8009ca4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d108      	bne.n	80085f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085e8:	4618      	mov	r0, r3
 80085ea:	f000 fc29 	bl	8008e40 <vPortFree>
				vPortFree( pxTCB );
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 fc26 	bl	8008e40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80085f4:	e018      	b.n	8008628 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d103      	bne.n	8008608 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 fc1d 	bl	8008e40 <vPortFree>
	}
 8008606:	e00f      	b.n	8008628 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800860e:	2b02      	cmp	r3, #2
 8008610:	d00a      	beq.n	8008628 <prvDeleteTCB+0x60>
	__asm volatile
 8008612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008616:	f383 8811 	msr	BASEPRI, r3
 800861a:	f3bf 8f6f 	isb	sy
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	60fb      	str	r3, [r7, #12]
}
 8008624:	bf00      	nop
 8008626:	e7fe      	b.n	8008626 <prvDeleteTCB+0x5e>
	}
 8008628:	bf00      	nop
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008636:	4b0c      	ldr	r3, [pc, #48]	; (8008668 <prvResetNextTaskUnblockTime+0x38>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d104      	bne.n	800864a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008640:	4b0a      	ldr	r3, [pc, #40]	; (800866c <prvResetNextTaskUnblockTime+0x3c>)
 8008642:	f04f 32ff 	mov.w	r2, #4294967295
 8008646:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008648:	e008      	b.n	800865c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800864a:	4b07      	ldr	r3, [pc, #28]	; (8008668 <prvResetNextTaskUnblockTime+0x38>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	4a04      	ldr	r2, [pc, #16]	; (800866c <prvResetNextTaskUnblockTime+0x3c>)
 800865a:	6013      	str	r3, [r2, #0]
}
 800865c:	bf00      	nop
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr
 8008668:	20000584 	.word	0x20000584
 800866c:	200005ec 	.word	0x200005ec

08008670 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008676:	4b0b      	ldr	r3, [pc, #44]	; (80086a4 <xTaskGetSchedulerState+0x34>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d102      	bne.n	8008684 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800867e:	2301      	movs	r3, #1
 8008680:	607b      	str	r3, [r7, #4]
 8008682:	e008      	b.n	8008696 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008684:	4b08      	ldr	r3, [pc, #32]	; (80086a8 <xTaskGetSchedulerState+0x38>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d102      	bne.n	8008692 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800868c:	2302      	movs	r3, #2
 800868e:	607b      	str	r3, [r7, #4]
 8008690:	e001      	b.n	8008696 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008692:	2300      	movs	r3, #0
 8008694:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008696:	687b      	ldr	r3, [r7, #4]
	}
 8008698:	4618      	mov	r0, r3
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr
 80086a4:	200005d8 	.word	0x200005d8
 80086a8:	200005f4 	.word	0x200005f4

080086ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b086      	sub	sp, #24
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80086b8:	2300      	movs	r3, #0
 80086ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d06e      	beq.n	80087a0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80086c2:	4b3a      	ldr	r3, [pc, #232]	; (80087ac <xTaskPriorityDisinherit+0x100>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	693a      	ldr	r2, [r7, #16]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d00a      	beq.n	80086e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80086cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d0:	f383 8811 	msr	BASEPRI, r3
 80086d4:	f3bf 8f6f 	isb	sy
 80086d8:	f3bf 8f4f 	dsb	sy
 80086dc:	60fb      	str	r3, [r7, #12]
}
 80086de:	bf00      	nop
 80086e0:	e7fe      	b.n	80086e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d10a      	bne.n	8008700 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80086ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ee:	f383 8811 	msr	BASEPRI, r3
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	60bb      	str	r3, [r7, #8]
}
 80086fc:	bf00      	nop
 80086fe:	e7fe      	b.n	80086fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008704:	1e5a      	subs	r2, r3, #1
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008712:	429a      	cmp	r2, r3
 8008714:	d044      	beq.n	80087a0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800871a:	2b00      	cmp	r3, #0
 800871c:	d140      	bne.n	80087a0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	3304      	adds	r3, #4
 8008722:	4618      	mov	r0, r3
 8008724:	f7fe fdda 	bl	80072dc <uxListRemove>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d115      	bne.n	800875a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008732:	491f      	ldr	r1, [pc, #124]	; (80087b0 <xTaskPriorityDisinherit+0x104>)
 8008734:	4613      	mov	r3, r2
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	4413      	add	r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	440b      	add	r3, r1
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10a      	bne.n	800875a <xTaskPriorityDisinherit+0xae>
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008748:	2201      	movs	r2, #1
 800874a:	fa02 f303 	lsl.w	r3, r2, r3
 800874e:	43da      	mvns	r2, r3
 8008750:	4b18      	ldr	r3, [pc, #96]	; (80087b4 <xTaskPriorityDisinherit+0x108>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4013      	ands	r3, r2
 8008756:	4a17      	ldr	r2, [pc, #92]	; (80087b4 <xTaskPriorityDisinherit+0x108>)
 8008758:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008766:	f1c3 0207 	rsb	r2, r3, #7
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008772:	2201      	movs	r2, #1
 8008774:	409a      	lsls	r2, r3
 8008776:	4b0f      	ldr	r3, [pc, #60]	; (80087b4 <xTaskPriorityDisinherit+0x108>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4313      	orrs	r3, r2
 800877c:	4a0d      	ldr	r2, [pc, #52]	; (80087b4 <xTaskPriorityDisinherit+0x108>)
 800877e:	6013      	str	r3, [r2, #0]
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008784:	4613      	mov	r3, r2
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	4413      	add	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	4a08      	ldr	r2, [pc, #32]	; (80087b0 <xTaskPriorityDisinherit+0x104>)
 800878e:	441a      	add	r2, r3
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	3304      	adds	r3, #4
 8008794:	4619      	mov	r1, r3
 8008796:	4610      	mov	r0, r2
 8008798:	f7fe fd43 	bl	8007222 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800879c:	2301      	movs	r3, #1
 800879e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80087a0:	697b      	ldr	r3, [r7, #20]
	}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3718      	adds	r7, #24
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	200004cc 	.word	0x200004cc
 80087b0:	200004d0 	.word	0x200004d0
 80087b4:	200005d4 	.word	0x200005d4

080087b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80087c2:	4b29      	ldr	r3, [pc, #164]	; (8008868 <prvAddCurrentTaskToDelayedList+0xb0>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087c8:	4b28      	ldr	r3, [pc, #160]	; (800886c <prvAddCurrentTaskToDelayedList+0xb4>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	3304      	adds	r3, #4
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7fe fd84 	bl	80072dc <uxListRemove>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d10b      	bne.n	80087f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80087da:	4b24      	ldr	r3, [pc, #144]	; (800886c <prvAddCurrentTaskToDelayedList+0xb4>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e0:	2201      	movs	r2, #1
 80087e2:	fa02 f303 	lsl.w	r3, r2, r3
 80087e6:	43da      	mvns	r2, r3
 80087e8:	4b21      	ldr	r3, [pc, #132]	; (8008870 <prvAddCurrentTaskToDelayedList+0xb8>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4013      	ands	r3, r2
 80087ee:	4a20      	ldr	r2, [pc, #128]	; (8008870 <prvAddCurrentTaskToDelayedList+0xb8>)
 80087f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f8:	d10a      	bne.n	8008810 <prvAddCurrentTaskToDelayedList+0x58>
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d007      	beq.n	8008810 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008800:	4b1a      	ldr	r3, [pc, #104]	; (800886c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	3304      	adds	r3, #4
 8008806:	4619      	mov	r1, r3
 8008808:	481a      	ldr	r0, [pc, #104]	; (8008874 <prvAddCurrentTaskToDelayedList+0xbc>)
 800880a:	f7fe fd0a 	bl	8007222 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800880e:	e026      	b.n	800885e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4413      	add	r3, r2
 8008816:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008818:	4b14      	ldr	r3, [pc, #80]	; (800886c <prvAddCurrentTaskToDelayedList+0xb4>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	68ba      	ldr	r2, [r7, #8]
 800881e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008820:	68ba      	ldr	r2, [r7, #8]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	429a      	cmp	r2, r3
 8008826:	d209      	bcs.n	800883c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008828:	4b13      	ldr	r3, [pc, #76]	; (8008878 <prvAddCurrentTaskToDelayedList+0xc0>)
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	4b0f      	ldr	r3, [pc, #60]	; (800886c <prvAddCurrentTaskToDelayedList+0xb4>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	3304      	adds	r3, #4
 8008832:	4619      	mov	r1, r3
 8008834:	4610      	mov	r0, r2
 8008836:	f7fe fd18 	bl	800726a <vListInsert>
}
 800883a:	e010      	b.n	800885e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800883c:	4b0f      	ldr	r3, [pc, #60]	; (800887c <prvAddCurrentTaskToDelayedList+0xc4>)
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	4b0a      	ldr	r3, [pc, #40]	; (800886c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	3304      	adds	r3, #4
 8008846:	4619      	mov	r1, r3
 8008848:	4610      	mov	r0, r2
 800884a:	f7fe fd0e 	bl	800726a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800884e:	4b0c      	ldr	r3, [pc, #48]	; (8008880 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68ba      	ldr	r2, [r7, #8]
 8008854:	429a      	cmp	r2, r3
 8008856:	d202      	bcs.n	800885e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008858:	4a09      	ldr	r2, [pc, #36]	; (8008880 <prvAddCurrentTaskToDelayedList+0xc8>)
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	6013      	str	r3, [r2, #0]
}
 800885e:	bf00      	nop
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	200005d0 	.word	0x200005d0
 800886c:	200004cc 	.word	0x200004cc
 8008870:	200005d4 	.word	0x200005d4
 8008874:	200005b8 	.word	0x200005b8
 8008878:	20000588 	.word	0x20000588
 800887c:	20000584 	.word	0x20000584
 8008880:	200005ec 	.word	0x200005ec

08008884 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	3b04      	subs	r3, #4
 8008894:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800889c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	3b04      	subs	r3, #4
 80088a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	f023 0201 	bic.w	r2, r3, #1
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	3b04      	subs	r3, #4
 80088b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80088b4:	4a0c      	ldr	r2, [pc, #48]	; (80088e8 <pxPortInitialiseStack+0x64>)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	3b14      	subs	r3, #20
 80088be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	3b04      	subs	r3, #4
 80088ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f06f 0202 	mvn.w	r2, #2
 80088d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	3b20      	subs	r3, #32
 80088d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80088da:	68fb      	ldr	r3, [r7, #12]
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3714      	adds	r7, #20
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr
 80088e8:	080088ed 	.word	0x080088ed

080088ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80088f2:	2300      	movs	r3, #0
 80088f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80088f6:	4b12      	ldr	r3, [pc, #72]	; (8008940 <prvTaskExitError+0x54>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088fe:	d00a      	beq.n	8008916 <prvTaskExitError+0x2a>
	__asm volatile
 8008900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008904:	f383 8811 	msr	BASEPRI, r3
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	60fb      	str	r3, [r7, #12]
}
 8008912:	bf00      	nop
 8008914:	e7fe      	b.n	8008914 <prvTaskExitError+0x28>
	__asm volatile
 8008916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891a:	f383 8811 	msr	BASEPRI, r3
 800891e:	f3bf 8f6f 	isb	sy
 8008922:	f3bf 8f4f 	dsb	sy
 8008926:	60bb      	str	r3, [r7, #8]
}
 8008928:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800892a:	bf00      	nop
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d0fc      	beq.n	800892c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008932:	bf00      	nop
 8008934:	bf00      	nop
 8008936:	3714      	adds	r7, #20
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr
 8008940:	2000011c 	.word	0x2000011c
	...

08008950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008950:	4b07      	ldr	r3, [pc, #28]	; (8008970 <pxCurrentTCBConst2>)
 8008952:	6819      	ldr	r1, [r3, #0]
 8008954:	6808      	ldr	r0, [r1, #0]
 8008956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800895a:	f380 8809 	msr	PSP, r0
 800895e:	f3bf 8f6f 	isb	sy
 8008962:	f04f 0000 	mov.w	r0, #0
 8008966:	f380 8811 	msr	BASEPRI, r0
 800896a:	4770      	bx	lr
 800896c:	f3af 8000 	nop.w

08008970 <pxCurrentTCBConst2>:
 8008970:	200004cc 	.word	0x200004cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008974:	bf00      	nop
 8008976:	bf00      	nop

08008978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008978:	4808      	ldr	r0, [pc, #32]	; (800899c <prvPortStartFirstTask+0x24>)
 800897a:	6800      	ldr	r0, [r0, #0]
 800897c:	6800      	ldr	r0, [r0, #0]
 800897e:	f380 8808 	msr	MSP, r0
 8008982:	f04f 0000 	mov.w	r0, #0
 8008986:	f380 8814 	msr	CONTROL, r0
 800898a:	b662      	cpsie	i
 800898c:	b661      	cpsie	f
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	df00      	svc	0
 8008998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800899a:	bf00      	nop
 800899c:	e000ed08 	.word	0xe000ed08

080089a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b086      	sub	sp, #24
 80089a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80089a6:	4b46      	ldr	r3, [pc, #280]	; (8008ac0 <xPortStartScheduler+0x120>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a46      	ldr	r2, [pc, #280]	; (8008ac4 <xPortStartScheduler+0x124>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d10a      	bne.n	80089c6 <xPortStartScheduler+0x26>
	__asm volatile
 80089b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b4:	f383 8811 	msr	BASEPRI, r3
 80089b8:	f3bf 8f6f 	isb	sy
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	613b      	str	r3, [r7, #16]
}
 80089c2:	bf00      	nop
 80089c4:	e7fe      	b.n	80089c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80089c6:	4b3e      	ldr	r3, [pc, #248]	; (8008ac0 <xPortStartScheduler+0x120>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a3f      	ldr	r2, [pc, #252]	; (8008ac8 <xPortStartScheduler+0x128>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d10a      	bne.n	80089e6 <xPortStartScheduler+0x46>
	__asm volatile
 80089d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d4:	f383 8811 	msr	BASEPRI, r3
 80089d8:	f3bf 8f6f 	isb	sy
 80089dc:	f3bf 8f4f 	dsb	sy
 80089e0:	60fb      	str	r3, [r7, #12]
}
 80089e2:	bf00      	nop
 80089e4:	e7fe      	b.n	80089e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80089e6:	4b39      	ldr	r3, [pc, #228]	; (8008acc <xPortStartScheduler+0x12c>)
 80089e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	22ff      	movs	r2, #255	; 0xff
 80089f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a00:	78fb      	ldrb	r3, [r7, #3]
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a08:	b2da      	uxtb	r2, r3
 8008a0a:	4b31      	ldr	r3, [pc, #196]	; (8008ad0 <xPortStartScheduler+0x130>)
 8008a0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a0e:	4b31      	ldr	r3, [pc, #196]	; (8008ad4 <xPortStartScheduler+0x134>)
 8008a10:	2207      	movs	r2, #7
 8008a12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a14:	e009      	b.n	8008a2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008a16:	4b2f      	ldr	r3, [pc, #188]	; (8008ad4 <xPortStartScheduler+0x134>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	4a2d      	ldr	r2, [pc, #180]	; (8008ad4 <xPortStartScheduler+0x134>)
 8008a1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a20:	78fb      	ldrb	r3, [r7, #3]
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	005b      	lsls	r3, r3, #1
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a2a:	78fb      	ldrb	r3, [r7, #3]
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a32:	2b80      	cmp	r3, #128	; 0x80
 8008a34:	d0ef      	beq.n	8008a16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a36:	4b27      	ldr	r3, [pc, #156]	; (8008ad4 <xPortStartScheduler+0x134>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f1c3 0307 	rsb	r3, r3, #7
 8008a3e:	2b04      	cmp	r3, #4
 8008a40:	d00a      	beq.n	8008a58 <xPortStartScheduler+0xb8>
	__asm volatile
 8008a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a46:	f383 8811 	msr	BASEPRI, r3
 8008a4a:	f3bf 8f6f 	isb	sy
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	60bb      	str	r3, [r7, #8]
}
 8008a54:	bf00      	nop
 8008a56:	e7fe      	b.n	8008a56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008a58:	4b1e      	ldr	r3, [pc, #120]	; (8008ad4 <xPortStartScheduler+0x134>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	021b      	lsls	r3, r3, #8
 8008a5e:	4a1d      	ldr	r2, [pc, #116]	; (8008ad4 <xPortStartScheduler+0x134>)
 8008a60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008a62:	4b1c      	ldr	r3, [pc, #112]	; (8008ad4 <xPortStartScheduler+0x134>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a6a:	4a1a      	ldr	r2, [pc, #104]	; (8008ad4 <xPortStartScheduler+0x134>)
 8008a6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	b2da      	uxtb	r2, r3
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a76:	4b18      	ldr	r3, [pc, #96]	; (8008ad8 <xPortStartScheduler+0x138>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a17      	ldr	r2, [pc, #92]	; (8008ad8 <xPortStartScheduler+0x138>)
 8008a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008a80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a82:	4b15      	ldr	r3, [pc, #84]	; (8008ad8 <xPortStartScheduler+0x138>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a14      	ldr	r2, [pc, #80]	; (8008ad8 <xPortStartScheduler+0x138>)
 8008a88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008a8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008a8e:	f000 f8dd 	bl	8008c4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008a92:	4b12      	ldr	r3, [pc, #72]	; (8008adc <xPortStartScheduler+0x13c>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008a98:	f000 f8fc 	bl	8008c94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008a9c:	4b10      	ldr	r3, [pc, #64]	; (8008ae0 <xPortStartScheduler+0x140>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a0f      	ldr	r2, [pc, #60]	; (8008ae0 <xPortStartScheduler+0x140>)
 8008aa2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008aa6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008aa8:	f7ff ff66 	bl	8008978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008aac:	f7ff fb9a 	bl	80081e4 <vTaskSwitchContext>
	prvTaskExitError();
 8008ab0:	f7ff ff1c 	bl	80088ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3718      	adds	r7, #24
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	e000ed00 	.word	0xe000ed00
 8008ac4:	410fc271 	.word	0x410fc271
 8008ac8:	410fc270 	.word	0x410fc270
 8008acc:	e000e400 	.word	0xe000e400
 8008ad0:	200005f8 	.word	0x200005f8
 8008ad4:	200005fc 	.word	0x200005fc
 8008ad8:	e000ed20 	.word	0xe000ed20
 8008adc:	2000011c 	.word	0x2000011c
 8008ae0:	e000ef34 	.word	0xe000ef34

08008ae4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
	__asm volatile
 8008aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aee:	f383 8811 	msr	BASEPRI, r3
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	f3bf 8f4f 	dsb	sy
 8008afa:	607b      	str	r3, [r7, #4]
}
 8008afc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008afe:	4b0f      	ldr	r3, [pc, #60]	; (8008b3c <vPortEnterCritical+0x58>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	3301      	adds	r3, #1
 8008b04:	4a0d      	ldr	r2, [pc, #52]	; (8008b3c <vPortEnterCritical+0x58>)
 8008b06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b08:	4b0c      	ldr	r3, [pc, #48]	; (8008b3c <vPortEnterCritical+0x58>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d10f      	bne.n	8008b30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b10:	4b0b      	ldr	r3, [pc, #44]	; (8008b40 <vPortEnterCritical+0x5c>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00a      	beq.n	8008b30 <vPortEnterCritical+0x4c>
	__asm volatile
 8008b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1e:	f383 8811 	msr	BASEPRI, r3
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	f3bf 8f4f 	dsb	sy
 8008b2a:	603b      	str	r3, [r7, #0]
}
 8008b2c:	bf00      	nop
 8008b2e:	e7fe      	b.n	8008b2e <vPortEnterCritical+0x4a>
	}
}
 8008b30:	bf00      	nop
 8008b32:	370c      	adds	r7, #12
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr
 8008b3c:	2000011c 	.word	0x2000011c
 8008b40:	e000ed04 	.word	0xe000ed04

08008b44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008b4a:	4b12      	ldr	r3, [pc, #72]	; (8008b94 <vPortExitCritical+0x50>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d10a      	bne.n	8008b68 <vPortExitCritical+0x24>
	__asm volatile
 8008b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b56:	f383 8811 	msr	BASEPRI, r3
 8008b5a:	f3bf 8f6f 	isb	sy
 8008b5e:	f3bf 8f4f 	dsb	sy
 8008b62:	607b      	str	r3, [r7, #4]
}
 8008b64:	bf00      	nop
 8008b66:	e7fe      	b.n	8008b66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008b68:	4b0a      	ldr	r3, [pc, #40]	; (8008b94 <vPortExitCritical+0x50>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	4a09      	ldr	r2, [pc, #36]	; (8008b94 <vPortExitCritical+0x50>)
 8008b70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b72:	4b08      	ldr	r3, [pc, #32]	; (8008b94 <vPortExitCritical+0x50>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d105      	bne.n	8008b86 <vPortExitCritical+0x42>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008b84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008b86:	bf00      	nop
 8008b88:	370c      	adds	r7, #12
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	2000011c 	.word	0x2000011c
	...

08008ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ba0:	f3ef 8009 	mrs	r0, PSP
 8008ba4:	f3bf 8f6f 	isb	sy
 8008ba8:	4b15      	ldr	r3, [pc, #84]	; (8008c00 <pxCurrentTCBConst>)
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	f01e 0f10 	tst.w	lr, #16
 8008bb0:	bf08      	it	eq
 8008bb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008bb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bba:	6010      	str	r0, [r2, #0]
 8008bbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008bc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008bc4:	f380 8811 	msr	BASEPRI, r0
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	f3bf 8f6f 	isb	sy
 8008bd0:	f7ff fb08 	bl	80081e4 <vTaskSwitchContext>
 8008bd4:	f04f 0000 	mov.w	r0, #0
 8008bd8:	f380 8811 	msr	BASEPRI, r0
 8008bdc:	bc09      	pop	{r0, r3}
 8008bde:	6819      	ldr	r1, [r3, #0]
 8008be0:	6808      	ldr	r0, [r1, #0]
 8008be2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be6:	f01e 0f10 	tst.w	lr, #16
 8008bea:	bf08      	it	eq
 8008bec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008bf0:	f380 8809 	msr	PSP, r0
 8008bf4:	f3bf 8f6f 	isb	sy
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	f3af 8000 	nop.w

08008c00 <pxCurrentTCBConst>:
 8008c00:	200004cc 	.word	0x200004cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c04:	bf00      	nop
 8008c06:	bf00      	nop

08008c08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c12:	f383 8811 	msr	BASEPRI, r3
 8008c16:	f3bf 8f6f 	isb	sy
 8008c1a:	f3bf 8f4f 	dsb	sy
 8008c1e:	607b      	str	r3, [r7, #4]
}
 8008c20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c22:	f7ff fa27 	bl	8008074 <xTaskIncrementTick>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d003      	beq.n	8008c34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c2c:	4b06      	ldr	r3, [pc, #24]	; (8008c48 <SysTick_Handler+0x40>)
 8008c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c32:	601a      	str	r2, [r3, #0]
 8008c34:	2300      	movs	r3, #0
 8008c36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	f383 8811 	msr	BASEPRI, r3
}
 8008c3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c40:	bf00      	nop
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	e000ed04 	.word	0xe000ed04

08008c4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c50:	4b0b      	ldr	r3, [pc, #44]	; (8008c80 <vPortSetupTimerInterrupt+0x34>)
 8008c52:	2200      	movs	r2, #0
 8008c54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c56:	4b0b      	ldr	r3, [pc, #44]	; (8008c84 <vPortSetupTimerInterrupt+0x38>)
 8008c58:	2200      	movs	r2, #0
 8008c5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c5c:	4b0a      	ldr	r3, [pc, #40]	; (8008c88 <vPortSetupTimerInterrupt+0x3c>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a0a      	ldr	r2, [pc, #40]	; (8008c8c <vPortSetupTimerInterrupt+0x40>)
 8008c62:	fba2 2303 	umull	r2, r3, r2, r3
 8008c66:	099b      	lsrs	r3, r3, #6
 8008c68:	4a09      	ldr	r2, [pc, #36]	; (8008c90 <vPortSetupTimerInterrupt+0x44>)
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c6e:	4b04      	ldr	r3, [pc, #16]	; (8008c80 <vPortSetupTimerInterrupt+0x34>)
 8008c70:	2207      	movs	r2, #7
 8008c72:	601a      	str	r2, [r3, #0]
}
 8008c74:	bf00      	nop
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop
 8008c80:	e000e010 	.word	0xe000e010
 8008c84:	e000e018 	.word	0xe000e018
 8008c88:	20000000 	.word	0x20000000
 8008c8c:	10624dd3 	.word	0x10624dd3
 8008c90:	e000e014 	.word	0xe000e014

08008c94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008c94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008ca4 <vPortEnableVFP+0x10>
 8008c98:	6801      	ldr	r1, [r0, #0]
 8008c9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008c9e:	6001      	str	r1, [r0, #0]
 8008ca0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008ca2:	bf00      	nop
 8008ca4:	e000ed88 	.word	0xe000ed88

08008ca8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b08a      	sub	sp, #40	; 0x28
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008cb4:	f7ff f934 	bl	8007f20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008cb8:	4b5b      	ldr	r3, [pc, #364]	; (8008e28 <pvPortMalloc+0x180>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d101      	bne.n	8008cc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008cc0:	f000 f920 	bl	8008f04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008cc4:	4b59      	ldr	r3, [pc, #356]	; (8008e2c <pvPortMalloc+0x184>)
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	4013      	ands	r3, r2
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f040 8093 	bne.w	8008df8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d01d      	beq.n	8008d14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008cd8:	2208      	movs	r2, #8
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4413      	add	r3, r2
 8008cde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f003 0307 	and.w	r3, r3, #7
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d014      	beq.n	8008d14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f023 0307 	bic.w	r3, r3, #7
 8008cf0:	3308      	adds	r3, #8
 8008cf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f003 0307 	and.w	r3, r3, #7
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00a      	beq.n	8008d14 <pvPortMalloc+0x6c>
	__asm volatile
 8008cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d02:	f383 8811 	msr	BASEPRI, r3
 8008d06:	f3bf 8f6f 	isb	sy
 8008d0a:	f3bf 8f4f 	dsb	sy
 8008d0e:	617b      	str	r3, [r7, #20]
}
 8008d10:	bf00      	nop
 8008d12:	e7fe      	b.n	8008d12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d06e      	beq.n	8008df8 <pvPortMalloc+0x150>
 8008d1a:	4b45      	ldr	r3, [pc, #276]	; (8008e30 <pvPortMalloc+0x188>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d869      	bhi.n	8008df8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008d24:	4b43      	ldr	r3, [pc, #268]	; (8008e34 <pvPortMalloc+0x18c>)
 8008d26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008d28:	4b42      	ldr	r3, [pc, #264]	; (8008e34 <pvPortMalloc+0x18c>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d2e:	e004      	b.n	8008d3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d903      	bls.n	8008d4c <pvPortMalloc+0xa4>
 8008d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d1f1      	bne.n	8008d30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d4c:	4b36      	ldr	r3, [pc, #216]	; (8008e28 <pvPortMalloc+0x180>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d050      	beq.n	8008df8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d56:	6a3b      	ldr	r3, [r7, #32]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	2208      	movs	r2, #8
 8008d5c:	4413      	add	r3, r2
 8008d5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	6a3b      	ldr	r3, [r7, #32]
 8008d66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6a:	685a      	ldr	r2, [r3, #4]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	1ad2      	subs	r2, r2, r3
 8008d70:	2308      	movs	r3, #8
 8008d72:	005b      	lsls	r3, r3, #1
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d91f      	bls.n	8008db8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d80:	69bb      	ldr	r3, [r7, #24]
 8008d82:	f003 0307 	and.w	r3, r3, #7
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00a      	beq.n	8008da0 <pvPortMalloc+0xf8>
	__asm volatile
 8008d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8e:	f383 8811 	msr	BASEPRI, r3
 8008d92:	f3bf 8f6f 	isb	sy
 8008d96:	f3bf 8f4f 	dsb	sy
 8008d9a:	613b      	str	r3, [r7, #16]
}
 8008d9c:	bf00      	nop
 8008d9e:	e7fe      	b.n	8008d9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da2:	685a      	ldr	r2, [r3, #4]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	1ad2      	subs	r2, r2, r3
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008db2:	69b8      	ldr	r0, [r7, #24]
 8008db4:	f000 f908 	bl	8008fc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008db8:	4b1d      	ldr	r3, [pc, #116]	; (8008e30 <pvPortMalloc+0x188>)
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	1ad3      	subs	r3, r2, r3
 8008dc2:	4a1b      	ldr	r2, [pc, #108]	; (8008e30 <pvPortMalloc+0x188>)
 8008dc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008dc6:	4b1a      	ldr	r3, [pc, #104]	; (8008e30 <pvPortMalloc+0x188>)
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	4b1b      	ldr	r3, [pc, #108]	; (8008e38 <pvPortMalloc+0x190>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d203      	bcs.n	8008dda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008dd2:	4b17      	ldr	r3, [pc, #92]	; (8008e30 <pvPortMalloc+0x188>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a18      	ldr	r2, [pc, #96]	; (8008e38 <pvPortMalloc+0x190>)
 8008dd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ddc:	685a      	ldr	r2, [r3, #4]
 8008dde:	4b13      	ldr	r3, [pc, #76]	; (8008e2c <pvPortMalloc+0x184>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	431a      	orrs	r2, r3
 8008de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dea:	2200      	movs	r2, #0
 8008dec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008dee:	4b13      	ldr	r3, [pc, #76]	; (8008e3c <pvPortMalloc+0x194>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	3301      	adds	r3, #1
 8008df4:	4a11      	ldr	r2, [pc, #68]	; (8008e3c <pvPortMalloc+0x194>)
 8008df6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008df8:	f7ff f8a0 	bl	8007f3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	f003 0307 	and.w	r3, r3, #7
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d00a      	beq.n	8008e1c <pvPortMalloc+0x174>
	__asm volatile
 8008e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0a:	f383 8811 	msr	BASEPRI, r3
 8008e0e:	f3bf 8f6f 	isb	sy
 8008e12:	f3bf 8f4f 	dsb	sy
 8008e16:	60fb      	str	r3, [r7, #12]
}
 8008e18:	bf00      	nop
 8008e1a:	e7fe      	b.n	8008e1a <pvPortMalloc+0x172>
	return pvReturn;
 8008e1c:	69fb      	ldr	r3, [r7, #28]
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3728      	adds	r7, #40	; 0x28
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	20004208 	.word	0x20004208
 8008e2c:	2000421c 	.word	0x2000421c
 8008e30:	2000420c 	.word	0x2000420c
 8008e34:	20004200 	.word	0x20004200
 8008e38:	20004210 	.word	0x20004210
 8008e3c:	20004214 	.word	0x20004214

08008e40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b086      	sub	sp, #24
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d04d      	beq.n	8008eee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e52:	2308      	movs	r3, #8
 8008e54:	425b      	negs	r3, r3
 8008e56:	697a      	ldr	r2, [r7, #20]
 8008e58:	4413      	add	r3, r2
 8008e5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	685a      	ldr	r2, [r3, #4]
 8008e64:	4b24      	ldr	r3, [pc, #144]	; (8008ef8 <vPortFree+0xb8>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4013      	ands	r3, r2
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10a      	bne.n	8008e84 <vPortFree+0x44>
	__asm volatile
 8008e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e72:	f383 8811 	msr	BASEPRI, r3
 8008e76:	f3bf 8f6f 	isb	sy
 8008e7a:	f3bf 8f4f 	dsb	sy
 8008e7e:	60fb      	str	r3, [r7, #12]
}
 8008e80:	bf00      	nop
 8008e82:	e7fe      	b.n	8008e82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d00a      	beq.n	8008ea2 <vPortFree+0x62>
	__asm volatile
 8008e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e90:	f383 8811 	msr	BASEPRI, r3
 8008e94:	f3bf 8f6f 	isb	sy
 8008e98:	f3bf 8f4f 	dsb	sy
 8008e9c:	60bb      	str	r3, [r7, #8]
}
 8008e9e:	bf00      	nop
 8008ea0:	e7fe      	b.n	8008ea0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	685a      	ldr	r2, [r3, #4]
 8008ea6:	4b14      	ldr	r3, [pc, #80]	; (8008ef8 <vPortFree+0xb8>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4013      	ands	r3, r2
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d01e      	beq.n	8008eee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d11a      	bne.n	8008eee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	685a      	ldr	r2, [r3, #4]
 8008ebc:	4b0e      	ldr	r3, [pc, #56]	; (8008ef8 <vPortFree+0xb8>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	43db      	mvns	r3, r3
 8008ec2:	401a      	ands	r2, r3
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ec8:	f7ff f82a 	bl	8007f20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	685a      	ldr	r2, [r3, #4]
 8008ed0:	4b0a      	ldr	r3, [pc, #40]	; (8008efc <vPortFree+0xbc>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4413      	add	r3, r2
 8008ed6:	4a09      	ldr	r2, [pc, #36]	; (8008efc <vPortFree+0xbc>)
 8008ed8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008eda:	6938      	ldr	r0, [r7, #16]
 8008edc:	f000 f874 	bl	8008fc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008ee0:	4b07      	ldr	r3, [pc, #28]	; (8008f00 <vPortFree+0xc0>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	4a06      	ldr	r2, [pc, #24]	; (8008f00 <vPortFree+0xc0>)
 8008ee8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008eea:	f7ff f827 	bl	8007f3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008eee:	bf00      	nop
 8008ef0:	3718      	adds	r7, #24
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	2000421c 	.word	0x2000421c
 8008efc:	2000420c 	.word	0x2000420c
 8008f00:	20004218 	.word	0x20004218

08008f04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f04:	b480      	push	{r7}
 8008f06:	b085      	sub	sp, #20
 8008f08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008f0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f10:	4b27      	ldr	r3, [pc, #156]	; (8008fb0 <prvHeapInit+0xac>)
 8008f12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f003 0307 	and.w	r3, r3, #7
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d00c      	beq.n	8008f38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	3307      	adds	r3, #7
 8008f22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f023 0307 	bic.w	r3, r3, #7
 8008f2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f2c:	68ba      	ldr	r2, [r7, #8]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	1ad3      	subs	r3, r2, r3
 8008f32:	4a1f      	ldr	r2, [pc, #124]	; (8008fb0 <prvHeapInit+0xac>)
 8008f34:	4413      	add	r3, r2
 8008f36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f3c:	4a1d      	ldr	r2, [pc, #116]	; (8008fb4 <prvHeapInit+0xb0>)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f42:	4b1c      	ldr	r3, [pc, #112]	; (8008fb4 <prvHeapInit+0xb0>)
 8008f44:	2200      	movs	r2, #0
 8008f46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	68ba      	ldr	r2, [r7, #8]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f50:	2208      	movs	r2, #8
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	1a9b      	subs	r3, r3, r2
 8008f56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f023 0307 	bic.w	r3, r3, #7
 8008f5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	4a15      	ldr	r2, [pc, #84]	; (8008fb8 <prvHeapInit+0xb4>)
 8008f64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f66:	4b14      	ldr	r3, [pc, #80]	; (8008fb8 <prvHeapInit+0xb4>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f6e:	4b12      	ldr	r3, [pc, #72]	; (8008fb8 <prvHeapInit+0xb4>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2200      	movs	r2, #0
 8008f74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	1ad2      	subs	r2, r2, r3
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f84:	4b0c      	ldr	r3, [pc, #48]	; (8008fb8 <prvHeapInit+0xb4>)
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	4a0a      	ldr	r2, [pc, #40]	; (8008fbc <prvHeapInit+0xb8>)
 8008f92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	4a09      	ldr	r2, [pc, #36]	; (8008fc0 <prvHeapInit+0xbc>)
 8008f9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008f9c:	4b09      	ldr	r3, [pc, #36]	; (8008fc4 <prvHeapInit+0xc0>)
 8008f9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008fa2:	601a      	str	r2, [r3, #0]
}
 8008fa4:	bf00      	nop
 8008fa6:	3714      	adds	r7, #20
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr
 8008fb0:	20000600 	.word	0x20000600
 8008fb4:	20004200 	.word	0x20004200
 8008fb8:	20004208 	.word	0x20004208
 8008fbc:	20004210 	.word	0x20004210
 8008fc0:	2000420c 	.word	0x2000420c
 8008fc4:	2000421c 	.word	0x2000421c

08008fc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008fd0:	4b28      	ldr	r3, [pc, #160]	; (8009074 <prvInsertBlockIntoFreeList+0xac>)
 8008fd2:	60fb      	str	r3, [r7, #12]
 8008fd4:	e002      	b.n	8008fdc <prvInsertBlockIntoFreeList+0x14>
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	60fb      	str	r3, [r7, #12]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d8f7      	bhi.n	8008fd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	68ba      	ldr	r2, [r7, #8]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d108      	bne.n	800900a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	685a      	ldr	r2, [r3, #4]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	441a      	add	r2, r3
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	68ba      	ldr	r2, [r7, #8]
 8009014:	441a      	add	r2, r3
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	429a      	cmp	r2, r3
 800901c:	d118      	bne.n	8009050 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	4b15      	ldr	r3, [pc, #84]	; (8009078 <prvInsertBlockIntoFreeList+0xb0>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	429a      	cmp	r2, r3
 8009028:	d00d      	beq.n	8009046 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	685a      	ldr	r2, [r3, #4]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	441a      	add	r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	601a      	str	r2, [r3, #0]
 8009044:	e008      	b.n	8009058 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009046:	4b0c      	ldr	r3, [pc, #48]	; (8009078 <prvInsertBlockIntoFreeList+0xb0>)
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	601a      	str	r2, [r3, #0]
 800904e:	e003      	b.n	8009058 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009058:	68fa      	ldr	r2, [r7, #12]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	429a      	cmp	r2, r3
 800905e:	d002      	beq.n	8009066 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009066:	bf00      	nop
 8009068:	3714      	adds	r7, #20
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	20004200 	.word	0x20004200
 8009078:	20004208 	.word	0x20004208

0800907c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009080:	2200      	movs	r2, #0
 8009082:	4912      	ldr	r1, [pc, #72]	; (80090cc <MX_USB_DEVICE_Init+0x50>)
 8009084:	4812      	ldr	r0, [pc, #72]	; (80090d0 <MX_USB_DEVICE_Init+0x54>)
 8009086:	f7fc fe8d 	bl	8005da4 <USBD_Init>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d001      	beq.n	8009094 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009090:	f7f7 fc23 	bl	80008da <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009094:	490f      	ldr	r1, [pc, #60]	; (80090d4 <MX_USB_DEVICE_Init+0x58>)
 8009096:	480e      	ldr	r0, [pc, #56]	; (80090d0 <MX_USB_DEVICE_Init+0x54>)
 8009098:	f7fc feb4 	bl	8005e04 <USBD_RegisterClass>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d001      	beq.n	80090a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80090a2:	f7f7 fc1a 	bl	80008da <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80090a6:	490c      	ldr	r1, [pc, #48]	; (80090d8 <MX_USB_DEVICE_Init+0x5c>)
 80090a8:	4809      	ldr	r0, [pc, #36]	; (80090d0 <MX_USB_DEVICE_Init+0x54>)
 80090aa:	f7fc fdd5 	bl	8005c58 <USBD_CDC_RegisterInterface>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d001      	beq.n	80090b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80090b4:	f7f7 fc11 	bl	80008da <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80090b8:	4805      	ldr	r0, [pc, #20]	; (80090d0 <MX_USB_DEVICE_Init+0x54>)
 80090ba:	f7fc feca 	bl	8005e52 <USBD_Start>
 80090be:	4603      	mov	r3, r0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d001      	beq.n	80090c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80090c4:	f7f7 fc09 	bl	80008da <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80090c8:	bf00      	nop
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	20000134 	.word	0x20000134
 80090d0:	200044dc 	.word	0x200044dc
 80090d4:	20000018 	.word	0x20000018
 80090d8:	20000120 	.word	0x20000120

080090dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80090e0:	2200      	movs	r2, #0
 80090e2:	4909      	ldr	r1, [pc, #36]	; (8009108 <CDC_Init_FS+0x2c>)
 80090e4:	4809      	ldr	r0, [pc, #36]	; (800910c <CDC_Init_FS+0x30>)
 80090e6:	f7fc fdcc 	bl	8005c82 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80090ea:	4909      	ldr	r1, [pc, #36]	; (8009110 <CDC_Init_FS+0x34>)
 80090ec:	4807      	ldr	r0, [pc, #28]	; (800910c <CDC_Init_FS+0x30>)
 80090ee:	f7fc fde6 	bl	8005cbe <USBD_CDC_SetRxBuffer>

  taskQueue = xQueueCreate(5, sizeof (uint8_t));
 80090f2:	2200      	movs	r2, #0
 80090f4:	2101      	movs	r1, #1
 80090f6:	2005      	movs	r0, #5
 80090f8:	f7fe f982 	bl	8007400 <xQueueGenericCreate>
 80090fc:	4603      	mov	r3, r0
 80090fe:	4a05      	ldr	r2, [pc, #20]	; (8009114 <CDC_Init_FS+0x38>)
 8009100:	6013      	str	r3, [r2, #0]

  return (USBD_OK);
 8009102:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009104:	4618      	mov	r0, r3
 8009106:	bd80      	pop	{r7, pc}
 8009108:	20004fb0 	.word	0x20004fb0
 800910c:	200044dc 	.word	0x200044dc
 8009110:	200047b0 	.word	0x200047b0
 8009114:	200047ac 	.word	0x200047ac

08009118 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009118:	b480      	push	{r7}
 800911a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800911c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800911e:	4618      	mov	r0, r3
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	4603      	mov	r3, r0
 8009130:	6039      	str	r1, [r7, #0]
 8009132:	71fb      	strb	r3, [r7, #7]
 8009134:	4613      	mov	r3, r2
 8009136:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009138:	79fb      	ldrb	r3, [r7, #7]
 800913a:	2b23      	cmp	r3, #35	; 0x23
 800913c:	d84a      	bhi.n	80091d4 <CDC_Control_FS+0xac>
 800913e:	a201      	add	r2, pc, #4	; (adr r2, 8009144 <CDC_Control_FS+0x1c>)
 8009140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009144:	080091d5 	.word	0x080091d5
 8009148:	080091d5 	.word	0x080091d5
 800914c:	080091d5 	.word	0x080091d5
 8009150:	080091d5 	.word	0x080091d5
 8009154:	080091d5 	.word	0x080091d5
 8009158:	080091d5 	.word	0x080091d5
 800915c:	080091d5 	.word	0x080091d5
 8009160:	080091d5 	.word	0x080091d5
 8009164:	080091d5 	.word	0x080091d5
 8009168:	080091d5 	.word	0x080091d5
 800916c:	080091d5 	.word	0x080091d5
 8009170:	080091d5 	.word	0x080091d5
 8009174:	080091d5 	.word	0x080091d5
 8009178:	080091d5 	.word	0x080091d5
 800917c:	080091d5 	.word	0x080091d5
 8009180:	080091d5 	.word	0x080091d5
 8009184:	080091d5 	.word	0x080091d5
 8009188:	080091d5 	.word	0x080091d5
 800918c:	080091d5 	.word	0x080091d5
 8009190:	080091d5 	.word	0x080091d5
 8009194:	080091d5 	.word	0x080091d5
 8009198:	080091d5 	.word	0x080091d5
 800919c:	080091d5 	.word	0x080091d5
 80091a0:	080091d5 	.word	0x080091d5
 80091a4:	080091d5 	.word	0x080091d5
 80091a8:	080091d5 	.word	0x080091d5
 80091ac:	080091d5 	.word	0x080091d5
 80091b0:	080091d5 	.word	0x080091d5
 80091b4:	080091d5 	.word	0x080091d5
 80091b8:	080091d5 	.word	0x080091d5
 80091bc:	080091d5 	.word	0x080091d5
 80091c0:	080091d5 	.word	0x080091d5
 80091c4:	080091d5 	.word	0x080091d5
 80091c8:	080091d5 	.word	0x080091d5
 80091cc:	080091d5 	.word	0x080091d5
 80091d0:	080091d5 	.word	0x080091d5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80091d4:	bf00      	nop
  }

  return (USBD_OK);
 80091d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80091d8:	4618      	mov	r0, r3
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80091ee:	6879      	ldr	r1, [r7, #4]
 80091f0:	4809      	ldr	r0, [pc, #36]	; (8009218 <CDC_Receive_FS+0x34>)
 80091f2:	f7fc fd64 	bl	8005cbe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80091f6:	4808      	ldr	r0, [pc, #32]	; (8009218 <CDC_Receive_FS+0x34>)
 80091f8:	f7fc fdaa 	bl	8005d50 <USBD_CDC_ReceivePacket>

  xQueueSend(taskQueue, &Buf[0], portMAX_DELAY);//wait while numbers 'll be put into queue
 80091fc:	4b07      	ldr	r3, [pc, #28]	; (800921c <CDC_Receive_FS+0x38>)
 80091fe:	6818      	ldr	r0, [r3, #0]
 8009200:	2300      	movs	r3, #0
 8009202:	f04f 32ff 	mov.w	r2, #4294967295
 8009206:	6879      	ldr	r1, [r7, #4]
 8009208:	f7fe f954 	bl	80074b4 <xQueueGenericSend>
  //CDC_Transmit_FS(&Buf[0],1);
  return (USBD_OK);
 800920c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800920e:	4618      	mov	r0, r3
 8009210:	3708      	adds	r7, #8
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	200044dc 	.word	0x200044dc
 800921c:	200047ac 	.word	0x200047ac

08009220 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	460b      	mov	r3, r1
 800922a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800922c:	2300      	movs	r3, #0
 800922e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009230:	4b0d      	ldr	r3, [pc, #52]	; (8009268 <CDC_Transmit_FS+0x48>)
 8009232:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009236:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800923e:	2b00      	cmp	r3, #0
 8009240:	d001      	beq.n	8009246 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009242:	2301      	movs	r3, #1
 8009244:	e00b      	b.n	800925e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009246:	887b      	ldrh	r3, [r7, #2]
 8009248:	461a      	mov	r2, r3
 800924a:	6879      	ldr	r1, [r7, #4]
 800924c:	4806      	ldr	r0, [pc, #24]	; (8009268 <CDC_Transmit_FS+0x48>)
 800924e:	f7fc fd18 	bl	8005c82 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009252:	4805      	ldr	r0, [pc, #20]	; (8009268 <CDC_Transmit_FS+0x48>)
 8009254:	f7fc fd4c 	bl	8005cf0 <USBD_CDC_TransmitPacket>
 8009258:	4603      	mov	r3, r0
 800925a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800925c:	7bfb      	ldrb	r3, [r7, #15]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	200044dc 	.word	0x200044dc

0800926c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800926c:	b480      	push	{r7}
 800926e:	b087      	sub	sp, #28
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	4613      	mov	r3, r2
 8009278:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800927a:	2300      	movs	r3, #0
 800927c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800927e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009282:	4618      	mov	r0, r3
 8009284:	371c      	adds	r7, #28
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr
	...

08009290 <getDataFromQueue>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
int getDataFromQueue(uint8_t* Buf)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
	if(xQueueReceive(taskQueue, &Buf[0], portMAX_DELAY)!= pdTRUE)
 8009298:	4b08      	ldr	r3, [pc, #32]	; (80092bc <getDataFromQueue+0x2c>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f04f 32ff 	mov.w	r2, #4294967295
 80092a0:	6879      	ldr	r1, [r7, #4]
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7fe fa04 	bl	80076b0 <xQueueReceive>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d001      	beq.n	80092b2 <getDataFromQueue+0x22>
	{
		return 1;//err code
 80092ae:	2301      	movs	r3, #1
 80092b0:	e000      	b.n	80092b4 <getDataFromQueue+0x24>
	}
	else
	{
		return 0; //ok
 80092b2:	2300      	movs	r3, #0
	}

}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3708      	adds	r7, #8
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	200047ac 	.word	0x200047ac

080092c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	4603      	mov	r3, r0
 80092c8:	6039      	str	r1, [r7, #0]
 80092ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	2212      	movs	r2, #18
 80092d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80092d2:	4b03      	ldr	r3, [pc, #12]	; (80092e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	370c      	adds	r7, #12
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr
 80092e0:	20000154 	.word	0x20000154

080092e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	4603      	mov	r3, r0
 80092ec:	6039      	str	r1, [r7, #0]
 80092ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	2204      	movs	r2, #4
 80092f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80092f6:	4b03      	ldr	r3, [pc, #12]	; (8009304 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr
 8009304:	20000174 	.word	0x20000174

08009308 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	4603      	mov	r3, r0
 8009310:	6039      	str	r1, [r7, #0]
 8009312:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009314:	79fb      	ldrb	r3, [r7, #7]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d105      	bne.n	8009326 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800931a:	683a      	ldr	r2, [r7, #0]
 800931c:	4907      	ldr	r1, [pc, #28]	; (800933c <USBD_FS_ProductStrDescriptor+0x34>)
 800931e:	4808      	ldr	r0, [pc, #32]	; (8009340 <USBD_FS_ProductStrDescriptor+0x38>)
 8009320:	f7fd fdf3 	bl	8006f0a <USBD_GetString>
 8009324:	e004      	b.n	8009330 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009326:	683a      	ldr	r2, [r7, #0]
 8009328:	4904      	ldr	r1, [pc, #16]	; (800933c <USBD_FS_ProductStrDescriptor+0x34>)
 800932a:	4805      	ldr	r0, [pc, #20]	; (8009340 <USBD_FS_ProductStrDescriptor+0x38>)
 800932c:	f7fd fded 	bl	8006f0a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009330:	4b02      	ldr	r3, [pc, #8]	; (800933c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009332:	4618      	mov	r0, r3
 8009334:	3708      	adds	r7, #8
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	200057b0 	.word	0x200057b0
 8009340:	08009e84 	.word	0x08009e84

08009344 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	4603      	mov	r3, r0
 800934c:	6039      	str	r1, [r7, #0]
 800934e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009350:	683a      	ldr	r2, [r7, #0]
 8009352:	4904      	ldr	r1, [pc, #16]	; (8009364 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009354:	4804      	ldr	r0, [pc, #16]	; (8009368 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009356:	f7fd fdd8 	bl	8006f0a <USBD_GetString>
  return USBD_StrDesc;
 800935a:	4b02      	ldr	r3, [pc, #8]	; (8009364 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800935c:	4618      	mov	r0, r3
 800935e:	3708      	adds	r7, #8
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	200057b0 	.word	0x200057b0
 8009368:	08009e9c 	.word	0x08009e9c

0800936c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
 8009372:	4603      	mov	r3, r0
 8009374:	6039      	str	r1, [r7, #0]
 8009376:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	221a      	movs	r2, #26
 800937c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800937e:	f000 f855 	bl	800942c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009382:	4b02      	ldr	r3, [pc, #8]	; (800938c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009384:	4618      	mov	r0, r3
 8009386:	3708      	adds	r7, #8
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	20000178 	.word	0x20000178

08009390 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	4603      	mov	r3, r0
 8009398:	6039      	str	r1, [r7, #0]
 800939a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800939c:	79fb      	ldrb	r3, [r7, #7]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d105      	bne.n	80093ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80093a2:	683a      	ldr	r2, [r7, #0]
 80093a4:	4907      	ldr	r1, [pc, #28]	; (80093c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80093a6:	4808      	ldr	r0, [pc, #32]	; (80093c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80093a8:	f7fd fdaf 	bl	8006f0a <USBD_GetString>
 80093ac:	e004      	b.n	80093b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80093ae:	683a      	ldr	r2, [r7, #0]
 80093b0:	4904      	ldr	r1, [pc, #16]	; (80093c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80093b2:	4805      	ldr	r0, [pc, #20]	; (80093c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80093b4:	f7fd fda9 	bl	8006f0a <USBD_GetString>
  }
  return USBD_StrDesc;
 80093b8:	4b02      	ldr	r3, [pc, #8]	; (80093c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3708      	adds	r7, #8
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	200057b0 	.word	0x200057b0
 80093c8:	08009eb0 	.word	0x08009eb0

080093cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	4603      	mov	r3, r0
 80093d4:	6039      	str	r1, [r7, #0]
 80093d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093d8:	79fb      	ldrb	r3, [r7, #7]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d105      	bne.n	80093ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80093de:	683a      	ldr	r2, [r7, #0]
 80093e0:	4907      	ldr	r1, [pc, #28]	; (8009400 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80093e2:	4808      	ldr	r0, [pc, #32]	; (8009404 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80093e4:	f7fd fd91 	bl	8006f0a <USBD_GetString>
 80093e8:	e004      	b.n	80093f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80093ea:	683a      	ldr	r2, [r7, #0]
 80093ec:	4904      	ldr	r1, [pc, #16]	; (8009400 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80093ee:	4805      	ldr	r0, [pc, #20]	; (8009404 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80093f0:	f7fd fd8b 	bl	8006f0a <USBD_GetString>
  }
  return USBD_StrDesc;
 80093f4:	4b02      	ldr	r3, [pc, #8]	; (8009400 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3708      	adds	r7, #8
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	200057b0 	.word	0x200057b0
 8009404:	08009ebc 	.word	0x08009ebc

08009408 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	4603      	mov	r3, r0
 8009410:	6039      	str	r1, [r7, #0]
 8009412:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	220c      	movs	r2, #12
 8009418:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800941a:	4b03      	ldr	r3, [pc, #12]	; (8009428 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800941c:	4618      	mov	r0, r3
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr
 8009428:	20000168 	.word	0x20000168

0800942c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009432:	4b0f      	ldr	r3, [pc, #60]	; (8009470 <Get_SerialNum+0x44>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009438:	4b0e      	ldr	r3, [pc, #56]	; (8009474 <Get_SerialNum+0x48>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800943e:	4b0e      	ldr	r3, [pc, #56]	; (8009478 <Get_SerialNum+0x4c>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009444:	68fa      	ldr	r2, [r7, #12]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4413      	add	r3, r2
 800944a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d009      	beq.n	8009466 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009452:	2208      	movs	r2, #8
 8009454:	4909      	ldr	r1, [pc, #36]	; (800947c <Get_SerialNum+0x50>)
 8009456:	68f8      	ldr	r0, [r7, #12]
 8009458:	f000 f814 	bl	8009484 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800945c:	2204      	movs	r2, #4
 800945e:	4908      	ldr	r1, [pc, #32]	; (8009480 <Get_SerialNum+0x54>)
 8009460:	68b8      	ldr	r0, [r7, #8]
 8009462:	f000 f80f 	bl	8009484 <IntToUnicode>
  }
}
 8009466:	bf00      	nop
 8009468:	3710      	adds	r7, #16
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	1fff7a10 	.word	0x1fff7a10
 8009474:	1fff7a14 	.word	0x1fff7a14
 8009478:	1fff7a18 	.word	0x1fff7a18
 800947c:	2000017a 	.word	0x2000017a
 8009480:	2000018a 	.word	0x2000018a

08009484 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009484:	b480      	push	{r7}
 8009486:	b087      	sub	sp, #28
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	4613      	mov	r3, r2
 8009490:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009492:	2300      	movs	r3, #0
 8009494:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009496:	2300      	movs	r3, #0
 8009498:	75fb      	strb	r3, [r7, #23]
 800949a:	e027      	b.n	80094ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	0f1b      	lsrs	r3, r3, #28
 80094a0:	2b09      	cmp	r3, #9
 80094a2:	d80b      	bhi.n	80094bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	0f1b      	lsrs	r3, r3, #28
 80094a8:	b2da      	uxtb	r2, r3
 80094aa:	7dfb      	ldrb	r3, [r7, #23]
 80094ac:	005b      	lsls	r3, r3, #1
 80094ae:	4619      	mov	r1, r3
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	440b      	add	r3, r1
 80094b4:	3230      	adds	r2, #48	; 0x30
 80094b6:	b2d2      	uxtb	r2, r2
 80094b8:	701a      	strb	r2, [r3, #0]
 80094ba:	e00a      	b.n	80094d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	0f1b      	lsrs	r3, r3, #28
 80094c0:	b2da      	uxtb	r2, r3
 80094c2:	7dfb      	ldrb	r3, [r7, #23]
 80094c4:	005b      	lsls	r3, r3, #1
 80094c6:	4619      	mov	r1, r3
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	440b      	add	r3, r1
 80094cc:	3237      	adds	r2, #55	; 0x37
 80094ce:	b2d2      	uxtb	r2, r2
 80094d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	011b      	lsls	r3, r3, #4
 80094d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80094d8:	7dfb      	ldrb	r3, [r7, #23]
 80094da:	005b      	lsls	r3, r3, #1
 80094dc:	3301      	adds	r3, #1
 80094de:	68ba      	ldr	r2, [r7, #8]
 80094e0:	4413      	add	r3, r2
 80094e2:	2200      	movs	r2, #0
 80094e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80094e6:	7dfb      	ldrb	r3, [r7, #23]
 80094e8:	3301      	adds	r3, #1
 80094ea:	75fb      	strb	r3, [r7, #23]
 80094ec:	7dfa      	ldrb	r2, [r7, #23]
 80094ee:	79fb      	ldrb	r3, [r7, #7]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d3d3      	bcc.n	800949c <IntToUnicode+0x18>
  }
}
 80094f4:	bf00      	nop
 80094f6:	bf00      	nop
 80094f8:	371c      	adds	r7, #28
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
	...

08009504 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b0a0      	sub	sp, #128	; 0x80
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800950c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009510:	2200      	movs	r2, #0
 8009512:	601a      	str	r2, [r3, #0]
 8009514:	605a      	str	r2, [r3, #4]
 8009516:	609a      	str	r2, [r3, #8]
 8009518:	60da      	str	r2, [r3, #12]
 800951a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800951c:	f107 0310 	add.w	r3, r7, #16
 8009520:	225c      	movs	r2, #92	; 0x5c
 8009522:	2100      	movs	r1, #0
 8009524:	4618      	mov	r0, r3
 8009526:	f000 fba7 	bl	8009c78 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009532:	d156      	bne.n	80095e2 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8009534:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009538:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800953a:	2300      	movs	r3, #0
 800953c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800953e:	f107 0310 	add.w	r3, r7, #16
 8009542:	4618      	mov	r0, r3
 8009544:	f7f9 f956 	bl	80027f4 <HAL_RCCEx_PeriphCLKConfig>
 8009548:	4603      	mov	r3, r0
 800954a:	2b00      	cmp	r3, #0
 800954c:	d001      	beq.n	8009552 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800954e:	f7f7 f9c4 	bl	80008da <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009552:	2300      	movs	r3, #0
 8009554:	60fb      	str	r3, [r7, #12]
 8009556:	4b25      	ldr	r3, [pc, #148]	; (80095ec <HAL_PCD_MspInit+0xe8>)
 8009558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800955a:	4a24      	ldr	r2, [pc, #144]	; (80095ec <HAL_PCD_MspInit+0xe8>)
 800955c:	f043 0301 	orr.w	r3, r3, #1
 8009560:	6313      	str	r3, [r2, #48]	; 0x30
 8009562:	4b22      	ldr	r3, [pc, #136]	; (80095ec <HAL_PCD_MspInit+0xe8>)
 8009564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009566:	f003 0301 	and.w	r3, r3, #1
 800956a:	60fb      	str	r3, [r7, #12]
 800956c:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800956e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8009572:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009574:	2302      	movs	r3, #2
 8009576:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009578:	2300      	movs	r3, #0
 800957a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800957c:	2303      	movs	r3, #3
 800957e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009580:	230a      	movs	r3, #10
 8009582:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009584:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009588:	4619      	mov	r1, r3
 800958a:	4819      	ldr	r0, [pc, #100]	; (80095f0 <HAL_PCD_MspInit+0xec>)
 800958c:	f7f7 fc50 	bl	8000e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8009590:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009594:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009596:	2300      	movs	r3, #0
 8009598:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800959a:	2300      	movs	r3, #0
 800959c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800959e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80095a2:	4619      	mov	r1, r3
 80095a4:	4812      	ldr	r0, [pc, #72]	; (80095f0 <HAL_PCD_MspInit+0xec>)
 80095a6:	f7f7 fc43 	bl	8000e30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80095aa:	4b10      	ldr	r3, [pc, #64]	; (80095ec <HAL_PCD_MspInit+0xe8>)
 80095ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095ae:	4a0f      	ldr	r2, [pc, #60]	; (80095ec <HAL_PCD_MspInit+0xe8>)
 80095b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095b4:	6353      	str	r3, [r2, #52]	; 0x34
 80095b6:	2300      	movs	r3, #0
 80095b8:	60bb      	str	r3, [r7, #8]
 80095ba:	4b0c      	ldr	r3, [pc, #48]	; (80095ec <HAL_PCD_MspInit+0xe8>)
 80095bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095be:	4a0b      	ldr	r2, [pc, #44]	; (80095ec <HAL_PCD_MspInit+0xe8>)
 80095c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80095c4:	6453      	str	r3, [r2, #68]	; 0x44
 80095c6:	4b09      	ldr	r3, [pc, #36]	; (80095ec <HAL_PCD_MspInit+0xe8>)
 80095c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095ce:	60bb      	str	r3, [r7, #8]
 80095d0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80095d2:	2200      	movs	r2, #0
 80095d4:	2105      	movs	r1, #5
 80095d6:	2043      	movs	r0, #67	; 0x43
 80095d8:	f7f7 fc00 	bl	8000ddc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80095dc:	2043      	movs	r0, #67	; 0x43
 80095de:	f7f7 fc19 	bl	8000e14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80095e2:	bf00      	nop
 80095e4:	3780      	adds	r7, #128	; 0x80
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	40023800 	.word	0x40023800
 80095f0:	40020000 	.word	0x40020000

080095f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009608:	4619      	mov	r1, r3
 800960a:	4610      	mov	r0, r2
 800960c:	f7fc fc6c 	bl	8005ee8 <USBD_LL_SetupStage>
}
 8009610:	bf00      	nop
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	460b      	mov	r3, r1
 8009622:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800962a:	78fa      	ldrb	r2, [r7, #3]
 800962c:	6879      	ldr	r1, [r7, #4]
 800962e:	4613      	mov	r3, r2
 8009630:	00db      	lsls	r3, r3, #3
 8009632:	1a9b      	subs	r3, r3, r2
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	440b      	add	r3, r1
 8009638:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	78fb      	ldrb	r3, [r7, #3]
 8009640:	4619      	mov	r1, r3
 8009642:	f7fc fca6 	bl	8005f92 <USBD_LL_DataOutStage>
}
 8009646:	bf00      	nop
 8009648:	3708      	adds	r7, #8
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}

0800964e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b082      	sub	sp, #8
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
 8009656:	460b      	mov	r3, r1
 8009658:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009660:	78fa      	ldrb	r2, [r7, #3]
 8009662:	6879      	ldr	r1, [r7, #4]
 8009664:	4613      	mov	r3, r2
 8009666:	00db      	lsls	r3, r3, #3
 8009668:	1a9b      	subs	r3, r3, r2
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	440b      	add	r3, r1
 800966e:	3348      	adds	r3, #72	; 0x48
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	78fb      	ldrb	r3, [r7, #3]
 8009674:	4619      	mov	r1, r3
 8009676:	f7fc fcef 	bl	8006058 <USBD_LL_DataInStage>
}
 800967a:	bf00      	nop
 800967c:	3708      	adds	r7, #8
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b082      	sub	sp, #8
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009690:	4618      	mov	r0, r3
 8009692:	f7fc fe03 	bl	800629c <USBD_LL_SOF>
}
 8009696:	bf00      	nop
 8009698:	3708      	adds	r7, #8
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b084      	sub	sp, #16
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80096a6:	2301      	movs	r3, #1
 80096a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d102      	bne.n	80096b8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80096b2:	2300      	movs	r3, #0
 80096b4:	73fb      	strb	r3, [r7, #15]
 80096b6:	e008      	b.n	80096ca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	68db      	ldr	r3, [r3, #12]
 80096bc:	2b02      	cmp	r3, #2
 80096be:	d102      	bne.n	80096c6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80096c0:	2301      	movs	r3, #1
 80096c2:	73fb      	strb	r3, [r7, #15]
 80096c4:	e001      	b.n	80096ca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80096c6:	f7f7 f908 	bl	80008da <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80096d0:	7bfa      	ldrb	r2, [r7, #15]
 80096d2:	4611      	mov	r1, r2
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7fc fda3 	bl	8006220 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7fc fd4f 	bl	8006184 <USBD_LL_Reset>
}
 80096e6:	bf00      	nop
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
	...

080096f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80096fe:	4618      	mov	r0, r3
 8009700:	f7fc fd9e 	bl	8006240 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	6812      	ldr	r2, [r2, #0]
 8009712:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009716:	f043 0301 	orr.w	r3, r3, #1
 800971a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6a1b      	ldr	r3, [r3, #32]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d005      	beq.n	8009730 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009724:	4b04      	ldr	r3, [pc, #16]	; (8009738 <HAL_PCD_SuspendCallback+0x48>)
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	4a03      	ldr	r2, [pc, #12]	; (8009738 <HAL_PCD_SuspendCallback+0x48>)
 800972a:	f043 0306 	orr.w	r3, r3, #6
 800972e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009730:	bf00      	nop
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	e000ed00 	.word	0xe000ed00

0800973c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800974a:	4618      	mov	r0, r3
 800974c:	f7fc fd8e 	bl	800626c <USBD_LL_Resume>
}
 8009750:	bf00      	nop
 8009752:	3708      	adds	r7, #8
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	460b      	mov	r3, r1
 8009762:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800976a:	78fa      	ldrb	r2, [r7, #3]
 800976c:	4611      	mov	r1, r2
 800976e:	4618      	mov	r0, r3
 8009770:	f7fc fddc 	bl	800632c <USBD_LL_IsoOUTIncomplete>
}
 8009774:	bf00      	nop
 8009776:	3708      	adds	r7, #8
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	460b      	mov	r3, r1
 8009786:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800978e:	78fa      	ldrb	r2, [r7, #3]
 8009790:	4611      	mov	r1, r2
 8009792:	4618      	mov	r0, r3
 8009794:	f7fc fda4 	bl	80062e0 <USBD_LL_IsoINIncomplete>
}
 8009798:	bf00      	nop
 800979a:	3708      	adds	r7, #8
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7fc fde2 	bl	8006378 <USBD_LL_DevConnected>
}
 80097b4:	bf00      	nop
 80097b6:	3708      	adds	r7, #8
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7fc fddf 	bl	800638e <USBD_LL_DevDisconnected>
}
 80097d0:	bf00      	nop
 80097d2:	3708      	adds	r7, #8
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d13c      	bne.n	8009862 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80097e8:	4a20      	ldr	r2, [pc, #128]	; (800986c <USBD_LL_Init+0x94>)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4a1e      	ldr	r2, [pc, #120]	; (800986c <USBD_LL_Init+0x94>)
 80097f4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80097f8:	4b1c      	ldr	r3, [pc, #112]	; (800986c <USBD_LL_Init+0x94>)
 80097fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80097fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009800:	4b1a      	ldr	r3, [pc, #104]	; (800986c <USBD_LL_Init+0x94>)
 8009802:	2206      	movs	r2, #6
 8009804:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009806:	4b19      	ldr	r3, [pc, #100]	; (800986c <USBD_LL_Init+0x94>)
 8009808:	2202      	movs	r2, #2
 800980a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800980c:	4b17      	ldr	r3, [pc, #92]	; (800986c <USBD_LL_Init+0x94>)
 800980e:	2200      	movs	r2, #0
 8009810:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009812:	4b16      	ldr	r3, [pc, #88]	; (800986c <USBD_LL_Init+0x94>)
 8009814:	2202      	movs	r2, #2
 8009816:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009818:	4b14      	ldr	r3, [pc, #80]	; (800986c <USBD_LL_Init+0x94>)
 800981a:	2200      	movs	r2, #0
 800981c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800981e:	4b13      	ldr	r3, [pc, #76]	; (800986c <USBD_LL_Init+0x94>)
 8009820:	2200      	movs	r2, #0
 8009822:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009824:	4b11      	ldr	r3, [pc, #68]	; (800986c <USBD_LL_Init+0x94>)
 8009826:	2200      	movs	r2, #0
 8009828:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800982a:	4b10      	ldr	r3, [pc, #64]	; (800986c <USBD_LL_Init+0x94>)
 800982c:	2200      	movs	r2, #0
 800982e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009830:	4b0e      	ldr	r3, [pc, #56]	; (800986c <USBD_LL_Init+0x94>)
 8009832:	2200      	movs	r2, #0
 8009834:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009836:	480d      	ldr	r0, [pc, #52]	; (800986c <USBD_LL_Init+0x94>)
 8009838:	f7f7 fcc1 	bl	80011be <HAL_PCD_Init>
 800983c:	4603      	mov	r3, r0
 800983e:	2b00      	cmp	r3, #0
 8009840:	d001      	beq.n	8009846 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009842:	f7f7 f84a 	bl	80008da <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009846:	2180      	movs	r1, #128	; 0x80
 8009848:	4808      	ldr	r0, [pc, #32]	; (800986c <USBD_LL_Init+0x94>)
 800984a:	f7f8 fe52 	bl	80024f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800984e:	2240      	movs	r2, #64	; 0x40
 8009850:	2100      	movs	r1, #0
 8009852:	4806      	ldr	r0, [pc, #24]	; (800986c <USBD_LL_Init+0x94>)
 8009854:	f7f8 fe06 	bl	8002464 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009858:	2280      	movs	r2, #128	; 0x80
 800985a:	2101      	movs	r1, #1
 800985c:	4803      	ldr	r0, [pc, #12]	; (800986c <USBD_LL_Init+0x94>)
 800985e:	f7f8 fe01 	bl	8002464 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009862:	2300      	movs	r3, #0
}
 8009864:	4618      	mov	r0, r3
 8009866:	3708      	adds	r7, #8
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	200059b0 	.word	0x200059b0

08009870 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009878:	2300      	movs	r3, #0
 800987a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800987c:	2300      	movs	r3, #0
 800987e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009886:	4618      	mov	r0, r3
 8009888:	f7f7 fdbd 	bl	8001406 <HAL_PCD_Start>
 800988c:	4603      	mov	r3, r0
 800988e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009890:	7bfb      	ldrb	r3, [r7, #15]
 8009892:	4618      	mov	r0, r3
 8009894:	f000 f990 	bl	8009bb8 <USBD_Get_USB_Status>
 8009898:	4603      	mov	r3, r0
 800989a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800989c:	7bbb      	ldrb	r3, [r7, #14]
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3710      	adds	r7, #16
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b084      	sub	sp, #16
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
 80098ae:	4608      	mov	r0, r1
 80098b0:	4611      	mov	r1, r2
 80098b2:	461a      	mov	r2, r3
 80098b4:	4603      	mov	r3, r0
 80098b6:	70fb      	strb	r3, [r7, #3]
 80098b8:	460b      	mov	r3, r1
 80098ba:	70bb      	strb	r3, [r7, #2]
 80098bc:	4613      	mov	r3, r2
 80098be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098c0:	2300      	movs	r3, #0
 80098c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098c4:	2300      	movs	r3, #0
 80098c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80098ce:	78bb      	ldrb	r3, [r7, #2]
 80098d0:	883a      	ldrh	r2, [r7, #0]
 80098d2:	78f9      	ldrb	r1, [r7, #3]
 80098d4:	f7f8 f9ce 	bl	8001c74 <HAL_PCD_EP_Open>
 80098d8:	4603      	mov	r3, r0
 80098da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098dc:	7bfb      	ldrb	r3, [r7, #15]
 80098de:	4618      	mov	r0, r3
 80098e0:	f000 f96a 	bl	8009bb8 <USBD_Get_USB_Status>
 80098e4:	4603      	mov	r3, r0
 80098e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b084      	sub	sp, #16
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
 80098fa:	460b      	mov	r3, r1
 80098fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098fe:	2300      	movs	r3, #0
 8009900:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009902:	2300      	movs	r3, #0
 8009904:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800990c:	78fa      	ldrb	r2, [r7, #3]
 800990e:	4611      	mov	r1, r2
 8009910:	4618      	mov	r0, r3
 8009912:	f7f8 fa17 	bl	8001d44 <HAL_PCD_EP_Close>
 8009916:	4603      	mov	r3, r0
 8009918:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800991a:	7bfb      	ldrb	r3, [r7, #15]
 800991c:	4618      	mov	r0, r3
 800991e:	f000 f94b 	bl	8009bb8 <USBD_Get_USB_Status>
 8009922:	4603      	mov	r3, r0
 8009924:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009926:	7bbb      	ldrb	r3, [r7, #14]
}
 8009928:	4618      	mov	r0, r3
 800992a:	3710      	adds	r7, #16
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	460b      	mov	r3, r1
 800993a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800993c:	2300      	movs	r3, #0
 800993e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009940:	2300      	movs	r3, #0
 8009942:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800994a:	78fa      	ldrb	r2, [r7, #3]
 800994c:	4611      	mov	r1, r2
 800994e:	4618      	mov	r0, r3
 8009950:	f7f8 faef 	bl	8001f32 <HAL_PCD_EP_SetStall>
 8009954:	4603      	mov	r3, r0
 8009956:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009958:	7bfb      	ldrb	r3, [r7, #15]
 800995a:	4618      	mov	r0, r3
 800995c:	f000 f92c 	bl	8009bb8 <USBD_Get_USB_Status>
 8009960:	4603      	mov	r3, r0
 8009962:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009964:	7bbb      	ldrb	r3, [r7, #14]
}
 8009966:	4618      	mov	r0, r3
 8009968:	3710      	adds	r7, #16
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b084      	sub	sp, #16
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
 8009976:	460b      	mov	r3, r1
 8009978:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800997a:	2300      	movs	r3, #0
 800997c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800997e:	2300      	movs	r3, #0
 8009980:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009988:	78fa      	ldrb	r2, [r7, #3]
 800998a:	4611      	mov	r1, r2
 800998c:	4618      	mov	r0, r3
 800998e:	f7f8 fb34 	bl	8001ffa <HAL_PCD_EP_ClrStall>
 8009992:	4603      	mov	r3, r0
 8009994:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009996:	7bfb      	ldrb	r3, [r7, #15]
 8009998:	4618      	mov	r0, r3
 800999a:	f000 f90d 	bl	8009bb8 <USBD_Get_USB_Status>
 800999e:	4603      	mov	r3, r0
 80099a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3710      	adds	r7, #16
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b085      	sub	sp, #20
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	460b      	mov	r3, r1
 80099b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80099be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80099c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	da0b      	bge.n	80099e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80099c8:	78fb      	ldrb	r3, [r7, #3]
 80099ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099ce:	68f9      	ldr	r1, [r7, #12]
 80099d0:	4613      	mov	r3, r2
 80099d2:	00db      	lsls	r3, r3, #3
 80099d4:	1a9b      	subs	r3, r3, r2
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	440b      	add	r3, r1
 80099da:	333e      	adds	r3, #62	; 0x3e
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	e00b      	b.n	80099f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80099e0:	78fb      	ldrb	r3, [r7, #3]
 80099e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099e6:	68f9      	ldr	r1, [r7, #12]
 80099e8:	4613      	mov	r3, r2
 80099ea:	00db      	lsls	r3, r3, #3
 80099ec:	1a9b      	subs	r3, r3, r2
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	440b      	add	r3, r1
 80099f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80099f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3714      	adds	r7, #20
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a10:	2300      	movs	r3, #0
 8009a12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a14:	2300      	movs	r3, #0
 8009a16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a1e:	78fa      	ldrb	r2, [r7, #3]
 8009a20:	4611      	mov	r1, r2
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7f8 f901 	bl	8001c2a <HAL_PCD_SetAddress>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a2c:	7bfb      	ldrb	r3, [r7, #15]
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f000 f8c2 	bl	8009bb8 <USBD_Get_USB_Status>
 8009a34:	4603      	mov	r3, r0
 8009a36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a38:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b086      	sub	sp, #24
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	60f8      	str	r0, [r7, #12]
 8009a4a:	607a      	str	r2, [r7, #4]
 8009a4c:	603b      	str	r3, [r7, #0]
 8009a4e:	460b      	mov	r3, r1
 8009a50:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a52:	2300      	movs	r3, #0
 8009a54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a56:	2300      	movs	r3, #0
 8009a58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009a60:	7af9      	ldrb	r1, [r7, #11]
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	f7f8 fa1a 	bl	8001e9e <HAL_PCD_EP_Transmit>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a6e:	7dfb      	ldrb	r3, [r7, #23]
 8009a70:	4618      	mov	r0, r3
 8009a72:	f000 f8a1 	bl	8009bb8 <USBD_Get_USB_Status>
 8009a76:	4603      	mov	r3, r0
 8009a78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a7a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3718      	adds	r7, #24
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b086      	sub	sp, #24
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	607a      	str	r2, [r7, #4]
 8009a8e:	603b      	str	r3, [r7, #0]
 8009a90:	460b      	mov	r3, r1
 8009a92:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a94:	2300      	movs	r3, #0
 8009a96:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009aa2:	7af9      	ldrb	r1, [r7, #11]
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	f7f8 f996 	bl	8001dd8 <HAL_PCD_EP_Receive>
 8009aac:	4603      	mov	r3, r0
 8009aae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ab0:	7dfb      	ldrb	r3, [r7, #23]
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f000 f880 	bl	8009bb8 <USBD_Get_USB_Status>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009abc:	7dbb      	ldrb	r3, [r7, #22]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3718      	adds	r7, #24
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b082      	sub	sp, #8
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
 8009ace:	460b      	mov	r3, r1
 8009ad0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ad8:	78fa      	ldrb	r2, [r7, #3]
 8009ada:	4611      	mov	r1, r2
 8009adc:	4618      	mov	r0, r3
 8009ade:	f7f8 f9c6 	bl	8001e6e <HAL_PCD_EP_GetRxCount>
 8009ae2:	4603      	mov	r3, r0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3708      	adds	r7, #8
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	460b      	mov	r3, r1
 8009af6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009af8:	78fb      	ldrb	r3, [r7, #3]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d002      	beq.n	8009b04 <HAL_PCDEx_LPM_Callback+0x18>
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d01f      	beq.n	8009b42 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8009b02:	e03b      	b.n	8009b7c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6a1b      	ldr	r3, [r3, #32]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d007      	beq.n	8009b1c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8009b0c:	f7f6 fe6a 	bl	80007e4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b10:	4b1c      	ldr	r3, [pc, #112]	; (8009b84 <HAL_PCDEx_LPM_Callback+0x98>)
 8009b12:	691b      	ldr	r3, [r3, #16]
 8009b14:	4a1b      	ldr	r2, [pc, #108]	; (8009b84 <HAL_PCDEx_LPM_Callback+0x98>)
 8009b16:	f023 0306 	bic.w	r3, r3, #6
 8009b1a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	6812      	ldr	r2, [r2, #0]
 8009b2a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009b2e:	f023 0301 	bic.w	r3, r3, #1
 8009b32:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7fc fb96 	bl	800626c <USBD_LL_Resume>
    break;
 8009b40:	e01c      	b.n	8009b7c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	6812      	ldr	r2, [r2, #0]
 8009b50:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009b54:	f043 0301 	orr.w	r3, r3, #1
 8009b58:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b60:	4618      	mov	r0, r3
 8009b62:	f7fc fb6d 	bl	8006240 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6a1b      	ldr	r3, [r3, #32]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d005      	beq.n	8009b7a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b6e:	4b05      	ldr	r3, [pc, #20]	; (8009b84 <HAL_PCDEx_LPM_Callback+0x98>)
 8009b70:	691b      	ldr	r3, [r3, #16]
 8009b72:	4a04      	ldr	r2, [pc, #16]	; (8009b84 <HAL_PCDEx_LPM_Callback+0x98>)
 8009b74:	f043 0306 	orr.w	r3, r3, #6
 8009b78:	6113      	str	r3, [r2, #16]
    break;
 8009b7a:	bf00      	nop
}
 8009b7c:	bf00      	nop
 8009b7e:	3708      	adds	r7, #8
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}
 8009b84:	e000ed00 	.word	0xe000ed00

08009b88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009b90:	4b03      	ldr	r3, [pc, #12]	; (8009ba0 <USBD_static_malloc+0x18>)
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	370c      	adds	r7, #12
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr
 8009b9e:	bf00      	nop
 8009ba0:	20004220 	.word	0x20004220

08009ba4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]

}
 8009bac:	bf00      	nop
 8009bae:	370c      	adds	r7, #12
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr

08009bb8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b085      	sub	sp, #20
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009bc6:	79fb      	ldrb	r3, [r7, #7]
 8009bc8:	2b03      	cmp	r3, #3
 8009bca:	d817      	bhi.n	8009bfc <USBD_Get_USB_Status+0x44>
 8009bcc:	a201      	add	r2, pc, #4	; (adr r2, 8009bd4 <USBD_Get_USB_Status+0x1c>)
 8009bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd2:	bf00      	nop
 8009bd4:	08009be5 	.word	0x08009be5
 8009bd8:	08009beb 	.word	0x08009beb
 8009bdc:	08009bf1 	.word	0x08009bf1
 8009be0:	08009bf7 	.word	0x08009bf7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009be4:	2300      	movs	r3, #0
 8009be6:	73fb      	strb	r3, [r7, #15]
    break;
 8009be8:	e00b      	b.n	8009c02 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009bea:	2303      	movs	r3, #3
 8009bec:	73fb      	strb	r3, [r7, #15]
    break;
 8009bee:	e008      	b.n	8009c02 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	73fb      	strb	r3, [r7, #15]
    break;
 8009bf4:	e005      	b.n	8009c02 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009bf6:	2303      	movs	r3, #3
 8009bf8:	73fb      	strb	r3, [r7, #15]
    break;
 8009bfa:	e002      	b.n	8009c02 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009bfc:	2303      	movs	r3, #3
 8009bfe:	73fb      	strb	r3, [r7, #15]
    break;
 8009c00:	bf00      	nop
  }
  return usb_status;
 8009c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3714      	adds	r7, #20
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <__libc_init_array>:
 8009c10:	b570      	push	{r4, r5, r6, lr}
 8009c12:	4d0d      	ldr	r5, [pc, #52]	; (8009c48 <__libc_init_array+0x38>)
 8009c14:	4c0d      	ldr	r4, [pc, #52]	; (8009c4c <__libc_init_array+0x3c>)
 8009c16:	1b64      	subs	r4, r4, r5
 8009c18:	10a4      	asrs	r4, r4, #2
 8009c1a:	2600      	movs	r6, #0
 8009c1c:	42a6      	cmp	r6, r4
 8009c1e:	d109      	bne.n	8009c34 <__libc_init_array+0x24>
 8009c20:	4d0b      	ldr	r5, [pc, #44]	; (8009c50 <__libc_init_array+0x40>)
 8009c22:	4c0c      	ldr	r4, [pc, #48]	; (8009c54 <__libc_init_array+0x44>)
 8009c24:	f000 f8f6 	bl	8009e14 <_init>
 8009c28:	1b64      	subs	r4, r4, r5
 8009c2a:	10a4      	asrs	r4, r4, #2
 8009c2c:	2600      	movs	r6, #0
 8009c2e:	42a6      	cmp	r6, r4
 8009c30:	d105      	bne.n	8009c3e <__libc_init_array+0x2e>
 8009c32:	bd70      	pop	{r4, r5, r6, pc}
 8009c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c38:	4798      	blx	r3
 8009c3a:	3601      	adds	r6, #1
 8009c3c:	e7ee      	b.n	8009c1c <__libc_init_array+0xc>
 8009c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c42:	4798      	blx	r3
 8009c44:	3601      	adds	r6, #1
 8009c46:	e7f2      	b.n	8009c2e <__libc_init_array+0x1e>
 8009c48:	08009f4c 	.word	0x08009f4c
 8009c4c:	08009f4c 	.word	0x08009f4c
 8009c50:	08009f4c 	.word	0x08009f4c
 8009c54:	08009f50 	.word	0x08009f50

08009c58 <__retarget_lock_acquire_recursive>:
 8009c58:	4770      	bx	lr

08009c5a <__retarget_lock_release_recursive>:
 8009c5a:	4770      	bx	lr

08009c5c <memcpy>:
 8009c5c:	440a      	add	r2, r1
 8009c5e:	4291      	cmp	r1, r2
 8009c60:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c64:	d100      	bne.n	8009c68 <memcpy+0xc>
 8009c66:	4770      	bx	lr
 8009c68:	b510      	push	{r4, lr}
 8009c6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c72:	4291      	cmp	r1, r2
 8009c74:	d1f9      	bne.n	8009c6a <memcpy+0xe>
 8009c76:	bd10      	pop	{r4, pc}

08009c78 <memset>:
 8009c78:	4402      	add	r2, r0
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d100      	bne.n	8009c82 <memset+0xa>
 8009c80:	4770      	bx	lr
 8009c82:	f803 1b01 	strb.w	r1, [r3], #1
 8009c86:	e7f9      	b.n	8009c7c <memset+0x4>

08009c88 <cleanup_glue>:
 8009c88:	b538      	push	{r3, r4, r5, lr}
 8009c8a:	460c      	mov	r4, r1
 8009c8c:	6809      	ldr	r1, [r1, #0]
 8009c8e:	4605      	mov	r5, r0
 8009c90:	b109      	cbz	r1, 8009c96 <cleanup_glue+0xe>
 8009c92:	f7ff fff9 	bl	8009c88 <cleanup_glue>
 8009c96:	4621      	mov	r1, r4
 8009c98:	4628      	mov	r0, r5
 8009c9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c9e:	f000 b869 	b.w	8009d74 <_free_r>
	...

08009ca4 <_reclaim_reent>:
 8009ca4:	4b2c      	ldr	r3, [pc, #176]	; (8009d58 <_reclaim_reent+0xb4>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4283      	cmp	r3, r0
 8009caa:	b570      	push	{r4, r5, r6, lr}
 8009cac:	4604      	mov	r4, r0
 8009cae:	d051      	beq.n	8009d54 <_reclaim_reent+0xb0>
 8009cb0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009cb2:	b143      	cbz	r3, 8009cc6 <_reclaim_reent+0x22>
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d14a      	bne.n	8009d50 <_reclaim_reent+0xac>
 8009cba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cbc:	6819      	ldr	r1, [r3, #0]
 8009cbe:	b111      	cbz	r1, 8009cc6 <_reclaim_reent+0x22>
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	f000 f857 	bl	8009d74 <_free_r>
 8009cc6:	6961      	ldr	r1, [r4, #20]
 8009cc8:	b111      	cbz	r1, 8009cd0 <_reclaim_reent+0x2c>
 8009cca:	4620      	mov	r0, r4
 8009ccc:	f000 f852 	bl	8009d74 <_free_r>
 8009cd0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009cd2:	b111      	cbz	r1, 8009cda <_reclaim_reent+0x36>
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	f000 f84d 	bl	8009d74 <_free_r>
 8009cda:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009cdc:	b111      	cbz	r1, 8009ce4 <_reclaim_reent+0x40>
 8009cde:	4620      	mov	r0, r4
 8009ce0:	f000 f848 	bl	8009d74 <_free_r>
 8009ce4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009ce6:	b111      	cbz	r1, 8009cee <_reclaim_reent+0x4a>
 8009ce8:	4620      	mov	r0, r4
 8009cea:	f000 f843 	bl	8009d74 <_free_r>
 8009cee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009cf0:	b111      	cbz	r1, 8009cf8 <_reclaim_reent+0x54>
 8009cf2:	4620      	mov	r0, r4
 8009cf4:	f000 f83e 	bl	8009d74 <_free_r>
 8009cf8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009cfa:	b111      	cbz	r1, 8009d02 <_reclaim_reent+0x5e>
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	f000 f839 	bl	8009d74 <_free_r>
 8009d02:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009d04:	b111      	cbz	r1, 8009d0c <_reclaim_reent+0x68>
 8009d06:	4620      	mov	r0, r4
 8009d08:	f000 f834 	bl	8009d74 <_free_r>
 8009d0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d0e:	b111      	cbz	r1, 8009d16 <_reclaim_reent+0x72>
 8009d10:	4620      	mov	r0, r4
 8009d12:	f000 f82f 	bl	8009d74 <_free_r>
 8009d16:	69a3      	ldr	r3, [r4, #24]
 8009d18:	b1e3      	cbz	r3, 8009d54 <_reclaim_reent+0xb0>
 8009d1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009d1c:	4620      	mov	r0, r4
 8009d1e:	4798      	blx	r3
 8009d20:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009d22:	b1b9      	cbz	r1, 8009d54 <_reclaim_reent+0xb0>
 8009d24:	4620      	mov	r0, r4
 8009d26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009d2a:	f7ff bfad 	b.w	8009c88 <cleanup_glue>
 8009d2e:	5949      	ldr	r1, [r1, r5]
 8009d30:	b941      	cbnz	r1, 8009d44 <_reclaim_reent+0xa0>
 8009d32:	3504      	adds	r5, #4
 8009d34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d36:	2d80      	cmp	r5, #128	; 0x80
 8009d38:	68d9      	ldr	r1, [r3, #12]
 8009d3a:	d1f8      	bne.n	8009d2e <_reclaim_reent+0x8a>
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	f000 f819 	bl	8009d74 <_free_r>
 8009d42:	e7ba      	b.n	8009cba <_reclaim_reent+0x16>
 8009d44:	680e      	ldr	r6, [r1, #0]
 8009d46:	4620      	mov	r0, r4
 8009d48:	f000 f814 	bl	8009d74 <_free_r>
 8009d4c:	4631      	mov	r1, r6
 8009d4e:	e7ef      	b.n	8009d30 <_reclaim_reent+0x8c>
 8009d50:	2500      	movs	r5, #0
 8009d52:	e7ef      	b.n	8009d34 <_reclaim_reent+0x90>
 8009d54:	bd70      	pop	{r4, r5, r6, pc}
 8009d56:	bf00      	nop
 8009d58:	20000194 	.word	0x20000194

08009d5c <__malloc_lock>:
 8009d5c:	4801      	ldr	r0, [pc, #4]	; (8009d64 <__malloc_lock+0x8>)
 8009d5e:	f7ff bf7b 	b.w	8009c58 <__retarget_lock_acquire_recursive>
 8009d62:	bf00      	nop
 8009d64:	20005dbc 	.word	0x20005dbc

08009d68 <__malloc_unlock>:
 8009d68:	4801      	ldr	r0, [pc, #4]	; (8009d70 <__malloc_unlock+0x8>)
 8009d6a:	f7ff bf76 	b.w	8009c5a <__retarget_lock_release_recursive>
 8009d6e:	bf00      	nop
 8009d70:	20005dbc 	.word	0x20005dbc

08009d74 <_free_r>:
 8009d74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d76:	2900      	cmp	r1, #0
 8009d78:	d048      	beq.n	8009e0c <_free_r+0x98>
 8009d7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d7e:	9001      	str	r0, [sp, #4]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f1a1 0404 	sub.w	r4, r1, #4
 8009d86:	bfb8      	it	lt
 8009d88:	18e4      	addlt	r4, r4, r3
 8009d8a:	f7ff ffe7 	bl	8009d5c <__malloc_lock>
 8009d8e:	4a20      	ldr	r2, [pc, #128]	; (8009e10 <_free_r+0x9c>)
 8009d90:	9801      	ldr	r0, [sp, #4]
 8009d92:	6813      	ldr	r3, [r2, #0]
 8009d94:	4615      	mov	r5, r2
 8009d96:	b933      	cbnz	r3, 8009da6 <_free_r+0x32>
 8009d98:	6063      	str	r3, [r4, #4]
 8009d9a:	6014      	str	r4, [r2, #0]
 8009d9c:	b003      	add	sp, #12
 8009d9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009da2:	f7ff bfe1 	b.w	8009d68 <__malloc_unlock>
 8009da6:	42a3      	cmp	r3, r4
 8009da8:	d90b      	bls.n	8009dc2 <_free_r+0x4e>
 8009daa:	6821      	ldr	r1, [r4, #0]
 8009dac:	1862      	adds	r2, r4, r1
 8009dae:	4293      	cmp	r3, r2
 8009db0:	bf04      	itt	eq
 8009db2:	681a      	ldreq	r2, [r3, #0]
 8009db4:	685b      	ldreq	r3, [r3, #4]
 8009db6:	6063      	str	r3, [r4, #4]
 8009db8:	bf04      	itt	eq
 8009dba:	1852      	addeq	r2, r2, r1
 8009dbc:	6022      	streq	r2, [r4, #0]
 8009dbe:	602c      	str	r4, [r5, #0]
 8009dc0:	e7ec      	b.n	8009d9c <_free_r+0x28>
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	b10b      	cbz	r3, 8009dcc <_free_r+0x58>
 8009dc8:	42a3      	cmp	r3, r4
 8009dca:	d9fa      	bls.n	8009dc2 <_free_r+0x4e>
 8009dcc:	6811      	ldr	r1, [r2, #0]
 8009dce:	1855      	adds	r5, r2, r1
 8009dd0:	42a5      	cmp	r5, r4
 8009dd2:	d10b      	bne.n	8009dec <_free_r+0x78>
 8009dd4:	6824      	ldr	r4, [r4, #0]
 8009dd6:	4421      	add	r1, r4
 8009dd8:	1854      	adds	r4, r2, r1
 8009dda:	42a3      	cmp	r3, r4
 8009ddc:	6011      	str	r1, [r2, #0]
 8009dde:	d1dd      	bne.n	8009d9c <_free_r+0x28>
 8009de0:	681c      	ldr	r4, [r3, #0]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	6053      	str	r3, [r2, #4]
 8009de6:	4421      	add	r1, r4
 8009de8:	6011      	str	r1, [r2, #0]
 8009dea:	e7d7      	b.n	8009d9c <_free_r+0x28>
 8009dec:	d902      	bls.n	8009df4 <_free_r+0x80>
 8009dee:	230c      	movs	r3, #12
 8009df0:	6003      	str	r3, [r0, #0]
 8009df2:	e7d3      	b.n	8009d9c <_free_r+0x28>
 8009df4:	6825      	ldr	r5, [r4, #0]
 8009df6:	1961      	adds	r1, r4, r5
 8009df8:	428b      	cmp	r3, r1
 8009dfa:	bf04      	itt	eq
 8009dfc:	6819      	ldreq	r1, [r3, #0]
 8009dfe:	685b      	ldreq	r3, [r3, #4]
 8009e00:	6063      	str	r3, [r4, #4]
 8009e02:	bf04      	itt	eq
 8009e04:	1949      	addeq	r1, r1, r5
 8009e06:	6021      	streq	r1, [r4, #0]
 8009e08:	6054      	str	r4, [r2, #4]
 8009e0a:	e7c7      	b.n	8009d9c <_free_r+0x28>
 8009e0c:	b003      	add	sp, #12
 8009e0e:	bd30      	pop	{r4, r5, pc}
 8009e10:	20004440 	.word	0x20004440

08009e14 <_init>:
 8009e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e16:	bf00      	nop
 8009e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e1a:	bc08      	pop	{r3}
 8009e1c:	469e      	mov	lr, r3
 8009e1e:	4770      	bx	lr

08009e20 <_fini>:
 8009e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e22:	bf00      	nop
 8009e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e26:	bc08      	pop	{r3}
 8009e28:	469e      	mov	lr, r3
 8009e2a:	4770      	bx	lr
